{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":19423,\"max\":19423},\"skills\":{\"hacking\":104093,\"strength\":128499,\"defense\":194139,\"dexterity\":42757,\"agility\":94323,\"charisma\":7392,\"intelligence\":0},\"exp\":{\"hacking\":18933276112.217144,\"strength\":32382.12666150199,\"defense\":32382.12666150199,\"dexterity\":37239.44566072478,\"agility\":35364.47295150133,\"charisma\":40552.40046411721,\"intelligence\":0},\"mults\":{\"hacking_chance\":76.9238021188926,\"hacking_speed\":54.25695488785638,\"hacking_money\":592.8970561892144,\"hacking_grow\":106.02923459031058,\"hacking\":233.49735709994445,\"strength\":967.2162987478799,\"defense\":1461.2837548083914,\"dexterity\":311.51100665944745,\"agility\":695.4449925103596,\"charisma\":52.823053567897475,\"hacking_exp\":143.49214184985118,\"strength_exp\":38.24228503848253,\"defense_exp\":38.24228503848253,\"dexterity_exp\":43.97862779425492,\"agility_exp\":38.24228503848253,\"charisma_exp\":40.70489934417051,\"company_rep\":100.40881045723256,\"faction_rep\":30.396515744023418,\"crime_money\":37.85797930075381,\"crime_success\":23.941805091385806,\"hacknet_node_money\":16.156835747094945,\"hacknet_node_purchase_cost\":0.05704041568854232,\"hacknet_node_ram_cost\":0.05704041568854232,\"hacknet_node_core_cost\":0.05704041568854232,\"hacknet_node_level_cost\":0.05704041568854232,\"work_money\":43.20385703007,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":254},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"QLink\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"The Red Pill\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":1,\"name\":\"Graphene Bone Lacings\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":2,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Totally Legit Corporation\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"sciResearch\":6.780644324711521,\"researched\":{},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"products\":{},\"awareness\":1038.3900000000228,\"popularity\":258.98719999998406,\"startingCost\":40000000000,\"prodMult\":501.6341461468345,\"state\":\"START\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":76.8,\"avgCha\":75.4,\"totalExp\":789.9800000001924,\"avgCre\":70.8,\"avgEff\":79.4,\"totalEmployees\":9,\"totalSalary\":10534.740000000576,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":175083.28666666674,\"Engineer\":113571.40666666673,\"Business\":73522.81555555559,\"Management\":152789.23111111118,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":514966.7400000002},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Aevum\",\"size\":9}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":81.7,\"avgCha\":71.9,\"totalExp\":817.9800000001924,\"avgCre\":75.1,\"avgEff\":83.6,\"totalEmployees\":9,\"totalSalary\":10886.04000000058,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":184372.34000000005,\"Engineer\":119635.74000000006,\"Business\":72460.24666666669,\"Management\":150581.05333333337,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":527049.3800000002},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Chongqing\",\"size\":9}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":80.2,\"avgCha\":72.8,\"totalExp\":807.9800000001924,\"avgCre\":62.3,\"avgEff\":74.7,\"totalEmployees\":9,\"totalSalary\":10253.940000000577,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":167646.82666666672,\"Engineer\":112497.88666666675,\"Business\":72666.73555555557,\"Management\":145741.75111111114,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":498553.2000000002},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Sector-12\",\"size\":9}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":73.3,\"avgCha\":69.3,\"totalExp\":757.9800000001924,\"avgCre\":77.4,\"avgEff\":72.3,\"totalEmployees\":9,\"totalSalary\":10166.040000000577,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":168315.24000000005,\"Engineer\":105803.42000000006,\"Business\":68329.26000000002,\"Management\":141813.92000000004,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":484261.84000000014},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"New Tokyo\",\"size\":9}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":77.1,\"avgCha\":74.9,\"totalExp\":771.9800000001924,\"avgCre\":73.3,\"avgEff\":77.6,\"totalEmployees\":9,\"totalSalary\":10494.240000000576,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":174641.32666666672,\"Engineer\":112492.80666666673,\"Business\":73257.85555555558,\"Management\":151567.31111111116,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":511959.30000000016},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Ishima\",\"size\":9}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":72.5,\"avgCha\":73.2,\"totalExp\":801.9800000001924,\"avgCre\":81.8,\"avgEff\":67.9,\"totalEmployees\":9,\"totalSalary\":10381.740000000578,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":165952.88666666672,\"Engineer\":102489.56666666674,\"Business\":70811.5088888889,\"Management\":145698.89777777783,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":484952.8600000002},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Volhaven\",\"size\":9}}},\"numAdVerts\":1,\"type\":\"Agriculture\",\"name\":\"Veggies\",\"lastCycleRevenue\":25525685854.018238,\"lastCycleExpenses\":5525416281.93721,\"thisCycleRevenue\":0,\"thisCycleExpenses\":62716.74000000346,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":2700,\"smartSupplyEnabled\":true,\"smartSupplyStore\":533450.8307551398,\"loc\":\"Aevum\",\"size\":657400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":76.62583693627641,\"dmdR\":[65,85],\"cmp\":46.953572178972415,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":266725.4129970466,\"sll\":0,\"prd\":-266725.4129970466,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1474.6196879865172,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":83.36936006049919,\"dmdR\":[80,99],\"cmp\":87.3164814791951,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":266725.4129970466,\"sll\":0,\"prd\":-266725.4129970466,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1947.671791769847,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1264.5098133357703,\"dmd\":80.67858000096518,\"dmdR\":[70,90],\"cmp\":50.84125714067756,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":533450.8259940932,\"prd\":533450.8259940932,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7410.473046393456,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":19238414.523064986,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1264.5098133357703,\"dmd\":62.13189290406197,\"dmdR\":[20,90],\"cmp\":47.133937070882496,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":533450.8259940932,\"prd\":533450.8259940932,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3449.5010337519298,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":15816993.326257568,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":9300,\"qlt\":0,\"dmd\":89.32882215096521,\"dmdR\":[80,90],\"cmp\":85.29955256749615,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8818.541546726947,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":726,\"qlt\":0,\"dmd\":89.65357445365547,\"dmdR\":[80,99],\"cmp\":84.6382766567546,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":83303.83992962964,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":6270,\"qlt\":0,\"dmd\":96.16033327727614,\"dmdR\":[80,99],\"cmp\":80.26755141578278,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14955.851343178303,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":230400,\"qlt\":0,\"dmd\":38.039543809242936,\"dmdR\":[5,99],\"cmp\":25.51960085659737,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":154227.84478967453,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":2700,\"smartSupplyEnabled\":true,\"smartSupplyStore\":538792.6119685792,\"loc\":\"Chongqing\",\"size\":657400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":67.71933285695077,\"dmdR\":[65,85],\"cmp\":59.15264614611271,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":269396.3036466359,\"sll\":0,\"prd\":-269396.3036466359,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1394.6786145575004,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":87.34490224497057,\"dmdR\":[80,99],\"cmp\":80.6316458045705,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":269396.3036466359,\"sll\":0,\"prd\":-269396.3036466359,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1981.3702377961079,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1331.891294817252,\"dmd\":85.09919624127714,\"dmdR\":[70,90],\"cmp\":84.5118025130465,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":538792.6072932718,\"prd\":538792.6072932718,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6409.023973373508,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":7034430.029561475,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1331.891294817252,\"dmd\":80.18389367176643,\"dmdR\":[20,90],\"cmp\":46.172213219986766,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":538792.6072932718,\"prd\":538792.6072932718,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3287.013408115192,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":21774175.320174444,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":9300,\"qlt\":0,\"dmd\":84.13742771890115,\"dmdR\":[80,90],\"cmp\":79.60686076077873,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7102.563121649896,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":726,\"qlt\":0,\"dmd\":94.54857692335187,\"dmdR\":[80,99],\"cmp\":87.59170053343962,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":86305.52822469143,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":6270,\"qlt\":0,\"dmd\":86.61875049195214,\"dmdR\":[80,99],\"cmp\":88.10267679711507,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":16053.580852503886,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":230400,\"qlt\":0,\"dmd\":15.119451294788147,\"dmdR\":[5,99],\"cmp\":32.70186895156359,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":59086.4641584183,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":2700,\"smartSupplyEnabled\":true,\"smartSupplyStore\":524535.4451278266,\"loc\":\"Sector-12\",\"size\":657400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":65.64815251717239,\"dmdR\":[65,85],\"cmp\":47.97897116770916,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":262267.7201201077,\"sll\":0,\"prd\":-262267.7201201077,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1464.5591433962445,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":91.60226599307396,\"dmdR\":[80,99],\"cmp\":68.23969195915389,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":262267.7201201077,\"sll\":0,\"prd\":-262267.7201201077,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2168.5870437324647,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1252.5818133357704,\"dmd\":76.15465604977102,\"dmdR\":[70,90],\"cmp\":70.88996402715242,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":524535.4402402154,\"prd\":524535.4402402154,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4538.081655846045,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":10354924.731931502,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1252.5818133357704,\"dmd\":63.143883716084495,\"dmdR\":[20,90],\"cmp\":35.01022598103025,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":524535.4402402154,\"prd\":524535.4402402154,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3340.203864838799,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":19404814.403580446,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":9300,\"qlt\":0,\"dmd\":88.7788724976976,\"dmdR\":[80,90],\"cmp\":77.51146885163647,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6847.082670882045,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":726,\"qlt\":0,\"dmd\":87.84979163141723,\"dmdR\":[80,99],\"cmp\":87.74380476289026,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":73301.1533082601,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":6270,\"qlt\":0,\"dmd\":98.85328458346439,\"dmdR\":[80,99],\"cmp\":84.25240591434908,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14662.128987151918,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":230400,\"qlt\":0,\"dmd\":20.96319199643564,\"dmdR\":[5,99],\"cmp\":28.18108996922235,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":78718.95092721749,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":2700,\"smartSupplyEnabled\":true,\"smartSupplyStore\":522757.3352051492,\"loc\":\"New Tokyo\",\"size\":657400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":83.23039997867856,\"dmdR\":[65,85],\"cmp\":53.45021290520634,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":261378.6651406525,\"sll\":0,\"prd\":-261378.6651406525,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1493.7520653256029,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":93.46203316274179,\"dmdR\":[80,99],\"cmp\":81.81553209112141,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":261378.6651406525,\"sll\":0,\"prd\":-261378.6651406525,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2038.0958328230756,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1178.1988503728073,\"dmd\":75.22484990289072,\"dmdR\":[70,90],\"cmp\":57.452776128376534,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":522757.330281305,\"prd\":522757.330281305,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3186.9765545208784,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":14011595.378568118,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1178.1988503728073,\"dmd\":27.07408139718069,\"dmdR\":[20,90],\"cmp\":48.5298898284734,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":522757.330281305,\"prd\":522757.330281305,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2415.6494360784895,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":6023840.799613519,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":9300,\"qlt\":0,\"dmd\":87.05488759099953,\"dmdR\":[80,90],\"cmp\":83.48647508583527,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7299.012349085269,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":726,\"qlt\":0,\"dmd\":82.68699290369386,\"dmdR\":[80,99],\"cmp\":80.67853624600725,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":79999.43346979075,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":6270,\"qlt\":0,\"dmd\":84.73806428003171,\"dmdR\":[80,99],\"cmp\":84.99284261500308,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":20124.01489413641,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":230400,\"qlt\":0,\"dmd\":31.940030052704365,\"dmdR\":[5,99],\"cmp\":46.082318293013145,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":69628.12776179118,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":2700,\"smartSupplyEnabled\":true,\"smartSupplyStore\":532492.5580536094,\"loc\":\"Ishima\",\"size\":657400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":71.531492478183,\"dmdR\":[65,85],\"cmp\":47.10028961202849,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":266246.27663896314,\"sll\":0,\"prd\":-266246.27663896314,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1499.0035238941703,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80.72545511794625,\"dmdR\":[80,99],\"cmp\":77.24049370763574,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":266246.27663896314,\"sll\":0,\"prd\":-266246.27663896314,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1934.5681317593899,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1252.5253688913258,\"dmd\":75.28468320751983,\"dmdR\":[70,90],\"cmp\":59.01407180798028,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":532492.5532779263,\"prd\":532492.5532779263,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3930.9499166127316,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":14775728.801472772,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1252.5253688913258,\"dmd\":85.17316878389609,\"dmdR\":[20,90],\"cmp\":35.55082510291732,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":532492.5532779263,\"prd\":532492.5532779263,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3630.0803179946056,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":26233441.80174813,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":9300,\"qlt\":0,\"dmd\":89.4669665151638,\"dmdR\":[80,90],\"cmp\":89.24766512533519,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8019.793657802705,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":726,\"qlt\":0,\"dmd\":81.47445164031912,\"dmdR\":[80,99],\"cmp\":98.7307178545769,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":72107.34478869798,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":6270,\"qlt\":0,\"dmd\":91.08301137323423,\"dmdR\":[80,99],\"cmp\":98.01959227431267,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15830.0650040475,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":230400,\"qlt\":0,\"dmd\":32.48516799190122,\"dmdR\":[5,99],\"cmp\":70.1082234312045,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":50137.41076662054,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":2700,\"smartSupplyEnabled\":true,\"smartSupplyStore\":523050.8038838521,\"loc\":\"Volhaven\",\"size\":657400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":68.92019244399813,\"dmdR\":[65,85],\"cmp\":46.50474567734917,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":261525.39947690628,\"sll\":0,\"prd\":-261525.39947690628,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1450.8761725400643,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":93.01237239882792,\"dmdR\":[80,99],\"cmp\":79.87625444148615,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":261525.39947690628,\"sll\":0,\"prd\":-261525.39947690628,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2037.05383882148,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1141.3782577802147,\"dmd\":75.65933467098304,\"dmdR\":[70,90],\"cmp\":79.51379344124685,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":523050.79895381257,\"prd\":523050.79895381257,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4153.0044938537085,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":6813034.900323612,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1141.3782577802147,\"dmd\":51.86683387561857,\"dmdR\":[20,90],\"cmp\":66.79732579435321,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":523050.79895381257,\"prd\":523050.79895381257,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2380.4391178426563,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":7499136.083349813,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":9300,\"qlt\":0,\"dmd\":84.60327420518846,\"dmdR\":[80,90],\"cmp\":66.92152748356294,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7699.938784592733,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":726,\"qlt\":0,\"dmd\":94.73267455332825,\"dmdR\":[80,99],\"cmp\":93.36614771916987,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":77079.1072148418,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":6270,\"qlt\":0,\"dmd\":91.04514033517854,\"dmdR\":[80,99],\"cmp\":86.65729482553229,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":22254.154924858358,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":230400,\"qlt\":0,\"dmd\":64.24632413533645,\"dmdR\":[5,99],\"cmp\":53.384704401427605,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":89631.15483367865,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}}},\"makesProducts\":false,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMats\":[\"Plants\",\"Food\"]}},{\"ctor\":\"Industry\",\"data\":{\"sciResearch\":121756077.60940884,\"researched\":{\"Hi-Tech R&D Laboratory\":true,\"Market-TA.I\":true,\"Market-TA.II\":true},\"reqMats\":{\"Plants\":1,\"Water\":0.2},\"products\":{\"Totally Not NY Diesel\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Totally Not NY Diesel\",\"dmd\":99.9588000000001,\"cmp\":29.041200000000025,\"mku\":2.927784391395074e-17,\"pCost\":17943.470647652706,\"sCost\":\"MP\",\"fin\":true,\"prog\":100,\"createCity\":\"Aevum\",\"designCost\":1.7646619058559456e+98,\"advCost\":1.7646619058559456e+98,\"creationProd\":{\"Operations\":4928526.919719729,\"Engineer\":4718754.09386531,\"Business\":1530375.0850478404,\"Management\":6471518.862576867,\"Research & Development\":0,\"total\":17649174.961209744,\"Training\":null,\"Unassigned\":null},\"rat\":94863585989428140,\"qlt\":100827506826457400,\"per\":105384789122946600,\"dur\":75058074759400930,\"rel\":106969387318936850,\"aes\":83892618674839330,\"fea\":111665844269728750,\"data\":{\"Aevum\":[0,12048.067356503447,12048.067356503449],\"Chongqing\":[3.637978807091713e-12,2228.7888653340315,2228.788865334031],\"Ishima\":[0,2227.495741359395,2227.4957413593957],\"New Tokyo\":[0,2227.662304147584,2227.662304147584],\"Sector-12\":[0,2224.409010134912,2224.409010134912],\"Volhaven\":[0,2222.8355882673886,2222.835588267389]},\"loc\":\"\",\"siz\":0.060000000000000005,\"reqMats\":{\"Plants\":1,\"Water\":0.2},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":true,\"marketTa2Price\":{\"Aevum\":1.1444519422529633e+92,\"Chongqing\":8.343086702458848e+91,\"Ishima\":8.313190352342987e+91,\"New Tokyo\":8.343196581356098e+91,\"Sector-12\":8.324979344782026e+91,\"Volhaven\":8.310895536921385e+91},\"maxsll\":2222.835588267389}},\"Totally Not White Widow\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Totally Not White Widow\",\"dmd\":99.98480000000004,\"cmp\":11.01520000000001,\"mku\":2.861594245957474e-17,\"pCost\":17943.470647652706,\"sCost\":\"MP\",\"fin\":true,\"prog\":100,\"createCity\":\"Aevum\",\"designCost\":1.908814325696912e+98,\"advCost\":1.908814325696912e+98,\"creationProd\":{\"Operations\":4928532.337718629,\"Engineer\":4718762.220863658,\"Business\":1530376.4080475713,\"Management\":6471524.280575768,\"Research & Development\":0,\"total\":17649195.24720563,\"Training\":null,\"Unassigned\":null},\"rat\":97080440113388780,\"qlt\":103183739711303400,\"per\":107847541968489250,\"dur\":76812096929020560,\"rel\":109469113795703600,\"aes\":85853063112871740,\"fea\":114275347525037570,\"data\":{\"Aevum\":[0,12048.067145314806,12048.067145314806],\"Chongqing\":[0,2228.788825748132,2228.7888257481322],\"Ishima\":[0,2227.495701767003,2227.4957017670035],\"New Tokyo\":[3.637978807091713e-12,2227.662264514126,2227.662264514126],\"Sector-12\":[0,2224.4089704557355,2224.4089704557355],\"Volhaven\":[0,2222.8355485195198,2222.8355485195198]},\"loc\":\"\",\"siz\":0.060000000000000005,\"reqMats\":{\"Plants\":1,\"Water\":0.2},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":true,\"marketTa2Price\":{\"Aevum\":1.3521910496359016e+92,\"Chongqing\":9.857510612899187e+91,\"Ishima\":9.822187524631954e+91,\"New Tokyo\":9.857640436989682e+91,\"Sector-12\":9.836116436657119e+91,\"Volhaven\":9.819476158468756e+91},\"maxsll\":2222.8355485195198}},\"Totally Not Cheese\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Totally Not Cheese\",\"dmd\":0.001,\"cmp\":0.0116,\"mku\":0,\"pCost\":0,\"sCost\":\"MP\",\"fin\":false,\"prog\":58.19003163794271,\"createCity\":\"Aevum\",\"designCost\":2.626705584070466e+98,\"advCost\":2.626705584070466e+98,\"creationProd\":{\"Operations\":2867917.488265616,\"Engineer\":2745853.671731212,\"Business\":890527.2392187613,\"Management\":3765784.987985092,\"Research & Development\":0,\"total\":10270083.387200683,\"Training\":null,\"Unassigned\":null},\"rat\":0,\"qlt\":0,\"per\":0,\"dur\":0,\"rel\":0,\"aes\":0,\"fea\":0,\"data\":{\"Aevum\":[0,0,0],\"Chongqing\":[0,0,0],\"Ishima\":[0,0,0],\"New Tokyo\":[0,0,0],\"Sector-12\":[0,0,0],\"Volhaven\":[0,0,0]},\"loc\":\"\",\"siz\":0,\"reqMats\":{},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":true,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0},\"maxsll\":0}}},\"awareness\":1.7976931348623157e+308,\"popularity\":1.7976931348623157e+308,\"startingCost\":20000000000,\"prodMult\":6,\"state\":\"START\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":75.75747508305653,\"avgCha\":74.88704318936873,\"totalExp\":25091.922500003715,\"avgCre\":74.9468438538206,\"avgEff\":74.97342192691035,\"totalEmployees\":300,\"totalSalary\":345784.07314785174,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":4928538.846354766,\"Engineer\":4718771.983817861,\"Business\":1530377.9973656973,\"Management\":6471530.789211904,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":17649219.61675023},\"employeeJobs\":{\"Operations\":86,\"Engineer\":86,\"Business\":42,\"Management\":86,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":86,\"Engineer\":86,\"Business\":42,\"Management\":86,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Aevum\",\"size\":300}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":75.72199170124482,\"avgCha\":75.48962655601656,\"totalExp\":19712.374500002767,\"avgCre\":74.3070539419087,\"avgEff\":75.25726141078835,\"totalEmployees\":240,\"totalSalary\":275695.79569917836,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":57308.09422984958,\"Engineer\":54973.964996226656,\"Business\":36640.40188670902,\"Management\":75690.31331698649,\"Research & Development\":18430459.765035436,\"Training\":0,\"Unassigned\":0,\"total\":18655072.539465208},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"loc\":\"Chongqing\",\"size\":240}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":75.94605809128633,\"avgCha\":73.74688796680496,\"totalExp\":20104.374500002767,\"avgCre\":74.09543568464731,\"avgEff\":75.61410788381745,\"totalEmployees\":240,\"totalSalary\":275882.91603112867,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":57382.80391173066,\"Engineer\":55117.11209166238,\"Business\":36069.24178989022,\"Management\":74557.75577895057,\"Research & Development\":18455502.11347251,\"Training\":0,\"Unassigned\":0,\"total\":18678629.027044743},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"loc\":\"Sector-12\",\"size\":240}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":75.05394190871371,\"avgCha\":75.63070539419084,\"totalExp\":19728.374500002767,\"avgCre\":74.73443983402487,\"avgEff\":74.9751037344398,\"totalEmployees\":240,\"totalSalary\":275468.94092739414,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":57150.666290707115,\"Engineer\":54650.17453979513,\"Business\":36596.79040676435,\"Management\":75749.24305419257,\"Research & Development\":18372025.629710402,\"Training\":0,\"Unassigned\":0,\"total\":18596172.504001863},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"loc\":\"New Tokyo\",\"size\":240}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":75.15767634854772,\"avgCha\":73.6887966804979,\"totalExp\":19737.374500002767,\"avgCre\":74.99170124481324,\"avgEff\":76.3734439834025,\"totalEmployees\":240,\"totalSalary\":275364.48864523653,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":57633.38096913037,\"Engineer\":55102.75859062502,\"Business\":35939.26558829961,\"Management\":74761.96022224239,\"Research & Development\":18462836.892283015,\"Training\":0,\"Unassigned\":0,\"total\":18686274.25765331},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"loc\":\"Ishima\",\"size\":240}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":73.79253112033194,\"avgCha\":73.54771784232362,\"totalExp\":20251.374500002552,\"avgCre\":74.77178423236514,\"avgEff\":76.0497925311203,\"totalEmployees\":240,\"totalSalary\":275430.6380228292,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":57197.208112975444,\"Engineer\":54516.76611137189,\"Business\":35702.58704403959,\"Management\":74572.86869388829,\"Research & Development\":18264861.20575466,\"Training\":0,\"Unassigned\":0,\"total\":18486850.635716934},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"loc\":\"Volhaven\",\"size\":240}}},\"numAdVerts\":3533,\"type\":\"Tobacco\",\"name\":\"Totally Not Ganja\",\"lastCycleRevenue\":5.0300284918882415e+96,\"lastCycleExpenses\":154149900.17497715,\"thisCycleRevenue\":0,\"thisCycleExpenses\":1723626.8524736185,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":14457.680701090954,\"smartSupplyEnabled\":true,\"smartSupplyStore\":24096.134713006893,\"loc\":\"Aevum\",\"size\":34600,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":74.05987111673909,\"dmdR\":[65,85],\"cmp\":59.96085130582436,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":4819.226900363651,\"sll\":0,\"prd\":-4819.226900363651,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1418.1336318925007,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":53.15034763294981,\"dmdR\":[20,90],\"cmp\":46.74879708213791,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":24096.134501818255,\"sll\":0,\"prd\":-24096.134501818255,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3007.6092283978287,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":83.8023931648719,\"dmdR\":[80,90],\"cmp\":94.22568168650318,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6435.149427121235,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":87.6815771862163,\"dmdR\":[80,99],\"cmp\":83.43075099330893,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":98074.81561064365,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90.8571698765938,\"dmdR\":[80,99],\"cmp\":83.77278207922242,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":17922.330239529037,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":13.308414346931656,\"dmdR\":[5,99],\"cmp\":38.33026613163673,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":73262.74170070716,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":2674.546614649298,\"smartSupplyEnabled\":true,\"smartSupplyStore\":4457.577730668063,\"loc\":\"Chongqing\",\"size\":34600,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":73.35043070795993,\"dmdR\":[65,85],\"cmp\":42.52542492482305,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":891.5155382164327,\"sll\":0,\"prd\":-891.5155382164327,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1661.6802302443189,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":66.09213879988067,\"dmdR\":[20,90],\"cmp\":45.382452184729075,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":4457.577691082163,\"sll\":0,\"prd\":-4457.577691082163,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2659.069938418735,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":81.28518266688377,\"dmdR\":[80,90],\"cmp\":75.84392041014627,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6964.029345897056,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":84.44421505456432,\"dmdR\":[80,99],\"cmp\":95.52370180990287,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":83412.24561375949,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":81.98690504421918,\"dmdR\":[80,99],\"cmp\":96.67190950092959,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13940.000850828852,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":37.94902710299539,\"dmdR\":[5,99],\"cmp\":26.483221342248356,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":109470.44899843357,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":2669.2907883543885,\"smartSupplyEnabled\":true,\"smartSupplyStore\":4448.818020269824,\"loc\":\"Sector-12\",\"size\":34600,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":84.84798409665088,\"dmdR\":[65,85],\"cmp\":43.52816277797664,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":889.7635961181295,\"sll\":0,\"prd\":-889.7635961181295,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1612.609688632081,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":82.80118344613759,\"dmdR\":[20,90],\"cmp\":57.53716975741573,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":4448.8179805906475,\"sll\":0,\"prd\":-4448.8179805906475,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3457.9590476577914,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80.25898108761977,\"dmdR\":[80,90],\"cmp\":83.37093845865813,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7349.777908415372,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":93.31501490965738,\"dmdR\":[80,99],\"cmp\":92.51941694245714,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":72073.01525467193,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":87.30137924285378,\"dmdR\":[80,99],\"cmp\":92.51481374453645,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15997.01030462693,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":68.0108663169153,\"dmdR\":[5,99],\"cmp\":61.75414300299936,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":90648.90311444511,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":2673.194741197027,\"smartSupplyEnabled\":true,\"smartSupplyStore\":4455.324608295168,\"loc\":\"New Tokyo\",\"size\":34600,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":67.46678486646083,\"dmdR\":[65,85],\"cmp\":40.20154367743514,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":891.0649137323422,\"sll\":0,\"prd\":-891.064913732342,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1567.0044345928227,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":7.275957614183426e-12,\"qlt\":0,\"dmd\":51.663692901002726,\"dmdR\":[20,90],\"cmp\":41.14506635584711,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":4455.324568661711,\"sll\":0,\"prd\":-4455.32456866171,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2772.614302346798,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":85.95931454427766,\"dmdR\":[80,90],\"cmp\":84.89391993901563,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7189.730848531859,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90.06923928491688,\"dmdR\":[80,99],\"cmp\":94.63833556465498,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":68866.65097294592,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":83.02528664120672,\"dmdR\":[80,99],\"cmp\":89.57979895664835,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13341.921675592732,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":52.76347865163783,\"dmdR\":[5,99],\"cmp\":25.722563380530396,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":158965.02456558516,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":2672.9948658758394,\"smartSupplyEnabled\":true,\"smartSupplyStore\":4454.99148271879,\"loc\":\"Ishima\",\"size\":34600,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80.00900692177295,\"dmdR\":[65,85],\"cmp\":60,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":890.9982886252798,\"sll\":0,\"prd\":-890.9982886252798,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1478.0745698596245,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":63.44429915029702,\"dmdR\":[20,90],\"cmp\":41.62112736992116,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":4454.991443126399,\"sll\":0,\"prd\":-4454.991443126399,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3016.9641638983912,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":87.18593563648379,\"dmdR\":[80,90],\"cmp\":76.83708888508049,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9097.9414219691,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":89.09836154877763,\"dmdR\":[80,99],\"cmp\":82.57615047176637,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":66693.22688610197,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":97.47085090349039,\"dmdR\":[80,99],\"cmp\":92.64013078751536,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15047.083811266471,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":59.96388262979918,\"dmdR\":[5,99],\"cmp\":31.396386654848552,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":86639.1922051255,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":2667.4026820721456,\"smartSupplyEnabled\":true,\"smartSupplyStore\":4445.671176534777,\"loc\":\"Volhaven\",\"size\":34600,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":70.85138939129594,\"dmdR\":[65,85],\"cmp\":46.466488471929786,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":889.1342273573819,\"sll\":0,\"prd\":-889.1342273573819,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1471.4746705444754,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":85.01489850044644,\"dmdR\":[20,90],\"cmp\":57.26612705317644,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":4445.671136786909,\"sll\":0,\"prd\":-4445.671136786908,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3291.4381107536296,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,90],\"cmp\":89.7463339793981,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7405.907152595805,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":85.74314000105859,\"dmdR\":[80,99],\"cmp\":87.40500726375608,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":71602.8452343904,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":98.82036263906163,\"dmdR\":[80,99],\"cmp\":87.17167560711245,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":24375.971914255566,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":61.49422473042877,\"dmdR\":[5,99],\"cmp\":55.42196120802762,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":146722.18367401106,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}}},\"makesProducts\":true,\"reFac\":0.15,\"sciFac\":0.75,\"hwFac\":0.15,\"robFac\":0.2,\"aiFac\":0.15,\"advFac\":0.2,\"prodMats\":[]}}],\"funds\":4.4512520237520396e+98,\"revenue\":5.0300284918882415e+96,\"expenses\":5679566182.112187,\"fundingRound\":4,\"public\":true,\"totalShares\":1000000000,\"numShares\":100000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendRate\":0.01,\"dividendTax\":0.09999999999999995,\"issuedShares\":0,\"sharePrice\":4.1236908939022714e+48,\"storedCycles\":30362125,\"cycleValuation\":5.1264339287036834e+101,\"valuationsList\":[5.1270431831156763e+101,5.124741100178727e+101,5.1253324039654317e+101,5.125900608736693e+101,5.1264339287036834e+101],\"valuation\":5.125890244940042e+101,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":1}},\"unlockUpgrades\":[0,1,0,0,0,1,1,1,1],\"upgrades\":[3450,3450,30,507,3450,3450,3450,3450,3052,3028],\"upgradeMultipliers\":[104.5,346,1.03,3.535,346,346,346,346,31.52,152.4]}},\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Illuminati\",\"Daedalus\",\"The Covenant\",\"ECorp\",\"MegaCorp\",\"Clarke Incorporated\",\"The Syndicate\",\"Slum Snakes\"],\"factionInvitations\":[\"Sector-12\"],\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-343178.8000000067,\"numPeopleKilled\":0,\"location\":\"Universal Energy\",\"money\":3.558665748166837e+87,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-21504,\"codingcontract\":0,\"corporation\":3.558665748166837e+87,\"crime\":0,\"gang\":0,\"hacking\":52341124417753,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":3222307508.0625005,\"stock\":0,\"total\":3.558665748166837e+87,\"work\":0,\"servers\":-56768777738901.55,\"other\":-5305700000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-21504,\"codingcontract\":0,\"corporation\":9.025776407788489e+87,\"crime\":0,\"gang\":0,\"hacking\":961746459323880000,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-150464748312152.53,\"stock\":0,\"total\":9.025776407773078e+87,\"work\":1198881813.5998333,\"servers\":-14499731061383280000,\"other\":-21241200000,\"augmentations\":-1.540979782372035e+76}},\"playtimeSinceLastAug\":313400,\"playtimeSinceLastBitnode\":6660128600,\"purchasedServers\":[\"srv-1\",\"srv-2\",\"srv-3\",\"srv-4\",\"srv-5\",\"srv-6\",\"srv-7\",\"srv-8\",\"srv-9\",\"srv-10\",\"srv-11\",\"srv-12\",\"srv-13\",\"srv-14\",\"srv-15\",\"srv-16\",\"srv-17\",\"srv-18\",\"srv-19\",\"srv-20\",\"srv-21\",\"srv-22\",\"srv-23\",\"srv-24\",\"srv-25\"],\"scriptProdSinceLastAug\":52341124417753,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":1151,\"max\":1151},\"skills\":{\"hacking\":2514,\"strength\":10575,\"defense\":11412,\"dexterity\":3491,\"agility\":7635,\"charisma\":511,\"intelligence\":0},\"exp\":{\"hacking\":463051.64934346796,\"strength\":128834.99278647147,\"defense\":128834.99278647147,\"dexterity\":148160.2417044772,\"agility\":131817.33907647166,\"charisma\":136380.5605682935,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.9675571031250016,\"hacking_speed\":2.9058221123892873,\"hacking_money\":17.474457,\"hacking_grow\":1.75,\"hacking\":14.451923678306128,\"hacking_exp\":8.881203231619878,\"strength\":59.86421561052192,\"strength_exp\":2.3669415000000003,\"defense\":64.60263178482188,\"defense_exp\":2.3669415000000003,\"dexterity\":19.280446464615338,\"dexterity_exp\":2.721982725,\"agility\":43.04339063640002,\"agility_exp\":2.3669415000000003,\"charisma\":2.8678890240000006,\"charisma_exp\":2.5193608440000004,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":6.214633361937,\"faction_rep\":1.88134089,\"work_money\":2.34564,\"crime_success\":1.4818375000000004,\"crime_money\":2.3431555468750003,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveFactionWork\",\"data\":{\"type\":\"FACTION\",\"factionWorkType\":\"field\",\"factionName\":\"Illuminati\"}},\"memory\":100,\"shock\":0,\"storedCycles\":31291775,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":1149,\"max\":1149},\"skills\":{\"hacking\":2512,\"strength\":10563,\"defense\":11399,\"dexterity\":3487,\"agility\":7626,\"charisma\":511,\"intelligence\":0},\"exp\":{\"hacking\":460915.4993152526,\"strength\":128026.68226422174,\"defense\":128026.68226422174,\"dexterity\":147230.68460388854,\"agility\":131009.02855422194,\"charisma\":135382.89367407054,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.9675571031250016,\"hacking_speed\":2.9058221123892873,\"hacking_money\":17.474457,\"hacking_grow\":1.75,\"hacking\":14.451923678306128,\"hacking_exp\":8.881203231619878,\"strength\":59.86421561052192,\"strength_exp\":2.3669415000000003,\"defense\":64.60263178482188,\"defense_exp\":2.3669415000000003,\"dexterity\":19.280446464615338,\"dexterity_exp\":2.721982725,\"agility\":43.04339063640002,\"agility_exp\":2.3669415000000003,\"charisma\":2.8678890240000006,\"charisma_exp\":2.5193608440000004,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":6.214633361937,\"faction_rep\":1.88134089,\"work_money\":2.34564,\"crime_success\":1.4818375000000004,\"crime_money\":2.3431555468750003,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveFactionWork\",\"data\":{\"type\":\"FACTION\",\"factionWorkType\":\"field\",\"factionName\":\"Daedalus\"}},\"memory\":100,\"shock\":0,\"storedCycles\":31293290,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":1146,\"max\":1146},\"skills\":{\"hacking\":2507,\"strength\":10532,\"defense\":11366,\"dexterity\":3478,\"agility\":7605,\"charisma\":509,\"intelligence\":0},\"exp\":{\"hacking\":454749.35162312107,\"strength\":125985.19522047244,\"defense\":125985.19522047244,\"dexterity\":144882.97450357306,\"agility\":128967.54151047263,\"charisma\":132979.42342889705,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.9675571031250016,\"hacking_speed\":2.9058221123892873,\"hacking_money\":17.474457,\"hacking_grow\":1.75,\"hacking\":14.451923678306128,\"hacking_exp\":8.881203231619878,\"strength\":59.86421561052192,\"strength_exp\":2.3669415000000003,\"defense\":64.60263178482188,\"defense_exp\":2.3669415000000003,\"dexterity\":19.280446464615338,\"dexterity_exp\":2.721982725,\"agility\":43.04339063640002,\"agility_exp\":2.3669415000000003,\"charisma\":2.8678890240000006,\"charisma_exp\":2.5193608440000004,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":6.214633361937,\"faction_rep\":1.88134089,\"work_money\":2.34564,\"crime_success\":1.4818375000000004,\"crime_money\":2.3431555468750003,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveFactionWork\",\"data\":{\"type\":\"FACTION\",\"factionWorkType\":\"field\",\"factionName\":\"The Covenant\"}},\"memory\":100,\"shock\":0,\"storedCycles\":31294445,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":1148,\"max\":1148},\"skills\":{\"hacking\":2510,\"strength\":10547,\"defense\":11382,\"dexterity\":3483,\"agility\":7615,\"charisma\":510,\"intelligence\":0},\"exp\":{\"hacking\":457941.4822318508,\"strength\":127001.79659472208,\"defense\":127001.79659472208,\"dexterity\":146052.06608396204,\"agility\":129984.14288472227,\"charisma\":134158.48430388782,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.9675571031250016,\"hacking_speed\":2.9058221123892873,\"hacking_money\":17.474457,\"hacking_grow\":1.75,\"hacking\":14.451923678306128,\"hacking_exp\":8.881203231619878,\"strength\":59.86421561052192,\"strength_exp\":2.3669415000000003,\"defense\":64.60263178482188,\"defense_exp\":2.3669415000000003,\"dexterity\":19.280446464615338,\"dexterity_exp\":2.721982725,\"agility\":43.04339063640002,\"agility_exp\":2.3669415000000003,\"charisma\":2.8678890240000006,\"charisma_exp\":2.5193608440000004,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":6.214633361937,\"faction_rep\":1.88134089,\"work_money\":2.34564,\"crime_success\":1.4818375000000004,\"crime_money\":2.3431555468750003,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveFactionWork\",\"data\":{\"type\":\"FACTION\",\"factionWorkType\":\"field\",\"factionName\":\"ECorp\"}},\"memory\":100,\"shock\":0,\"storedCycles\":31296380,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":1144,\"max\":1144},\"skills\":{\"hacking\":2505,\"strength\":10516,\"defense\":11349,\"dexterity\":3472,\"agility\":7593,\"charisma\":508,\"intelligence\":0},\"exp\":{\"hacking\":451228.2855183036,\"strength\":124937.8236067228,\"defense\":124937.8236067228,\"dexterity\":143678.49714775904,\"agility\":127920.16989672299,\"charisma\":131800.36255390628,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.9675571031250016,\"hacking_speed\":2.9058221123892873,\"hacking_money\":17.474457,\"hacking_grow\":1.75,\"hacking\":14.451923678306128,\"hacking_exp\":8.881203231619878,\"strength\":59.86421561052192,\"strength_exp\":2.3669415000000003,\"defense\":64.60263178482188,\"defense_exp\":2.3669415000000003,\"dexterity\":19.280446464615338,\"dexterity_exp\":2.721982725,\"agility\":43.04339063640002,\"agility_exp\":2.3669415000000003,\"charisma\":2.8678890240000006,\"charisma_exp\":2.5193608440000004,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":6.214633361937,\"faction_rep\":1.88134089,\"work_money\":2.34564,\"crime_success\":1.4818375000000004,\"crime_money\":2.3431555468750003,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveFactionWork\",\"data\":{\"type\":\"FACTION\",\"factionWorkType\":\"field\",\"factionName\":\"MegaCorp\"}},\"memory\":100,\"shock\":0,\"storedCycles\":31298240,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":1143,\"max\":1143},\"skills\":{\"hacking\":2502,\"strength\":10502,\"defense\":11333,\"dexterity\":3468,\"agility\":7584,\"charisma\":508,\"intelligence\":0},\"exp\":{\"hacking\":447959.00979951536,\"strength\":124025.36765847311,\"defense\":124025.36765847311,\"dexterity\":142629.17280727022,\"agility\":127007.7139484733,\"charisma\":130802.69565968281,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.9675571031250016,\"hacking_speed\":2.9058221123892873,\"hacking_money\":17.474457,\"hacking_grow\":1.75,\"hacking\":14.451923678306128,\"hacking_exp\":8.881203231619878,\"strength\":59.86421561052192,\"strength_exp\":2.3669415000000003,\"defense\":64.60263178482188,\"defense_exp\":2.3669415000000003,\"dexterity\":19.280446464615338,\"dexterity_exp\":2.721982725,\"agility\":43.04339063640002,\"agility_exp\":2.3669415000000003,\"charisma\":2.8678890240000006,\"charisma_exp\":2.5193608440000004,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":6.214633361937,\"faction_rep\":1.88134089,\"work_money\":2.34564,\"crime_success\":1.4818375000000004,\"crime_money\":2.3431555468750003,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveFactionWork\",\"data\":{\"type\":\"FACTION\",\"factionWorkType\":\"field\",\"factionName\":\"Clarke Incorporated\"}},\"memory\":100,\"shock\":0,\"storedCycles\":31300355,\"sync\":100}}],\"sleevesFromCovenant\":5,\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":12},{\"lvl\":3,\"n\":3},{\"lvl\":1,\"n\":10}],\"exploits\":[\"EditSaveFile\",\"Unclickable\",\"TimeCompression\",\"UndocumentedFunctionCall\",\"N00dles\",\"Bypass\",\"PrototypeTampering\",\"YoureNotMeantToAccessThis\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1680935638091},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1680935758091},{\"ID\":\"FROZE\",\"unlockedOn\":1680942143690},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1680950846262},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1680965522092},{\"ID\":\"WORKOUT\",\"unlockedOn\":1680971462079},{\"ID\":\"TOR\",\"unlockedOn\":1680973022082},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1681022277906},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1681024917915},{\"ID\":\"TRAVEL\",\"unlockedOn\":1681026177914},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1681027137905},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1681027197905},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1681057981282},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1681149292392},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1681157823985},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1681165143971},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1681241119121},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1681313453401},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1681319093406},{\"ID\":\"NITESEC\",\"unlockedOn\":1681414366741},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1681482482790},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1681497442767},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1681547463960},{\"ID\":\"DONATION\",\"unlockedOn\":1681583940595},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1681592065302},{\"ID\":\"SF1.1\",\"unlockedOn\":1681636847839},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1682029996642},{\"ID\":\"FAST_BN\",\"unlockedOn\":1682189839395},{\"ID\":\"SF12.1\",\"unlockedOn\":1682671134645},{\"ID\":\"CORPORATION\",\"unlockedOn\":1683360752965},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1683364739130},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1683394543033},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1683396763825},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1683397543837},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1683397843828},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1683398263819},{\"ID\":\"SF3.1\",\"unlockedOn\":1683407360488},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1684010489607},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1684010549607},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1684014390206},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1684014450208},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1684014690197},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1684014990195},{\"ID\":\"HACKING_100000\",\"unlockedOn\":1684015830399},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1684015950399},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1684431554830},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1684431794830},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1684431794833},{\"ID\":\"N00DLES\",\"unlockedOn\":1684431854834},{\"ID\":\"BYPASS\",\"unlockedOn\":1684432173196},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1684432173200},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1684530041966},{\"ID\":\"4S\",\"unlockedOn\":1684955415201},{\"ID\":\"SF10.1\",\"unlockedOn\":1685043757734},{\"ID\":\"DEVMENU\",\"unlockedOn\":1685262330734}],\"terminalCommandHistory\":[\"backdoor\",\"run startup-hwgw.js\",\"clear\",\"run corp/tob-mantainance.js\",\"clear\",\"run misc/buy-and-upgrade-servers.js\",\"clear\",\"nano const/servers.js\",\"run misc/buy-and-upgrade-servers.js\",\"clear\",\"connect darkweb\",\"buy -a\",\"clear\",\"home\",\"scan-analyze 10\",\"backdoor\",\"home\",\"scan-analyze 10\",\"clear\",\"scan-analyze 10\",\"backdoor\",\"scan-analyze 10\",\"backdoor\",\"clear\",\"run corp/tob-mantainance.js\",\"run startup-hwgw.js\",\"clear\",\"run misc/buy-and-upgrade-servers.js\",\"clear\",\"connect darkweb\",\"buy -a\",\"clear\",\"buy -a\",\"home\",\"run corp/tob-mantainance.js\",\"clear\",\"run corp/tob-mantainance.js\",\"connect darkweb\",\"buy -a\",\"home\",\"run startup-hwgw.js\",\"clear\",\"run startup-hwgw.js\",\"run corp/tob-mantainance.js\",\"connect darkweb\",\"buy -a\",\"home\",\"clear\",\"run misc/buy-and-upgrade-servers.js\",\"clear\"],\"lastUpdate\":1691703856916,\"lastSave\":1691703849132,\"totalPlaytime\":10768816800,\"currentWork\":{\"ctor\":\"ClassWork\",\"data\":{\"type\":\"CLASS\",\"singularity\":false,\"cyclesWorked\":112,\"earnings\":{\"money\":-21504,\"reputation\":0,\"hackExp\":0,\"strExp\":0,\"defExp\":0,\"dexExp\":0,\"agiExp\":0,\"chaExp\":7294.317962475338,\"intExp\":0.44800000000000034},\"classType\":\"Leadership\",\"location\":\"Rothman University\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"ba2e25a8340bf\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":8,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"20.2.3.7\",\"isConnectedTo\":true,\"maxRam\":1073741824,\"messages\":[\"hackers-starting-handbook.lit\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\",\"Formulas.exe\"],\"ramUsed\":1234.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scan-and-nuke/scan-and-update-file.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.20999999999196,\"pid\":2,\"ramUsage\":9.5,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/server-info.js\",\"url\":\"blob:http://bitburner.local/f1d2b9f1-9955-4b7f-887b-0f2d1a429a35\",\"moduleSequenceNumber\":341},{\"filename\":\"/utils/hwgw-server-info.js\",\"url\":\"blob:http://bitburner.local/52a45e67-01da-4620-9836-1c9c10822e6e\",\"moduleSequenceNumber\":366},{\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"blob:http://bitburner.local/b9113fa4-39f2-454a-a2ef-ca974c58ea23\",\"moduleSequenceNumber\":360},{\"filename\":\"/const/servers.js\",\"url\":\"blob:http://bitburner.local/9f27fd93-0516-48d8-bfec-2d24a633ffff\",\"moduleSequenceNumber\":378},{\"filename\":\"/scan-and-nuke/scan-result.js\",\"url\":\"blob:http://bitburner.local/c69c942b-6bb1-45d0-8595-b84b8e0030fa\",\"moduleSequenceNumber\":351},{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:http://bitburner.local/f26bbeeb-baf5-4a8a-8de7-6bc590bcd8d0\",\"moduleSequenceNumber\":339},{\"filename\":\"/const/files.js\",\"url\":\"blob:http://bitburner.local/a761b299-60ec-4d55-b7bf-dc4d299f94e3\",\"moduleSequenceNumber\":338},{\"filename\":\"/scan-and-nuke/scan-and-update-file.js\",\"url\":\"blob:http://bitburner.local/4e48bea0-60c8-4961-96b2-8fcee4cc1a90\",\"moduleSequenceNumber\":1014}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/logs/logmanager.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.20999999999196,\"pid\":3,\"ramUsage\":1.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:http://bitburner.local/ad3b1052-4c8f-46c4-aa4b-0f0fbfd62b4b\",\"moduleSequenceNumber\":339},{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/307ab647-df57-47a7-9832-e64a07269691\",\"moduleSequenceNumber\":381},{\"filename\":\"/const/files.js\",\"url\":\"blob:http://bitburner.local/53198e7d-92ee-4e22-b53b-1d732b0d2c09\",\"moduleSequenceNumber\":338},{\"filename\":\"/logs/logmanager.js\",\"url\":\"blob:http://bitburner.local/f37ef8c1-0a1b-421e-9c91-39da8539e81b\",\"moduleSequenceNumber\":1015}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/corp/tob-mantainance.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":302.6099999999922,\"pid\":4,\"ramUsage\":1024,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/421e551c-f33d-4078-89b9-c841d4c311aa\",\"moduleSequenceNumber\":385},{\"filename\":\"/corp/product-functions.js\",\"url\":\"blob:http://bitburner.local/6536da6b-897c-4f67-af96-f1c25f108e49\",\"moduleSequenceNumber\":404},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:http://bitburner.local/9198b1e3-fbde-4ae7-8d91-bff9fecf32f0\",\"moduleSequenceNumber\":400},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:http://bitburner.local/8afa5431-a814-4339-9646-ad99e7f4e8c5\",\"moduleSequenceNumber\":400},{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/6a70d60c-6b24-4a00-add4-d5da3a15fe7b\",\"moduleSequenceNumber\":385},{\"filename\":\"/corp/corp-functions.js\",\"url\":\"blob:http://bitburner.local/a9bf0acf-e97a-4136-9b0f-1b02972f452b\",\"moduleSequenceNumber\":401},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:http://bitburner.local/547addd5-a6eb-4b9d-bfe5-51e147c4a52f\",\"moduleSequenceNumber\":379},{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/642ce256-3d3c-4049-88ac-4d10c4ebbfda\",\"moduleSequenceNumber\":385},{\"filename\":\"/corp/tob-mantainance.js\",\"url\":\"blob:http://bitburner.local/679cbfcf-a6b2-4550-bfe1-d5023d896c02\",\"moduleSequenceNumber\":675}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/managers/hwgw-manager.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12023387677.794847,\"onlineMoneyMade\":52341124417753,\"onlineRunningTime\":297.20999999999253,\"pid\":5,\"ramUsage\":13.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:http://bitburner.local/9f7e55c7-9fb3-4f0f-9f41-37c45dc622c9\",\"moduleSequenceNumber\":339},{\"filename\":\"/const/files.js\",\"url\":\"blob:http://bitburner.local/a4c5915c-0a04-4d6b-9f9a-48ec96e7ffe0\",\"moduleSequenceNumber\":338},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:http://bitburner.local/01bbbbb4-f677-4e87-af29-9581c554dbc2\",\"moduleSequenceNumber\":359},{\"filename\":\"/utils/hwgw-server-info.js\",\"url\":\"blob:http://bitburner.local/28b22df8-1369-4527-9da5-2e4538f303d0\",\"moduleSequenceNumber\":366},{\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"blob:http://bitburner.local/a5581a5a-47ba-4263-a1a5-6fdb94dca19a\",\"moduleSequenceNumber\":360},{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/78490343-0137-4926-b48b-a75c3f481177\",\"moduleSequenceNumber\":381},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:http://bitburner.local/09623ea7-9ab5-41fa-887c-4c02f29296cb\",\"moduleSequenceNumber\":380},{\"filename\":\"/hwgw/wgw-batch.js\",\"url\":\"blob:http://bitburner.local/391e8997-6879-48a6-aa30-8ac0386653ec\",\"moduleSequenceNumber\":370},{\"filename\":\"/const/servers.js\",\"url\":\"blob:http://bitburner.local/8651b8cf-0912-4162-8e63-af9f33d84ce8\",\"moduleSequenceNumber\":378},{\"filename\":\"/utils/server-data.js\",\"url\":\"blob:http://bitburner.local/02de86d3-5d2b-404f-b465-7aacaea867f0\",\"moduleSequenceNumber\":350},{\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"blob:http://bitburner.local/821ec69a-b374-4774-a902-825d9f0ca665\",\"moduleSequenceNumber\":382},{\"filename\":\"/const/servers.js\",\"url\":\"blob:http://bitburner.local/cc1b2a64-a6bb-48e6-86dc-a1b1208c92b0\",\"moduleSequenceNumber\":378},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:http://bitburner.local/3b4c44a8-6473-4a95-87fb-14fdc37ffb33\",\"moduleSequenceNumber\":379},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:http://bitburner.local/e049ea06-438f-41dc-a998-68c0bcc388e0\",\"moduleSequenceNumber\":380},{\"filename\":\"/hwgw/hwgw-server-manager.js\",\"url\":\"blob:http://bitburner.local/77fdaf78-4a3c-4f27-9cf5-635548ae946d\",\"moduleSequenceNumber\":371},{\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"blob:http://bitburner.local/bd0ea607-39c7-4834-9876-1baf897ebe73\",\"moduleSequenceNumber\":360},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:http://bitburner.local/7f87f1bf-ec4e-47fa-ad9c-96490dd56859\",\"moduleSequenceNumber\":380},{\"filename\":\"/hwgw/hwgw-batch-scorer.js\",\"url\":\"blob:http://bitburner.local/219ce1f2-135e-4989-b87e-8bc8c433d59e\",\"moduleSequenceNumber\":410},{\"filename\":\"/hwgw/hwgw-scorer.js\",\"url\":\"blob:http://bitburner.local/d605ad6d-bc70-4bd6-8a34-6cd4c8cb5c6f\",\"moduleSequenceNumber\":411},{\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"blob:http://bitburner.local/229cf30c-dc98-4078-9ef3-0b2f8fe6a57e\",\"moduleSequenceNumber\":382},{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/5cc2ec80-7039-4986-8fce-06040cfc6c8e\",\"moduleSequenceNumber\":381},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:http://bitburner.local/f8afd5ce-df8a-4f8c-a987-cf86f67ee76b\",\"moduleSequenceNumber\":380},{\"filename\":\"/hwgw/hwgw-server-batch.js\",\"url\":\"blob:http://bitburner.local/94b901ab-edb2-409b-b065-b10fe7207ef9\",\"moduleSequenceNumber\":372},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:http://bitburner.local/9cb8c462-3113-4b0e-8185-08e9eff668da\",\"moduleSequenceNumber\":380},{\"filename\":\"/hwgw/hwgw-batch.js\",\"url\":\"blob:http://bitburner.local/f22224d7-7b5d-41c9-a895-a36e4cc47650\",\"moduleSequenceNumber\":356},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:http://bitburner.local/5aec0c85-2af2-4d99-8990-1a7b6c6bba01\",\"moduleSequenceNumber\":379},{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a10325af-055a-4806-a9fb-1eaca9acfe70\",\"moduleSequenceNumber\":381},{\"filename\":\"/managers/hwgw-manager.js\",\"url\":\"blob:http://bitburner.local/247ad75b-f49a-4a67-8b6e-30540cbb9fcd\",\"moduleSequenceNumber\":1016}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703857339,\\\"iteration\\\":0,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72498,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/49f53861-55f3-4f01-a3bb-86d23a42375f\",\"moduleSequenceNumber\":2524},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/12d993dd-5e22-42f8-b22a-aa17d51e4ab6\",\"moduleSequenceNumber\":2526},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6e124644-86d9-4a0b-bbca-e91b87ee782e\",\"moduleSequenceNumber\":2604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857359,\\\"iteration\\\":0,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72499,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c2c3531f-c3d1-421d-9d66-d9edc39c8cf5\",\"moduleSequenceNumber\":2524},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/3fbb6e40-314b-47d3-aef5-81408092524e\",\"moduleSequenceNumber\":2526},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9c24c79b-8122-45c6-9b9b-e0244e8937d6\",\"moduleSequenceNumber\":2602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703857379,\\\"iteration\\\":0,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72500,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1205a356-f9d7-4ecf-a94b-d32a39d4304a\",\"moduleSequenceNumber\":2524},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/af4974e9-71ca-40cd-b7d8-1e127ad60c41\",\"moduleSequenceNumber\":2526},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a5861f87-ce47-4093-96c5-f8cffbbc65ae\",\"moduleSequenceNumber\":2603}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857399,\\\"iteration\\\":0,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72501,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c2c3531f-c3d1-421d-9d66-d9edc39c8cf5\",\"moduleSequenceNumber\":2524},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/3fbb6e40-314b-47d3-aef5-81408092524e\",\"moduleSequenceNumber\":2526},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9c24c79b-8122-45c6-9b9b-e0244e8937d6\",\"moduleSequenceNumber\":2602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":57,\\\"scriptEstimatedEnd\\\":1691703857406,\\\"iteration\\\":0,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72602,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/49f53861-55f3-4f01-a3bb-86d23a42375f\",\"moduleSequenceNumber\":2524},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/12d993dd-5e22-42f8-b22a-aa17d51e4ab6\",\"moduleSequenceNumber\":2526},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6e124644-86d9-4a0b-bbca-e91b87ee782e\",\"moduleSequenceNumber\":2604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":225,\\\"scriptEstimatedEnd\\\":1691703857426,\\\"iteration\\\":0,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72603,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c2c3531f-c3d1-421d-9d66-d9edc39c8cf5\",\"moduleSequenceNumber\":2524},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/3fbb6e40-314b-47d3-aef5-81408092524e\",\"moduleSequenceNumber\":2526},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9c24c79b-8122-45c6-9b9b-e0244e8937d6\",\"moduleSequenceNumber\":2602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":183,\\\"scriptEstimatedEnd\\\":1691703857446,\\\"iteration\\\":0,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72604,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":45,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1205a356-f9d7-4ecf-a94b-d32a39d4304a\",\"moduleSequenceNumber\":2524},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/af4974e9-71ca-40cd-b7d8-1e127ad60c41\",\"moduleSequenceNumber\":2526},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a5861f87-ce47-4093-96c5-f8cffbbc65ae\",\"moduleSequenceNumber\":2603}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":225,\\\"scriptEstimatedEnd\\\":1691703857466,\\\"iteration\\\":0,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72605,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c2c3531f-c3d1-421d-9d66-d9edc39c8cf5\",\"moduleSequenceNumber\":2524},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/3fbb6e40-314b-47d3-aef5-81408092524e\",\"moduleSequenceNumber\":2526},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9c24c79b-8122-45c6-9b9b-e0244e8937d6\",\"moduleSequenceNumber\":2602}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class FileHandler {\\n    #file;\\n    #ns;\\n    constructor(ns, file) {\\n        this.#ns = ns;\\n        this.#file = file;\\n    }\\n    newFile() {\\n        this.#ns.write(this.#file, '', 'w');\\n    }\\n    write(data, mode = 'a') {\\n        this.#ns.write(this.#file, JSON.stringify(data), mode);\\n    }\\n    writeText(data, mode = 'a') {\\n        this.#ns.write(this.#file, data, mode);\\n    }\\n    read() {\\n        const dataString = this.#ns.read(this.#file);\\n        if (dataString.length > 1) {\\n            return JSON.parse(dataString);\\n        }\\n        else {\\n            return [];\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmlsZXMvZmlsZWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLFdBQVc7SUFDdEIsS0FBSyxDQUFTO0lBQ2QsR0FBRyxDQUFLO0lBRVIsWUFBWSxFQUFNLEVBQUUsSUFBWTtRQUM5QixJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFTLEVBQUUsT0FBOEIsR0FBRztRQUNoRCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFTLEVBQUUsT0FBOEIsR0FBRztRQUNwRCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsSUFBSTtRQUNGLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMvQjthQUFNO1lBQ0wsT0FBTyxFQUFFLENBQUM7U0FDWDtJQUNILENBQUM7Q0FDRiJ9\",\"filename\":\"/files/filehandler.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FARM_SERVER_GB, MAX_FARMER_SERVER_NUM, MAX_RAM, MAX_SERVER_NUM, SERVER_GB_WANTED, SERVER_NAME_PREFIX, XP_FARMER_SERVER_PREFIX, } from 'const/servers';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const purch = ns.getPurchasedServers().filter((el) => el.startsWith(SERVER_NAME_PREFIX));\\n    const farm = ns.getPurchasedServers().filter((el) => el.startsWith(XP_FARMER_SERVER_PREFIX));\\n    let totalCost = 0;\\n    let farmingCost = 0;\\n    let serverCost = 0;\\n    let upgradeCost = 0;\\n    let farmUpgradeCost = 0;\\n    for (let server of purch) {\\n        if (server == 'home')\\n            continue;\\n        const serverRam = ns.getServerMaxRam(server);\\n        const cost = ns.getPurchasedServerUpgradeCost(server, SERVER_GB_WANTED);\\n        if (cost > 0) {\\n            if (cost > upgradeCost)\\n                upgradeCost = cost;\\n            serverCost += cost;\\n            totalCost += cost;\\n        }\\n    }\\n    for (let count = purch.length; count < MAX_SERVER_NUM; count++) {\\n        const cost = ns.getPurchasedServerCost(SERVER_GB_WANTED);\\n        if (cost > 0) {\\n            serverCost += cost;\\n            totalCost += cost;\\n        }\\n    }\\n    for (let server of farm) {\\n        if (server == 'home')\\n            continue;\\n        const serverRam = ns.getServerMaxRam(server);\\n        const cost = ns.getPurchasedServerUpgradeCost(server, FARM_SERVER_GB);\\n        if (cost > 0) {\\n            if (cost > farmUpgradeCost)\\n                farmUpgradeCost = cost;\\n            farmingCost += cost;\\n            totalCost += cost;\\n        }\\n    }\\n    for (let count = farm.length; count < MAX_FARMER_SERVER_NUM; count++) {\\n        const cost = ns.getPurchasedServerCost(FARM_SERVER_GB);\\n        if (cost > 0) {\\n            farmingCost += cost;\\n            totalCost += cost;\\n        }\\n    }\\n    ns.tprint('massima ram: ', ns.getPurchasedServerMaxRam());\\n    ns.tprint('costo per arrivare a ' + MAX_SERVER_NUM + ' server da ' + SERVER_GB_WANTED + ' : ', ns.formatNumber(serverCost, 3));\\n    ns.tprint('costo per arrivare a ' + MAX_FARMER_SERVER_NUM + ' xp farm server da ' + FARM_SERVER_GB + ' : ', ns.formatNumber(farmingCost, 3));\\n    ns.tprint('costo totale: ', ns.formatNumber(totalCost, 3));\\n    ns.tprint('costo server: ', ns.formatNumber(ns.getPurchasedServerCost(SERVER_GB_WANTED), 3));\\n    ns.tprint('costo server upgrade: ', ns.formatNumber(upgradeCost, 3));\\n    ns.tprint('costo server farm: ', ns.formatNumber(ns.getPurchasedServerCost(FARM_SERVER_GB), 3));\\n    ns.tprint('costo server farm upgrade: ', ns.formatNumber(farmUpgradeCost, 3));\\n    ns.tprint('costo server a massima ram: ', ns.formatNumber(ns.getPurchasedServerCost(MAX_RAM), 3));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VzdGlvbmUtc2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pc2MvZ2VzdGlvbmUtc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxjQUFjLEVBQ2QscUJBQXFCLEVBQ3JCLE9BQU8sRUFDUCxjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLGtCQUFrQixFQUNsQix1QkFBdUIsR0FDeEIsTUFBTSxlQUFlLENBQUM7QUFFdkIscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztJQUN6RixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0lBQzdGLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNsQixJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDcEIsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNwQixJQUFJLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFFeEIsS0FBSyxJQUFJLE1BQU0sSUFBSSxLQUFLLEVBQUU7UUFDeEIsSUFBSSxNQUFNLElBQUksTUFBTTtZQUFFLFNBQVM7UUFDL0IsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsNkJBQTZCLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFD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\",\"filename\":\"/misc/gestione-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/servers.js\",\"url\":\"blob:http://bitburner.local/57d153d7-3ded-4608-9dc1-cee81fe0cda0\",\"moduleSequenceNumber\":764},{\"filename\":\"/misc/gestione-server.js\",\"url\":\"blob:http://bitburner.local/4f95e2f1-58b5-429e-9672-44c8b2e23849\",\"moduleSequenceNumber\":1618}],\"dependents\":[],\"ramUsage\":4.3,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerUpgradeCost\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ServerInfo {\\n    name = '';\\n    minSecurity = -1;\\n    maxMoney = -1;\\n    weakenTm = Infinity;\\n    hackValue = 0;\\n    hackChance = 0;\\n    hackXp = 0;\\n    prepped = false;\\n    minHackLevel = 10000;\\n    currHackLevel = 0;\\n    score = -1;\\n    hwgwScore = -1;\\n    farmScore = -1;\\n    calcolaScore() {\\n        const hackLevelFactor = this.minHackLevel > this.currHackLevel * 0.65 ? 0.4 : 1;\\n        const upper = this.maxMoney * this.hackValue * this.currHackLevel;\\n        const lower = (this.weakenTm / 1000 / this.minSecurity) * this.minHackLevel;\\n        this.score = (upper / lower) * hackLevelFactor;\\n        if (isNaN(this.score)) {\\n            this.score = -1;\\n        }\\n        if (this.hackChance >= 0.999) {\\n            this.hwgwScore = this.score;\\n        }\\n        else {\\n            this.hwgwScore = this.score / 2;\\n        }\\n        if (this.hackXp > 0) {\\n            this.farmScore = this.hackXp / (this.weakenTm / 1000);\\n        }\\n        else if (this.name == 'joesguns') {\\n            this.farmScore = 0;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLWluZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvc2VydmVyLWluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLFVBQVU7SUFDckIsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNWLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqQixRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZCxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQ3BCLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZCxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNYLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDaEIsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUNyQixhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNYLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNmLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUVmLFlBQVk7UUFDVixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUNsRSxNQUFNLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzVFLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsZUFBZSxDQUFDO1FBQy9DLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO1FBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLEtBQUssRUFBRTtZQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDN0I7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDakM7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDdkQ7YUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksVUFBVSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztDQUNGIn0=\",\"filename\":\"/utils/server-info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const augmentations = [\\n        // TIANDAN\\n        new Augmentation('Wired Reflexes', 2500000, 'tiandan'),\\n        new Augmentation('Speech Enhancement', 12500000, 'tiandan'),\\n        new Augmentation('ADR-V1 Pheromone Gene', 17500000, 'tiandan'),\\n        new Augmentation('Nuoptimal Nootropic Injector Implant', 20000000, 'tiandan'),\\n        new Augmentation('Social Negotiation Assistant (S.N.A)', 30000000, 'tiandan'),\\n        new Augmentation('Speech Processor Implant', 50000000, 'tiandan'),\\n        new Augmentation('Nanofiber Weave', 125000000, 'tiandan'),\\n        new Augmentation('Neuroreceptor Management Implant', 550000000, 'tiandan'),\\n        // SEC12\\n        new Augmentation('Augmented Targeting I', 15000000, 'sec12'),\\n        new Augmentation('Augmented Targeting II', 42500000, 'sec12'),\\n        new Augmentation('Speech Processor Implant', 50000000, 'sec12'),\\n        new Augmentation('CashRoot Starter Kit', 125000000, 'sec12'),\\n        new Augmentation('Neuralstimulator', 3000000000, 'sec12'),\\n        // CSEC\\n        new Augmentation('Neurotrainer I', 4000000, 'csec'),\\n        new Augmentation('Synaptic Enhancement Implant', 7500000, 'csec'),\\n        new Augmentation('BitWire', 10000000, 'csec'),\\n        new Augmentation('Cranial Signal Processors - Gen I', 70000000, 'csec'),\\n        new Augmentation('Cranial Signal Processors - Gen II', 125000000, 'csec'),\\n        // NITESEC\\n        new Augmentation('Neurotrainer II', 45000000, 'nitesec'),\\n        new Augmentation('Artificial Synaptic Potentiation', 80000000, 'nitesec'),\\n        new Augmentation('Cranial Signal Processors - Gen II', 125000000, 'nitesec'),\\n        new Augmentation('CRTX42-AA Gene Modification', 225000000, 'nitesec'),\\n        new Augmentation('Neural-Retention Enhancement', 250000000, 'nitesec'),\\n        new Augmentation('Embedded Netburner Module', 250000000, 'nitesec'),\\n        new Augmentation('DataJack', 450000000, 'nitesec'),\\n        new Augmentation('Cranial Signal Processors - Gen III', 550000000, 'nitesec'),\\n        new Augmentation('BitWire', 10000000, 'nitesec'),\\n        new Augmentation('Cranial Signal Processors - Gen I', 70000000, 'nitesec'),\\n        // BLACK HAND\\n        new Augmentation('Artificial Synaptic Potentiation', 80000000, 'blackhand'),\\n        new Augmentation('Embedded Netburner Module', 250000000, 'blackhand'),\\n        new Augmentation('DataJack', 450000000, 'blackhand'),\\n        new Augmentation('Cranial Signal Processors - Gen III', 550000000, 'blackhand'),\\n        new Augmentation('The Black Hand', 550000000, 'blackhand'),\\n        new Augmentation('Cranial Signal Processors - Gen IV', 1100000000, 'blackhand'),\\n        new Augmentation('Enhanced Myelin Sheathing', 1375000000, 'blackhand'),\\n        new Augmentation('Embedded Netburner Module Core Implant', 2500000000, 'blackhand'),\\n        new Augmentation('Neuralstimulator', 3000000000, 'blackhand'),\\n    ];\\n    const singled = [];\\n    augmentations.forEach((el) => {\\n        const duplicate = singled.find((sin) => el.name == sin.name);\\n        if (duplicate) {\\n            duplicate.faction += '/' + el.faction;\\n        }\\n        else {\\n            singled.push(el);\\n        }\\n    });\\n    singled.sort(function (a, b) {\\n        return b.cost - a.cost;\\n    });\\n    ns.tprint('ordine acquisto: ', singled);\\n    const costoTotale = calcolaSpesa(singled);\\n    ns.tprint('costo totale: ', ns.formatNumber(costoTotale, 3));\\n}\\nfunction calcolaSpesa(augmentations = []) {\\n    if (augmentations.length <= 0)\\n        return 0;\\n    const comprato = augmentations.shift();\\n    if (comprato) {\\n        let costo = comprato.cost;\\n        augmentations.forEach((el) => {\\n            el.cost = el.cost * 2;\\n        });\\n        augmentations.sort(function (a, b) {\\n            return b.cost - a.cost;\\n        });\\n        costo += calcolaSpesa(augmentations);\\n        return costo;\\n    }\\n    return 0;\\n}\\nexport class Augmentation {\\n    name;\\n    cost;\\n    faction;\\n    constructor(name, cost, faction) {\\n        this.name = name;\\n        this.cost = cost;\\n        this.faction = faction;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudGF0aW9uLWNhbGN1bGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlzYy9hdWdtZW50YXRpb24tY2FsY3VsYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLGFBQWEsR0FBbUI7UUFDcEMsVUFBVTtRQUNWLElBQUksWUFBWSxDQUFDLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUM7UUFDdEQsSUFBSSxZQUFZLENBQUMsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUMzRCxJQUFJLFlBQVksQ0FBQyx1QkFBdUIsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDO1FBQzlELElBQUksWUFBWSxDQUFDLHNDQUFzQyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDN0UsSUFBSSxZQUFZLENBQUMsc0NBQXNDLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUM3RSxJQUFJLFlBQVksQ0FBQywwQkFBMEIsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDO1FBQ2pFLElBQUksWUFBWSxDQUFDLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7UUFDekQsSUFBSSxZQUFZLENBQUMsa0NBQWtDLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQztRQUUxRSxRQUFRO1FBQ1IsSUFBSSxZQUFZLENBQUMsdUJBQXVCLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQztRQUM1RCxJQUFJLFlBQVksQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDO1FBQzdELElBQUksWUFBWSxDQUFDLDBCQUEwQixFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUM7UUFDL0QsSUFBSSxZQUFZLENBQUMsc0JBQXNCLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQztRQUM1RCxJQUFJLFlBQVksQ0FBQyxrQkFB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\",\"filename\":\"/misc/augmentation-calculator.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/misc/augmentation-calculator.js\",\"url\":\"blob:https://danielyxie.github.io/7e7184ec-cb9d-4001-b301-cb5be78119ab\",\"moduleSequenceNumber\":1630}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES_TO_COPY } from 'const/scripts';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = ns.getPurchasedServers();\\n    for (const server of servers) {\\n        ns.scp(FILES_TO_COPY, server);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlcC1zZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ByZXAvcHJlcC1zZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDekMsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7UUFDNUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDL0I7QUFDSCxDQUFDIn0=\",\"filename\":\"/prep/prep-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/scripts.js\",\"url\":\"blob:http://bitburner.local/28d81a9e-08a6-47cf-b8ca-100ddfd86a12\",\"moduleSequenceNumber\":2522},{\"filename\":\"/prep/prep-servers.js\",\"url\":\"blob:http://bitburner.local/61f29c12-1795-4cde-88d6-1b373eadd74b\",\"moduleSequenceNumber\":3102}],\"dependents\":[],\"ramUsage\":4.45,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":3102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MAX_SERVER_NUM, SERVER_GB, SERVER_NAME_PREFIX } from 'const/servers';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const purch = ns.getPurchasedServers().filter((el) => el.startsWith(SERVER_NAME_PREFIX));\\n    for (let server of purch) {\\n        const serverRam = ns.getServerMaxRam(server);\\n        if (serverRam != SERVER_GB) {\\n            //ns.tprint('dry run upgrade');\\n            ns.upgradePurchasedServer(server, SERVER_GB);\\n        }\\n    }\\n    for (let count = purch.length; count < MAX_SERVER_NUM; count++) {\\n        //ns.tprint('dry run buy');\\n        ns.purchaseServer(SERVER_NAME_PREFIX + (count + 1), SERVER_GB);\\n    }\\n    ns.exec('/prep/prep-servers.js', 'home', 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5LWFuZC11cGdyYWRlLXNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlzYy9idXktYW5kLXVwZ3JhZGUtc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5RSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQ3pGLEtBQUssSUFBSSxNQUFNLElBQUksS0FBSyxFQUFFO1FBQ3hCLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsSUFBSSxTQUFTLElBQUksU0FBUyxFQUFFO1lBQzFCLCtCQUErQjtZQUMvQixFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQzlDO0tBQ0Y7SUFDRCxLQUFLLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFHLGNBQWMsRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUM5RCwyQkFBMkI7UUFDM0IsRUFBRSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztLQUNoRTtJQUNELEVBQUUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlDLENBQUMifQ==\",\"filename\":\"/misc/buy-and-upgrade-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/servers.js\",\"url\":\"blob:http://bitburner.local/70826b57-ac8e-4ca8-8f5c-941d268cfa93\",\"moduleSequenceNumber\":2521},{\"filename\":\"/misc/buy-and-upgrade-servers.js\",\"url\":\"blob:http://bitburner.local/87534856-64cf-4d7b-a349-dac59cf2144c\",\"moduleSequenceNumber\":3101}],\"dependents\":[],\"ramUsage\":7.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":3101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"upgradePurchasedServer\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { loadTargetNames } from './utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = await loadTargetNames(ns);\\n    for (let server of servers) {\\n        ns.tprint('-------');\\n        ns.tprint('server: ', server);\\n        ns.tprint('MinSec: ', ns.getServerMinSecurityLevel(server));\\n        ns.tprint('CurSec: ', ns.getServerSecurityLevel(server));\\n        ns.tprint('MaxMoney: ', ns.formatNumber(ns.getServerMaxMoney(server), 3));\\n        ns.tprint('CurMoney: ', ns.formatNumber(ns.getServerMoneyAvailable(server), 3));\\n        ns.tprint('MinHackLevel: ', ns.formatNumber(ns.getServerRequiredHackingLevel(server), 3));\\n        ns.tprint('-------');\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2stc2VydmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jaGVjay1zZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV4RCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLE9BQU8sR0FBYSxNQUFNLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwRCxLQUFLLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUMxQixFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JCLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzlCLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzVELEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3pELEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRixFQUFFLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUYsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN0QjtBQUNILENBQUMifQ==\",\"filename\":\"check-servers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/a557da9c-3e1d-4dd4-9599-25557dbfd9b4\",\"moduleSequenceNumber\":37858},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/b779e2ff-3d3b-45bd-943b-d0d47ffc83f2\",\"moduleSequenceNumber\":37857},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/5105e2ce-5df5-490f-a402-2c1ea5f1adee\",\"moduleSequenceNumber\":37888},{\"filename\":\"check-servers.js\",\"url\":\"blob:https://danielyxie.github.io/d67ce477-cc92-4c8c-b18d-d0ddfa6556c9\",\"moduleSequenceNumber\":38618}],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/eb576b6d-2f3e-4dd7-a707-977ca883d2ca\",\"moduleSequenceNumber\":38234}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { BEGINNER_MANAGER_NAME, SCAN_SCRIPT_NAME } from 'const/scripts';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.exec(SCAN_SCRIPT_NAME, 'home', 1);\\n    ns.spawn(BEGINNER_MANAGER_NAME, 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItc3RhcnR1cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1zdGFydHVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyQyxFQUFFLENBQUMsS0FBSyxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3JDLENBQUMifQ==\",\"filename\":\"beginner-startup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/99bcf9c8-322f-403e-83cc-e800b9374b70\",\"moduleSequenceNumber\":37912},{\"filename\":\"beginner-startup.js\",\"url\":\"blob:https://danielyxie.github.io/97fa9a3f-e39e-4681-97ef-7543b8158f0e\",\"moduleSequenceNumber\":38232}],\"dependents\":[],\"ramUsage\":4.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVER_NAME_PREFIX } from 'const/servers';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = ns.getPurchasedServers().filter((el) => el.startsWith(SERVER_NAME_PREFIX));\\n    for (const server of servers) {\\n        ns.killall(server);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2lsbC1zZXJ2ZXJzLXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9raWxsLXNlcnZlcnMtc2NyaXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQzNGLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzVCLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"kill-servers-script.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/68f25ccb-1a07-455b-b4d8-f6bc5d6321ef\",\"moduleSequenceNumber\":38427},{\"filename\":\"kill-servers-script.js\",\"url\":\"blob:https://danielyxie.github.io/31b2cd99-2114-46b4-928e-83e07125571e\",\"moduleSequenceNumber\":64263}],\"dependents\":[],\"ramUsage\":4.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_FREE_RAM_TO_KEEP } from 'const/servers';\\nexport class ServerData {\\n    ns;\\n    name;\\n    freeRam;\\n    maxRam;\\n    cores = 1;\\n    constructor(ns, name) {\\n        this.ns = ns;\\n        this.name = name;\\n        const nsServer = ns.getServer(name);\\n        this.maxRam = nsServer.maxRam;\\n        this.freeRam = this.maxRam - this.ns.getServerUsedRam(name);\\n        this.cores = nsServer.cpuCores;\\n    }\\n    calcolaThreadRunnabili(costoScript) {\\n        return this.freeRam > 0 ? Math.floor(this.freeRam / costoScript) : 0;\\n    }\\n    aggiornaServer() {\\n        this.maxRam = this.ns.getServerMaxRam(this.name);\\n        if (this.name == 'home')\\n            this.freeRam = this.maxRam - this.ns.getServerUsedRam(this.name) - HOME_FREE_RAM_TO_KEEP;\\n        else\\n            this.freeRam = this.maxRam - this.ns.getServerUsedRam(this.name);\\n    }\\n    getMaxRam() {\\n        if (this.name == 'home')\\n            return this.maxRam - HOME_FREE_RAM_TO_KEEP;\\n        return this.maxRam;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvc2VydmVyLWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRELE1BQU0sT0FBTyxVQUFVO0lBQ3JCLEVBQUUsQ0FBSztJQUNQLElBQUksQ0FBUztJQUNiLE9BQU8sQ0FBUztJQUNoQixNQUFNLENBQVM7SUFDZixLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBRVYsWUFBWSxFQUFNLEVBQUUsSUFBWTtRQUM5QixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLE1BQU0sUUFBUSxHQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUNqQyxDQUFDO0lBRUQsc0JBQXNCLENBQUMsV0FBbUI7UUFDeEMsT0FBTyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELGNBQWM7UUFDWixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksTUFBTTtZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxxQkFBcUIsQ0FBQzs7WUFDN0csSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLE1BQU07WUFBRSxPQUFPLElBQUksQ0FBQyxNQUFNLEdBQUcscUJBQXFCLENBQUM7UUFDcEUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7Q0FDRiJ9\",\"filename\":\"/utils/server-data.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVER_NAME_PREFIX } from 'const/servers';\\nexport class ScanResult {\\n    ns;\\n    allServers = [];\\n    hackable = [];\\n    constructor(ns) {\\n        this.ns = ns;\\n        this.scanAndCheckNetwork();\\n    }\\n    scanAndCheckNetwork() {\\n        const device = 'home';\\n        this.scan(device);\\n    }\\n    scan(device, depth = 1, maxDepth = Infinity) {\\n        if (depth > maxDepth)\\n            return {};\\n        const scanTargets = this.ns.scan(device);\\n        const localTargets = [];\\n        scanTargets.forEach((newDevice) => {\\n            const alreadyThere = this.allServers.includes(newDevice);\\n            const canHack = this.nukeServer(this.ns, newDevice, this.ns.getHostname());\\n            const isMine = newDevice === 'home' || newDevice.startsWith(SERVER_NAME_PREFIX);\\n            const profitable = this.ns.getServerMaxMoney(newDevice) > 0;\\n            if (!alreadyThere && !isMine) {\\n                localTargets.push(newDevice);\\n                this.allServers.push(newDevice);\\n                if (canHack && profitable)\\n                    this.hackable.push(newDevice);\\n            }\\n        });\\n        for (const target of localTargets) {\\n            this.scan(target, depth + 1);\\n        }\\n        return;\\n    }\\n    nukeServer(ns, target, runningHost) {\\n        if (ns.hasRootAccess(target))\\n            return true;\\n        const reqHackLevel = ns.getServerRequiredHackingLevel(target);\\n        const myHackLevel = ns.getHackingLevel();\\n        if (reqHackLevel > myHackLevel)\\n            return false;\\n        const portRequired = ns.getServerNumPortsRequired(target);\\n        const cracks = [];\\n        if (ns.fileExists('brutessh.exe', runningHost)) {\\n            cracks.push(ns.brutessh);\\n        }\\n        if (ns.fileExists('ftpcrack.exe', runningHost)) {\\n            cracks.push(ns.ftpcrack);\\n        }\\n        if (ns.fileExists('httpworm.exe', runningHost)) {\\n            cracks.push(ns.httpworm);\\n        }\\n        if (ns.fileExists('relaysmtp.exe', runningHost)) {\\n            cracks.push(ns.relaysmtp);\\n        }\\n        if (ns.fileExists('sqlinject.exe', runningHost)) {\\n            cracks.push(ns.sqlinject);\\n        }\\n        if (portRequired > cracks.length) {\\n            return false;\\n        }\\n        for (const crack of cracks)\\n            crack(target);\\n        // Get root access to target server\\n        ns.nuke(target);\\n        return true;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbi1yZXN1bHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2Nhbi1hbmQtbnVrZS9zY2FuLXJlc3VsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsTUFBTSxPQUFPLFVBQVU7SUFDckIsRUFBRSxDQUFLO0lBQ1AsVUFBVSxHQUFhLEVBQUUsQ0FBQztJQUMxQixRQUFRLEdBQWEsRUFBRSxDQUFDO0lBRXhCLFlBQVksRUFBTTtRQUNoQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxtQkFBbUI7UUFDakIsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVPLElBQUksQ0FBQyxNQUFjLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsUUFBUTtRQUN6RCxJQUFJLEtBQUssR0FBRyxRQUFRO1lBQUUsT0FBTyxFQUFFLENBQUM7UUFDaEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekMsTUFBTSxZQUFZLEdBQWEsRUFBRSxDQUFDO1FBQ2xDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUNoQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztZQUMzRSxNQUFNLE1BQU0sR0FBRyxTQUFT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\",\"filename\":\"/scan-and-nuke/scan-result.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ALL_SERVERS_FILENAME, SERVERS_DETAIL_FILENAME, SERVERS_FILENAME } from 'const/files';\\nimport { FileHandler } from 'files/filehandler';\\nimport { ScanResult } from 'scan-and-nuke/scan-result';\\nimport { HwgOpsCalulator } from 'utils/hwg-ops-calulator';\\nimport { HwgwServerInfo } from 'utils/hwgw-server-info';\\nimport { ServerInfo } from 'utils/server-info';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    let lastScanRun = Date.now();\\n    let scanResult = await scan(ns);\\n    while (true) {\\n        ns.disableLog('ALL');\\n        if (Date.now() - lastScanRun > 60000) {\\n            scanResult = await scan(ns);\\n            lastScanRun = Date.now();\\n        }\\n        await getStats(ns, scanResult.hackable);\\n        await ns.sleep(5000);\\n    }\\n}\\nasync function scan(ns) {\\n    const scanResult = new ScanResult(ns);\\n    await new FileHandler(ns, SERVERS_FILENAME).write(scanResult.hackable, 'w');\\n    await new FileHandler(ns, ALL_SERVERS_FILENAME).write(scanResult.allServers, 'w');\\n    return scanResult;\\n}\\nasync function getStats(ns, targets) {\\n    let serverInfo = [];\\n    for (const target of targets) {\\n        const minSecurity = ns.getServerMinSecurityLevel(target);\\n        const maxMoney = ns.getServerMaxMoney(target);\\n        const serverMoney = ns.getServerMoneyAvailable(target);\\n        const serverSecurity = ns.getServerSecurityLevel(target);\\n        const hackReq = ns.getServerRequiredHackingLevel(target);\\n        const infoObj = new ServerInfo();\\n        infoObj.name = target;\\n        infoObj.minSecurity = minSecurity;\\n        infoObj.maxMoney = maxMoney;\\n        infoObj.minHackLevel = hackReq;\\n        infoObj.currHackLevel = ns.getHackingLevel();\\n        const tempInfo = new HwgwServerInfo(ns, infoObj);\\n        const calc = new HwgOpsCalulator(ns, tempInfo);\\n        infoObj.hackXp = calc.calcolaHackXp();\\n        const weakent = calc.calcolaWeakTime();\\n        const hackA = calc.calcolaHackPerc();\\n        const hackChance = calc.calcolaHackChance();\\n        infoObj.weakenTm = weakent;\\n        infoObj.hackChance = hackChance;\\n        infoObj.hackValue = hackA;\\n        infoObj.prepped = serverSecurity == minSecurity && serverMoney == maxMoney;\\n        infoObj.calcolaScore();\\n        serverInfo = [...serverInfo, infoObj];\\n    }\\n    const handler = new FileHandler(ns, SERVERS_DETAIL_FILENAME);\\n    await handler.write(serverInfo, 'w');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbi1hbmQtdXBkYXRlLWZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2Nhbi1hbmQtbnVrZS9zY2FuLWFuZC11cGRhdGUtZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsdUJBQXVCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDOUYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUUvQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDN0IsSUFBSSxVQUFVLEdBQWUsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUMsT0FBTyxJQUFJLEVBQUU7UUFDWCxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFdBQVcsR0FBRyxLQUFLLEVBQUU7WUFDcEMsVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzVCLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDMUI7UUFDRCxNQUFNLFFBQVEsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QjtBQUNI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\",\"filename\":\"/scan-and-nuke/scan-and-update-file.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/server-info.js\",\"url\":\"blob:http://bitburner.local/5deb164f-a843-4247-9d3a-b10c7ca35f11\",\"moduleSequenceNumber\":2484},{\"filename\":\"/utils/hwgw-server-info.js\",\"url\":\"blob:http://bitburner.local/a2e57fd6-c7bd-467d-ada2-36a3ec648b6a\",\"moduleSequenceNumber\":2509},{\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"blob:http://bitburner.local/b4e87a89-3396-4ac2-b4ab-72610e4c9e12\",\"moduleSequenceNumber\":2503},{\"filename\":\"/const/servers.js\",\"url\":\"blob:http://bitburner.local/dbaeb3c1-768d-49fe-a639-4c8457104463\",\"moduleSequenceNumber\":2521},{\"filename\":\"/scan-and-nuke/scan-result.js\",\"url\":\"blob:http://bitburner.local/003572bf-c63e-47eb-9b27-4460ce6f713b\",\"moduleSequenceNumber\":2494},{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:http://bitburner.local/fb8867cf-701c-47d9-be8f-4ed604094c3e\",\"moduleSequenceNumber\":2482},{\"filename\":\"/const/files.js\",\"url\":\"blob:http://bitburner.local/f7160a83-700b-469b-a387-9414b014ee51\",\"moduleSequenceNumber\":2481},{\"filename\":\"/scan-and-nuke/scan-and-update-file.js\",\"url\":\"blob:http://bitburner.local/03a3424a-c53a-4b7b-ac18-f43b5ee219f7\",\"moduleSequenceNumber\":2556}],\"dependents\":[],\"ramUsage\":9.5,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVER_WEAKEN_V2_SCRIPT_NAME } from 'const/scripts';\\nimport { XP_FARMER_SERVER_PREFIX } from 'const/servers';\\nimport { loadTargetNames } from 'utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    //const servers = ns.args;\\n    const targets = await loadTargetNames(ns);\\n    const ordinati = [/*'joesguns', 'foodnstuff',*/ 'n00dles'];\\n    while (true) {\\n        const servers = ns.getPurchasedServers().filter((el) => el != 'home' && el != XP_FARMER_SERVER_PREFIX);\\n        let i = 0;\\n        for (const server of servers) {\\n            checkAndStartBeginnerSingoloTarget(ns, server, ordinati[i]);\\n            i++;\\n            if (i >= ordinati.length)\\n                i = 0;\\n        }\\n        checkAndStartBeginnerHackHome(ns, ordinati[0]);\\n        checkAutoWeak(ns, targets);\\n        await ns.sleep(5000);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAutoWeak(ns, servers) {\\n    for (const server of servers) {\\n        checkAndStartAutoWeak(ns, server);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartAutoWeak(ns, server) {\\n    const scriptRam = ns.getScriptRam(SERVER_WEAKEN_V2_SCRIPT_NAME);\\n    const serverRam = ns.getServerMaxRam(server);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    if (threads > 0) {\\n        if (!ns.isRunning(SERVER_WEAKEN_V2_SCRIPT_NAME, server, server, threads)) {\\n            ns.scp(SERVER_WEAKEN_V2_SCRIPT_NAME, server);\\n            ns.exec(SERVER_WEAKEN_V2_SCRIPT_NAME, server, threads, server, threads);\\n        }\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartBeginnerSingoloTarget(ns, host, target) {\\n    const scriptRam = ns.getScriptRam('beginner-hack.js');\\n    const serverUsedRam = ns.getServerUsedRam(host);\\n    const serverRam = ns.getServerMaxRam(host);\\n    const threads = Math.floor((serverRam - serverUsedRam) / scriptRam);\\n    if (!isNaN(threads) && threads > 0) {\\n        ns.exec('beginner-hack.js', host, threads, target, threads);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartBeginnerHackHome(ns, target) {\\n    const scriptRam = ns.getScriptRam('beginner-hack.js');\\n    const serverUsedRam = ns.getServerUsedRam('home');\\n    const serverRam = ns.getServerMaxRam('home') - 4.5;\\n    const threads = Math.floor((serverRam - serverUsedRam) / scriptRam);\\n    if (!isNaN(threads) && threads > 0) {\\n        ns.exec('beginner-hack.js', 'home', threads, target, threads);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYW5hZ2Vycy9iZWdpbm5lci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXRELHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsMEJBQTBCO0lBQzFCLE1BQU0sT0FBTyxHQUFhLE1BQU0sZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sUUFBUSxHQUFHLENBQUMsNkJBQTZCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0QsT0FBTyxJQUFJLEVBQUU7UUFDWCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxNQUFNLElBQUksRUFBRSxJQUFJLHVCQUF1QixDQUFDLENBQUM7UUFDdkcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDNUIsa0NBQWtDLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1RCxDQUFDLEVBQUUsQ0FBQztZQUNKLElBQUksQ0FBQyxJQUFJLFFBQVEsQ0FBQyxNQUFNO2dCQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDakM7UUFDRCw2QkFBNkIsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENB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\",\"filename\":\"/managers/beginner-manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/dc8e49a4-9fbc-4b3d-a680-aec0e84c65d5\",\"moduleSequenceNumber\":37858},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/6c62607a-fd6d-425d-a767-9c05c44faf48\",\"moduleSequenceNumber\":37857},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/ef9156b4-9f2b-4e53-8802-ac994a88f49c\",\"moduleSequenceNumber\":37888},{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/d8d16046-aae5-4077-8032-ae372c88e94d\",\"moduleSequenceNumber\":38427},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/116705fa-c6c2-4d75-b004-1b06c4959eb1\",\"moduleSequenceNumber\":37912},{\"filename\":\"/managers/beginner-manager.js\",\"url\":\"blob:https://danielyxie.github.io/520c2ca4-ed48-4bad-a746-963b23d599dd\",\"moduleSequenceNumber\":65851}],\"dependents\":[],\"ramUsage\":6.05,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1205a356-f9d7-4ecf-a94b-d32a39d4304a\",\"moduleSequenceNumber\":2524},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/af4974e9-71ca-40cd-b7d8-1e127ad60c41\",\"moduleSequenceNumber\":2526},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a5861f87-ce47-4093-96c5-f8cffbbc65ae\",\"moduleSequenceNumber\":2603}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/49f53861-55f3-4f01-a3bb-86d23a42375f\",\"moduleSequenceNumber\":2524},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/12d993dd-5e22-42f8-b22a-aa17d51e4ab6\",\"moduleSequenceNumber\":2526},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6e124644-86d9-4a0b-bbca-e91b87ee782e\",\"moduleSequenceNumber\":2604}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SCRIPT_DELAY } from 'const/hwgw';\\nimport { HwgwServerBatch } from 'hwgw/hwgw-server-batch';\\nexport class HwgwBatch {\\n    target;\\n    tempoHack;\\n    tempoWeak;\\n    tempoGrow;\\n    endTime = -1;\\n    running = false;\\n    constructor(target, tempoHack, tempoWeak, tempoGrow) {\\n        this.target = target;\\n        this.tempoGrow = tempoGrow;\\n        this.tempoHack = tempoHack;\\n        this.tempoWeak = tempoWeak;\\n    }\\n    creaServerBatch(ns, server, target, calc, iteration = 0, scriptDelay = SCRIPT_DELAY) {\\n        return new HwgwServerBatch(this.tempoHack, this.tempoWeak, this.tempoGrow, server, ns, target, calc, iteration, scriptDelay);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1iYXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctYmF0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFLekQsTUFBTSxPQUFPLFNBQVM7SUFDcEIsTUFBTSxDQUFTO0lBQ2YsU0FBUyxDQUFTO0lBQ2xCLFNBQVMsQ0FBUztJQUNsQixTQUFTLENBQVM7SUFDbEIsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2IsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUVoQixZQUFZLE1BQWMsRUFBRSxTQUFpQixFQUFFLFNBQWlCLEVBQUUsU0FBaUI7UUFDakYsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVELGVBQWUsQ0FDYixFQUFNLEVBQ04sTUFBa0IsRUFDbEIsTUFBc0IsRUFDdEIsSUFBcUIsRUFDckIsU0FBUyxHQUFHLENBQUMsRUFDYixXQUFXLEdBQUcsWUFBWTtRQUUxQixPQUFPLElBQUksZUFBZSxDQUN4QixJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFNBQVMsRUFDZCxNQUFNLEVBQ04sRUFBRSxFQUNGLE1BQU0sRUFDTixJQUFJLEVBQ0osU0FBUyxFQUNULFdBQVcsQ0FDWixDQUFDO0lBQ0osQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-batch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c2c3531f-c3d1-421d-9d66-d9edc39c8cf5\",\"moduleSequenceNumber\":2524},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/3fbb6e40-314b-47d3-aef5-81408092524e\",\"moduleSequenceNumber\":2526},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9c24c79b-8122-45c6-9b9b-e0244e8937d6\",\"moduleSequenceNumber\":2602}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { EMPTY_PORT_DATA, HWGW_PORTS, HWGW_PREP_PORTS } from 'const/ports';\\nimport { SERVER_WEAKEN_V2_SCRIPT_NAME } from 'const/scripts';\\nimport { HwgwBatch } from 'hwgw/hwgw-batch';\\nimport { HwgwScorer } from 'hwgw/hwgw-scorer';\\nimport { HwgwServerManager } from 'hwgw/hwgw-server-manager';\\nimport { WgwBatch } from 'hwgw/wgw-batch';\\nimport { HwgOpsCalulator } from 'utils/hwg-ops-calulator';\\nimport { HwgwServerInfo } from 'utils/hwgw-server-info';\\nimport { loadTargetInfo } from 'utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('getServerUsedRam');\\n    ns.disableLog('getServerMaxRam');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('getServerSecurityLevel');\\n    ns.disableLog('getServerMinSecurityLevel');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('getServerMaxMoney');\\n    ns.disableLog('getHackingLevel');\\n    ns.disableLog('exec');\\n    ns.disableLog('sleep');\\n    let batches = [];\\n    let preppin = [];\\n    for (const port of HWGW_PORTS) {\\n        ns.clearPort(port);\\n    }\\n    for (const port of HWGW_PREP_PORTS) {\\n        ns.clearPort(port);\\n    }\\n    while (true) {\\n        const serverManager = new HwgwServerManager(ns);\\n        preppin = checkPreppinPort(ns, preppin);\\n        checkBatchingPorts(ns, batches);\\n        const serverInfo = (await loadTargetInfo(ns)).map((el) => new HwgwServerInfo(ns, el));\\n        checkAutoWeak(ns, serverInfo.map((el) => el.name));\\n        const scorer = serverInfo\\n            .filter((el) => el.hackChance >= 0.999)\\n            .map((el) => new HwgwScorer(ns, el, serverManager.servers.slice().concat(serverManager.homeServer)));\\n        serverInfo.forEach((el) => {\\n            const score = scorer.find((sc) => sc.target === el.name);\\n            el.newHwgwScore = score ? score.score : -1;\\n        });\\n        const toPrep = serverInfo\\n            .filter((el) => !el.prepped &&\\n            (!batches.filter((bel) => bel.target === el.name) || !batches.find((bel) => bel.target === el.name)?.running))\\n            .sort(function (a, b) {\\n            return b.hwgwScore - a.hwgwScore;\\n        });\\n        const toBatch = serverInfo\\n            .filter((el) => el.prepped)\\n            .sort(function (a, b) {\\n            return b.newHwgwScore - a.newHwgwScore;\\n        });\\n        await prepServers(ns, toPrep, preppin, serverManager);\\n        batches = await batch(ns, toBatch, batches, serverManager);\\n        if (batches.length > 0) {\\n            const wait = Math.max(1, batches.sort((a, b) => a.endTime - b.endTime)[0].endTime - Date.now() + 5);\\n            await ns.sleep(wait);\\n        }\\n        else {\\n            await ns.sleep(2000);\\n        }\\n    }\\n}\\n// -----------------------------------------------------\\n// -------------- PORT CHECKING START ------------------\\n// -----------------------------------------------------\\nfunction checkBatchingPorts(ns, batches) {\\n    if (batches.length <= 0)\\n        return;\\n    for (const port of HWGW_PORTS) {\\n        let portValue = ns.readPort(port);\\n        while (portValue !== EMPTY_PORT_DATA) {\\n            const batch = batches.find((el) => el.target === portValue);\\n            if (batch != undefined) {\\n                batch.running = false;\\n            }\\n            portValue = ns.readPort(port);\\n        }\\n    }\\n}\\nfunction checkPreppinPort(ns, preppin) {\\n    if (preppin.length <= 0)\\n        return preppin;\\n    for (const port of HWGW_PREP_PORTS) {\\n        let portValue = ns.readPort(port);\\n        while (portValue !== EMPTY_PORT_DATA) {\\n            preppin = preppin.filter((el) => el != portValue);\\n            portValue = ns.readPort(port);\\n        }\\n    }\\n    return preppin;\\n}\\n// -----------------------------------------------------\\n// -------------- PORT CHECKING END ------------------\\n// ------------------------------------------------------\\n// ---------------------------------------------------------\\n// -------------- BATCHING FUNCTION START ------------------\\n// ---------------------------------------------------------\\nasync function batch(ns, toBatch, batches, serverManager) {\\n    let portSeed = 1;\\n    for (const target of toBatch) {\\n        let batch = batches.find((el) => el.target === target.name);\\n        if (batch == undefined || !batch.running) {\\n            const calc = new HwgOpsCalulator(ns, target);\\n            batch = creaBatch(target.name, calc);\\n            const index = batches.map((el) => el.target).indexOf(batch.target);\\n            batch.running = await serverManager.avviaHwgwBatch(target, batch, calc, new Date().getTime(), portSeed);\\n            if (index >= 0) {\\n                batches[index] = batch;\\n            }\\n            else\\n                batches.push(batch);\\n            if (portSeed > 4)\\n                portSeed = 1;\\n            else\\n                portSeed++;\\n        }\\n    }\\n    return batches;\\n}\\nfunction creaBatch(target, calc) {\\n    const weakTime = calc.calcolaWeakTime();\\n    const hackTime = calc.calcolaHackTime(weakTime);\\n    const growTime = calc.calcolaGrowTime(hackTime);\\n    return new HwgwBatch(target, hackTime, weakTime, growTime);\\n}\\n// -------------------------------------------------------\\n// -------------- BATCHING FUNCTION END ------------------\\n// -------------------------------------------------------\\n// --------------------------------------------------------\\n// -------------- PREPPIN FUNCTION START ------------------\\n// --------------------------------------------------------\\nasync function prepServers(ns, toPrep, preppin, serverMgr) {\\n    let portSeed = 1;\\n    let prepStarted = false;\\n    for (const daPreparare of toPrep) {\\n        if (preppin.includes(daPreparare.name))\\n            continue;\\n        serverMgr.aggiornaUtilizzo();\\n        if (!serverMgr.serverLiberi())\\n            return;\\n        const calc = new HwgOpsCalulator(ns, daPreparare);\\n        const weakTime = calc.calcolaWeakTime();\\n        const growTime = calc.calcolaGrowTime(calc.calcolaHackTime(weakTime));\\n        const batch = new WgwBatch(portSeed, weakTime, growTime);\\n        batch.calcolaWgwThreads(ns, daPreparare, calc);\\n        const ramNecessaria = batch.getNeededRam();\\n        if (!serverMgr.canRun(ramNecessaria)) {\\n            continue;\\n        }\\n        prepStarted = true;\\n        serverMgr.avviaWgwBatch(daPreparare.name, batch);\\n        preppin.push(daPreparare.name);\\n        if (portSeed > 4)\\n            portSeed = 1;\\n        else\\n            portSeed++;\\n    }\\n    // wait a moment to let the prep start and have correct ram info on batching\\n    if (prepStarted)\\n        await ns.sleep(500);\\n}\\n// ------------------------------------------------------\\n// -------------- PREPPIN FUNCTION END ------------------\\n// ------------------------------------------------------\\n// ---------------------------------------------------------\\n// -------------- AUTOWEAK FUNCTION START ------------------\\n// ---------------------------------------------------------\\nfunction checkAutoWeak(ns, servers) {\\n    for (const server of servers) {\\n        checkAndStartAutoWeak(ns, server);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartAutoWeak(ns, server) {\\n    const scriptRam = ns.getScriptRam(SERVER_WEAKEN_V2_SCRIPT_NAME);\\n    const serverRam = ns.getServerMaxRam(server);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    if (threads > 0) {\\n        if (!ns.isRunning(SERVER_WEAKEN_V2_SCRIPT_NAME, server, server, threads)) {\\n            ns.scp(SERVER_WEAKEN_V2_SCRIPT_NAME, server);\\n            ns.exec(SERVER_WEAKEN_V2_SCRIPT_NAME, server, threads, server, threads);\\n        }\\n    }\\n}\\n// -------------------------------------------------------\\n// -------------- AUTOWEAK FUNCTION END ------------------\\n// -------------------------------------------------------\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hbmFnZXJzL2h3Z3ctbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0UsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFeEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXJELHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNsQyxFQUFFLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDakMsRUFBRSxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ3pDLEVBQUUsQ0FBQyxVQUFVLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUN4QyxFQUFFLENBQUMsVUFBVSxDQUFDLDJCQUEyQixDQUFDLENBQUM7SUFDM0MsRUFBRSxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ3pDLEVBQUUsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNuQyxFQUFFLENB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\",\"filename\":\"/managers/hwgw-manager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:http://bitburner.local/16cb849c-f249-4062-a1fa-9c5a088c4e2e\",\"moduleSequenceNumber\":2482},{\"filename\":\"/const/files.js\",\"url\":\"blob:http://bitburner.local/513191d0-b595-468d-a97b-a7e7c2e7c134\",\"moduleSequenceNumber\":2481},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:http://bitburner.local/19cca1c1-1f5e-4da2-ac6e-4623ca020c1e\",\"moduleSequenceNumber\":2502},{\"filename\":\"/utils/hwgw-server-info.js\",\"url\":\"blob:http://bitburner.local/8a389fd3-2e74-4692-a02b-119754ff1b99\",\"moduleSequenceNumber\":2509},{\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"blob:http://bitburner.local/7736fc34-fae6-45a1-901f-4df4759205e6\",\"moduleSequenceNumber\":2503},{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/b67dc9c8-9203-4ad1-a287-180183053d26\",\"moduleSequenceNumber\":2524},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:http://bitburner.local/21c36ffe-9ce0-4c46-9dae-c0fee81d5d6f\",\"moduleSequenceNumber\":2523},{\"filename\":\"/hwgw/wgw-batch.js\",\"url\":\"blob:http://bitburner.local/9b4c7960-aa0c-4a40-8b25-c02820980c81\",\"moduleSequenceNumber\":2513},{\"filename\":\"/const/servers.js\",\"url\":\"blob:http://bitburner.local/174d56f3-51fa-4620-bcec-bdb064f4506d\",\"moduleSequenceNumber\":2521},{\"filename\":\"/utils/server-data.js\",\"url\":\"blob:http://bitburner.local/b6ad9e4f-95ee-4ce7-81f0-15928dd0bac5\",\"moduleSequenceNumber\":2493},{\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"blob:http://bitburner.local/5a28098d-dcad-478c-9a15-52639912674c\",\"moduleSequenceNumber\":2525},{\"filename\":\"/const/servers.js\",\"url\":\"blob:http://bitburner.local/e394f16c-ecea-4d39-a316-7da93fdb1c36\",\"moduleSequenceNumber\":2521},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:http://bitburner.local/1ce4b0fb-616e-4054-8ab5-99de511a6024\",\"moduleSequenceNumber\":2522},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:http://bitburner.local/91939881-c2b8-418b-b049-0859fc4bb60d\",\"moduleSequenceNumber\":2523},{\"filename\":\"/hwgw/hwgw-server-manager.js\",\"url\":\"blob:http://bitburner.local/2b99a993-951b-431b-ba0a-f8c15e4c7f90\",\"moduleSequenceNumber\":2514},{\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"blob:http://bitburner.local/7e478088-16ea-4d56-a3d6-53dcd39db871\",\"moduleSequenceNumber\":2503},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:http://bitburner.local/8a2bef54-b4b7-4e72-8668-690aac85a98a\",\"moduleSequenceNumber\":2523},{\"filename\":\"/hwgw/hwgw-batch-scorer.js\",\"url\":\"blob:http://bitburner.local/c6ab0894-cae3-4837-bc25-15775004d4c8\",\"moduleSequenceNumber\":2553},{\"filename\":\"/hwgw/hwgw-scorer.js\",\"url\":\"blob:http://bitburner.local/d4834087-9f91-402c-81ff-479fd6c413e1\",\"moduleSequenceNumber\":2554},{\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"blob:http://bitburner.local/b8e32756-1b42-4c13-9e14-27c754ef35ef\",\"moduleSequenceNumber\":2525},{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9ae977dd-ce1f-4c84-84ed-fd8e6c3b801f\",\"moduleSequenceNumber\":2524},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:http://bitburner.local/1d3e2dc6-243e-41f1-8e37-7b149ec5be6d\",\"moduleSequenceNumber\":2523},{\"filename\":\"/hwgw/hwgw-server-batch.js\",\"url\":\"blob:http://bitburner.local/b25be8f8-2a08-4b11-9b37-d598be4d9ee9\",\"moduleSequenceNumber\":2515},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:http://bitburner.local/a16286be-1003-48aa-a42e-2d436b939c1e\",\"moduleSequenceNumber\":2523},{\"filename\":\"/hwgw/hwgw-batch.js\",\"url\":\"blob:http://bitburner.local/90001508-eceb-4b72-9bd8-630144aea793\",\"moduleSequenceNumber\":2499},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:http://bitburner.local/bdc49c93-4269-4fb1-813d-ef08303a6141\",\"moduleSequenceNumber\":2522},{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/71610f80-728b-4d2d-ac64-066052eb2249\",\"moduleSequenceNumber\":2524},{\"filename\":\"/managers/hwgw-manager.js\",\"url\":\"blob:http://bitburner.local/96251319-cbd0-4c72-a6ae-c0482d907168\",\"moduleSequenceNumber\":2559}],\"dependents\":[],\"ramUsage\":13.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ALL_SERVERS_FILENAME, SERVERS_DETAIL_FILENAME, SERVERS_FILENAME } from 'const/files';\\nimport { FileHandler } from 'files/filehandler';\\nexport async function loadTargetNames(ns) {\\n    return (await new FileHandler(ns, SERVERS_FILENAME).read());\\n}\\nexport async function loadTargetInfo(ns) {\\n    return await new FileHandler(ns, SERVERS_DETAIL_FILENAME).read();\\n}\\nexport async function loadAllTargets(ns) {\\n    return await new FileHandler(ns, ALL_SERVERS_FILENAME).read();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFyZ2V0LWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy90YXJnZXQtbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSx1QkFBdUIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5RixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHaEQsTUFBTSxDQUFDLEtBQUssVUFBVSxlQUFlLENBQUMsRUFBTTtJQUMxQyxPQUFPLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBYSxDQUFDO0FBQzFFLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGNBQWMsQ0FBQyxFQUFNO0lBQ3pDLE9BQU8sTUFBTSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsdUJBQXVCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuRSxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxjQUFjLENBQUMsRUFBTTtJQUN6QyxPQUFPLE1BQU0sSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLG9CQUFvQixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDaEUsQ0FBQyJ9\",\"filename\":\"/utils/target-loader.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgOpsCalulator {\\n    ns;\\n    target;\\n    targetServer;\\n    hasFormulas = false;\\n    constructor(ns, target) {\\n        this.ns = ns;\\n        this.target = target;\\n        this.targetServer = ns.getServer(this.target.name);\\n        this.hasFormulas = ns.fileExists('formulas.exe', 'home');\\n    }\\n    calcolaGrowThreads(startingMoney, cores = 1) {\\n        const threads = this.growtThreadsInternal(startingMoney, cores);\\n        return Math.max(1, Math.ceil(threads));\\n    }\\n    calcolaGrowTime(hackTime) {\\n        // NS Function calc, opted for hardcoded until i decide to rework the formulas management\\n        // let time: number;\\n        // if (this.hasFormulas) {\\n        //   time = this.ns.formulas.hacking.growTime(this.targetServer, this.ns.getPlayer());\\n        // } else {\\n        //   time = this.ns.getGrowTime(this.target.name);\\n        // }\\n        return Math.max(1, Math.ceil(hackTime * 3.2));\\n    }\\n    calcolaWeakThread(cores = 1) {\\n        const currentSec = this.target.currentSec;\\n        const secWeak = this.ns.weakenAnalyze(1, cores);\\n        const rate = (currentSec - this.target.minSecurity) / secWeak;\\n        return Math.max(1, Math.ceil(rate));\\n    }\\n    calcolaWeakTime() {\\n        let time;\\n        if (this.hasFormulas) {\\n            time = this.ns.formulas.hacking.weakenTime(this.targetServer, this.ns.getPlayer());\\n        }\\n        else {\\n            time = this.ns.getWeakenTime(this.target.name);\\n        }\\n        return Math.max(1, Math.ceil(time));\\n    }\\n    calcolaHackThread(percentage = 0.9) {\\n        const maxMoney = this.target.maxMoney;\\n        const moneyPerThread = (this.hasFormulas\\n            ? this.ns.formulas.hacking.hackPercent(this.targetServer, this.ns.getPlayer())\\n            : this.ns.hackAnalyze(this.target.name)) * maxMoney;\\n        const minWanted = maxMoney * percentage;\\n        const rate = minWanted / moneyPerThread;\\n        const threads = Math.max(1, Math.floor(rate));\\n        return threads;\\n    }\\n    calcolaHackTime(weakTime) {\\n        // NS Function calc, opted for hardcoded until i decide to rework the formulas management\\n        // let time;\\n        // if (this.hasFormulas) {\\n        //   time = this.ns.formulas.hacking.hackTime(this.targetServer, this.ns.getPlayer());\\n        // } else {\\n        //   time = this.ns.getHackTime(this.target.name);\\n        // }\\n        return Math.max(1, Math.ceil(weakTime / 4));\\n    }\\n    growtThreadsInternal(startingMoney, cores = 1) {\\n        if (this.hasFormulas) {\\n            if (startingMoney)\\n                this.targetServer.moneyAvailable = startingMoney;\\n            return this.ns.formulas.hacking.growThreads(this.targetServer, this.ns.getPlayer(), this.target.maxMoney, cores);\\n        }\\n        else {\\n            const currentMoney = startingMoney ? startingMoney : this.target.currentMoney;\\n            const rate = this.target.maxMoney / (currentMoney > 0 ? currentMoney : 1);\\n            return this.ns.growthAnalyze(this.target.name, rate, cores);\\n        }\\n    }\\n    calcolaHackPerc() {\\n        if (this.hasFormulas) {\\n            return this.ns.formulas.hacking.hackPercent(this.targetServer, this.ns.getPlayer());\\n        }\\n        else {\\n            return this.ns.hackAnalyze(this.target.name);\\n        }\\n    }\\n    calcolaHackXp() {\\n        if (this.hasFormulas) {\\n            return this.ns.formulas.hacking.hackExp(this.targetServer, this.ns.getPlayer());\\n        }\\n        else {\\n            return -1;\\n        }\\n    }\\n    calcolaHackChance() {\\n        if (this.hasFormulas) {\\n            return this.ns.formulas.hacking.hackChance(this.targetServer, this.ns.getPlayer());\\n        }\\n        else {\\n            return this.ns.hackAnalyzeChance(this.target.name);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdnLW9wcy1jYWx1bGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvaHdnLW9wcy1jYWx1bGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLGVBQWU7SUFDMUIsRUFBRSxDQUFLO0lBQ1AsTUFBTSxDQUFpQjtJQUN2QixZQUFZLENBQVM7SUFDckIsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUNwQixZQUFZLEVBQU0sRUFBRSxNQUFzQjtRQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELGtCQUFrQixDQUFDLGFBQWlDLEVBQUUsS0FBSyxHQUFHLENBQUM7UUFDN0QsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoRSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsZUFBZSxDQUFDLFFBQWdCO1FBQzlCLHlGQUF5RjtRQUN6RixvQkFBb0I7UUFDcEIsMEJBQTBCO1FBQzFCLHNGQUFzRjtRQUN0RixXQUFXO1FBQ1gsa0RBQWtEO1FBQ2xELElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJ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\",\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    for (let i = 0; i < 17; i++) {\\n        calcolaTempiBatch(ns, 25000, 35246, 28765, i);\\n    }\\n    // testHackCalc(ns);\\n}\\nfunction calcolaTempiBatch(ns, tempoHack, tempoWeak, tempoGrow, iteration = 0, scritpDelay = 100) {\\n    const sleepWeakHack = scritpDelay * iteration * 4;\\n    const sleepHack = tempoWeak - tempoHack - scritpDelay + sleepWeakHack;\\n    const endHack = sleepHack + tempoHack;\\n    const endWeakHack = tempoWeak + sleepWeakHack;\\n    const sleepGrow = endWeakHack - tempoGrow + scritpDelay;\\n    const endGrow = sleepGrow + tempoGrow;\\n    const sleepWeakGrow = endGrow - tempoWeak + scritpDelay;\\n    const endWeakGrow = sleepWeakGrow + tempoWeak;\\n    ns.print('iterazione ' + iteration + ' end hack: ', endHack);\\n    ns.print('iterazione ' + iteration + ' end endWeakHack: ', endWeakHack);\\n    ns.print('iterazione ' + iteration + ' end endGrow: ', endGrow);\\n    ns.print('iterazione ' + iteration + ' end endWeakGrow: ', endWeakGrow);\\n    const sleepGrow2 = Math.max(1, Math.ceil(tempoWeak - tempoGrow)) + scritpDelay;\\n    const endGrow2 = sleepGrow + tempoGrow;\\n    const sleepWeakGrow2 = Math.max(1, Math.ceil(endGrow - tempoWeak)) + scritpDelay;\\n    const endWeakGrow2 = sleepWeakGrow2 + tempoWeak;\\n    // ns.print('end endWeak: ', tempoWeak);\\n    // ns.print('end endGrow2: ', endGrow2);\\n    // ns.print('end endWeakGrow2: ', endWeakGrow2);\\n}\\nfunction testHackCalc(ns) {\\n    const server = ns.getServer('joesguns');\\n    if (server.moneyMax) {\\n        const maxMoney = server.moneyMax;\\n        const moneyPerThread = 0.06 * maxMoney;\\n        const minWanted = maxMoney * 0.9;\\n        const rate = minWanted / moneyPerThread;\\n        const threads = Math.max(1, Math.floor(rate));\\n        const WEAKEN_PER_THREAD = ns.weakenAnalyze(1, 1);\\n        const HW_THREADS = ns.hackAnalyzeSecurity(1) / WEAKEN_PER_THREAD;\\n        const GW_THREADS = ns.growthAnalyzeSecurity(1, undefined, 1) / WEAKEN_PER_THREAD;\\n        const hackWeakThreads = Math.max(1, Math.ceil(HW_THREADS * threads));\\n        server.moneyAvailable = minWanted;\\n        const growThreads = ns.formulas.hacking.growThreads(server, ns.getPlayer(), server.moneyMax, 1);\\n        const growWeakThreads = Math.max(1, Math.ceil(GW_THREADS * growThreads));\\n        ns.print('max money: ', maxMoney);\\n        ns.print('hackthread ', threads);\\n        ns.print('hackWeakThreads ', hackWeakThreads);\\n        ns.print('growThreads ', growThreads);\\n        ns.print('growWeakThreads ', growWeakThreads);\\n        ns.print('GW_THREADS ', GW_THREADS);\\n        ns.print('HW_THREADS ', HW_THREADS);\\n        ns.print('WEAKEN_PER_THREAD ', WEAKEN_PER_THREAD);\\n        ns.print('ns.hackAnalyzeSecurity(1) ', ns.hackAnalyzeSecurity(1));\\n        ns.print(\\\"ns.growthAnalyzeSecurity(1, 'joesguns', 1) \\\", ns.growthAnalyzeSecurity(1, undefined, 1));\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy90ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDM0IsaUJBQWlCLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQy9DO0lBQ0Qsb0JBQW9CO0FBQ3RCLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUN4QixFQUFNLEVBQ04sU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsU0FBUyxHQUFHLENBQUMsRUFDYixXQUFXLEdBQUcsR0FBRztJQUVqQixNQUFNLGFBQWEsR0FBRyxXQUFXLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUVsRCxNQUFNLFNBQVMsR0FBRyxTQUFTLEdBQUcsU0FBUyxHQUFHLFdBQVcsR0FBRyxhQUFhLENBQUM7SUFDdEUsTUFBTSxPQUFPLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUV0QyxNQUFNLFdBQVcsR0FBRyxTQUFTLEdBQUcsYUFBYSxDQUFDO0lBRTlDLE1BQU0sU0FBUyxHQUFHLFdBQVcsR0FBRyxTQUFTLEdBQUcsV0FBVyxDQUFDO0lBQ3hELE1BQU0sT0FBTyxHQUFHLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFFdEMsTUFBTSxhQUFhLEdBQUcsT0FBTyxHQUFHLFNBQVMsR0FBRyxXQUFXLENBQUM7SUFDeEQsTUFBTSxXQUFXLEdBQUcsYUFBYSxHQUFHLFNBQVMsQ0FBQztJQUU5QyxFQUFFLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxTQUFTLEdBQUcsYUFBYSxFQUFF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\",\"filename\":\"/tests/test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/tests/test.js\",\"url\":\"blob:https://danielyxie.github.io/dafcf51c-d03f-4765-a987-2310b8f31ba9\",\"moduleSequenceNumber\":2254}],\"dependents\":[],\"ramUsage\":7.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WG_COST } from 'const/hwgw';\\nimport { XP_FARM_SCRIPT_NAME } from 'const/scripts';\\nimport { FARM_SERVER_GB, XP_FARMER_SERVER_PREFIX } from 'const/servers';\\nimport { loadTargetInfo } from 'utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    const servers = ns.getPurchasedServers().filter((el) => el.startsWith(XP_FARMER_SERVER_PREFIX));\\n    const targets = (await loadTargetInfo(ns)).sort(function (a, b) {\\n        return b.farmScore - a.farmScore;\\n    });\\n    let i = 0;\\n    for (let farmer of servers) {\\n        ns.exec(XP_FARM_SCRIPT_NAME, farmer, Math.floor(FARM_SERVER_GB / WG_COST), targets[0].name);\\n        i++;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pc2MveHAtZmFybWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXJELHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7SUFDaEcsTUFBTSxPQUFPLEdBQUksQ0FBQyxNQUFNLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztRQUM5RSxPQUFPLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNILElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLEtBQUssSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzFCLEVBQUUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1RixDQUFDLEVBQUUsQ0FBQztLQUNMO0FBQ0gsQ0FBQyJ9\",\"filename\":\"/misc/xp-farmer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/80df8ef5-82de-4adf-aa28-50f377fdaee4\",\"moduleSequenceNumber\":329},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/82bbf8b2-f42b-4035-90fe-3c50335d54e9\",\"moduleSequenceNumber\":328},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/330d1e88-a7e4-4d59-b09e-a12f962a03ec\",\"moduleSequenceNumber\":359},{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/99a088cc-6f50-4cfb-b574-f81f43ec6ccb\",\"moduleSequenceNumber\":382},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/0ce47af0-4937-4a49-9df2-1e6739ba2476\",\"moduleSequenceNumber\":384},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:https://danielyxie.github.io/38afb146-ac53-4396-bb54-1d8eb043c688\",\"moduleSequenceNumber\":385},{\"filename\":\"/misc/xp-farmer.js\",\"url\":\"blob:https://danielyxie.github.io/92106fcf-901b-411d-a945-ac51477f6df7\",\"moduleSequenceNumber\":652}],\"dependents\":[],\"ramUsage\":5.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HWGW_MANAGER_NAME, LOG_MANAGER, SCAN_SCRIPT_NAME } from 'const/scripts';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.exec(SCAN_SCRIPT_NAME, 'home', 1);\\n    ns.exec(LOG_MANAGER, 'home', 1);\\n    ns.spawn(HWGW_MANAGER_NAME, 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnR1cC1od2d3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3N0YXJ0dXAtaHdndy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpGLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNoQyxFQUFFLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLENBQUMifQ==\",\"filename\":\"startup-hwgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/scripts.js\",\"url\":\"blob:http://bitburner.local/1e5aaf0a-494d-40e4-bfab-dea1ee73a6f5\",\"moduleSequenceNumber\":2522},{\"filename\":\"startup-hwgw.js\",\"url\":\"blob:http://bitburner.local/bcab6a4f-aff5-4846-a325-15f202ff44e9\",\"moduleSequenceNumber\":2555}],\"dependents\":[],\"ramUsage\":4.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FARM_SERVER_GB, MAX_FARMER_SERVER_NUM, XP_FARMER_SERVER_PREFIX } from 'const/servers';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const purch = ns.getPurchasedServers().filter((el) => el.startsWith(XP_FARMER_SERVER_PREFIX));\\n    FARM_SERVER_GB;\\n    for (let server of purch) {\\n        const serverRam = ns.getServerMaxRam(server);\\n        if (serverRam != FARM_SERVER_GB) {\\n            //ns.tprint('dry run upgrade');\\n            ns.upgradePurchasedServer(server, FARM_SERVER_GB);\\n        }\\n    }\\n    for (let count = purch.length; count < MAX_FARMER_SERVER_NUM; count++) {\\n        //ns.tprint('dry run buy');\\n        ns.purchaseServer(XP_FARMER_SERVER_PREFIX + (count + 1), FARM_SERVER_GB);\\n    }\\n    ns.exec('/prep/prep-servers.js', 'home', 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFybS1zZXJ2ZXItYnV5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pc2MvZmFybS1zZXJ2ZXItYnV5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQUUscUJBQXFCLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0YscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztJQUM5RixjQUFjLENBQUM7SUFDZixLQUFLLElBQUksTUFBTSxJQUFJLEtBQUssRUFBRTtRQUN4QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLElBQUksU0FBUyxJQUFJLGNBQWMsRUFBRTtZQUMvQiwrQkFBK0I7WUFDL0IsRUFBRSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztTQUNuRDtLQUNGO0lBQ0QsS0FBSyxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssR0FBRyxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUNyRSwyQkFBMkI7UUFDM0IsRUFBRSxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQztLQUMxRTtJQUNELEVBQUUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlDLENBQUMifQ==\",\"filename\":\"/misc/farm-server-buy.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/4268cd75-6109-4677-83f2-ecaf6c9c971d\",\"moduleSequenceNumber\":1749},{\"filename\":\"/misc/farm-server-buy.js\",\"url\":\"blob:https://danielyxie.github.io/539e26a0-edfa-42ee-b08c-d4fbb9780923\",\"moduleSequenceNumber\":1756}],\"dependents\":[],\"ramUsage\":7.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"upgradePurchasedServer\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwServerInfo {\\n    name;\\n    minSecurity;\\n    maxMoney;\\n    hackChance;\\n    currentSec = 100;\\n    currentMoney = 0;\\n    prepped = false;\\n    score = -1;\\n    hwgwScore = -1;\\n    newHwgwScore = -1;\\n    constructor(ns, target) {\\n        this.name = target.name;\\n        this.minSecurity = target.minSecurity;\\n        this.maxMoney = target.maxMoney;\\n        this.score = target.score;\\n        this.hwgwScore = target.hwgwScore;\\n        this.hackChance = target.hackChance;\\n        this.ricalcolaVariabili(ns);\\n    }\\n    ricalcolaVariabili(ns) {\\n        this.currentSec = ns.getServerSecurityLevel(this.name);\\n        this.currentMoney = ns.getServerMoneyAvailable(this.name);\\n        this.prepped = this.currentSec == this.minSecurity && this.currentMoney == this.maxMoney;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1zZXJ2ZXItaW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9od2d3LXNlcnZlci1pbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLElBQUksQ0FBUztJQUNiLFdBQVcsQ0FBUztJQUNwQixRQUFRLENBQVM7SUFDakIsVUFBVSxDQUFTO0lBQ25CLFVBQVUsR0FBRyxHQUFHLENBQUM7SUFDakIsWUFBWSxHQUFHLENBQUMsQ0FBQztJQUNqQixPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ2hCLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNYLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNmLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNsQixZQUFZLEVBQU0sRUFBRSxNQUFrQjtRQUNwQyxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNoQyxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUNwQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELGtCQUFrQixDQUFDLEVBQU07UUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDM0YsQ0FBQztDQUNGIn0=\",\"filename\":\"/utils/hwgw-server-info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    ns.print('bitnodeN: ', ns.getPlayer().bitNodeN);\\n    ns.print('karma: ', ns.heart.break());\\n    ns.print('ppl killed: ', ns.getPlayer().numPeopleKilled);\\n    // ns.print('has corp: ', ns.corporation);\\n    // ns.print('corp: ', ns.corporation.getCorporation());\\n    // ns.print('corp warehouse: ', ns.corporation.getWarehouse('AllNatural I Swear ;)','Sector-12'));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGVzdHMvc3RhdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1YsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUN0QyxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDekQsMENBQTBDO0lBQzFDLHVEQUF1RDtJQUN2RCxrR0FBa0c7QUFDcEcsQ0FBQyJ9\",\"filename\":\"/tests/stats.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/tests/stats.js\",\"url\":\"blob:https://danielyxie.github.io/0d94b2b7-3e54-48b8-9fa9-b6c9448f1da8\",\"moduleSequenceNumber\":2255}],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    ns.print('bitnodeN: ', ns.getPlayer().bitNodeN);\\n    ns.print('karma: ', ns.heart.break());\\n    ns.print('ppl killed: ', ns.getPlayer().numPeopleKilled);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9taXNjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoRCxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDdEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzNELENBQUMifQ==\",\"filename\":\"/tests/misc.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVER_NAME_PREFIX, XP_FARMER_SERVER_PREFIX } from 'const/servers';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    for (let i = 10; i < 11; i++) {\\n        const xpNumber = i + 15;\\n        ns.renamePurchasedServer(SERVER_NAME_PREFIX + i, XP_FARMER_SERVER_PREFIX + xpNumber);\\n        // ns.renamePurchasedServer(XP_FARMER_SERVER_PREFIX + i, SERVER_NAME_PREFIX + xpNumber);\\n    }\\n    // ns.renamePurchasedServer(XP_FARMER_SERVER_PREFIX + \\\"-6\\\",XP_FARMER_SERVER_PREFIX + \\\"1\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFudWFsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9tYW51YWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1RSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFVixLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVCLE1BQU0sUUFBUSxHQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLGtCQUFrQixHQUFHLENBQUMsRUFBRSx1QkFBdUIsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUNyRix3RkFBd0Y7S0FDekY7SUFFRCwwRkFBMEY7QUFDNUYsQ0FBQyJ9\",\"filename\":\"/tests/manuale.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/d8e0bd79-9df1-4c45-a785-e2adaeccf43a\",\"moduleSequenceNumber\":3673},{\"filename\":\"/tests/manuale.js\",\"url\":\"blob:https://danielyxie.github.io/6f5e8573-b989-467e-a26d-e1dc227c6744\",\"moduleSequenceNumber\":3716}],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"renamePurchasedServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { BATCH_BUFFER, WG_COST } from 'const/hwgw';\\nimport { HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4 } from 'const/ports';\\nexport class WgwBatch {\\n    batchPort;\\n    growTime;\\n    weakTime;\\n    weakEndTime;\\n    growEndTime;\\n    weakGrowEndTime;\\n    weakThreads = 0;\\n    growThreads = 0;\\n    growWeakThreads = 0;\\n    constructor(portSeed, tempoWeak, tempoGrow, scriptDelay = 20) {\\n        if (portSeed % 4 == 0)\\n            this.batchPort = HWGW_PREP_PORT_4;\\n        if (portSeed % 3 == 0)\\n            this.batchPort = HWGW_PREP_PORT_3;\\n        if (portSeed % 2 == 0)\\n            this.batchPort = HWGW_PREP_PORT_2;\\n        else\\n            this.batchPort = HWGW_PREP_PORT_1;\\n        this.growTime = tempoGrow;\\n        this.weakTime = tempoWeak;\\n        const buffer = BATCH_BUFFER;\\n        this.weakEndTime = Date.now() + this.weakTime + scriptDelay + buffer;\\n        this.growEndTime = Date.now() + this.weakTime + scriptDelay * 2 + buffer;\\n        this.weakGrowEndTime = Date.now() + this.weakTime + scriptDelay * 3 + buffer;\\n    }\\n    calcolaWgwThreads(ns, target, calc) {\\n        // calcolo thread usando i core HOME\\n        let WEAKEN_PER_THREAD = ns.weakenAnalyze(1);\\n        let GW_THREADS = ns.growthAnalyzeSecurity(1) / WEAKEN_PER_THREAD;\\n        this.growThreads = calc.calcolaGrowThreads(undefined);\\n        this.weakThreads = Math.max(1, calc.calcolaWeakThread(1));\\n        this.growWeakThreads = Math.max(1, Math.ceil(GW_THREADS * this.growThreads));\\n    }\\n    getNeededRam() {\\n        return (this.growThreads + this.growWeakThreads + this.weakThreads) * WG_COST;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2d3LWJhdGNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2h3Z3cvd2d3LWJhdGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUlyRyxNQUFNLE9BQU8sUUFBUTtJQUNuQixTQUFTLENBQVM7SUFDbEIsUUFBUSxDQUFTO0lBQ2pCLFFBQVEsQ0FBUztJQUNqQixXQUFXLENBQVM7SUFDcEIsV0FBVyxDQUFTO0lBQ3BCLGVBQWUsQ0FBUztJQUN4QixXQUFXLEdBQVcsQ0FBQyxDQUFDO0lBQ3hCLFdBQVcsR0FBVyxDQUFDLENBQUM7SUFDeEIsZUFBZSxHQUFXLENBQUMsQ0FBQztJQUU1QixZQUFZLFFBQWdCLEVBQUUsU0FBaUIsRUFBRSxTQUFpQixFQUFFLFdBQVcsR0FBRyxFQUFFO1FBQ2xGLElBQUksUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6RCxJQUFJLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQztZQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUM7UUFDekQsSUFBSSxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDOztZQUNwRCxJQUFJLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDO1FBQ3ZDLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBRTFCLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsR0FBRyxNQUFNLENBQUM7UUFDckUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxXQUFXLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUN6RSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBQy9FLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxFQUFNLEVBQUUsTUFBc0IsRUFBRSxJQUFxQjtRQUNyRSxvQ0FBb0M7UUFDcEMsSUFBSSxpQkFBaUIsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVDLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxpQkFBaUIsQ0FBQztRQUNqRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxPQUFPLENBQUM7SUFDaEYsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/wgw-batch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WG_COST } from 'const/hwgw';\\nimport { HWGW_SERVER_GROW_SCRIPT, HWGW_SERVER_HACK_SCRIPT, HWGW_SERVER_WEAKEN_SCRIPT } from 'const/scripts';\\nimport { XP_FARMER_SERVER_PREFIX } from 'const/servers';\\nimport { HwgwWorkerProp } from 'hwgw/hwgw-worker-prop';\\nimport { ServerData } from 'utils/server-data';\\nexport class HwgwServerManager {\\n    ns;\\n    servers = [];\\n    homeServer;\\n    constructor(ns) {\\n        this.ns = ns;\\n        const serverNames = ns\\n            .getPurchasedServers()\\n            .filter((el) => el !== 'home' && !el.startsWith(XP_FARMER_SERVER_PREFIX));\\n        this.homeServer = new ServerData(ns, 'home');\\n        this.homeServer.aggiornaServer();\\n        for (const server of serverNames) {\\n            if (server === 'home')\\n                continue;\\n            const serverData = new ServerData(ns, server);\\n            serverData.aggiornaServer();\\n            this.servers.push(serverData);\\n        }\\n    }\\n    async avviaHwgwBatch(target, batch, calc, randomArg, portSeed) {\\n        const serverBatches = [];\\n        this.aggiornaUtilizzo();\\n        let iteration = 0;\\n        let serverBatch = batch.creaServerBatch(this.ns, this.homeServer, target, calc, iteration);\\n        if (serverBatch.canRun) {\\n            serverBatches.push(serverBatch);\\n            iteration++;\\n        }\\n        for (const server of this.servers) {\\n            serverBatch = batch.creaServerBatch(this.ns, server, target, calc, iteration);\\n            if (serverBatch.canRun) {\\n                serverBatches.push(serverBatch);\\n                iteration++;\\n            }\\n        }\\n        for (let i = 0; i < serverBatches.length; i++) {\\n            const serverBatch = serverBatches[i];\\n            serverBatch.ricalcolaSleep();\\n            this.ns.exec(HWGW_SERVER_HACK_SCRIPT, serverBatch.server.name, serverBatch.hackThreads, ...serverBatch.getHackArgs(randomArg));\\n            this.ns.exec(HWGW_SERVER_WEAKEN_SCRIPT, serverBatch.server.name, serverBatch.hackWeakThreads, ...serverBatch.getHackWeakArgs(randomArg));\\n            this.ns.exec(HWGW_SERVER_GROW_SCRIPT, serverBatch.server.name, serverBatch.growThreads, ...serverBatch.getGrowArgs(randomArg));\\n            const lastBatch = i == serverBatches.length - 1;\\n            const growWeakArgs = lastBatch\\n                ? serverBatch.getGrowWeakArgs(randomArg, portSeed)\\n                : serverBatch.getGrowWeakArgs(randomArg);\\n            this.ns.exec(HWGW_SERVER_WEAKEN_SCRIPT, serverBatch.server.name, serverBatch.growWeakThreads, ...growWeakArgs);\\n            if (lastBatch) {\\n                batch.endTime = serverBatch.weakGrowEndTime;\\n            }\\n            await this.ns.sleep(1);\\n        }\\n        return true;\\n    }\\n    aggiornaUtilizzo() {\\n        this.servers.forEach((el) => {\\n            el.aggiornaServer();\\n        });\\n        this.homeServer.aggiornaServer();\\n    }\\n    serverLiberi() {\\n        return this.servers.find((el) => el.freeRam > 0) !== undefined || this.homeServer.freeRam > 0;\\n    }\\n    canRun(ramNecessaria) {\\n        this.aggiornaUtilizzo();\\n        let ramDisponibile = this.homeServer.freeRam;\\n        for (const server of this.servers) {\\n            ramDisponibile += server.freeRam;\\n        }\\n        return ramDisponibile > ramNecessaria;\\n    }\\n    // WGW Batching\\n    avviaWgwBatch(target, batch) {\\n        const growProp = new HwgwWorkerProp(target, batch.growTime, batch.growEndTime, 0, 'PREP');\\n        const weakProp = new HwgwWorkerProp(target, batch.weakTime, batch.weakEndTime, 0, 'PREP');\\n        weakProp.weakType = 1;\\n        const growWeakProp = new HwgwWorkerProp(target, batch.weakTime, batch.weakGrowEndTime, 0, 'PREP');\\n        growWeakProp.weakType = 2;\\n        growWeakProp.writePort = batch.batchPort;\\n        const weakArgs = [JSON.stringify(weakProp)];\\n        const growArgs = [JSON.stringify(growProp)];\\n        const growWeakArgs = [JSON.stringify(growWeakProp)];\\n        this.aggiornaUtilizzo();\\n        const weakThreads = batch.weakThreads;\\n        const growThreads = batch.growThreads;\\n        const growWeakThreads = batch.growWeakThreads;\\n        this.avviaWgwScript(HWGW_SERVER_WEAKEN_SCRIPT, weakThreads, WG_COST, ...weakArgs);\\n        this.avviaWgwScript(HWGW_SERVER_GROW_SCRIPT, growThreads, WG_COST, ...growArgs);\\n        this.avviaWgwScript(HWGW_SERVER_WEAKEN_SCRIPT, growWeakThreads, WG_COST, ...growWeakArgs);\\n    }\\n    avviaWgwScript(scriptName, threadNeeded, ramPerThread, ...args) {\\n        if (threadNeeded <= 0) {\\n            this.ns.print('thread necessari == 0... non dovrebbe succedere');\\n            return;\\n        }\\n        this.aggiornaUtilizzo();\\n        const allServers = this.servers.slice(0);\\n        allServers.unshift(this.homeServer);\\n        let availableServers = allServers.filter((el) => el.freeRam > 0 && el.freeRam > ramPerThread * threadNeeded);\\n        if (availableServers.length > 0) {\\n            this.ns.exec(scriptName, availableServers[0].name, threadNeeded, ...args);\\n            return;\\n        }\\n        availableServers = allServers.filter((el) => el.freeRam > 0 && el.freeRam > ramPerThread);\\n        for (const server of allServers) {\\n            const freeThreads = server.freeRam / ramPerThread;\\n            const threadToLaunch = Math.floor(freeThreads > threadNeeded ? threadNeeded : freeThreads);\\n            if (threadToLaunch <= 1)\\n                break;\\n            this.ns.exec(scriptName, server.name, threadToLaunch, ...args);\\n            server.aggiornaServer();\\n            threadNeeded -= threadToLaunch;\\n            if (threadNeeded <= 0) {\\n                break;\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1zZXJ2ZXItbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctc2VydmVyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsdUJBQXVCLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3hELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUl2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFL0MsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixFQUFFLENBQUs7SUFDUCxPQUFPLEdBQWlCLEVBQUUsQ0FBQztJQUMzQixVQUFVLENBQWE7SUFFdkIsWUFBWSxFQUFNO1FBQ2hCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsTUFBTSxXQUFXLEdBQUcsRUFBRTthQUNuQixtQkFBbUIsRUFBRTthQUNyQixNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksVUFBVSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ2pDLEtBQUssTUFBTSxNQUFNLElBQUksV0FBVyxFQUFFO1lBQ2hDLElBQUksTUFBTSxLQUFLLE1BQU07Z0JBQUUsU0FBUztZQUNoQyxNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFD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\",\"filename\":\"/hwgw/hwgw-server-manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { BATCH_BUFFER, HACK_SEC_INCREASE, HWGW_MONEY_ITERATION_PERCENTAGE, HWGW_MONEY_MIN_PERCENTAGE, HWGW_MONEY_PERCENTAGE, H_COST, SCRIPT_DELAY, WG_COST, } from 'const/hwgw';\\nimport { HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4 } from 'const/ports';\\nimport { HwgwWorkerProp } from 'hwgw/hwgw-worker-prop';\\nexport class HwgwServerBatch {\\n    hackTime;\\n    growTime;\\n    weakTime;\\n    hackEndTime;\\n    weakHackEndTime;\\n    growEndTime;\\n    weakGrowEndTime;\\n    hackThreads = 0;\\n    hackWeakThreads = 0;\\n    growThreads = 0;\\n    growWeakThreads = 0;\\n    server;\\n    target;\\n    calc;\\n    scriptDelay;\\n    iteration;\\n    canRun = false;\\n    constructor(tempoHack, tempoWeak, tempoGrow, server, ns, target, calc, iteration = 0, scriptDelay = SCRIPT_DELAY) {\\n        this.target = target;\\n        this.server = server;\\n        this.calc = calc;\\n        this.iteration = iteration;\\n        this.scriptDelay = scriptDelay;\\n        this.hackTime = tempoHack;\\n        this.growTime = tempoGrow;\\n        this.weakTime = tempoWeak;\\n        const buffer = BATCH_BUFFER + this.iteration * this.scriptDelay * 4;\\n        this.hackEndTime = Date.now() + this.weakTime + this.scriptDelay + buffer;\\n        this.weakHackEndTime = Date.now() + this.weakTime + this.scriptDelay * 2 + buffer;\\n        this.growEndTime = Date.now() + this.weakTime + this.scriptDelay * 3 + buffer;\\n        this.weakGrowEndTime = Date.now() + this.weakTime + this.scriptDelay * 4 + buffer;\\n        this.calcolaThreads(ns, calc, target);\\n        this.verificaServerCap(ns, calc, target);\\n    }\\n    getHackArgs(randomArg) {\\n        const prop = new HwgwWorkerProp(this.target.name, this.hackTime, this.hackEndTime, this.iteration, 'BATCH');\\n        return [JSON.stringify(prop), randomArg];\\n    }\\n    getHackWeakArgs(randomArg) {\\n        const prop = new HwgwWorkerProp(this.target.name, this.weakTime, this.weakHackEndTime, this.iteration, 'BATCH');\\n        prop.weakType = 1;\\n        return [JSON.stringify(prop), randomArg];\\n    }\\n    getGrowArgs(randomArg) {\\n        const prop = new HwgwWorkerProp(this.target.name, this.growTime, this.growEndTime, this.iteration, 'BATCH');\\n        return [JSON.stringify(prop), randomArg];\\n    }\\n    getGrowWeakArgs(randomArg, portSeed = 0) {\\n        const prop = new HwgwWorkerProp(this.target.name, this.weakTime, this.weakGrowEndTime, this.iteration, 'BATCH');\\n        prop.weakType = 2;\\n        if (portSeed > 0) {\\n            let port;\\n            if (portSeed % 4 == 0)\\n                port = HWGW_PORT_4;\\n            if (portSeed % 3 == 0)\\n                port = HWGW_PORT_3;\\n            if (portSeed % 2 == 0)\\n                port = HWGW_PORT_2;\\n            else\\n                port = HWGW_PORT_1;\\n            prop.writePort = port;\\n        }\\n        return [JSON.stringify(prop), randomArg];\\n    }\\n    ricalcolaSleep() {\\n        this.weakTime = this.calc.calcolaWeakTime();\\n        this.hackTime = this.calc.calcolaHackTime(this.weakTime);\\n        this.growTime = this.calc.calcolaGrowTime(this.hackTime);\\n        const buffer = BATCH_BUFFER + this.iteration * this.scriptDelay * 4;\\n        this.hackEndTime = Date.now() + this.weakTime + this.scriptDelay + buffer;\\n        this.weakHackEndTime = Date.now() + this.weakTime + this.scriptDelay * 2 + buffer;\\n        this.growEndTime = Date.now() + this.weakTime + this.scriptDelay * 3 + buffer;\\n        this.weakGrowEndTime = Date.now() + this.weakTime + this.scriptDelay * 4 + buffer;\\n    }\\n    calcolaThreads(ns, calc, target, percentage = HWGW_MONEY_PERCENTAGE) {\\n        const cores = this.server.cores;\\n        this.hackThreads = calc.calcolaHackThread(percentage);\\n        this.growThreads = calc.calcolaGrowThreads(target.maxMoney - target.maxMoney * percentage, cores);\\n        const WEAKEN_PER_THREAD = ns.weakenAnalyze(1, cores);\\n        const HW_THREADS = HACK_SEC_INCREASE / WEAKEN_PER_THREAD;\\n        const GW_THREADS = ns.growthAnalyzeSecurity(1, undefined, cores) / WEAKEN_PER_THREAD;\\n        this.hackWeakThreads = Math.max(1, Math.ceil(HW_THREADS * this.hackThreads));\\n        this.growWeakThreads = Math.max(1, Math.ceil(GW_THREADS * this.growThreads));\\n    }\\n    verificaServerCap(ns, calc, target) {\\n        let checkOrExit = false;\\n        let lowerPerc = HWGW_MONEY_PERCENTAGE - HWGW_MONEY_ITERATION_PERCENTAGE;\\n        this.server.aggiornaServer();\\n        while (!checkOrExit) {\\n            const ramNecessaria = (this.growWeakThreads + this.hackWeakThreads + this.growThreads) * WG_COST + this.hackThreads * H_COST;\\n            if (this.server.freeRam >= ramNecessaria) {\\n                this.canRun = true;\\n                checkOrExit = true;\\n            }\\n            else if (lowerPerc > HWGW_MONEY_MIN_PERCENTAGE) {\\n                this.calcolaThreads(ns, calc, target, lowerPerc);\\n                lowerPerc -= HWGW_MONEY_ITERATION_PERCENTAGE;\\n            }\\n            else {\\n                checkOrExit = true;\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1zZXJ2ZXItYmF0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaHdndy9od2d3LXNlcnZlci1iYXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsWUFBWSxFQUNaLGlCQUFpQixFQUNqQiwrQkFBK0IsRUFDL0IseUJBQXlCLEVBQ3pCLHFCQUFxQixFQUNyQixNQUFNLEVBQ04sWUFBWSxFQUNaLE9BQU8sR0FDUixNQUFNLFlBQVksQ0FBQztBQUNwQixPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUt2RCxNQUFNLE9BQU8sZUFBZTtJQUMxQixRQUFRLENBQVM7SUFDakIsUUFBUSxDQUFTO0lBQ2pCLFFBQVEsQ0FBUztJQUNqQixXQUFXLENBQVM7SUFDcEIsZUFBZSxDQUFTO0lBQ3hCLFdBQVcsQ0FBUztJQUNwQixlQUFlLENBQVM7SUFDeEIsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDaEIsZUFBZSxHQUFHLENBQUMsQ0FBQztJQUNwQixNQUFNLENBQWE7SUFDbkIsTUFBTSxDQUFpQjtJQUN2QixJQUFJLENBQWtCO0lBQ3RCLFdBQVcsQ0FBUztJQUNwQixTQUFTLENBQVM7SUFDbEIsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUVmLFlBQ0UsU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsTUFBa0IsRUFDbEIsRUFBTSxFQUNOLE1BQXNCLEVBQ3RCLElBQXFCLEVBQ3JCLFNBQVMsR0FBRyxDQUFDLEVBQ2IsV0FBVyxHQUFHLFlBQVk7UUFFMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFFMUIsTUFBTSxNQUFNLEdBQUcsWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQztRQUMxRSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUNsRixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUM5RSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUNsRixJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELFdBQVcsQ0FBQyxTQUFpQjtR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\",\"filename\":\"/hwgw/hwgw-server-batch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HWGW_MONEY_ITERATION_PERCENTAGE, HWGW_MONEY_MIN_PERCENTAGE, HWGW_MONEY_PERCENTAGE, HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4, H_COST, WG_COST, } from 'const/files';\\nexport class WgwServerBatch {\\n    sleepWeakHack;\\n    sleepHack;\\n    sleepGrow;\\n    sleepWeakGrow;\\n    hackThreads = 0;\\n    hackWeakThreads = 0;\\n    growThreads = 0;\\n    growWeakThreads = 0;\\n    server;\\n    target;\\n    calc;\\n    canRun = false;\\n    constructor(tempoHack, tempoWeak, tempoGrow, server, ns, target, calc, iteration = 0, scriptDelay = 100) {\\n        this.target = target;\\n        this.server = server;\\n        this.calc = calc;\\n        this.sleepWeakHack = Math.max(0, Math.floor(scriptDelay * iteration * 4));\\n        this.sleepHack = Math.max(1, Math.floor(tempoWeak - tempoHack - scriptDelay + this.sleepWeakHack));\\n        const endWeakHack = tempoWeak + this.sleepWeakHack;\\n        this.sleepGrow = Math.max(1, Math.floor(endWeakHack - tempoGrow + scriptDelay));\\n        const endGrow = this.sleepGrow + tempoGrow;\\n        this.sleepWeakGrow = Math.max(1, Math.floor(endGrow - tempoWeak + scriptDelay));\\n        this.calcolaThreads(ns, calc, target);\\n        this.verificaServerCap(ns, calc, target);\\n    }\\n    getHackArgs(randomArg) {\\n        return [this.target.name, this.sleepHack, randomArg];\\n    }\\n    getHackWeakArgs(randomArg) {\\n        return [this.target.name, this.sleepWeakHack, randomArg];\\n    }\\n    getGrowArgs(randomArg) {\\n        return [this.target.name, this.sleepGrow, randomArg];\\n    }\\n    getGrowWeakArgs(randomArg, portSeed = undefined) {\\n        const growWeakArgs = [this.target.name, this.sleepWeakGrow];\\n        if (portSeed) {\\n            let port;\\n            if (portSeed % 4 == 0)\\n                port = HWGW_PORT_4;\\n            if (portSeed % 3 == 0)\\n                port = HWGW_PORT_3;\\n            if (portSeed % 2 == 0)\\n                port = HWGW_PORT_2;\\n            else\\n                port = HWGW_PORT_1;\\n            growWeakArgs.push(port);\\n        }\\n        growWeakArgs.push(randomArg);\\n        return growWeakArgs;\\n    }\\n    calcolaThreads(ns, calc, target, percentage = HWGW_MONEY_PERCENTAGE) {\\n        const cores = this.server.cores;\\n        this.hackThreads = calc.calcolaHackThread(percentage);\\n        let WEAKEN_PER_THREAD = ns.weakenAnalyze(1, cores);\\n        let HW_THREADS = ns.hackAnalyzeSecurity(1) / WEAKEN_PER_THREAD;\\n        let GW_THREADS = ns.growthAnalyzeSecurity(1, undefined, cores) / WEAKEN_PER_THREAD;\\n        this.hackWeakThreads = Math.max(1, Math.ceil(HW_THREADS * this.hackThreads));\\n        this.growThreads = calc.calcolaGrowThreads(target.maxMoney - target.maxMoney * percentage, cores);\\n        this.growWeakThreads = Math.max(1, Math.ceil(GW_THREADS * this.growThreads));\\n    }\\n    verificaServerCap(ns, calc, target) {\\n        let checkOrExit = false;\\n        let lowerPerc = HWGW_MONEY_PERCENTAGE - HWGW_MONEY_ITERATION_PERCENTAGE;\\n        this.server.aggiornaServer();\\n        while (!checkOrExit) {\\n            const ramNecessaria = (this.growWeakThreads + this.hackWeakThreads + this.growThreads) * WG_COST + this.hackThreads * H_COST;\\n            if (this.server.freeRam >= ramNecessaria) {\\n                this.canRun = true;\\n                checkOrExit = true;\\n            }\\n            else if (lowerPerc > HWGW_MONEY_MIN_PERCENTAGE) {\\n                this.calcolaThreads(ns, calc, target, lowerPerc);\\n                lowerPerc -= HWGW_MONEY_ITERATION_PERCENTAGE;\\n            }\\n            else {\\n                checkOrExit = true;\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2d3LXNlcnZlci1iYXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dndy1zZXJ2ZXItYmF0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNMLCtCQUErQixFQUMvQix5QkFBeUIsRUFDekIscUJBQXFCLEVBQ3JCLFdBQVcsRUFDWCxXQUFXLEVBQ1gsV0FBVyxFQUNYLFdBQVcsRUFDWCxNQUFNLEVBQ04sT0FBTyxHQUNSLE1BQU0sYUFBYSxDQUFDO0FBS3JCLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLGFBQWEsQ0FBUztJQUN0QixTQUFTLENBQVM7SUFDbEIsU0FBUyxDQUFTO0lBQ2xCLGFBQWEsQ0FBUztJQUN0QixXQUFXLEdBQVcsQ0FBQyxDQUFDO0lBQ3hCLGVBQWUsR0FBVyxDQUFDLENBQUM7SUFDNUIsV0FBVyxHQUFXLENBQUMsQ0FBQztJQUN4QixlQUFlLEdBQVcsQ0FBQyxDQUFDO0lBQzVCLE1BQU0sQ0FBYTtJQUNuQixNQUFNLENBQWlCO0lBQ3ZCLElBQUksQ0FBa0I7SUFDdEIsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUVmLFlBQ0UsU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsTUFBa0IsRUFDbEIsRUFBTSxFQUNOLE1BQXNCLEVBQ3RCLElBQXFCLEVBQ3JCLFNBQVMsR0FBRyxDQUFDLEVBQ2IsV0FBVyxHQUFHLEdBQUc7UUFFakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFFakIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRSxJQUFJLENBQUMsU0FBUyxHQUFH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\",\"filename\":\"/hwgw/wgw-server-batch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { XP_FARMER_SERVER_PREFIX } from 'const/servers';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = ns.getPurchasedServers().filter((el) => el.startsWith(XP_FARMER_SERVER_PREFIX));\\n    for (let server of servers) {\\n        ns.killall(server);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2lsbC1mYXJtLXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9raWxsLWZhcm0tc2NyaXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0lBQ2hHLEtBQUssSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzFCLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"kill-farm-script.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/a0b4c551-8705-4d37-818b-f957b9aad9e2\",\"moduleSequenceNumber\":24970},{\"filename\":\"kill-farm-script.js\",\"url\":\"blob:https://danielyxie.github.io/90eddde4-33ab-4644-bfbd-429a60e9824f\",\"moduleSequenceNumber\":25516}],\"dependents\":[],\"ramUsage\":4.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { loadTargetNames } from 'utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = ns.getPurchasedServers();\\n    servers.push(...(await loadTargetNames(ns)));\\n    for (const server of servers) {\\n        ns.killall(server);\\n    }\\n    ns.killall('home', true);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2lsbC1hbGwtc2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2tpbGwtYWxsLXNjcmlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdEQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDekMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzVCLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDcEI7SUFDRCxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMzQixDQUFDIn0=\",\"filename\":\"kill-all-script.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/c863e466-f2d2-466a-8d81-84a546ed94a4\",\"moduleSequenceNumber\":24289},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/848102be-8522-465f-9e3a-9e6852266c1e\",\"moduleSequenceNumber\":24287},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/1584e2b0-4c65-4aee-bf04-caeea431aa67\",\"moduleSequenceNumber\":24293},{\"filename\":\"kill-all-script.js\",\"url\":\"blob:https://danielyxie.github.io/fe467aee-a18d-4264-94e2-65318f779bc3\",\"moduleSequenceNumber\":25185}],\"dependents\":[],\"ramUsage\":4.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.killall('home', true);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2lsbC1ob21lLXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9raWxsLWhvbWUtc2NyaXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNCLENBQUMifQ==\",\"filename\":\"kill-home-script.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC1tYWluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcnAvY29ycC1tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkIsQ0FBQyJ9\",\"filename\":\"/corp/corp-main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\n// free ram pre corp\\n// export const HOME_FREE_RAM_TO_KEEP = 8;\\n// free ram for corp script\\nexport const HOME_FREE_RAM_TO_KEEP = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 1048576\\nexport const MAX_RAM = 1048576;\\nexport const SERVER_GB = 1048576;\\nexport const SERVER_GB_WANTED = 1048576;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 524288;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25zdC9zZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG1CQUFtQjtBQUNuQixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsYUFBYSxDQUFDO0FBQ3JELG9CQUFvQjtBQUNwQiwwQ0FBMEM7QUFDMUMsMkJBQTJCO0FBQzNCLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQztBQUMxQywyQkFBMkI7QUFDM0IsNkJBQTZCO0FBQzdCLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQztBQUNqQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUM7QUFDeEMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUNqQyxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUNyQyxpREFBaUQifQ==\",\"filename\":\"/const/servers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\n// MANAGER SCRIPTS\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\nexport const HWGW_WORKER_PROP = '/hwgw/hwgw-worker-prop.js';\\nexport const CONST_PORTS = '/const/ports.js';\\nexport const LOGGER = '/logs/logger.js';\\nexport const FILES_TO_COPY = [\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n    HWGW_WORKER_PROP,\\n    CONST_PORTS,\\n    LOGGER,\\n];\\n// CORP SCRIPTS\\nexport const CORP_STARTUP = '/corp/corp-starter.js';\\nexport const CORP_AGRI_SETUP = '/corp/agri-setup.js';\\nexport const CORP_AGRI_MANTAINANCE = '/corp/agri-mantainance.js';\\nexport const CORP_TOBACCHI_STARTUP = '/corp/tob-setup.js';\\nexport const CORP_TOBACCHI_MIDGAME = '/corp/tob-midgame.js';\\nexport const CORP_MANTAINANCE = '/corp/tob-mantainance.js';\\n// OTHER SCRIPTS\\nexport const LOG_MANAGER = '/logs/logmanager.js';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25zdC9zY3JpcHRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGVBQWU7QUFDZixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyx3Q0FBd0MsQ0FBQztBQUV6RSxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsK0JBQStCLENBQUM7QUFDckUsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsMkJBQTJCLENBQUM7QUFFN0QseUJBQXlCO0FBQ3pCLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQztBQUN4QyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxrQkFBa0IsQ0FBQztBQUM1RCxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRywwQkFBMEIsQ0FBQztBQUN2RSxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyx5QkFBeUIsQ0FBQztBQUM3RCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxlQUFlLENBQUM7QUFDekQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLGVBQWUsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRywyQkFBMkIsQ0FBQztBQUM1RCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsaUJBQWlCLENBQUM7QUFDN0MsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRztJQUMzQix1QkFBdUI7SUFDdkIsdUJBQXVCO0lBQ3ZCLHlCQUF5QjtJQUN6Qix5QkFBeUI7SUFDekIsbUJBQW1CO0lBQ25CLE1BQU07SUFDTixnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLE1BQU07Q0FDUCxDQUFDO0FBRUYsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyx1QkFBdUIsQ0FBQztBQUNwRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcscUJBQXFCLENBQUM7QUFDckQsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsMkJBQTJCLENBQUM7QUFDakUsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsb0JBQW9CLENBQUM7QUFDMUQsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsc0JBQXNCLENBQUM7QUFDNUQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsMEJBQTBCLENBQUM7QUFFM0QsZ0JBQWdCO0FBQ2hCLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxxQkFBcUIsQ0FBQyJ9\",\"filename\":\"/const/scripts.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\nexport const HACK_SEC_INCREASE = 0.002;\\nexport const BATCH_BUFFER = 100;\\nexport const SCRIPT_DELAY = 20;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.99;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.01;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.001;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25zdC9od2d3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG1CQUFtQjtBQUNuQixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQzVCLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDMUIsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUM7QUFDaEMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztBQUMvQiwwQkFBMEI7QUFDMUIsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDO0FBQzFDLDBEQUEwRDtBQUMxRCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUM7QUFDOUMsMEJBQTBCO0FBQzFCLE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFHLEtBQUssQ0FBQyJ9\",\"filename\":\"/const/hwgw.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/d1838cf9-9c9c-43e1-9adb-f5b7792ce704\",\"moduleSequenceNumber\":134},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/27ad92db-5427-4292-9558-ba47624fb63a\",\"moduleSequenceNumber\":1910}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HWGW_LOG_FILE } from 'const/files';\\nimport { EMPTY_PORT_DATA, LOG_MANAGER_PORT } from 'const/ports';\\nimport { FileHandler } from 'files/filehandler';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const port = ns.getPortHandle(LOG_MANAGER_PORT);\\n    port.clear();\\n    ns.disableLog('ALL');\\n    ns.clearLog();\\n    ns.tail();\\n    ns.moveTail(200, 200); // Move it out of the way so it doesn't cover up the controller.\\n    const handler = new FileHandler(ns, HWGW_LOG_FILE);\\n    handler.newFile();\\n    while (true) {\\n        await port.nextWrite();\\n        do {\\n            const value = port.read();\\n            if (value !== EMPTY_PORT_DATA) {\\n                const log = JSON.parse(value);\\n                // handler.writeText(new Date(log.time).toISOString(), 'a');\\n                // handler.writeText(' ', 'a');\\n                // handler.writeText(log.logType, 'a');\\n                // handler.writeText(' ', 'a');\\n                // handler.writeText(log.log, 'a');\\n                // handler.writeText('\\\\n\\\\r', 'a');\\n                ns.print(log.logType + ' ' + log.log);\\n            }\\n        } while (!port.empty());\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dzL2xvZ21hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM1QyxPQUFPLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUdoRCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDaEQsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDZCxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDVixFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLGdFQUFnRTtJQUN2RixNQUFNLE9BQU8sR0FBZ0IsSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ2hFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNsQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3ZCLEdBQUc7WUFDRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFZLENBQUM7WUFDcEMsSUFBSSxLQUFLLEtBQUssZUFBZSxFQUFFO2dCQUM3QixNQUFNLEdBQUcsR0FBUSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBUSxDQUFDO2dCQUMxQyw0REFBNEQ7Z0JBQzVELCtCQUErQjtnQkFDL0IsdUNBQXVDO2dCQUN2QywrQkFBK0I7Z0JBQy9CLG1DQUFtQztnQkFDbkMsa0NBQWtDO2dCQUNsQyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN2QztTQUNGLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUU7S0FDekI7QUFDSCxDQUFDIn0=\",\"filename\":\"/logs/logmanager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:http://bitburner.local/7c95db8b-2671-4225-9a13-6361d29d044b\",\"moduleSequenceNumber\":2482},{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1fc25357-b069-4c26-a933-ceb17da658a6\",\"moduleSequenceNumber\":2524},{\"filename\":\"/const/files.js\",\"url\":\"blob:http://bitburner.local/20434f99-dc65-4fad-a7e0-f4166d84d358\",\"moduleSequenceNumber\":2481},{\"filename\":\"/logs/logmanager.js\",\"url\":\"blob:http://bitburner.local/a4d6b54c-b3a6-4178-b134-7147e127a137\",\"moduleSequenceNumber\":2557}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CORP_NAME = 'Totally Legit Corporation';\\nexport const AGRI_DIV_NAME = 'Veggies';\\nexport const TOB_DIV_NAME = 'Totally Not Ganja';\\nexport const TOB_PROD1_NAME = 'Totally Not White Widow';\\nexport const TOB_PROD2_NAME = 'Totally Not NY Diesel';\\nexport const TOB_PROD3_NAME = 'Totally Not Cheese';\\nexport const TOB_PROD4_NAME = 'Totally Not Lemon Haze';\\nexport const TOB_PROD5_NAME = 'Totally Not Super Skunk';\\nexport const ROUND_1_MIN_AMOUNT = 21e10; //210b\\nexport const ROUND_2_MIN_AMOUNT = 5e12; //5t\\nexport const ROUND_3_MIN_AMOUNT = 8e14; //800t\\nexport const ROUND_4_MIN_AMOUNT = 5e17; //500q\\nexport const BN_VAL_MULTI = 1;\\nexport const VAL_MULTI_EQ = 0;\\nexport const EMP_STAT_CHECK_VALUE = 97;\\nexport const EMP_STATS_CHECK_TIMEOUT = 30000;\\nexport const PARTY_BUDGET = 5e5;\\nexport const ADV_OR_HIRE_FUNDS_CHECK_MULTIPLIER = 0.5;\\nexport const TOBACCHI_MIN_INVESTMENT_VALUE = 1e9;\\nexport const TOBACCHI_LAB_POINT_THRESHOLD = 1e4;\\nexport const TOBACCHI_MK_POINT_THRESHOLD = 15e4;\\nexport const TOBACCHI_RES_MIN_THRESHOLD = 1e5;\\n// setup\\\\adjustment chec state 0=never sold, 1=first setup, 2=cyclic check and adjustment, 3=complete\\nexport const TOB_PROD_CHECK_START = 0;\\nexport const TOB_PROD_CHECK_FIRST = 1;\\nexport const TOB_PROD_CHECK_CYCLE = 2;\\nexport const TOB_PROD_CHECK_END = 3;\\nexport const TOB_PROD_ADJUST_START = 0;\\nexport const TOB_PROD_ADJUST_INC = 1;\\nexport const TOB_PROD_ADJUST_LOW = 2;\\nexport const TOB_PROD_ADJUST_END = 3;\\n// prod setup state, 0=before bisection, 1=first bisection, 2=bisection loop, 3=complete\\nexport const TOB_PROD_SETUP_START = 0;\\nexport const TOB_PROD_SETUP_FIRST = 1;\\nexport const TOB_PROD_SETUP_LOOP = 2;\\nexport const TOB_PROD_SETUP_END = 3;\\nexport var UNLOCKS;\\n(function (UNLOCKS) {\\n    UNLOCKS[\\\"EXP\\\"] = \\\"Export\\\";\\n    UNLOCKS[\\\"SSU\\\"] = \\\"Smart Supply\\\";\\n    UNLOCKS[\\\"MDD\\\"] = \\\"Market Research - Demand\\\";\\n    UNLOCKS[\\\"MDC\\\"] = \\\"Market Data - Competition\\\";\\n    UNLOCKS[\\\"VEC\\\"] = \\\"VeChain\\\";\\n    UNLOCKS[\\\"SAD\\\"] = \\\"Shady Accounting\\\";\\n    UNLOCKS[\\\"GOV\\\"] = \\\"Government Partnership\\\";\\n})(UNLOCKS || (UNLOCKS = {}));\\nexport var CorpResearchName;\\n(function (CorpResearchName) {\\n    CorpResearchName[\\\"RES_LAB\\\"] = \\\"Hi-Tech R&D Laboratory\\\";\\n    CorpResearchName[\\\"AUTO_BREW\\\"] = \\\"AutoBrew\\\";\\n    CorpResearchName[\\\"AUTO_PARTY\\\"] = \\\"AutoPartyManager\\\";\\n    CorpResearchName[\\\"AUTO_DRUG\\\"] = \\\"Automatic Drug Administration\\\";\\n    CorpResearchName[\\\"CPH4\\\"] = \\\"CPH4 Injections\\\";\\n    CorpResearchName[\\\"DRONES\\\"] = \\\"Drones\\\";\\n    CorpResearchName[\\\"DRONES_ASSEMBLY\\\"] = \\\"Drones - Assembly\\\";\\n    CorpResearchName[\\\"DRONES_TRANS\\\"] = \\\"Drones - Transport\\\";\\n    CorpResearchName[\\\"GO_JUICE\\\"] = \\\"Go-Juice\\\";\\n    CorpResearchName[\\\"HR_BUDDY_REC\\\"] = \\\"HRBuddy-Recruitment\\\";\\n    CorpResearchName[\\\"HR_BUDDY_TR\\\"] = \\\"HRBuddy-Training\\\";\\n    CorpResearchName[\\\"MKT1\\\"] = \\\"Market-TA.I\\\";\\n    CorpResearchName[\\\"MKT2\\\"] = \\\"Market-TA.II\\\";\\n    CorpResearchName[\\\"OVERCLOCK\\\"] = \\\"Overclock\\\";\\n    CorpResearchName[\\\"SELF_CORR_ASS\\\"] = \\\"Self-Correcting Assemblers\\\";\\n    CorpResearchName[\\\"STI_MU\\\"] = \\\"Sti.mu\\\";\\n    CorpResearchName[\\\"UPG_CAP1\\\"] = \\\"uPgrade: Capacity.I\\\";\\n    CorpResearchName[\\\"UPG_CAP2\\\"] = \\\"uPgrade: Capacity.II\\\";\\n    CorpResearchName[\\\"UPG_DASH\\\"] = \\\"uPgrade: Dashboard\\\";\\n    CorpResearchName[\\\"UPG_FULC\\\"] = \\\"uPgrade: Fulcrum\\\";\\n    CorpResearchName[\\\"SUDO_ASSIST\\\"] = \\\"sudo.Assist\\\";\\n})(CorpResearchName || (CorpResearchName = {}));\\nexport const CORP_SETUP_UPGRADES = [\\\"Smart Factories\\\" /* UPGRADES.SFA */, \\\"FocusWires\\\" /* UPGRADES.FWI */, \\\"Neural Accelerators\\\" /* UPGRADES.NAC */, \\\"Nuoptimal Nootropic Injector Implants\\\" /* UPGRADES.NNI */, \\\"Neural Accelerators\\\" /* UPGRADES.NAC */];\\nexport const CORP_OP_UPGRADES = [\\n    \\\"Smart Factories\\\" /* UPGRADES.SFA */,\\n    \\\"Smart Storage\\\" /* UPGRADES.SST */,\\n    \\\"Speech Processor Implants\\\" /* UPGRADES.SPI */,\\n    \\\"Project Insight\\\" /* UPGRADES.PIN */,\\n    \\\"ABC SalesBots\\\" /* UPGRADES.ABC */,\\n    \\\"FocusWires\\\" /* UPGRADES.FWI */,\\n    \\\"Nuoptimal Nootropic Injector Implants\\\" /* UPGRADES.NNI */,\\n    \\\"Neural Accelerators\\\" /* UPGRADES.NAC */,\\n];\\nexport const CORP_OP_UPGRADES_LEVEL = 3450;\\nexport const CORP_OP_UPGRADES_UNLOCK_AT = 1e70;\\nexport class AgriMaterials {\\n    stage1 = new AgriMaterialStage(125, 0, 75, 27000);\\n    stage2 = new AgriMaterialStage(2800, 96, 2520, 146400);\\n    stage3 = new AgriMaterialStage(9300, 726, 6270, 230400);\\n}\\nexport class AgriMaterialStage {\\n    hardware;\\n    robot;\\n    aiCores;\\n    realEstate;\\n    constructor(hardware, robot, aiCores, realEstate) {\\n        this.hardware = hardware;\\n        this.robot = robot;\\n        this.aiCores = aiCores;\\n        this.realEstate = realEstate;\\n    }\\n}\\nexport const AGRI_MATERIAL = new AgriMaterials();\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25zdC9jb3JwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRywyQkFBMkIsQ0FBQztBQUNyRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxtQkFBbUIsQ0FBQztBQUNoRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcseUJBQXlCLENBQUM7QUFDeEQsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLHVCQUF1QixDQUFDO0FBQ3RELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxvQkFBb0IsQ0FBQztBQUNuRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsd0JBQXdCLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLHlCQUF5QixDQUFDO0FBRXhELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxDQUFDLE1BQU07QUFDL0MsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSTtBQUM1QyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsQ0FBQyxNQUFNO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxDQUFDLE1BQU07QUFFOUMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQztBQUM5QixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDO0FBRTlCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztBQUN2QyxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxLQUFLLENBQUM7QUFDN0MsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQztBQUNoQyxNQUFNLENBQUMsTUFBTSxrQ0FBa0MsR0FB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\",\"filename\":\"/const/corp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class AgriMaterials {\\n    stage1 = new AgriMaterialStage(125, 0, 75, 27000);\\n    stage2 = new AgriMaterialStage(2675, 96, 2445, 119400);\\n    stage3 = new AgriMaterialStage(6500, 630, 3750, 84000);\\n}\\nexport class AgriMaterialStage {\\n    hardware;\\n    robot;\\n    aiCores;\\n    realEstate;\\n    constructor(hardware, robot, aiCores, realEstate) {\\n        this.hardware = hardware;\\n        this.robot = robot;\\n        this.aiCores = aiCores;\\n        this.realEstate = realEstate;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdyaS1tYXRlcmlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29ycC9hZ3JpLW1hdGVyaWFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sYUFBYTtJQUN4QixNQUFNLEdBQXNCLElBQUksaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckUsTUFBTSxHQUFzQixJQUFJLGlCQUFpQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFFLE1BQU0sR0FBc0IsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztDQUMzRTtBQUVELE1BQU0sT0FBTyxpQkFBaUI7SUFDNUIsUUFBUSxDQUFTO0lBQ2pCLEtBQUssQ0FBUztJQUNkLE9BQU8sQ0FBUztJQUNoQixVQUFVLENBQVM7SUFDbkIsWUFBWSxRQUFnQixFQUFFLEtBQWEsRUFBRSxPQUFlLEVBQUUsVUFBa0I7UUFDOUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQztDQUNGIn0=\",\"filename\":\"/corp/agri-materials.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC1zZXR1cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JwL2NvcnAtc2V0dXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QixDQUFDIn0=\",\"filename\":\"/corp/corp-setup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAtc3RhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29ycC9zZXR1cC1zdGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIn0=\",\"filename\":\"/corp/setup-stage.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CorpSetupStage {\\n    mainStage;\\n    subStage;\\n    subStages;\\n    lastEmpStatsCheck = -1;\\n    constructor(mainStage, subStages) {\\n        this.mainStage = mainStage;\\n        this.subStages = subStages;\\n        this.subStage = subStages[0];\\n    }\\n    nextStage() {\\n        this.subStage = this.subStages[this.subStage.val + 1];\\n    }\\n}\\nexport class Stage {\\n    name;\\n    val;\\n    constructor(name, val) {\\n        this.name = name;\\n        this.val = val;\\n    }\\n}\\nexport const CORP_AGRI_SETUP_STAGE = new CorpSetupStage(new Stage('Agricolture Setup', 0), [\\n    new Stage('CreateDivision', 0),\\n    new Stage('BuySmartSupply', 1),\\n    new Stage('ExpandToCities', 2),\\n    new Stage('BuyAdvert', 3),\\n    new Stage('ExpandWarehouse', 4),\\n    new Stage('BuyUpgrades', 5),\\n    new Stage('BuyMaterials', 6),\\n    new Stage('WaitForEmployees', 7),\\n]);\\nexport const CORP_AGRI_MAN_STAGE = new CorpSetupStage(new Stage('Agricolture Mantainance', 1), [\\n    new Stage('1stInvestor', 0),\\n    new Stage('UpgradeEmployees', 1),\\n    new Stage('BuyUpgrades', 2),\\n    new Stage('ExpandWarehouse', 3),\\n    new Stage('BuyMaterials', 4),\\n    new Stage('WaitForEmployees', 5),\\n    new Stage('2ndInvestor&removeRnD', 6),\\n    new Stage('ExpandWarehouse2', 7),\\n    new Stage('BuyMaterials2', 8),\\n]);\\nexport const CORP_TOB_SETUP_STAGE = new CorpSetupStage(new Stage('Tobacchi Setup', 2), [\\n    new Stage('ExpandTobacchi', 0),\\n    new Stage('EsxpandCities', 1),\\n    new Stage('HireEmployees', 2),\\n    new Stage('StartFirstProduction', 3),\\n    new Stage('BuyUpgrades', 4),\\n    new Stage('CompleteFirstProductionAndStartSecond', 5),\\n    new Stage('WilsonAnalyticsAndAdvert', 6),\\n]);\\nexport const CORP_TOB_MIDGAME_STAGE = new CorpSetupStage(new Stage('Tobacchi Midgame', 3), [new Stage('CompleteScondProductionAndStartThird', 0)]);\\nexport const CORP_TOB_MANTAINANCE_STAGE = new CorpSetupStage(new Stage('Tobacchi Mantainance', 4), [new Stage('Mantainance', 0)]);\\nexport const CORP_STAGES = [CORP_AGRI_SETUP_STAGE, CORP_AGRI_MAN_STAGE, CORP_TOB_SETUP_STAGE, CORP_TOB_MIDGAME_STAGE, CORP_TOB_MANTAINANCE_STAGE];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhZ2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcnAvdXRpbHMvc3RhZ2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLFNBQVMsQ0FBUTtJQUNqQixRQUFRLENBQVE7SUFDaEIsU0FBUyxDQUFVO0lBQ25CLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3ZCLFlBQVksU0FBZ0IsRUFBRSxTQUFrQjtRQUM5QyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsU0FBUztRQUNQLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sS0FBSztJQUNoQixJQUFJLENBQVM7SUFDYixHQUFHLENBQVM7SUFDWixZQUFZLElBQVksRUFBRSxHQUFXO1FBQ25DLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUFDLElBQUksS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ3pGLElBQUksS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUM5QixJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDOUIsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDekIsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLElBQUksS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDM0IsSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztJQUM1QixJQUFJLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7Q0FDakMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxLQUFLLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxDQUFDLEVBQUU7SUFDN0YsSUFBSSxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUMzQixJQUFJLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7SUFDaEMsSUFBSSxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUMzQixJQUFJLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7SUFDL0IsSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztJQUM1QixJQUFJLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7SUFDaEMsSUFBSSxLQUFLLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLElBQUksS0FBSyxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztJQUNoQyxJQUFJLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0NBQzlCLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUFDLElBQUksS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ3JGLElBQUksS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUM5QixJQUFJLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUksS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7SUFDN0IsSUFBSSxLQUFLLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLElBQUksS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDM0IsSUFBSSxLQUFLLENBQUMsdUNBQXVDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELElBQUksS0FBSyxDQUFDLDBCQUEwQixFQUFFLENBQUMsQ0FBQztDQUN6QyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLHNDQUFzQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVuSixNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEksTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMscUJBQXFCLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsc0JBQXNCLEVBQUUsMEJBQTBCLENBQUMsQ0FBQyJ9\",\"filename\":\"/corp/utils/stages.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AGRI_DIV_NAME, AGRI_MATERIAL, UNLOCKS } from 'const/corp';\\nimport { checkAgroEmployees, checkAgroMaterials, checkAgroWarehouse, checkEmployeeStats, checkUpgrades, setSubstage, } from 'corp/utils/functions';\\nimport { CORP_AGRI_MAN_STAGE, CORP_AGRI_SETUP_STAGE } from 'corp/utils/stages';\\n// SETUP AGRI CHECK\\nexport function checkAgriSetupStage(ns, c, corp) {\\n    let currentStage = undefined;\\n    if (!corp.divisions.includes(AGRI_DIV_NAME)) {\\n        return CORP_AGRI_SETUP_STAGE;\\n    }\\n    else if (!c.hasUnlockUpgrade(UNLOCKS.SSU)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 1);\\n    }\\n    else if (c.getDivision(AGRI_DIV_NAME).cities.length < Object.keys(ns.enums.CityName).length) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 2);\\n    }\\n    else if (c.getDivision(AGRI_DIV_NAME).awareness + c.getDivision(AGRI_DIV_NAME).popularity < 0.1) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 3);\\n    }\\n    else if (!checkAgroWarehouse(ns, c, 2)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 4);\\n    }\\n    else if (!checkUpgrades(c, 2)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 5);\\n    }\\n    else if (!checkAgroMaterials(ns, c, AGRI_MATERIAL.stage1)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 6);\\n    }\\n    else if (!checkEmployeeStats(ns, c)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 7);\\n    }\\n    return currentStage;\\n}\\n// MANTAINANCE AGRI CHECK\\nexport function checkAgriManStage(ns, c) {\\n    let currentStage = undefined;\\n    if (c.getInvestmentOffer().round === 1) {\\n        return CORP_AGRI_MAN_STAGE;\\n    }\\n    else if (!checkAgroEmployees(ns, c, false)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 1);\\n    }\\n    else if (!checkUpgrades(c, 10, [\\\"Smart Factories\\\" /* UPGRADES.SFA */, \\\"Smart Storage\\\" /* UPGRADES.SST */])) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 2);\\n    }\\n    else if (!checkAgroWarehouse(ns, c, 9)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 3);\\n    }\\n    else if (!checkAgroMaterials(ns, c, AGRI_MATERIAL.stage2)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 4);\\n    }\\n    else if (!checkEmployeeStats(ns, c)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 5);\\n    }\\n    else if (c.getInvestmentOffer().round === 2) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 6);\\n    }\\n    else if (!checkAgroWarehouse(ns, c, 18)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 7);\\n    }\\n    else if (!checkAgroMaterials(ns, c, AGRI_MATERIAL.stage3)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 8);\\n    }\\n    return currentStage;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcnAvYWdyaS9jaGVja3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFZLE1BQU0sWUFBWSxDQUFDO0FBQzdFLE9BQU8sRUFDTCxrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsYUFBYSxFQUNiLFdBQVcsR0FDWixNQUFNLHNCQUFzQixDQUFDO0FBQzlCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxxQkFBcUIsRUFBa0IsTUFBTSxtQkFBbUIsQ0FBQztBQUUvRixtQkFBbUI7QUFDbkIsTUFBTSxVQUFVLG1CQUFtQixDQUFDLEVBQU0sRUFBRSxDQUFjLEVBQUUsSUFBcUI7SUFDL0UsSUFBSSxZQUFZLEdBQUcsU0FBUyxDQUFDO0lBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtRQUMzQyxPQUFPLHFCQUFxQixDQUFDO0tBQzlCO1NBQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDM0MsWUFBWSxHQUFHLFdBQVcsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN0RDtTQUFNLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQUU7UUFDN0YsWUFBWSxHQUFHLFdBQVcsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN0RDtTQUFNLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxD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\",\"filename\":\"/corp/agri/checks.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TOB_DIV_NAME, TOB_PROD1_NAME, TOB_PROD2_NAME } from 'const/corp';\\nimport { checkProductAtLeastDevelopment, checkTobEmployees, checkUpgrades, setSubstage } from 'corp/utils/functions';\\nimport { CORP_TOB_MANTAINANCE_STAGE, CORP_TOB_MIDGAME_STAGE, CORP_TOB_SETUP_STAGE, } from 'corp/utils/stages';\\n// SETUP TOB CHECK\\nexport function checkTobSetupStage(ns, c, corp) {\\n    let currentStage = undefined;\\n    if (!corp.divisions.includes(TOB_DIV_NAME)) {\\n        return CORP_TOB_SETUP_STAGE;\\n    }\\n    else if (c.getDivision(TOB_DIV_NAME).cities.length < Object.keys(ns.enums.CityName).length) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 1);\\n    }\\n    else if (checkTobEmployees(ns, c, 30)) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 2);\\n    }\\n    else if (c.getDivision(TOB_DIV_NAME).products.length === 0 &&\\n        !checkProductAtLeastDevelopment(c, TOB_DIV_NAME, TOB_PROD1_NAME)) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 3);\\n    }\\n    else if (!checkUpgrades(c, 20, [\\\"FocusWires\\\" /* UPGRADES.FWI */, \\\"Speech Processor Implants\\\" /* UPGRADES.SPI */, \\\"Neural Accelerators\\\" /* UPGRADES.NAC */, \\\"Nuoptimal Nootropic Injector Implants\\\" /* UPGRADES.NNI */]) &&\\n        !checkUpgrades(c, 30, [\\\"DreamSense\\\" /* UPGRADES.DSE */]) &&\\n        !checkUpgrades(c, 10, [\\\"Project Insight\\\" /* UPGRADES.PIN */])) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 4);\\n    }\\n    else if (!checkProductAtLeastDevelopment(c, TOB_DIV_NAME, TOB_PROD2_NAME)) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 5);\\n    }\\n    else if (!checkUpgrades(c, 10, [\\\"Wilson Analytics\\\" /* UPGRADES.WAN */])) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 6);\\n    }\\n    return currentStage;\\n}\\nexport function checkTobMidGameStage(ns, c) {\\n    if (c.getDivision(TOB_DIV_NAME).products.length < 3) {\\n        return CORP_TOB_MIDGAME_STAGE;\\n    }\\n    return undefined;\\n}\\n// MANTAINANCE TOBACCHI CHECK\\nexport function checkTobManStage(ns, c) {\\n    if (c.getDivision(TOB_DIV_NAME).products.length >= 3)\\n        return CORP_TOB_MANTAINANCE_STAGE;\\n    return undefined;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcnAvdG9iYWNjaGkvY2hlY2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBWSxNQUFNLFlBQVksQ0FBQztBQUNwRixPQUFPLEVBQUUsOEJBQThCLEVBQUUsaUJBQWlCLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3JILE9BQU8sRUFDTCwwQkFBMEIsRUFDMUIsc0JBQXNCLEVBQ3RCLG9CQUFvQixHQUVyQixNQUFNLG1CQUFtQixDQUFDO0FBRTNCLGtCQUFrQjtBQUNsQixNQUFNLFVBQVUsa0JBQWtCLENBQUMsRUFBTSxFQUFFLENBQWMsRUFBRSxJQUFxQjtJQUM5RSxJQUFJLFlBQVksR0FBRyxTQUFTLENBQUM7SUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFO1FBQzFDLE9BQU8sb0JBQW9CLENBQUM7S0FDN0I7U0FBTSxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQzVGLFlBQVksR0FBRyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDckQ7U0FBTSxJQUFJLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDdkMsWUFBWSxHQUFHLFdBQVcsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNyRDtTQUFNLElBQ0wsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUM7UUFDakQsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLEVBQUUsWUFBWSxFQUFFLGNBQWMsQ0FBQyxFQUNoRTtRQUNBLFlBQVksR0FBRyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDckQ7U0FBTSxJQUNMLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsdUxBQXdELENBQUM7UUFDL0UsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxpQ0FBYyxDQUFDO1FBQ3JDLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsc0NBQWMsQ0FBQyxFQUNyQztRQUNBLFlBQVksR0FBRyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDckQ7U0FBTSxJQUFJLENBQUMsOEJBQThCLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRSxjQUFjLENBQUMsRUFBRTtRQUMzRSxZQUFZLEdBQUcsV0FBVyxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3JEO1NBQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLHVDQUFjLENBQUMsRUFBRTtRQUNoRCxZQUFZLEdBQUcsV0FBVyxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3JEO0lBQ0QsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQUNELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxFQUFNLEVBQUUsQ0FBYztJQUN6RCxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDbkQsT0FBTyxzQkFBc0IsQ0FBQztLQUMvQjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFDRCw2QkFBNkI7QUFDN0IsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEVBQU0sRUFBRSxDQUFjO0lBQ3JELElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUM7UUFBRSxPQUFPLDBCQUEwQixDQUFDO0lBQ3hGLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMifQ==\",\"filename\":\"/corp/tobacchi/checks.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AGRI_DIV_NAME, CORP_SETUP_UPGRADES, EMP_STATS_CHECK_TIMEOUT, EMP_STAT_CHECK_VALUE, PARTY_BUDGET, TOB_DIV_NAME, } from 'const/corp';\\nimport { checkAgriManStage, checkAgriSetupStage } from 'corp/agri/checks';\\nimport { checkTobManStage, checkTobMidGameStage, checkTobSetupStage } from 'corp/tobacchi/checks';\\nimport { CORP_TOB_SETUP_STAGE } from 'corp/utils/stages';\\nexport function checkAndUpdateStage(ns, c, corp, currentStage = undefined) {\\n    const lastEmpCheck = currentStage ? currentStage.lastEmpStatsCheck : -1;\\n    currentStage = checkAgriSetupStage(ns, c, corp);\\n    if (currentStage === undefined) {\\n        currentStage = checkAgriManStage(ns, c);\\n    }\\n    if (currentStage === undefined)\\n        currentStage = CORP_TOB_SETUP_STAGE;\\n    currentStage = checkTobSetupStage(ns, c, corp);\\n    if (currentStage === undefined) {\\n        currentStage = checkTobMidGameStage(ns, c);\\n    }\\n    if (currentStage === undefined) {\\n        currentStage = checkTobManStage(ns, c);\\n    }\\n    // No valid stage found, this shouldn't ever happen, throw error\\n    if (currentStage === undefined) {\\n        throw new Error(\\\"No valid stage found, this shouldn't ever happen\\\");\\n    }\\n    if (lastEmpCheck > -1)\\n        currentStage.lastEmpStatsCheck = lastEmpCheck;\\n    return currentStage;\\n}\\nexport function checkUpgrades(c, level, upgrades = CORP_SETUP_UPGRADES) {\\n    for (const upgr of upgrades) {\\n        if (c.getUpgradeLevel(upgr) < level) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\nexport function checkAgroWarehouse(ns, c, level) {\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        if (c.getWarehouse(AGRI_DIV_NAME, city).level < level) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\nexport function checkAgroMaterials(ns, c, stage) {\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"AI Cores\\\" /* MATERIALS.AIC */).qty < stage.aiCores) {\\n            return false;\\n        }\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Hardware\\\" /* MATERIALS.HDW */).qty < stage.hardware) {\\n            return false;\\n        }\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Real Estate\\\" /* MATERIALS.RES */).qty < stage.realEstate) {\\n            return false;\\n        }\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Robots\\\" /* MATERIALS.ROB */).qty < stage.robot) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\nexport function checkAgroEmployees(ns, c, moveToRnD = false) {\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        const office = c.getOffice(AGRI_DIV_NAME, city);\\n        if (office.size < 9)\\n            return false;\\n        else if (office.employeeJobs['Research & Development'] > 0 && moveToRnD)\\n            return false;\\n    }\\n    return true;\\n}\\nexport function checkTobEmployees(ns, c, devCityEmp) {\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        const office = c.getOffice(TOB_DIV_NAME, city);\\n        if (city === ns.enums.CityName.Aevum && office.size < devCityEmp)\\n            return false;\\n        if (city !== ns.enums.CityName.Aevum && office.size < (devCityEmp > 60 ? devCityEmp - 60 : 9))\\n            return false;\\n    }\\n    return true;\\n}\\nexport function checkEmployeeStats(ns, c) {\\n    let avgMor = 0;\\n    let avgHap = 0;\\n    let avgEne = 0;\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        avgMor += c.getOffice(AGRI_DIV_NAME, city).avgMor;\\n        avgHap += c.getOffice(AGRI_DIV_NAME, city).avgHap;\\n        avgEne += c.getOffice(AGRI_DIV_NAME, city).avgEne;\\n    }\\n    avgMor /= 6;\\n    avgHap /= 6;\\n    avgEne /= 6;\\n    ns.clearLog();\\n    ns.print('waiting for employee stats to rise');\\n    ns.print('   avg morale: ' + avgMor.toFixed(3) + '/97');\\n    ns.print('avg happiness: ' + avgHap.toFixed(3) + '/97');\\n    ns.print('   avg energy: ' + avgEne.toFixed(3) + '/97');\\n    if (avgMor >= EMP_STAT_CHECK_VALUE && avgHap / 6 >= EMP_STAT_CHECK_VALUE && avgEne >= EMP_STAT_CHECK_VALUE) {\\n        return true;\\n    }\\n    return false;\\n}\\nexport function checkProductAtLeastDevelopment(c, division, name) {\\n    try {\\n        const prod = c.getProduct(division, name);\\n        return prod !== undefined;\\n    }\\n    catch (e) {\\n        return false;\\n    }\\n}\\nexport function checkAndSpeedEmpStats(ns, c, stage) {\\n    if (Date.now() - stage.lastEmpStatsCheck > 60 * 5 * 1000 && !checkEmployeeStats(ns, c)) {\\n        speedEmployeeStats(ns, c, stage);\\n    }\\n}\\nexport function setSubstage(stage, substageIndex) {\\n    stage.subStage = stage.subStages[substageIndex];\\n    return stage;\\n}\\nexport function purchaseAgroMaterials(ns, c, stage) {\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        let material = c.getMaterial(AGRI_DIV_NAME, city, \\\"AI Cores\\\" /* MATERIALS.AIC */);\\n        if (material.qty < stage.aiCores) {\\n            const toBuy = stage.aiCores - material.qty;\\n            c.bulkPurchase(AGRI_DIV_NAME, city, \\\"AI Cores\\\" /* MATERIALS.AIC */, toBuy);\\n        }\\n        material = c.getMaterial(AGRI_DIV_NAME, city, \\\"Hardware\\\" /* MATERIALS.HDW */);\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Hardware\\\" /* MATERIALS.HDW */).qty < stage.hardware) {\\n            const toBuy = stage.aiCores - material.qty;\\n            c.bulkPurchase(AGRI_DIV_NAME, city, \\\"Hardware\\\" /* MATERIALS.HDW */, toBuy);\\n        }\\n        material = c.getMaterial(AGRI_DIV_NAME, city, \\\"Real Estate\\\" /* MATERIALS.RES */);\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Real Estate\\\" /* MATERIALS.RES */).qty < stage.realEstate) {\\n            const toBuy = stage.aiCores - material.qty;\\n            c.bulkPurchase(AGRI_DIV_NAME, city, \\\"Real Estate\\\" /* MATERIALS.RES */, toBuy);\\n        }\\n        material = c.getMaterial(AGRI_DIV_NAME, city, \\\"Robots\\\" /* MATERIALS.ROB */);\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Robots\\\" /* MATERIALS.ROB */).qty < stage.robot) {\\n            const toBuy = stage.aiCores - material.qty;\\n            c.bulkPurchase(AGRI_DIV_NAME, city, \\\"Robots\\\" /* MATERIALS.ROB */, toBuy);\\n        }\\n    }\\n}\\nexport function speedEmployeeStats(ns, c, stage) {\\n    if (stage.lastEmpStatsCheck === -1) {\\n        stage.lastEmpStatsCheck = Date.now();\\n    }\\n    else if (Date.now() - stage.lastEmpStatsCheck > EMP_STATS_CHECK_TIMEOUT) {\\n        for (const city of Object.values(ns.enums.CityName)) {\\n            c.buyCoffee(AGRI_DIV_NAME, city);\\n            c.throwParty(AGRI_DIV_NAME, city, PARTY_BUDGET);\\n        }\\n        stage.lastEmpStatsCheck = -1;\\n    }\\n}\\nexport function manageInvestors(c, minValue, round) {\\n    const offer = c.getInvestmentOffer();\\n    if (offer && offer.round === round && offer.funds > minValue)\\n        return c.acceptInvestmentOffer();\\n    return false;\\n}\\nexport function manageAevumEmployees(ns, c, size) {\\n    while (c.hireEmployee(TOB_DIV_NAME, ns.enums.CityName.Aevum)) { }\\n    const baseline = Math.floor(size / 7);\\n    const business = Math.floor(baseline / 2);\\n    let remaining = business + baseline * 3;\\n    let ops = baseline;\\n    let eng = baseline;\\n    let man = baseline;\\n    let step = 0;\\n    while (remaining > 0) {\\n        switch (step) {\\n            case 0: {\\n                eng++;\\n                break;\\n            }\\n            case 1: {\\n                man++;\\n                break;\\n            }\\n            case 2: {\\n                ops++;\\n                break;\\n            }\\n        }\\n        remaining--;\\n        step = step == 2 ? 0 : step++;\\n    }\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Operations\\\" /* JOBS.OPS */, ops);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Engineer\\\" /* JOBS.ENG */, eng);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Business\\\" /* JOBS.BUS */, business);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Management\\\" /* JOBS.MAN */, man);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcnAvdXRpbHMvZnVuY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxhQUFhLEVBRWIsbUJBQW1CLEVBQ25CLHVCQUF1QixFQUN2QixvQkFBb0IsRUFHcEIsWUFBWSxFQUNaLFlBQVksR0FDYixNQUFNLFlBQVksQ0FBQztBQUNwQixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsb0JBQW9CLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRyxPQUFPLEVBQUUsb0JBQW9CLEVBQWtCLE1BQU0sbUJBQW1CLENBQUM7QUFFekUsTUFBTSxVQUFVLG1CQUFtQixDQUNqQyxFQUFNLEVBQ04sQ0FBYyxFQUNkLElBQXFCLEVBQ3JCLGVBQTJDLFNBQVM7SUFFcEQsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2hELElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtRQUM5QixZQUFZLEdBQUcsaUJBQWlCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3pDO0lBQ0QsSUFBSSxZQUFZLEtBQUssU0FBUztRQUFFLFlBQVksR0FBRyxvQkFBb0IsQ0FBQztJQUNwRSxZQUFZLEdBQUcsa0JBQWtCLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQyxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7UUFDOUIsWUFBWSxHQUFHLG9CQUFvQixDQUFDLEVBQUUsRUFBRSxDQUFDLENB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\",\"filename\":\"/corp/utils/functions.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.bulkPurchase\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CORP_AGRI_MANTAINANCE, CORP_AGRI_SETUP, CORP_MANTAINANCE, CORP_TOBACCHI_MIDGAME, CORP_TOBACCHI_STARTUP, } from 'const/scripts';\\nimport { checkAndUpdateStage } from 'corp/corp-functions';\\n// currentyl crashes the game :(\\n// Starter function, based on the current corp status will spawn related script\\n// Stage script will (should) respawn this until mantainance one\\n// Corp management based on Mughur guide https://docs.google.com/document/d/1eqQ_KTnk3VkW1XLHjM2fAQbCNY05CTCE85mJFjeFDE8\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.enableLog('spawn');\\n    ns.tail();\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.spawn(CORP_AGRI_SETUP, 1);\\n        return;\\n    }\\n    else {\\n        const currentStage = checkAndUpdateStage(ns);\\n        switch (currentStage.mainStage.val) {\\n            case 0: {\\n                ns.spawn(CORP_AGRI_SETUP, 1);\\n                break;\\n            }\\n            case 1: {\\n                ns.spawn(CORP_AGRI_MANTAINANCE, 1);\\n                break;\\n            }\\n            case 2: {\\n                ns.spawn(CORP_TOBACCHI_STARTUP, 1);\\n                break;\\n            }\\n            case 3: {\\n                ns.spawn(CORP_TOBACCHI_MIDGAME, 1);\\n                break;\\n            }\\n            case 4: {\\n                ns.spawn(CORP_MANTAINANCE, 1);\\n                break;\\n            }\\n            default: {\\n                ns.print('ERROR No stage found!');\\n                ns.tail();\\n                break;\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC1zdGFydGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcnAvY29ycC1zdGFydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsZUFBZSxFQUNmLGdCQUFnQixFQUNoQixxQkFBcUIsRUFDckIscUJBQXFCLEdBQ3RCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRzFELGdDQUFnQztBQUNoQywrRUFBK0U7QUFDL0UsZ0VBQWdFO0FBQ2hFLHdIQUF3SDtBQUV4SCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1YsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQztJQUN6QixJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFO1FBQ3ZCLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdCLE9BQU87S0FDUjtTQUFNO1FBQ0wsTUFBTSxZQUFZLEdBQW1CLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdELFFBQVEsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDbEMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDTixFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDN0IsTUFBTTthQUNQO1lBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDTixFQUFFLENBQUMsS0FBSyxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNuQyxNQUFNO2FBQ1A7WUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNOLEVBQUUsQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLE1BQU07YUFDUDtZQUNELEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ04sRUFBRSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDbkMsTUFBTTthQUNQO1lBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDTixFQUFFLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixNQUFNO2FBQ1A7WUFDRCxPQUFPLENBQUMsQ0FBQztnQkFDUCxFQUFFLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7Z0JBQ2xDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDVixNQUFNO2FBQ1A7U0FDRjtLQUNGO0FBQ0gsQ0FBQyJ9\",\"filename\":\"/corp/corp-starter.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:http://bitburner.local/55a94162-7431-4a3a-b931-3507685a7cfd\",\"moduleSequenceNumber\":444},{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/ec6a6d83-e8db-493f-b7fd-36563afa8850\",\"moduleSequenceNumber\":429},{\"filename\":\"/corp/corp-functions.js\",\"url\":\"blob:http://bitburner.local/a47d98d6-f117-4505-8c1a-af658d5beb07\",\"moduleSequenceNumber\":445},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:http://bitburner.local/c8e26a7f-3a38-4ea0-87c6-82c2d631ed4a\",\"moduleSequenceNumber\":423},{\"filename\":\"/corp/corp-starter.js\",\"url\":\"blob:http://bitburner.local/50f6ac0e-4484-4de8-89bb-7eb1e6eff7a9\",\"moduleSequenceNumber\":766}],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AGRI_DIV_NAME, AGRI_MATERIAL, ROUND_1_MIN_AMOUNT, ROUND_2_MIN_AMOUNT } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { checkAndUpdateStage, manageInvestors, purchaseAgroMaterials, speedEmployeeStats } from 'corp/utils/functions';\\nimport { CORP_AGRI_MAN_STAGE } from 'corp/utils/stages';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(ns, c);\\n    }\\n}\\nasync function runStage(ns, c) {\\n    const corp = c.getCorporation();\\n    try {\\n        let currentStage = checkAndUpdateStage(ns, c, corp);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== 0) {\\n            error = true;\\n            ns.print('WARN stage not agri prep, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_AGRI_MAN_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.clearLog();\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    manageStage(ns, c, currentStage);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, c, corp, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            await ns.sleep(500);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Agri startup complete, moving into mantainance.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nfunction manageStage(ns, c, currentStage) {\\n    switch (currentStage.subStage.val) {\\n        case 0: {\\n            manageInvestors(c, ROUND_1_MIN_AMOUNT, 1);\\n            break;\\n        }\\n        case 1: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                const office = c.getOffice(AGRI_DIV_NAME, city);\\n                if (office.size < 9) {\\n                    const toAdd = 9 - office.size;\\n                    c.upgradeOfficeSize(AGRI_DIV_NAME, city, toAdd);\\n                    while (c.hireEmployee(AGRI_DIV_NAME, city)) { }\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 1);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 1);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 1);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Management\\\" /* JOBS.MAN */, 2);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */, 1);\\n                }\\n            }\\n            break;\\n        }\\n        case 2: {\\n            for (const upgr of [\\\"Smart Storage\\\" /* UPGRADES.SST */, \\\"Smart Factories\\\" /* UPGRADES.SFA */]) {\\n                while (c.getUpgradeLevel(upgr) < 10) {\\n                    c.levelUpgrade(upgr);\\n                }\\n            }\\n            break;\\n        }\\n        case 3: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                while (c.getWarehouse(AGRI_DIV_NAME, city).level < 9) {\\n                    c.upgradeWarehouse(AGRI_DIV_NAME, city);\\n                }\\n            }\\n            break;\\n        }\\n        case 4: {\\n            purchaseAgroMaterials(ns, c, AGRI_MATERIAL.stage2);\\n            break;\\n        }\\n        case 5: {\\n            speedEmployeeStats(ns, c, currentStage);\\n            break;\\n        }\\n        case 6: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */, 0);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 3);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 2);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 2);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Management\\\" /* JOBS.MAN */, 2);\\n            }\\n            manageInvestors(c, ROUND_2_MIN_AMOUNT, 1);\\n            break;\\n        }\\n        case 7: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                while (c.getWarehouse(AGRI_DIV_NAME, city).level < 18) {\\n                    c.upgradeWarehouse(AGRI_DIV_NAME, city);\\n                }\\n            }\\n            break;\\n        }\\n        case 8: {\\n            purchaseAgroMaterials(ns, c, AGRI_MATERIAL.stage3);\\n            break;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFudGFpbmFuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29ycC9hZ3JpL21hbnRhaW5hbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFRLGtCQUFrQixFQUFFLGtCQUFrQixFQUFZLE1BQU0sWUFBWSxDQUFDO0FBQ2xILE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLGVBQWUsRUFBRSxxQkFBcUIsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZILE9BQU8sRUFBRSxtQkFBbUIsRUFBa0IsTUFBTSxtQkFBbUIsQ0FBQztBQUV4RSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLE1BQU0sQ0FBQyxHQUFnQixFQUFFLENBQUMsV0FBVyxDQUFDO0lBQ3RDLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7UUFDdkIsRUFBRSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1FBQ3ZFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNCO1NBQU07UUFDTCxNQUFNLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDdkI7QUFDSCxDQUFDO0FBRUQsS0FBSyxVQUFVLFFBQVEsQ0FBQyxFQUFNLEVBQUUsQ0FBYztJQUM1QyxNQUFNLElBQUksR0FBb0IsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ2pELElBQUk7UUFDRixJQUFJLFlBQVksR0FBbUIsbUJBQW1CLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwRSxJQUFJLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDMUIsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUM5QixLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2IsRUFBRSxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1lBQ25DLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNYO2FBQU0sSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUU7WUFDM0MsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNiLEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0VBQWdFLENBQUMsQ0FBQztZQUMzRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDWDtRQUNELE1BQU0sZ0JBQWdCLEdBQUcsbUJBQW1CLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztRQUMzRCxPQUFPLFlBQVksS0FBSyxTQUFTLElBQUksWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEtBQUssZ0JBQWdCLEVBQUU7WUFDcEYsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2QsRUFBRSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsRUFBRSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUN0RyxRQUFRLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO2dCQUNsQyxLQUFLLGdCQUFnQixDQUFDLENBQUM7b0JBQ3JCLFdBQVcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO29CQUNqQyxNQUFNO2lCQUNQO2dCQUNELHdEQUF3RDtnQkFDeEQsT0FBTyxDQUFDLENBQUM7b0JBQ1AsYUFBYSxHQUFHLElBQUksQ0FBQztvQkFDckIsTUFBTTtpQkFDUDthQUNGO1lBQ0QsSUFBSSxhQUFhO2dCQUFFLE1BQU07WUFDekIsWUFBWSxHQUFHLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQzlELEVBQUUsQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUUsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7WUFDcEcsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLEVBQUUsQ0FBQyxLQUFLLENBQUMseURBQXlELENBQUMsQ0FBQztZQUNwRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDWDtRQUNELEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0QixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDWDtBQUNILENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxFQUFNLEVBQUUsQ0FBYyxFQUFFLFlBQTRCO0lBQ3ZFLFFBQVEsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUU7UUFDakMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNOLGVBQWUsQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUMsTUFBTTtTQUNQO1FBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNOLEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNuRCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDaEQsSUFBSSxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtvQkFDbkIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7b0JBQzlCLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO29CQUNoRCxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUU7b0JBQzlDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsSUFBSSwrQkFBWSxDQUFDLENBQUMsQ0FBQztvQkFDekQsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxJQUFJLDZCQUFZLENBQUMsQ0FBQyxDQUFDO29CQUN6RCxDQUFDLENBQUMsb0JBQW9CLENBQUMsYUFBYSxFQUFFLElBQUksNkJBQVksQ0FBQyxDQUFDLENBQUM7b0JBQ3pELENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsSUFBSSwrQkFBWSxDQUFDLENBQUMsQ0FBQztvQkFDekQsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxJQUFJLDJDQUFZLENBQUMsQ0FBQyxDQUFDO2lCQUMxRDthQUNGO1lBQ0QsTUFBTTtTQUNQO1FBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNOLEtBQUssTUFBTSxJQUFJLElBQUksMEVBQTRCLEVBQUU7Z0JBQy9DLE9BQU8sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUU7b0JBQ25DLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3RCO2FBQ0Y7WUFDRCxNQUFNO1NBQ1A7UUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ04sS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ25ELE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRTtvQkFDcEQsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDekM7YUFDRjtZQUNELE1BQU07U0FDUDtRQUNELEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDTixxQkFBcUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuRCxNQUFNO1NBQ1A7UUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ04sa0JBQWtCLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUN4QyxNQUFNO1NBQ1A7UUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ04sS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ25ELENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsSUFBSSwyQ0FBWSxDQUFDLENBQUMsQ0FBQztnQkFDekQsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxJQUFJLCtCQUFZLENBQUMsQ0FBQyxDQUFDO2dCQUN6RCxDQUFDLENBQUMsb0JBQW9CLENBQUMsYUFBYSxFQUFFLElBQUksNkJBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQ3pELENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsSUFBSSw2QkFBWSxDQUFDLENBQUMsQ0FBQztnQkFDekQsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxJQUFJLCtCQUFZLENBQUMsQ0FBQyxDQUFDO2FBQzFEO1lBQ0QsZUFBZSxDQUFDLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxQyxNQUFNO1NBQ1A7UUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ04sS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ25ELE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRTtvQkFDckQsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDekM7YUFDRjtZQUNELE1BQU07U0FDUDtRQUNELEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDTixxQkFBcUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuRCxNQUFNO1NBQ1A7S0FDRjtBQUNILENBQUMifQ==\",\"filename\":\"/corp/agri/mantainance.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.bulkPurchase\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AGRI_DIV_NAME, AGRI_MATERIAL, CORP_NAME, CORP_SETUP_UPGRADES, UNLOCKS } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { checkAndUpdateStage, purchaseAgroMaterials, speedEmployeeStats } from 'corp/utils/functions';\\nimport { CORP_AGRI_SETUP_STAGE } from 'corp/utils/stages';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        const created = c.createCorporation(CORP_NAME, false);\\n        if (!created)\\n            c.createCorporation(CORP_NAME, true);\\n    }\\n    const corp = c.getCorporation();\\n    try {\\n        let currentStage = checkAndUpdateStage(ns, c, corp);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== 0) {\\n            error = true;\\n            ns.print('WARN stage not agri prep, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_AGRI_SETUP_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.clearLog();\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    manageStage(ns, c, currentStage);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, c, corp, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            await ns.sleep(500);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Agri startup complete, moving into mantainance.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nfunction manageStage(ns, c, currentStage) {\\n    switch (currentStage.subStage.val) {\\n        case 0: {\\n            c.expandIndustry('Agriculture', AGRI_DIV_NAME);\\n            break;\\n        }\\n        case 1: {\\n            c.unlockUpgrade(UNLOCKS.SSU);\\n            break;\\n        }\\n        case 2: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                if (!c.getDivision(AGRI_DIV_NAME).cities.includes(city)) {\\n                    c.expandCity(AGRI_DIV_NAME, city);\\n                    c.purchaseWarehouse(AGRI_DIV_NAME, city);\\n                }\\n                c.setSmartSupply(AGRI_DIV_NAME, city, true);\\n                while (c.hireEmployee(AGRI_DIV_NAME, city)) { }\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 1);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 1);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 1);\\n                c.sellMaterial(AGRI_DIV_NAME, city, 'Plants', 'MAX', 'MP');\\n                c.sellMaterial(AGRI_DIV_NAME, city, 'Food', 'MAX', 'MP');\\n            }\\n            break;\\n        }\\n        case 3: {\\n            c.hireAdVert(AGRI_DIV_NAME);\\n            break;\\n        }\\n        case 4: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                while (c.getWarehouse(AGRI_DIV_NAME, city).level < 2) {\\n                    c.upgradeWarehouse(AGRI_DIV_NAME, city);\\n                }\\n            }\\n            break;\\n        }\\n        case 5: {\\n            for (const upgr of CORP_SETUP_UPGRADES) {\\n                while (c.getUpgradeLevel(upgr) < 2) {\\n                    c.levelUpgrade(upgr);\\n                }\\n            }\\n            break;\\n        }\\n        case 6: {\\n            purchaseAgroMaterials(ns, c, AGRI_MATERIAL.stage1);\\n            break;\\n        }\\n        case 7: {\\n            speedEmployeeStats(ns, c, currentStage);\\n            break;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29ycC9hZ3JpL3NldHVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBUSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUscUJBQXFCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RyxPQUFPLEVBQUUscUJBQXFCLEVBQWtCLE1BQU0sbUJBQW1CLENBQUM7QUFFMUUscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixNQUFNLENBQUMsR0FBZ0IsRUFBRSxDQUFDLFdBQVcsQ0FBQztJQUN0QyxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFO1FBQ3ZCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLE9BQU87WUFBRSxDQUFDLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3BEO0lBQ0QsTUFBTSxJQUFJLEdBQW9CLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNqRCxJQUFJO1FBQ0YsSUFBSSxZQUFZLEdBQW1CLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEUsSUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQixJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7WUFD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\",\"filename\":\"/corp/agri/setup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.createCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.unlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.bulkPurchase\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TOB_DIV_NAME, TOB_PROD_ADJUST_END, TOB_PROD_ADJUST_INC, TOB_PROD_ADJUST_LOW, TOB_PROD_ADJUST_START, TOB_PROD_CHECK_CYCLE, TOB_PROD_CHECK_END, TOB_PROD_CHECK_FIRST, TOB_PROD_CHECK_START, TOB_PROD_SETUP_END, TOB_PROD_SETUP_FIRST, TOB_PROD_SETUP_LOOP, TOB_PROD_SETUP_START, } from 'const/corp';\\nexport async function manageProductSell(ns, c, p) {\\n    // setup\\\\adjustment state 0=never sold, 1=first setup, 2=cyclic check and adjustment, 3=complete\\n    let state = prodNotSelling(p) ? TOB_PROD_CHECK_START : TOB_PROD_CHECK_CYCLE;\\n    while (state < 3) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        //and to this part put things you want done exactly once per cycle\\n        p = c.getProduct(TOB_DIV_NAME, p.name);\\n        switch (state) {\\n            case TOB_PROD_CHECK_START: {\\n                c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, p.name, 'MAX', 'MP*1', true);\\n                state = TOB_PROD_CHECK_FIRST;\\n                break;\\n            }\\n            case TOB_PROD_CHECK_FIRST: {\\n                await setupProdRate(ns, c, p);\\n                state = TOB_PROD_CHECK_END;\\n                break;\\n            }\\n            case TOB_PROD_CHECK_CYCLE: {\\n                await checkAndAdjustProdRate(ns, c, p);\\n                state = TOB_PROD_CHECK_END;\\n                break;\\n            }\\n        }\\n    }\\n}\\nasync function setupProdRate(ns, c, p) {\\n    // setup state, 0=before bisection, 1=first bisection, 2=bisection loop, 3=complete\\n    // honestly i don't really like.. will refactor.. maybe\\n    let state = TOB_PROD_SETUP_START;\\n    let x_min = 1;\\n    let x_max = 1;\\n    let x_avg = 1;\\n    while (state < TOB_PROD_SETUP_END) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        //and to this part put things you want done exactly once per cycle\\n        p = c.getProduct(TOB_DIV_NAME, p.name);\\n        const x = Number.parseInt(p.sCost.slice(3));\\n        const prod = p.cityData.Aevum[1];\\n        const sell = p.cityData.Aevum[2];\\n        const rate = prod - sell;\\n        switch (state) {\\n            case TOB_PROD_SETUP_START: {\\n                if (rate <= 0) {\\n                    setProductValueSafe(ns, c, p, x * 2);\\n                }\\n                else {\\n                    state = TOB_PROD_SETUP_FIRST;\\n                }\\n                break;\\n            }\\n            case TOB_PROD_SETUP_FIRST: {\\n                x_min = x / 2;\\n                x_max = x;\\n                x_avg = (x_min + x_max) / 2;\\n                setProductValueSafe(ns, c, p, x_avg);\\n                state = TOB_PROD_SETUP_LOOP;\\n                break;\\n            }\\n            case TOB_PROD_SETUP_LOOP: {\\n                if (prod >= sell)\\n                    x_min = x_avg;\\n                else\\n                    x_max = x_avg;\\n                x_avg = (x_min + x_max) / 2;\\n                if (x_max - x_min > 0.5 && x_avg > 1) {\\n                    setProductValueSafe(ns, c, p, x_avg);\\n                }\\n                else {\\n                    setProductValueSafe(ns, c, p, Math.floor(x_avg));\\n                    state = TOB_PROD_SETUP_END;\\n                }\\n                break;\\n            }\\n        }\\n    }\\n}\\nasync function checkAndAdjustProdRate(ns, c, p) {\\n    // adjust state, 0=start, 1=incr, 2=lower, 3=end\\n    let state = TOB_PROD_ADJUST_START;\\n    let previousState = -1;\\n    while (state < TOB_PROD_ADJUST_END) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        p = c.getProduct(TOB_DIV_NAME, p.name);\\n        const x = Number.parseInt(p.sCost.slice(3));\\n        const prod = p.cityData.Aevum[1];\\n        const sell = p.cityData.Aevum[2];\\n        const rate = prod - sell;\\n        if (rate < 0 && rate > -0.3) {\\n            // rate is ok, no need to adjust\\n            break;\\n        }\\n        //and to this part put things you want done exactly once per cycle\\n        previousState = state;\\n        if (rate > 0)\\n            state = TOB_PROD_ADJUST_LOW;\\n        else if (previousState !== TOB_PROD_ADJUST_LOW)\\n            state = TOB_PROD_ADJUST_INC;\\n        else\\n            state = TOB_PROD_ADJUST_END;\\n        switch (state) {\\n            case TOB_PROD_ADJUST_START: {\\n                break;\\n            }\\n            case TOB_PROD_ADJUST_INC: {\\n                setProductValueSafe(ns, c, p, x + 1);\\n                break;\\n            }\\n            case TOB_PROD_ADJUST_LOW: {\\n                setProductValueSafe(ns, c, p, x - 1);\\n                break;\\n            }\\n        }\\n    }\\n    return;\\n}\\nfunction setProductValueSafe(ns, c, p, value) {\\n    value = Math.max(1, value);\\n    c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, p.name, 'MAX', `MP*${value}`, true);\\n}\\nexport function prodNotSelling(p) {\\n    return (p.sCost === undefined ||\\n        (typeof p.sCost === 'string' && !p.sCost.startsWith('MP*')) ||\\n        p.sCost === 0 ||\\n        p.cityData.Aevum[1] <= 0);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1mdW5jdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29ycC90b2JhY2NoaS9wcm9kdWN0LWZ1bmN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsWUFBWSxFQUNaLG1CQUFtQixFQUNuQixtQkFBbUIsRUFDbkIsbUJBQW1CLEVBQ25CLHFCQUFxQixFQUNyQixvQkFBb0IsRUFDcEIsa0JBQWtCLEVBQ2xCLG9CQUFvQixFQUNwQixvQkFBb0IsRUFDcEIsa0JBQWtCLEVBQ2xCLG9CQUFvQixFQUNwQixtQkFBbUIsRUFDbkIsb0JBQW9CLEdBQ3JCLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsaUJBQWlCLENBQUMsRUFBTSxFQUFFLENBQWMsRUFBRSxDQUFVO0lBQ3hFLGdHQUFnRztJQUNoRyxJQUFJLEtBQUssR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQztJQUM1RSxPQUFPLEtBQUssR0FBRyxDQUFDLEVBQUU7UUFDaEIsT0FBTyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM1QyxnRUFBZ0U7WUFDaEUscUVBQXFFO1lBQ3JFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQjtRQUVELE9BQU8sQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDNUMsZUFBZTtZQUNmLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQjtRQUNELGtFQUFrRTtRQUNsRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLFFBQVEsS0FBSyxFQUFFO1lBQ2IsS0FB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\",\"filename\":\"/corp/tobacchi/product-functions.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CorpResearchName, ROUND_3_MIN_AMOUNT, ROUND_4_MIN_AMOUNT, TOBACCHI_LAB_POINT_THRESHOLD, TOBACCHI_MK_POINT_THRESHOLD, TOB_DIV_NAME, } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { manageProductSell, prodNotSelling as prodNotSetup } from 'corp/tobacchi/product-functions';\\nimport { checkAndUpdateStage, manageAevumEmployees, manageInvestors } from 'corp/utils/functions';\\nimport { CORP_TOB_MANTAINANCE_STAGE } from 'corp/utils/stages';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(c, ns);\\n    }\\n}\\nasync function runStage(c, ns) {\\n    const corp = c.getCorporation();\\n    try {\\n        let currentStage = checkAndUpdateStage(ns, c, corp);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== 2) {\\n            error = true;\\n            ns.print('WARN stage not tobacchi mantainance, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_TOB_MANTAINANCE_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.clearLog();\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            //and to this part put things you want done exactly once per cycle\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, c);\\n                    break;\\n                }\\n                // this should not be possible..\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete) {\\n                ns.print('ERROR Tobacchi mantainance complete, should not be possible.');\\n                ns.tail();\\n                break;\\n            }\\n            currentStage = checkAndUpdateStage(ns, c, corp, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n        }\\n        if (!error) {\\n            ns.print('ERROR Tobacchi mantainance complete, should not be possible.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n        throw e;\\n    }\\n}\\nasync function manageStage(ns, c) {\\n    ns.print('temp, ', c);\\n    while (c.getCorporation().state !== 'EXPORT') {\\n        //when you make your main script, put things you want to be done\\n        //potentially multiple times every cycle, like buying upgrades, here.\\n        await ns.sleep(0);\\n    }\\n    while (c.getCorporation().state === 'EXPORT') {\\n        //same as above\\n        await ns.sleep(0);\\n    }\\n    manageMoney(ns, c);\\n    checkReasearch(ns, c);\\n    checkWilson(c);\\n    adsOrEmployees(ns, c);\\n    upgradeOtherCities(ns, c);\\n    if (hasNoConfiguredProducts(c)) {\\n        checkProducts(ns, c);\\n    }\\n    else {\\n        startDevelop(ns, c);\\n    }\\n}\\nfunction manageMoney(ns, c) {\\n    if (!c.getCorporation().public) {\\n        try {\\n            manageInvestors(c, ROUND_3_MIN_AMOUNT, 3);\\n            if (manageInvestors(c, ROUND_4_MIN_AMOUNT, 4)) {\\n                ns.print('SUCCESS Time to go public');\\n                ns.tail();\\n            }\\n        }\\n        catch (e) {\\n            ns.print('ERROR investment offer: ', e);\\n            ns.tail();\\n        }\\n    }\\n}\\nfunction checkReasearch(ns, c) {\\n    const division = c.getDivision(TOB_DIV_NAME);\\n    if (!c.hasResearched(TOB_DIV_NAME, CorpResearchName.RES_LAB) && division.research > TOBACCHI_LAB_POINT_THRESHOLD) {\\n        c.research(TOB_DIV_NAME, CorpResearchName.RES_LAB);\\n    }\\n    if (!c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT2) &&\\n        !c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT1) &&\\n        division.research > TOBACCHI_MK_POINT_THRESHOLD) {\\n        c.research(TOB_DIV_NAME, CorpResearchName.MKT1);\\n        c.research(TOB_DIV_NAME, CorpResearchName.MKT2);\\n        for (const prod of c.getDivision(TOB_DIV_NAME).products) {\\n            enableMkTa(ns, c, prod);\\n        }\\n    }\\n}\\nfunction hasNoConfiguredProducts(c) {\\n    const products = c.getDivision(TOB_DIV_NAME).products;\\n    return products.some((product) => prodNotSetup(c.getProduct(TOB_DIV_NAME, product)));\\n}\\nfunction startDevelop(ns, c) {\\n    const products = c.getDivision(TOB_DIV_NAME).products;\\n    const prods = [];\\n    for (const product of products) {\\n        prods.push(c.getProduct(TOB_DIV_NAME, product));\\n    }\\n    const prodToUpdate = prods.sort((a, b) => b.rat - a.rat)[0];\\n    const prodName = prodToUpdate.name;\\n    c.discontinueProduct(TOB_DIV_NAME, prodName);\\n    const investment = Math.floor(c.getCorporation().funds / 3);\\n    c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, prodName, investment, investment);\\n}\\nasync function checkProducts(ns, c) {\\n    const productNames = c.getDivision(TOB_DIV_NAME).products;\\n    if (c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT2) && c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT1)) {\\n        for (const product of productNames) {\\n            if (prodNotSetup(c.getProduct(TOB_DIV_NAME, product))) {\\n                c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, product, 'MAX', 'MP', true);\\n                enableMkTa(ns, c, product);\\n            }\\n        }\\n    }\\n    else {\\n        const products = productNames\\n            .map((product) => c.getProduct(TOB_DIV_NAME, product))\\n            .filter((el) => el.developmentProgress >= 100);\\n        const all = [];\\n        for (const prod of products) {\\n            if (!prodNotSetup(prod)) {\\n                all.unshift(prod);\\n            }\\n            else {\\n                all.push(prod);\\n            }\\n        }\\n        await Promise.all(all.map(async (el) => {\\n            manageProductSell(ns, c, el);\\n        }));\\n    }\\n}\\nfunction checkWilson(c) {\\n    if (c.getCorporation().funds > c.getUpgradeLevelCost(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */))\\n        c.levelUpgrade(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */);\\n}\\nfunction adsOrEmployees(ns, c) {\\n    const funds = c.getCorporation().funds;\\n    const advCost = c.getHireAdVertCost(TOB_DIV_NAME);\\n    const employeeCost = c.getOfficeSizeUpgradeCost(TOB_DIV_NAME, ns.enums.CityName.Aevum, 15);\\n    const aevumSize = c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).size;\\n    if (advCost > employeeCost || aevumSize >= 300) {\\n        if (funds > advCost && advCost < funds / 3)\\n            c.hireAdVert(TOB_DIV_NAME);\\n    }\\n    else {\\n        if (funds > employeeCost && employeeCost < funds / 3) {\\n            c.upgradeOfficeSize(TOB_DIV_NAME, ns.enums.CityName.Aevum, 15);\\n            manageAevumEmployees(ns, c, aevumSize + 15);\\n        }\\n    }\\n}\\nfunction upgradeOtherCities(ns, c) {\\n    const funds = c.getCorporation().funds;\\n    const aevumSize = c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).size;\\n    for (const city of Object.values(ns.enums.CityName).filter((el) => el !== ns.enums.CityName.Aevum)) {\\n        const citySize = c.getOffice(TOB_DIV_NAME, city).size;\\n        if (citySize < aevumSize - 60) {\\n            const toAdd = aevumSize - citySize - 60;\\n            const upgradeCost = c.getOfficeSizeUpgradeCost(TOB_DIV_NAME, city, toAdd);\\n            if (upgradeCost < funds / 3) {\\n                c.upgradeOfficeSize(TOB_DIV_NAME, city, toAdd);\\n                while (c.hireEmployee(TOB_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */)) { }\\n            }\\n        }\\n    }\\n}\\nfunction enableMkTa(ns, c, prodName) {\\n    if (c.getProduct(TOB_DIV_NAME, prodName).developmentProgress >= 100 &&\\n        prodNotSetup(c.getProduct(TOB_DIV_NAME, prodName))) {\\n        c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, prodName, 'MAX', 'MP', true);\\n    }\\n    c.setProductMarketTA1(TOB_DIV_NAME, prodName, true);\\n    c.setProductMarketTA2(TOB_DIV_NAME, prodName, true);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFudGFpbmFuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29ycC90b2JhY2NoaS9tYW50YWluYW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBRWhCLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsNEJBQTRCLEVBQzVCLDJCQUEyQixFQUMzQixZQUFZLEdBRWIsTUFBTSxZQUFZLENBQUM7QUFDcEIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxJQUFJLFlBQVksRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBRSxlQUFlLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRyxPQUFPLEVBQUUsMEJBQTBCLEVBQWtCLE1BQU0sbUJBQW1CLENBQUM7QUFFL0UscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixNQUFNLENBQUMsR0FBZ0IsRUFBRSxDQUFDLFdBQVcsQ0FBQztJQUN0QyxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFO1FBQ3ZCLEVBQUUsQ0FBQyxLQUFLLENBQUMsNERBQTRELENBQUMsQ0FBQztRQUN2RSxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztLQUMzQjtTQUFNO1FBQ0wsTUFBTSxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZCO0FBQ0gsQ0FBQztBQUVELEtBQUssVUFBVSxRQUFRLENBQUMsQ0FBYyxFQUFFLEVBQU07SUFDNUMsTUFBTSxJQUFJLEdBQW9CLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNqRCxJQUFJO1FB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\",\"filename\":\"/corp/tobacchi/mantainance.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasResearched\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.research\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.discontinueProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevelCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getHireAdVertCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOfficeSizeUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TOBACCHI_MIN_INVESTMENT_VALUE, TOB_DIV_NAME, TOB_PROD2_NAME, TOB_PROD3_NAME } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { manageProductSell } from 'corp/tobacchi/product-functions';\\nimport { checkAndUpdateStage, manageAevumEmployees } from 'corp/utils/functions';\\nimport { CORP_TOB_MIDGAME_STAGE } from 'corp/utils/stages';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(c, ns);\\n    }\\n}\\nasync function runStage(c, ns) {\\n    const corp = c.getCorporation();\\n    try {\\n        let currentStage = checkAndUpdateStage(ns, c, corp);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== 2) {\\n            error = true;\\n            ns.print('WARN stage not tobacchi midgame, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_TOB_MIDGAME_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.clearLog();\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, c);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, c, corp, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            await ns.sleep(500);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Tobacchi midgame complete, moving into mantainance.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nasync function manageStage(ns, c) {\\n    hireIntoAevum(ns, c);\\n    const prod2 = c.getProduct(TOB_DIV_NAME, TOB_PROD2_NAME);\\n    if (prod2.developmentProgress >= 100) {\\n        try {\\n            const prod3 = c.getProduct(TOB_DIV_NAME, TOB_PROD3_NAME);\\n            if (prod3.developmentProgress >= 100) {\\n                await manageProductSell(ns, c, prod3);\\n            }\\n        }\\n        catch (e) {\\n            if (c.getCorporation().funds > 1e9 * 2)\\n                c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD3_NAME, TOBACCHI_MIN_INVESTMENT_VALUE, TOBACCHI_MIN_INVESTMENT_VALUE);\\n        }\\n        await manageProductSell(ns, c, prod2);\\n    }\\n}\\nfunction hireIntoAevum(ns, c) {\\n    const toAdd = 60 - c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).employees;\\n    if (toAdd > 0) {\\n        c.upgradeOfficeSize(TOB_DIV_NAME, ns.enums.CityName.Aevum, toAdd);\\n        manageAevumEmployees(ns, c, 60);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZ2FtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JwL3RvYmFjY2hpL21pZGdhbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLDZCQUE2QixFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDcEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakYsT0FBTyxFQUFFLHNCQUFzQixFQUFrQixNQUFNLG1CQUFtQixDQUFDO0FBRTNFLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsTUFBTSxDQUFDLEdBQWdCLEVBQUUsQ0FBQyxXQUFXLENBQUM7SUFDdEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsRUFBRTtRQUN2QixFQUFFLENBQUMsS0FBSyxDQUFDLDREQUE0RCxDQUFDLENBQUM7UUFDdkUsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDM0I7U0FBTTtRQUNMLE1BQU0sUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUN2QjtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsUUFBUSxDQUFDLENBQWMsRUFBRSxFQUFNO0lBQzVDLE1BQU0sSUFBSSxHQUFvQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDakQsSUFBSTtRQUNGLElBQUksWUFBWSxHQUFtQixtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BF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\",\"filename\":\"/corp/tobacchi/midgame.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TOBACCHI_MIN_INVESTMENT_VALUE, TOB_DIV_NAME, TOB_PROD1_NAME, TOB_PROD2_NAME, } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { manageProductSell } from 'corp/tobacchi/product-functions';\\nimport { checkAndSpeedEmpStats, checkAndUpdateStage } from 'corp/utils/functions';\\nimport { CORP_TOB_SETUP_STAGE } from 'corp/utils/stages';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(c, ns);\\n    }\\n}\\nasync function runStage(c, ns) {\\n    const corp = c.getCorporation();\\n    try {\\n        let currentStage = checkAndUpdateStage(ns, c, corp);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== 2) {\\n            error = true;\\n            ns.print('WARN stage not tobacchi prep, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_TOB_SETUP_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.clearLog();\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, c, currentStage);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, c, corp, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            await ns.sleep(500);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Tobacchi startup complete, moving into midgame.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nasync function manageStage(ns, c, currentStage) {\\n    switch (currentStage.subStage.val) {\\n        case 0: {\\n            c.expandIndustry('Tobacco', TOB_DIV_NAME);\\n            break;\\n        }\\n        case 1: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                if (!c.getDivision(TOB_DIV_NAME).cities.includes(city)) {\\n                    c.expandCity(TOB_DIV_NAME, city);\\n                    c.purchaseWarehouse(TOB_DIV_NAME, city);\\n                }\\n                c.setSmartSupply(TOB_DIV_NAME, city, true);\\n            }\\n            break;\\n        }\\n        case 2: {\\n            hireIntoAevum(ns, c);\\n            hireIntoOthers(ns, c);\\n            currentStage.lastEmpStatsCheck = Date.now();\\n            break;\\n        }\\n        case 3: {\\n            c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD1_NAME, TOBACCHI_MIN_INVESTMENT_VALUE, TOBACCHI_MIN_INVESTMENT_VALUE);\\n            checkAndSpeedEmpStats(ns, c, currentStage);\\n            break;\\n        }\\n        case 4: {\\n            for (const upgr of [\\\"FocusWires\\\" /* UPGRADES.FWI */, \\\"Speech Processor Implants\\\" /* UPGRADES.SPI */, \\\"Neural Accelerators\\\" /* UPGRADES.NAC */, \\\"Nuoptimal Nootropic Injector Implants\\\" /* UPGRADES.NNI */]) {\\n                while (c.getUpgradeLevel(upgr) < 20) {\\n                    c.levelUpgrade(upgr);\\n                }\\n            }\\n            while (c.getUpgradeLevel(\\\"DreamSense\\\" /* UPGRADES.DSE */) < 30) {\\n                c.levelUpgrade(\\\"DreamSense\\\" /* UPGRADES.DSE */);\\n            }\\n            while (c.getUpgradeLevel(\\\"Project Insight\\\" /* UPGRADES.PIN */) < 10) {\\n                c.levelUpgrade(\\\"Project Insight\\\" /* UPGRADES.PIN */);\\n            }\\n            break;\\n        }\\n        case 5: {\\n            const prod1 = c.getProduct(TOB_DIV_NAME, TOB_PROD1_NAME);\\n            if (prod1.developmentProgress >= 100) {\\n                try {\\n                    c.getProduct(TOB_DIV_NAME, TOB_PROD2_NAME);\\n                }\\n                catch (e) {\\n                    if (c.getCorporation().funds > 1e9 * 3)\\n                        c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD2_NAME, TOBACCHI_MIN_INVESTMENT_VALUE, TOBACCHI_MIN_INVESTMENT_VALUE);\\n                }\\n                await manageProductSell(ns, c, prod1);\\n            }\\n            break;\\n        }\\n        case 6: {\\n            while (c.getUpgradeLevel(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */) < 10) {\\n                c.levelUpgrade(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */);\\n            }\\n            while (c.getCorporation().funds > 4e9) {\\n                c.hireAdVert(TOB_DIV_NAME);\\n            }\\n            break;\\n        }\\n    }\\n}\\nfunction hireIntoAevum(ns, c) {\\n    const toAdd = 30 - c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).employees;\\n    if (toAdd > 0)\\n        c.upgradeOfficeSize(TOB_DIV_NAME, ns.enums.CityName.Aevum, toAdd);\\n    while (c.hireEmployee(TOB_DIV_NAME, ns.enums.CityName.Aevum)) { }\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Operations\\\" /* JOBS.OPS */, 8);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Engineer\\\" /* JOBS.ENG */, 9);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Business\\\" /* JOBS.BUS */, 5);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Management\\\" /* JOBS.MAN */, 8);\\n}\\nfunction hireIntoOthers(ns, c) {\\n    for (const city of Object.values(ns.enums.CityName).filter((el) => el !== ns.enums.CityName.Aevum)) {\\n        const toAdd = 9 - c.getOffice(TOB_DIV_NAME, city).employees;\\n        if (toAdd > 0)\\n            c.upgradeOfficeSize(TOB_DIV_NAME, city, toAdd);\\n        while (c.hireEmployee(TOB_DIV_NAME, city)) { }\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Management\\\" /* JOBS.MAN */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */, 5);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29ycC90b2JhY2NoaS9zZXR1cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBRUwsNkJBQTZCLEVBQzdCLFlBQVksRUFDWixjQUFjLEVBQ2QsY0FBYyxHQUVmLE1BQU0sWUFBWSxDQUFDO0FBQ3BCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDcEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEYsT0FBTyxFQUFFLG9CQUFvQixFQUFrQixNQUFNLG1CQUFtQixDQUFDO0FBRXpFLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsTUFBTSxDQUFDLEdBQWdCLEVBQUUsQ0FBQyxXQUFXLENBQUM7SUFDdEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsRUFBRTtRQUN2QixFQUFFLENBQUMsS0FBSyxDQUFDLDREQUE0RCxDQUFDLENBQUM7UUFDdkUsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDM0I7U0FBTTtRQUNMLE1BQU0sUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUN2QjtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsUUFBUSxDQUFDLENBQWMsRUFBRSxFQUFNO0lBQzVDLE1BQU0sSUFBSSxHQUFvQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDakQsSUFBSTtRQUNGLElBQUksWUFBWSxHQUFtQixtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BFLElB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\",\"filename\":\"/corp/tobacchi/setup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CorpSetupStage {\\n    mainStage;\\n    subStage;\\n    subStages;\\n    lastEmpStatsCheck = -1;\\n    constructor(mainStage, subStages) {\\n        this.mainStage = mainStage;\\n        this.subStages = subStages;\\n        this.subStage = subStages[0];\\n    }\\n    nextStage() {\\n        this.subStage = this.subStages[this.subStage.val + 1];\\n    }\\n}\\nexport class Stage {\\n    name;\\n    val;\\n    constructor(name, val) {\\n        this.name = name;\\n        this.val = val;\\n    }\\n}\\nexport const CORP_AGRI_SETUP_STAGE = new CorpSetupStage(new Stage('Agricolture Setup', 0), [\\n    new Stage('CreateDivision', 0),\\n    new Stage('BuySmartSupply', 1),\\n    new Stage('ExpandToCities', 2),\\n    new Stage('BuyAdvert', 3),\\n    new Stage('ExpandWarehouse', 4),\\n    new Stage('BuyUpgrades', 5),\\n    new Stage('BuyMaterials', 6),\\n    new Stage('WaitForEmployees', 7),\\n]);\\nexport const CORP_AGRI_MAN_STAGE = new CorpSetupStage(new Stage('Agricolture Mantainance', 1), [\\n    new Stage('1stInvestor', 0),\\n    new Stage('UpgradeEmployees', 1),\\n    new Stage('BuyUpgrades', 2),\\n    new Stage('ExpandWarehouse', 3),\\n    new Stage('BuyMaterials', 4),\\n    new Stage('WaitAndRemoveR&D', 5),\\n    new Stage('2ndInvestor&waitEmployees', 6),\\n    new Stage('ExpandWarehouse2', 7),\\n    new Stage('BuyMaterials2', 8),\\n]);\\nexport const CORP_TOB_SETUP_STAGE = new CorpSetupStage(new Stage('Tobacchi Setup', 2), [\\n    new Stage('ExpandTobacchi', 0),\\n    new Stage('EsxpandCities', 1),\\n    new Stage('HireEmployees', 2),\\n    new Stage('StartFirstProduction', 3),\\n    new Stage('BuyUpgrades', 4),\\n    new Stage('CompleteFirstProductionAndStartSecond', 5),\\n    new Stage('WilsonAnalyticsAndAdvert', 6),\\n]);\\nexport const CORP_TOB_MIDGAME_STAGE = new CorpSetupStage(new Stage('Tobacchi Midgame', 3), [\\n    new Stage('CompleteScondProductionAndStartThird', 0),\\n]);\\nexport const CORP_TOB_MANTAINANCE_STAGE = new CorpSetupStage(new Stage('Tobacchi Mantainance', 4), [\\n    new Stage('Mantainance', 0),\\n]);\\nexport const CORP_STAGES = [\\n    CORP_AGRI_SETUP_STAGE,\\n    CORP_AGRI_MAN_STAGE,\\n    CORP_TOB_SETUP_STAGE,\\n    CORP_TOB_MIDGAME_STAGE,\\n    CORP_TOB_MANTAINANCE_STAGE,\\n];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC1zdGFnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29ycC9jb3JwLXN0YWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sY0FBYztJQUN6QixTQUFTLENBQVE7SUFDakIsUUFBUSxDQUFRO0lBQ2hCLFNBQVMsQ0FBVTtJQUNuQixpQkFBaUIsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN2QixZQUFZLFNBQWdCLEVBQUUsU0FBa0I7UUFDOUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELFNBQVM7UUFDUCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLEtBQUs7SUFDaEIsSUFBSSxDQUFTO0lBQ2IsR0FBRyxDQUFTO0lBQ1osWUFBWSxJQUFZLEVBQUUsR0FBVztRQUNuQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNqQixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsRUFBRTtJQUN6RixJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDOUIsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLElBQUksS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUM5QixJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ3pCLElBQUksS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztJQUMvQixJQUFJLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDNUIsSUFBSSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0NBQ2pDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLElBQUksY0FBYyxDQUFDLElBQUksS0FBSyxDQUFDLHlCQUF5QixFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQzdGLElBQUksS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDM0IsSUFBSSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLElBQUksS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDM0IsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDNUIsSUFBSSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLElBQUksS0FBSyxDQUFDLDJCQUEyQixFQUFFLENBQUMsQ0FBQztJQUN6QyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7SUFDaEMsSUFBSSxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztDQUM5QixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsRUFBRTtJQUNyRixJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDOUIsSUFBSSxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztJQUM3QixJQUFJLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUksS0FBSyxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQztJQUNwQyxJQUFJLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLElBQUksS0FBSyxDQUFDLHVDQUF1QyxFQUFFLENBQUMsQ0FBQztJQUNyRCxJQUFJLEtBQUssQ0FBQywwQkFBMEIsRUFBRSxDQUFDLENBQUM7Q0FDekMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLEVBQUU7SUFDekYsSUFBSSxLQUFLLENBQUMsc0NBQXNDLEVBQUUsQ0FBQyxDQUFDO0NBQ3JELENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLElBQUksY0FBYyxDQUFDLElBQUksS0FBSyxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ2pHLElBQUksS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7Q0FDNUIsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHO0lBQ3pCLHFCQUFxQjtJQUNyQixtQkFBbUI7SUFDbkIsb0JBQW9CO0lBQ3BCLHNCQUFzQjtJQUN0QiwwQkFBMEI7Q0FDM0IsQ0FBQyJ9\",\"filename\":\"/corp/corp-stages.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AGRI_DIV_NAME, AGRI_MATERIAL, BN_VAL_MULTI, CORP_SETUP_UPGRADES, EMP_STATS_CHECK_TIMEOUT, EMP_STAT_CHECK_VALUE, PARTY_BUDGET, TOB_DIV_NAME, TOB_PROD1_NAME, TOB_PROD2_NAME, UNLOCKS, VAL_MULTI_EQ, } from 'const/corp';\\nimport { CORP_AGRI_MAN_STAGE, CORP_AGRI_SETUP_STAGE, CORP_TOB_MANTAINANCE_STAGE, CORP_TOB_MIDGAME_STAGE, CORP_TOB_SETUP_STAGE, } from 'corp/corp-stages';\\nexport function checkAndUpdateStage(ns, currentStage = undefined) {\\n    const lastEmpCheck = currentStage ? currentStage.lastEmpStatsCheck : -1;\\n    currentStage = checkAgriSetupStage(ns);\\n    if (currentStage === undefined) {\\n        currentStage = checkAgriManStage(ns);\\n    }\\n    if (currentStage === undefined) {\\n        currentStage = checkTobSetupStage(ns);\\n    }\\n    if (currentStage === undefined) {\\n        currentStage = checkTobMidGameStage(ns);\\n    }\\n    if (currentStage === undefined) {\\n        currentStage = checkTobManStage(ns);\\n    }\\n    // No valid stage found, this shouldn't ever happen, throw error\\n    if (currentStage === undefined) {\\n        throw new Error(\\\"No valid stage found, this shouldn't ever happen\\\");\\n    }\\n    if (lastEmpCheck > -1)\\n        currentStage.lastEmpStatsCheck = lastEmpCheck;\\n    return currentStage;\\n}\\nexport function checkUpgrades(ns, level, upgrades = CORP_SETUP_UPGRADES) {\\n    const c = ns.corporation;\\n    for (const upgr of upgrades) {\\n        if (c.getUpgradeLevel(upgr) < level) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\nexport function checkAgroWarehouse(ns, size) {\\n    const c = ns.corporation;\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        if (c.getWarehouse(AGRI_DIV_NAME, city).size < size) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\nexport function checkAgroMaterials(ns, stage) {\\n    const c = ns.corporation;\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"AI Cores\\\" /* MATERIALS.AIC */).qty < stage.aiCores) {\\n            return false;\\n        }\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Hardware\\\" /* MATERIALS.HDW */).qty < stage.hardware) {\\n            return false;\\n        }\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Real Estate\\\" /* MATERIALS.RES */).qty < stage.realEstate) {\\n            return false;\\n        }\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Robots\\\" /* MATERIALS.ROB */).qty < stage.robot) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\nexport function checkAgroEmployees(ns, moveToRnD = false) {\\n    const c = ns.corporation;\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        const office = c.getOffice(AGRI_DIV_NAME, city);\\n        if (office.size < 9)\\n            return false;\\n        else if (moveToRnD && office.employeeJobs['Research & Development'] > 0)\\n            return false;\\n    }\\n    return true;\\n}\\nexport function checkTobEmployees(ns, devCityEmp) {\\n    const c = ns.corporation;\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        const office = c.getOffice(TOB_DIV_NAME, city);\\n        if (city === ns.enums.CityName.Aevum && office.size < devCityEmp)\\n            return false;\\n        if (city !== ns.enums.CityName.Aevum && office.size < (devCityEmp > 60 ? devCityEmp - 60 : 9))\\n            return false;\\n    }\\n    return true;\\n}\\nexport function checkAgriEmpNumSetup(ns) {\\n    const cities = Object.values(ns.enums.CityName);\\n    const c = ns.corporation;\\n    let emps = 0;\\n    for (const city of cities) {\\n        emps += c.getOffice(AGRI_DIV_NAME, city).employees;\\n    }\\n    return emps / cities.length === 3;\\n}\\nexport function checkEmployeeStats(ns, divisionName) {\\n    const c = ns.corporation;\\n    let avgMor = 0;\\n    let avgHap = 0;\\n    let avgEne = 0;\\n    const cities = Object.values(ns.enums.CityName);\\n    for (const city of cities) {\\n        avgMor += c.getOffice(divisionName, city).avgMor;\\n        avgHap += c.getOffice(divisionName, city).avgHap;\\n        avgEne += c.getOffice(divisionName, city).avgEne;\\n    }\\n    avgMor /= cities.length;\\n    avgHap /= cities.length;\\n    avgEne /= cities.length;\\n    if (avgMor >= EMP_STAT_CHECK_VALUE && avgHap >= EMP_STAT_CHECK_VALUE && avgEne >= EMP_STAT_CHECK_VALUE) {\\n        return true;\\n    }\\n    return false;\\n}\\nexport function checkProductAtLeastDevelopment(ns, division, name) {\\n    const c = ns.corporation;\\n    try {\\n        const prod = c.getProduct(division, name);\\n        return prod !== undefined;\\n    }\\n    catch (e) {\\n        return false;\\n    }\\n}\\nexport async function checkAndSpeedEmpStats(ns, stage) {\\n    const division = stage.mainStage.val <= CORP_AGRI_MAN_STAGE.mainStage.val ? AGRI_DIV_NAME : TOB_DIV_NAME;\\n    if ((stage.lastEmpStatsCheck === -1 || Date.now() - stage.lastEmpStatsCheck > EMP_STATS_CHECK_TIMEOUT) &&\\n        !checkEmployeeStats(ns, division)) {\\n        await speedEmployeeStats(ns, stage);\\n    }\\n}\\nexport function setSubstage(stage, substageIndex) {\\n    stage.subStage = stage.subStages[substageIndex];\\n    return stage;\\n}\\nexport async function purchaseAgroMaterials(ns, stage) {\\n    let buyComplete = checkAgroMaterials(ns, stage);\\n    const c = ns.corporation;\\n    const materialMap = [\\n        {\\n            material: \\\"AI Cores\\\" /* MATERIALS.AIC */,\\n            value: stage.aiCores,\\n        },\\n        {\\n            material: \\\"Hardware\\\" /* MATERIALS.HDW */,\\n            value: stage.hardware,\\n        },\\n        {\\n            material: \\\"Robots\\\" /* MATERIALS.ROB */,\\n            value: stage.robot,\\n        },\\n        {\\n            material: \\\"Real Estate\\\" /* MATERIALS.RES */,\\n            value: stage.realEstate,\\n        },\\n    ];\\n    while (!buyComplete) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        //and to this part put things you want done exactly once per cycle\\n        for (const city of Object.values(ns.enums.CityName)) {\\n            for (const mat of materialMap) {\\n                const material = c.getMaterial(AGRI_DIV_NAME, city, mat.material);\\n                if (material.qty < mat.value) {\\n                    const toBuy = mat.value - material.qty;\\n                    c.buyMaterial(AGRI_DIV_NAME, city, mat.material, toBuy / 10);\\n                }\\n                else {\\n                    c.buyMaterial(AGRI_DIV_NAME, city, mat.material, 0);\\n                }\\n            }\\n        }\\n        buyComplete = checkAgroMaterials(ns, stage);\\n    }\\n}\\nexport async function speedEmployeeStats(ns, stage) {\\n    const division = stage.mainStage.val <= CORP_AGRI_MAN_STAGE.mainStage.val ? AGRI_DIV_NAME : TOB_DIV_NAME;\\n    let empStatOk = checkEmployeeStats(ns, division);\\n    const c = ns.corporation;\\n    while (!empStatOk) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        if (stage.lastEmpStatsCheck === -1) {\\n            stage.lastEmpStatsCheck = Date.now();\\n        }\\n        else if (Date.now() - stage.lastEmpStatsCheck > EMP_STATS_CHECK_TIMEOUT) {\\n            ns.print('INFO More than ' + EMP_STATS_CHECK_TIMEOUT / 1000 + 's since last stat push, coffee&party time.');\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                if (c.getOffice(division, city).avgMor < EMP_STAT_CHECK_VALUE ||\\n                    c.getOffice(division, city).avgHap < EMP_STAT_CHECK_VALUE) {\\n                    c.throwParty(division, city, PARTY_BUDGET);\\n                }\\n                if (c.getOffice(division, city).avgEne < EMP_STAT_CHECK_VALUE) {\\n                    c.buyCoffee(division, city);\\n                }\\n            }\\n            stage.lastEmpStatsCheck = -1;\\n        }\\n        empStatOk = checkEmployeeStats(ns, division);\\n    }\\n}\\nexport function manageInvestors(ns, minValue, round) {\\n    const c = ns.corporation;\\n    const offer = c.getInvestmentOffer();\\n    const bnEvalued = minValue * (BN_VAL_MULTI + BN_VAL_MULTI * VAL_MULTI_EQ);\\n    ns.print('INFO Investment wanted round: ', round);\\n    ns.print('INFO Investment current round: ', offer.round);\\n    ns.print('INFO Investment wanted funds: ', ns.formatNumber(minValue));\\n    ns.print('INFO Investment BN coeff funds: ', ns.formatNumber(bnEvalued));\\n    ns.print('INFO Investment current funds: ', ns.formatNumber(offer.funds));\\n    if (offer && offer.round === round && offer.funds > bnEvalued)\\n        return c.acceptInvestmentOffer();\\n    return false;\\n}\\nexport function manageAevumEmployees(ns) {\\n    const c = ns.corporation;\\n    while (c.hireEmployee(TOB_DIV_NAME, ns.enums.CityName.Aevum)) { }\\n    const all = c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).employees;\\n    const baseline = Math.floor((all * 2) / 7);\\n    const bus = Math.floor(baseline / 2);\\n    let remaining = all - bus - baseline * 3;\\n    let ops = baseline;\\n    let eng = baseline;\\n    let man = baseline;\\n    let step = 0;\\n    while (remaining > 0) {\\n        switch (step) {\\n            case 0: {\\n                eng++;\\n                break;\\n            }\\n            case 1: {\\n                man++;\\n                break;\\n            }\\n            case 2: {\\n                ops++;\\n                break;\\n            }\\n        }\\n        remaining--;\\n        step++;\\n        if (step > 2)\\n            step = 0;\\n    }\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Operations\\\" /* JOBS.OPS */, 0);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Engineer\\\" /* JOBS.ENG */, 0);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Business\\\" /* JOBS.BUS */, 0);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Management\\\" /* JOBS.MAN */, 0);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Operations\\\" /* JOBS.OPS */, ops);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Engineer\\\" /* JOBS.ENG */, eng);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Business\\\" /* JOBS.BUS */, bus);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Management\\\" /* JOBS.MAN */, man);\\n}\\n// SETUP AGRI CHECK\\nexport function checkAgriSetupStage(ns) {\\n    ns.print('INFO check agri setup');\\n    const c = ns.corporation;\\n    const corp = c.getCorporation();\\n    let currentStage = undefined;\\n    if (!corp.divisions.includes(AGRI_DIV_NAME)) {\\n        return CORP_AGRI_SETUP_STAGE;\\n    }\\n    else if (!c.hasUnlockUpgrade(UNLOCKS.SSU)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 1);\\n    }\\n    else if (c.getDivision(AGRI_DIV_NAME).cities.length < Object.keys(ns.enums.CityName).length) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 2);\\n    }\\n    else if (c.getDivision(AGRI_DIV_NAME).awareness + c.getDivision(AGRI_DIV_NAME).popularity < 0.1) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 3);\\n    }\\n    else if (!checkAgroWarehouse(ns, 300)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 4);\\n    }\\n    else if (!checkUpgrades(ns, 2)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 5);\\n    }\\n    else if (!checkAgroMaterials(ns, AGRI_MATERIAL.stage1)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 6);\\n    }\\n    else if (checkAgriEmpNumSetup(ns) && !checkEmployeeStats(ns, AGRI_DIV_NAME)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 7);\\n    }\\n    return currentStage;\\n}\\n// MANTAINANCE AGRI CHECK\\nexport function checkAgriManStage(ns) {\\n    const c = ns.corporation;\\n    let currentStage = undefined;\\n    if (c.getInvestmentOffer().round === 1) {\\n        return CORP_AGRI_MAN_STAGE;\\n    }\\n    else if (!checkAgroEmployees(ns, false)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 1);\\n    }\\n    else if (!checkUpgrades(ns, 10, [\\\"Smart Factories\\\" /* UPGRADES.SFA */, \\\"Smart Storage\\\" /* UPGRADES.SST */])) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 2);\\n    }\\n    else if (!checkAgroWarehouse(ns, 2000)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 3);\\n    }\\n    else if (!checkAgroMaterials(ns, AGRI_MATERIAL.stage2)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 4);\\n    }\\n    else if (!checkAgroEmployees(ns, true)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 5);\\n    }\\n    else if (c.getInvestmentOffer().round === 2) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 6);\\n    }\\n    else if (!checkAgroWarehouse(ns, 3800)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 7);\\n    }\\n    else if (!checkAgroMaterials(ns, AGRI_MATERIAL.stage3)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 8);\\n    }\\n    return currentStage;\\n}\\n// SETUP TOB CHECK\\nexport function checkTobSetupStage(ns) {\\n    const c = ns.corporation;\\n    const corp = c.getCorporation();\\n    let currentStage = undefined;\\n    if (!corp.divisions.includes(TOB_DIV_NAME)) {\\n        return CORP_TOB_SETUP_STAGE;\\n    }\\n    else if (c.getDivision(TOB_DIV_NAME).cities.length < Object.keys(ns.enums.CityName).length) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 1);\\n    }\\n    else if (!checkTobEmployees(ns, 30)) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 2);\\n    }\\n    else if (c.getDivision(TOB_DIV_NAME).products.length === 0 &&\\n        !checkProductAtLeastDevelopment(ns, TOB_DIV_NAME, TOB_PROD1_NAME)) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 3);\\n    }\\n    else if (!checkUpgrades(ns, 20, [\\\"FocusWires\\\" /* UPGRADES.FWI */, \\\"Speech Processor Implants\\\" /* UPGRADES.SPI */, \\\"Neural Accelerators\\\" /* UPGRADES.NAC */, \\\"Nuoptimal Nootropic Injector Implants\\\" /* UPGRADES.NNI */]) &&\\n        !checkUpgrades(ns, 30, [\\\"DreamSense\\\" /* UPGRADES.DSE */]) &&\\n        !checkUpgrades(ns, 10, [\\\"Project Insight\\\" /* UPGRADES.PIN */])) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 4);\\n    }\\n    else if (!checkProductAtLeastDevelopment(ns, TOB_DIV_NAME, TOB_PROD2_NAME)) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 5);\\n    }\\n    else if (!checkUpgrades(ns, 10, [\\\"Wilson Analytics\\\" /* UPGRADES.WAN */])) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 6);\\n    }\\n    return currentStage;\\n}\\nexport function checkTobMidGameStage(ns) {\\n    const c = ns.corporation;\\n    if (c.getDivision(TOB_DIV_NAME).products.length < 3) {\\n        return CORP_TOB_MIDGAME_STAGE;\\n    }\\n    return undefined;\\n}\\n// MANTAINANCE TOBACCHI CHECK\\nexport function checkTobManStage(ns) {\\n    const c = ns.corporation;\\n    if (c.getDivision(TOB_DIV_NAME).products.length >= 3)\\n        return CORP_TOB_MANTAINANCE_STAGE;\\n    return undefined;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC1mdW5jdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29ycC9jb3JwLWZ1bmN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsYUFBYSxFQUNiLGFBQWEsRUFFYixZQUFZLEVBQ1osbUJBQW1CLEVBQ25CLHVCQUF1QixFQUN2QixvQkFBb0IsRUFHcEIsWUFBWSxFQUNaLFlBQVksRUFDWixjQUFjLEVBQ2QsY0FBYyxFQUNkLE9BQU8sRUFFUCxZQUFZLEdBQ2IsTUFBTSxZQUFZLENBQUM7QUFDcEIsT0FBTyxFQUNMLG1CQUFtQixFQUNuQixxQkFBcUIsRUFDckIsMEJBQTBCLEVBQzFCLHNCQUFzQixFQUN0QixvQkFBb0IsR0FFckIsTUFBTSxrQkFBa0IsQ0FBQztBQUcxQixNQUFNLFVBQVUsbUJBQW1CLENBQUMsRUFBTSxFQUFFLGVBQTJDLFNBQVM7SUFDOUYsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QyxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7UUFDOUIsWUFBWSxHQUFHLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3RDO0lBQ0QsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO1FBQzlCLFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN2QztJQUNELElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtRQUM5QixZQUFZLEdBQUcsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDekM7SUFDRCxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7UUFDOUIsWUFBWSxHQUFHLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3JDO0lBQ0QsZ0VBQWdFO0lBQ2hFLElB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\",\"filename\":\"/corp/corp-functions.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AGRI_DIV_NAME, AGRI_MATERIAL, ROUND_1_MIN_AMOUNT, ROUND_2_MIN_AMOUNT } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { checkAndUpdateStage, manageInvestors, purchaseAgroMaterials, speedEmployeeStats } from 'corp/corp-functions';\\nimport { CORP_AGRI_MAN_STAGE } from 'corp/corp-stages';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.enableLog('spawn');\\n    ns.tail();\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(ns);\\n    }\\n}\\nasync function runStage(ns) {\\n    try {\\n        let currentStage = checkAndUpdateStage(ns);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== CORP_AGRI_MAN_STAGE.mainStage.val) {\\n            error = true;\\n            ns.print('WARN stage not agri prep, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_AGRI_MAN_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, currentStage);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            await ns.sleep(500);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Agri startup complete, moving into mantainance.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nasync function manageStage(ns, currentStage) {\\n    const c = ns.corporation;\\n    switch (currentStage.subStage.val) {\\n        case 0: {\\n            manageInvestors(ns, ROUND_1_MIN_AMOUNT, 1);\\n            break;\\n        }\\n        case 1: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                const office = c.getOffice(AGRI_DIV_NAME, city);\\n                if (office.size < 9) {\\n                    const toAdd = 9 - office.size;\\n                    c.upgradeOfficeSize(AGRI_DIV_NAME, city, toAdd);\\n                    while (c.hireEmployee(AGRI_DIV_NAME, city)) { }\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 2);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 2);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 2);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Management\\\" /* JOBS.MAN */, 2);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */, 1);\\n                }\\n            }\\n            break;\\n        }\\n        case 2: {\\n            for (const upgr of [\\\"Smart Storage\\\" /* UPGRADES.SST */, \\\"Smart Factories\\\" /* UPGRADES.SFA */]) {\\n                while (c.getUpgradeLevel(upgr) < 10) {\\n                    c.levelUpgrade(upgr);\\n                }\\n            }\\n            break;\\n        }\\n        case 3: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                while (c.getWarehouse(AGRI_DIV_NAME, city).size < 2000) {\\n                    c.upgradeWarehouse(AGRI_DIV_NAME, city);\\n                }\\n            }\\n            break;\\n        }\\n        case 4: {\\n            await purchaseAgroMaterials(ns, AGRI_MATERIAL.stage2);\\n            break;\\n        }\\n        case 5: {\\n            await ns.sleep(30 * 1000);\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */, 0);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 3);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 2);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 2);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Management\\\" /* JOBS.MAN */, 2);\\n            }\\n            break;\\n        }\\n        case 6: {\\n            if (c.getCorporation().funds > 1e9)\\n                await speedEmployeeStats(ns, currentStage);\\n            const invested = manageInvestors(ns, ROUND_2_MIN_AMOUNT, 2);\\n            if (invested)\\n                await speedEmployeeStats(ns, currentStage);\\n            break;\\n        }\\n        case 7: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                while (c.getWarehouse(AGRI_DIV_NAME, city).size < 3800) {\\n                    c.upgradeWarehouse(AGRI_DIV_NAME, city);\\n                }\\n            }\\n            break;\\n        }\\n        case 8: {\\n            await purchaseAgroMaterials(ns, AGRI_MATERIAL.stage3);\\n            break;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdyaS1tYW50YWluYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JwL2FncmktbWFudGFpbmFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQVEsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQVksTUFBTSxZQUFZLENBQUM7QUFDbEgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsZUFBZSxFQUFFLHFCQUFxQixFQUFFLGtCQUFrQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEgsT0FBTyxFQUFFLG1CQUFtQixFQUFrQixNQUFNLGtCQUFrQixDQUFDO0FBRXZFLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDVixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDO0lBQ3pCLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7UUFDdkIsRUFBRSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1FBQ3ZFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNCO1NBQU07UUFDTCxNQUFNLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsUUFBUSxDQUFDLEVBQU07SUFDNUIsSUFBSTtRQUNGLElBQUksWUFBWSxHQUFtQixtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzRCxJQUFJLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDMUIs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\",\"filename\":\"/corp/agri-mantainance.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:http://bitburner.local/b21666f5-3fa5-436f-9822-263232055b91\",\"moduleSequenceNumber\":444},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:http://bitburner.local/fc1e98a0-37e2-4e5e-a86f-713fbc268fe1\",\"moduleSequenceNumber\":444},{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/3afe806f-3bd8-4fc8-8ff3-b57cfd9f4aa2\",\"moduleSequenceNumber\":429},{\"filename\":\"/corp/corp-functions.js\",\"url\":\"blob:http://bitburner.local/64135746-9fdf-4cd3-adb0-a15e962fd8d9\",\"moduleSequenceNumber\":445},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:http://bitburner.local/18a0dc7c-f508-4aa9-ad28-3a0290e59e93\",\"moduleSequenceNumber\":423},{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/3608f6a7-43e1-4da6-b73c-5488b15b246d\",\"moduleSequenceNumber\":429},{\"filename\":\"/corp/agri-mantainance.js\",\"url\":\"blob:http://bitburner.local/fd431419-fd2d-4f84-a294-4ac16ec84aac\",\"moduleSequenceNumber\":853}],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AGRI_DIV_NAME, AGRI_MATERIAL, CORP_NAME, CORP_SETUP_UPGRADES, UNLOCKS } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { checkAndUpdateStage, purchaseAgroMaterials, speedEmployeeStats } from 'corp/corp-functions';\\nimport { CORP_AGRI_SETUP_STAGE } from 'corp/corp-stages';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.enableLog('spawn');\\n    ns.tail();\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        try {\\n            c.createCorporation(CORP_NAME, false);\\n        }\\n        catch (e) {\\n            c.createCorporation(CORP_NAME, true);\\n        }\\n    }\\n    try {\\n        let currentStage = checkAndUpdateStage(ns);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== CORP_AGRI_SETUP_STAGE.mainStage.val) {\\n            error = true;\\n            ns.print('WARN stage not agri prep, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_AGRI_SETUP_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, currentStage);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            await ns.sleep(500);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Agri startup complete, moving into mantainance.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nasync function manageStage(ns, currentStage) {\\n    const c = ns.corporation;\\n    switch (currentStage.subStage.val) {\\n        case 0: {\\n            c.expandIndustry('Agriculture', AGRI_DIV_NAME);\\n            break;\\n        }\\n        case 1: {\\n            c.unlockUpgrade(UNLOCKS.SSU);\\n            break;\\n        }\\n        case 2: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                if (!c.getDivision(AGRI_DIV_NAME).cities.includes(city)) {\\n                    c.expandCity(AGRI_DIV_NAME, city);\\n                    c.purchaseWarehouse(AGRI_DIV_NAME, city);\\n                }\\n                c.setSmartSupply(AGRI_DIV_NAME, city, true);\\n                while (c.hireEmployee(AGRI_DIV_NAME, city)) { }\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 1);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 1);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 1);\\n                c.sellMaterial(AGRI_DIV_NAME, city, 'Plants', 'MAX', 'MP');\\n                c.sellMaterial(AGRI_DIV_NAME, city, 'Food', 'MAX', 'MP');\\n            }\\n            break;\\n        }\\n        case 3: {\\n            c.hireAdVert(AGRI_DIV_NAME);\\n            break;\\n        }\\n        case 4: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                while (c.getWarehouse(AGRI_DIV_NAME, city).size < 300) {\\n                    c.upgradeWarehouse(AGRI_DIV_NAME, city);\\n                }\\n            }\\n            break;\\n        }\\n        case 5: {\\n            for (const upgr of CORP_SETUP_UPGRADES) {\\n                while (c.getUpgradeLevel(upgr) < 2) {\\n                    c.levelUpgrade(upgr);\\n                }\\n            }\\n            break;\\n        }\\n        case 6: {\\n            await purchaseAgroMaterials(ns, AGRI_MATERIAL.stage1);\\n            break;\\n        }\\n        case 7: {\\n            await speedEmployeeStats(ns, currentStage);\\n            break;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdyaS1zZXR1cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JwL2Fncmktc2V0dXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLG1CQUFtQixFQUFRLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6RyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxxQkFBcUIsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JHLE9BQU8sRUFBRSxxQkFBcUIsRUFBa0IsTUFBTSxrQkFBa0IsQ0FBQztBQUV6RSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1YsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQztJQUN6QixJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFO1FBQ3ZCLElBQUk7WUFDRixDQUFDLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3ZDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixDQUFDLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3RDO0tBQ0Y7SUFDRCxJQUFJO1FBQ0YsSUFBSSxZQUFZLEdBQW1CLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNELElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxZQUFZLEtBQUssU0FB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\",\"filename\":\"/corp/agri-setup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:http://bitburner.local/74601204-068d-4607-81c4-0959138a4764\",\"moduleSequenceNumber\":444},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:http://bitburner.local/fdee2830-d122-4b3e-906c-bc449e96d028\",\"moduleSequenceNumber\":444},{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/060b8c52-590b-481b-af4b-83bc2fe04e89\",\"moduleSequenceNumber\":429},{\"filename\":\"/corp/corp-functions.js\",\"url\":\"blob:http://bitburner.local/85b42e1a-78b3-4b2e-81ae-3f9c35543b8b\",\"moduleSequenceNumber\":445},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:http://bitburner.local/8b00877d-ebac-48d8-b17b-3b7fc4f30a41\",\"moduleSequenceNumber\":423},{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/f6e75298-fdf1-405e-9311-b57c59899a17\",\"moduleSequenceNumber\":429},{\"filename\":\"/corp/agri-setup.js\",\"url\":\"blob:http://bitburner.local/ae61e8a8-5eca-484d-98f0-bb6999775e82\",\"moduleSequenceNumber\":1531}],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.createCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.unlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TOB_DIV_NAME, TOB_PROD_CHECK_CYCLE, TOB_PROD_CHECK_END, TOB_PROD_CHECK_FIRST, TOB_PROD_CHECK_START, TOB_PROD_SETUP_END, TOB_PROD_SETUP_FIRST, TOB_PROD_SETUP_LOOP, TOB_PROD_SETUP_START, } from 'const/corp';\\nexport async function manageProductSell(ns, c, p) {\\n    // setup\\\\adjustment state 0=never sold, 1=first setup, 2=cyclic check and adjustment, 3=complete\\n    let state = prodNotSelling(p) ? TOB_PROD_CHECK_START : TOB_PROD_CHECK_CYCLE;\\n    while (state < 3) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        //and to this part put things you want done exactly once per cycle\\n        p = c.getProduct(TOB_DIV_NAME, p.name);\\n        switch (state) {\\n            case TOB_PROD_CHECK_START: {\\n                c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, p.name, 'MAX', 'MP*1', true);\\n                state = TOB_PROD_CHECK_FIRST;\\n                break;\\n            }\\n            case TOB_PROD_CHECK_FIRST: {\\n                await setupProdRate(ns, c, p);\\n                state = TOB_PROD_CHECK_END;\\n                break;\\n            }\\n            case TOB_PROD_CHECK_CYCLE: {\\n                await checkAndAdjustProdRate(ns, c, p);\\n                state = TOB_PROD_CHECK_END;\\n                break;\\n            }\\n        }\\n    }\\n}\\nasync function setupProdRate(ns, c, p) {\\n    // setup state, 0=before bisection, 1=first bisection, 2=bisection loop, 3=complete\\n    // honestly i don't really like.. will refactor.. maybe\\n    let state = TOB_PROD_SETUP_START;\\n    let x_min = 1;\\n    let x_max = 1;\\n    let x_avg = 1;\\n    while (state < TOB_PROD_SETUP_END) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        //and to this part put things you want done exactly once per cycle\\n        p = c.getProduct(TOB_DIV_NAME, p.name);\\n        const x = Number.parseInt(p.sCost.slice(3));\\n        const prod = p.cityData.Aevum[1];\\n        const sell = p.cityData.Aevum[2];\\n        const rate = prod - sell;\\n        switch (state) {\\n            case TOB_PROD_SETUP_START: {\\n                if (rate <= 0) {\\n                    setProductValueSafe(ns, c, p, x * 2);\\n                }\\n                else {\\n                    state = TOB_PROD_SETUP_FIRST;\\n                }\\n                break;\\n            }\\n            case TOB_PROD_SETUP_FIRST: {\\n                x_min = x / 2;\\n                x_max = x;\\n                x_avg = (x_min + x_max) / 2;\\n                setProductValueSafe(ns, c, p, x_avg);\\n                state = TOB_PROD_SETUP_LOOP;\\n                break;\\n            }\\n            case TOB_PROD_SETUP_LOOP: {\\n                if (prod >= sell)\\n                    x_min = x_avg;\\n                else\\n                    x_max = x_avg;\\n                x_avg = (x_min + x_max) / 2;\\n                if (x_max - x_min > 0.5 && x_avg > 1) {\\n                    setProductValueSafe(ns, c, p, x_avg);\\n                }\\n                else {\\n                    setProductValueSafe(ns, c, p, Math.floor(x_avg));\\n                    state = TOB_PROD_SETUP_END;\\n                }\\n                break;\\n            }\\n        }\\n    }\\n}\\nasync function checkAndAdjustProdRate(ns, c, p) {\\n    let state = 'start'; // Initial state\\n    let previousState = 'start'; // Previous State\\n    let consecutiveAction = 0; // Counter for consecutive actions\\n    let power = 1; // Power of 10 for multiplier adjustment\\n    let forceOne = false;\\n    let consecutiveIncrLower = 0;\\n    const consecutiveCycles = 3;\\n    while (state !== 'end') {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        p = c.getProduct(TOB_DIV_NAME, p.name);\\n        let multiplier = Number.parseInt(p.sCost.slice(3));\\n        const prod = p.cityData.Aevum[1];\\n        const sell = p.cityData.Aevum[2];\\n        const rate = Math.round((prod - sell + Number.EPSILON) * 10000) / 10000;\\n        if (rate < 0 && rate >= -0.5) {\\n            // Rate is within the acceptable range, no adjustment needed\\n            state = 'end';\\n            break;\\n        }\\n        previousState = state;\\n        // Adjust the multiplier based on the rate and current state\\n        switch (state) {\\n            case 'start': {\\n                if (rate <= 0) {\\n                    // Rate is negative, increase multiplier by one\\n                    multiplier += 1;\\n                    state = 'increment';\\n                }\\n                else {\\n                    // Rate is positive, lower multiplier by one\\n                    multiplier -= 1;\\n                    state = 'lower';\\n                }\\n                consecutiveAction = 0;\\n                break;\\n            }\\n            case 'increment': {\\n                if (rate <= 0) {\\n                    // Price too low, raise the multiplier, if over 5 cycles increment power of 5\\n                    multiplier += power;\\n                    consecutiveAction += 1;\\n                    if (consecutiveAction >= consecutiveCycles) {\\n                        if (!forceOne)\\n                            power *= 10;\\n                        consecutiveAction = 0;\\n                    }\\n                }\\n                else {\\n                    // Price incremented too much, lower power of 5 (not lower than 1) and decrement\\n                    power = Math.max(1, power / 10);\\n                    multiplier -= power;\\n                    state = 'lower';\\n                    consecutiveAction = 0;\\n                }\\n                break;\\n            }\\n            case 'lower': {\\n                if (rate <= 0) {\\n                    // Gone too low, lower power of 5 and increment\\n                    power = Math.max(1, power / 10);\\n                    multiplier += power;\\n                    consecutiveAction = 0;\\n                    state = 'increment';\\n                }\\n                else {\\n                    // Still too high, lower multiplier, if over 5 cycles increment power of 5\\n                    multiplier -= power;\\n                    if (consecutiveAction >= consecutiveCycles) {\\n                        if (!forceOne)\\n                            power *= 10;\\n                        consecutiveAction = 0;\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        if ((state === 'increment' && previousState === 'lower') || (state === 'lower' && previousState === 'increment')) {\\n            consecutiveIncrLower++;\\n            if (consecutiveIncrLower > consecutiveCycles)\\n                forceOne = true;\\n            if (forceOne && state === 'increment' && rate < 0 && consecutiveIncrLower > consecutiveCycles * 2) {\\n                ns.print('WARN infinite increment,lower loop, lower multiplier by one just in case and force exit');\\n                multiplier -= 1;\\n                state = 'end';\\n            }\\n        }\\n        else {\\n            consecutiveIncrLower = 0;\\n        }\\n        if (forceOne)\\n            power = 1;\\n        // Set the new multiplier value\\n        setProductValueSafe(ns, c, p, multiplier);\\n    }\\n}\\nfunction setProductValueSafe(ns, c, p, value) {\\n    value = Math.max(1, Math.floor(value));\\n    c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, p.name, 'MAX', `MP*${value}`, true);\\n}\\nexport function prodNotSelling(p) {\\n    return (p.sCost === undefined ||\\n        (typeof p.sCost === 'string' && !p.sCost.startsWith('MP*')) ||\\n        p.sCost === 0 ||\\n        p.cityData.Aevum[1] <= 0);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1mdW5jdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29ycC9wcm9kdWN0LWZ1bmN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsWUFBWSxFQUtaLG9CQUFvQixFQUNwQixrQkFBa0IsRUFDbEIsb0JBQW9CLEVBQ3BCLG9CQUFvQixFQUNwQixrQkFBa0IsRUFDbEIsb0JBQW9CLEVBQ3BCLG1CQUFtQixFQUNuQixvQkFBb0IsR0FDckIsTUFBTSxZQUFZLENBQUM7QUFFcEIsTUFBTSxDQUFDLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxFQUFNLEVBQUUsQ0FBYyxFQUFFLENBQVU7SUFDeEUsZ0dBQWdHO0lBQ2hHLElBQUksS0FBSyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO0lBQzVFLE9BQU8sS0FBSyxHQUFHLENBQUMsRUFBRTtRQUNoQixPQUFPLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzVDLGdFQUFnRTtZQUNoRSxxRUFBcUU7WUFDckUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25CO1FBRUQsT0FBTyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM1QyxlQUFlO1lBQ2YsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25CO1FBQ0Qsa0VBQWtFO1FBQ2xFLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsUUFBUSxLQUFLLEVBQUU7WUFDYixLQUFLLG9CQUFvQixDQUFDLENBQUM7Z0JBQ3pCLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FB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\",\"filename\":\"/corp/product-functions.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ADV_OR_HIRE_FUNDS_CHECK_MULTIPLIER, CORP_OP_UPGRADES, CORP_OP_UPGRADES_LEVEL, CORP_OP_UPGRADES_UNLOCK_AT, CorpResearchName, ROUND_3_MIN_AMOUNT, ROUND_4_MIN_AMOUNT, TOBACCHI_LAB_POINT_THRESHOLD, TOBACCHI_MK_POINT_THRESHOLD, TOB_DIV_NAME, TOB_PROD4_NAME, TOB_PROD5_NAME, } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { checkAndUpdateStage, checkProductAtLeastDevelopment, manageAevumEmployees, manageInvestors, speedEmployeeStats, } from 'corp/corp-functions';\\nimport { CORP_TOB_MANTAINANCE_STAGE } from 'corp/corp-stages';\\nimport { manageProductSell, prodNotSelling } from 'corp/product-functions';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tail();\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(c, ns);\\n    }\\n}\\nasync function runStage(c, ns) {\\n    try {\\n        let currentStage = checkAndUpdateStage(ns);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== CORP_TOB_MANTAINANCE_STAGE.mainStage.val) {\\n            error = true;\\n            ns.print('WARN stage not tobacchi mantainance, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_TOB_MANTAINANCE_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.print('INFO: Cycle start');\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, c, currentStage);\\n                    break;\\n                }\\n                // this should not be possible..\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete) {\\n                ns.print('ERROR Tobacchi mantainance complete, should not be possible.');\\n                ns.tail();\\n                break;\\n            }\\n            currentStage = checkAndUpdateStage(ns, currentStage);\\n            ns.print('INFO: Cycle end');\\n        }\\n        if (!error) {\\n            ns.print('ERROR Tobacchi mantainance complete, should not be possible.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n        throw e;\\n    }\\n}\\nasync function manageStage(ns, c, stage) {\\n    while (c.getCorporation().state !== 'EXPORT') {\\n        //when you make your main script, put things you want to be done\\n        //potentially multiple times every cycle, like buying upgrades, here.\\n        await checkWilson(ns, c);\\n        await adsOrEmployees(ns, c);\\n        checkUpgrades(ns, c);\\n        await ns.sleep(0);\\n    }\\n    while (c.getCorporation().state === 'EXPORT') {\\n        //same as above\\n        await checkWilson(ns, c);\\n        await adsOrEmployees(ns, c);\\n        checkUpgrades(ns, c);\\n        await ns.sleep(0);\\n    }\\n    //and to this part put things you want done exactly once per cycle\\n    manageMoney(ns, c);\\n    ns.print('INFO Check reasearch');\\n    checkReasearch(ns, c);\\n    ns.print('INFO Check Wilson');\\n    await checkWilson(ns, c);\\n    ns.print('INFO Check Ads/Emps');\\n    await adsOrEmployees(ns, c);\\n    ns.print('INFO Upgrade other cities');\\n    upgradeOtherCities(ns, c);\\n    ns.print('INFO Check emp stats');\\n    await speedEmployeeStats(ns, stage);\\n    await checkAndstartDevelop(ns, c);\\n    ns.print('INFO Check products');\\n    await checkProducts(ns, c);\\n    checkUpgrades(ns, c);\\n}\\nfunction manageMoney(ns, c) {\\n    if (!c.getCorporation().public) {\\n        try {\\n            const round = c.getInvestmentOffer().round;\\n            if (round < 4)\\n                manageInvestors(ns, ROUND_3_MIN_AMOUNT, 3);\\n            if (round === 4 && manageInvestors(ns, ROUND_4_MIN_AMOUNT, 4)) {\\n                ns.print('SUCCESS Time to go public');\\n                ns.tail();\\n            }\\n        }\\n        catch (e) {\\n            ns.print('ERROR investment offer: ', e);\\n            ns.tail();\\n        }\\n    }\\n}\\nfunction checkReasearch(ns, c) {\\n    const division = c.getDivision(TOB_DIV_NAME);\\n    if (!c.hasResearched(TOB_DIV_NAME, CorpResearchName.RES_LAB) && division.research > TOBACCHI_LAB_POINT_THRESHOLD) {\\n        c.research(TOB_DIV_NAME, CorpResearchName.RES_LAB);\\n    }\\n    if (!c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT2) &&\\n        !c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT1) &&\\n        division.research > TOBACCHI_MK_POINT_THRESHOLD) {\\n        c.research(TOB_DIV_NAME, CorpResearchName.MKT1);\\n        c.research(TOB_DIV_NAME, CorpResearchName.MKT2);\\n        for (const prod of c.getDivision(TOB_DIV_NAME).products) {\\n            enableMkTa(ns, c, prod);\\n        }\\n    }\\n}\\nasync function checkAndstartDevelop(ns, c) {\\n    const products = c.getDivision(TOB_DIV_NAME).products;\\n    const prods = [];\\n    for (const product of products) {\\n        prods.push(c.getProduct(TOB_DIV_NAME, product));\\n    }\\n    let availableNumberOfProds = 3;\\n    if (c.hasResearched(TOB_DIV_NAME, CorpResearchName.UPG_CAP1)) {\\n        availableNumberOfProds++;\\n    }\\n    if (c.hasResearched(TOB_DIV_NAME, CorpResearchName.UPG_CAP2)) {\\n        availableNumberOfProds++;\\n    }\\n    const currentNumberOfProds = prods.length;\\n    if (currentNumberOfProds < availableNumberOfProds) {\\n        let investment = Math.floor(c.getCorporation().funds / 3);\\n        if (!checkProductAtLeastDevelopment(ns, TOB_DIV_NAME, TOB_PROD4_NAME))\\n            c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD4_NAME, investment, investment);\\n        investment = Math.floor(c.getCorporation().funds / 3);\\n        if (!checkProductAtLeastDevelopment(ns, TOB_DIV_NAME, TOB_PROD5_NAME))\\n            c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD5_NAME, investment, investment);\\n    }\\n    if (prods.map((el) => el.developmentProgress).filter((el) => el < 100).length <= 0) {\\n        ns.print('INFO start develop');\\n        let prodToUpdate = prods.sort((a, b) => a.rat - b.rat)[0];\\n        const prodName = prodToUpdate.name;\\n        while (prodToUpdate.cityData.Aevum[0] > 0) {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                c.limitProductProduction(TOB_DIV_NAME, city, prodName, 0);\\n            }\\n            await ns.sleep(5000);\\n            prodToUpdate = c.getProduct(TOB_DIV_NAME, prodName);\\n        }\\n        c.discontinueProduct(TOB_DIV_NAME, prodName);\\n        const investment = Math.floor(c.getCorporation().funds / 3);\\n        c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, prodName, investment, investment);\\n    }\\n}\\nasync function checkProducts(ns, c) {\\n    const productNames = c.getDivision(TOB_DIV_NAME).products;\\n    if (c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT2) && c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT1)) {\\n        for (const product of productNames) {\\n            if (prodNotSelling(c.getProduct(TOB_DIV_NAME, product))) {\\n                c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, product, 'MAX', 'MP', true);\\n                enableMkTa(ns, c, product);\\n            }\\n        }\\n    }\\n    else {\\n        const products = productNames\\n            .map((product) => c.getProduct(TOB_DIV_NAME, product))\\n            .filter((el) => el.developmentProgress >= 100)\\n            .sort((a, b) => b.rat - a.rat);\\n        // OLD\\n        const all = [];\\n        for (const prod of products) {\\n            if (prodNotSelling(prod)) {\\n                all.unshift(prod);\\n            }\\n            else {\\n                all.push(prod);\\n            }\\n        }\\n        for (const product of all) {\\n            ns.print('INFO cycle check ', product.name);\\n            await manageProductSell(ns, c, product);\\n        }\\n    }\\n}\\nasync function checkWilson(ns, c) {\\n    while (c.getCorporation().funds > c.getUpgradeLevelCost(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */)) {\\n        c.levelUpgrade(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */);\\n        await ns.sleep(10);\\n    }\\n}\\nasync function adsOrEmployees(ns, c) {\\n    let canBuy = true;\\n    let adsBought = 0;\\n    while (canBuy) {\\n        const funds = c.getCorporation().funds * ADV_OR_HIRE_FUNDS_CHECK_MULTIPLIER;\\n        const advCost = c.getHireAdVertCost(TOB_DIV_NAME);\\n        const employeeCost = c.getOfficeSizeUpgradeCost(TOB_DIV_NAME, ns.enums.CityName.Aevum, 15);\\n        const aevumSize = c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).size;\\n        if (advCost < employeeCost || aevumSize >= 300) {\\n            if (funds > advCost && adsBought < 50) {\\n                adsBought++;\\n                c.hireAdVert(TOB_DIV_NAME);\\n            }\\n            else {\\n                canBuy = false;\\n            }\\n        }\\n        else {\\n            if (funds > employeeCost) {\\n                c.upgradeOfficeSize(TOB_DIV_NAME, ns.enums.CityName.Aevum, 15);\\n                manageAevumEmployees(ns);\\n            }\\n            else {\\n                canBuy = false;\\n            }\\n        }\\n        await ns.sleep(10);\\n    }\\n}\\nfunction upgradeOtherCities(ns, c) {\\n    const funds = c.getCorporation().funds;\\n    const aevumSize = c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).size;\\n    for (const city of Object.values(ns.enums.CityName).filter((el) => el !== ns.enums.CityName.Aevum)) {\\n        const citySize = c.getOffice(TOB_DIV_NAME, city).size;\\n        if (citySize < aevumSize - 60) {\\n            const toAdd = aevumSize - citySize - 60;\\n            const upgradeCost = c.getOfficeSizeUpgradeCost(TOB_DIV_NAME, city, toAdd);\\n            if (upgradeCost < funds / 3) {\\n                c.upgradeOfficeSize(TOB_DIV_NAME, city, toAdd);\\n                while (c.hireEmployee(TOB_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */)) { }\\n            }\\n        }\\n    }\\n}\\nfunction enableMkTa(ns, c, prodName) {\\n    if (c.getProduct(TOB_DIV_NAME, prodName).developmentProgress >= 100 &&\\n        prodNotSelling(c.getProduct(TOB_DIV_NAME, prodName))) {\\n        c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, prodName, 'MAX', 'MP', true);\\n    }\\n    c.setProductMarketTA1(TOB_DIV_NAME, prodName, true);\\n    c.setProductMarketTA2(TOB_DIV_NAME, prodName, true);\\n}\\nfunction checkUpgrades(ns, c) {\\n    if (c.getCorporation().funds > CORP_OP_UPGRADES_UNLOCK_AT) {\\n        for (const upgr of CORP_OP_UPGRADES) {\\n            while (c.getUpgradeLevel(upgr) < CORP_OP_UPGRADES_LEVEL &&\\n                c.getUpgradeLevelCost(upgr) < c.getCorporation().funds) {\\n                c.levelUpgrade(upgr);\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9iLW1hbnRhaW5hbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcnAvdG9iLW1hbnRhaW5hbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxrQ0FBa0MsRUFDbEMsZ0JBQWdCLEVBQ2hCLHNCQUFzQixFQUN0QiwwQkFBMEIsRUFDMUIsZ0JBQWdCLEVBRWhCLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsNEJBQTRCLEVBQzVCLDJCQUEyQixFQUMzQixZQUFZLEVBQ1osY0FBYyxFQUNkLGNBQWMsR0FFZixNQUFNLFlBQVksQ0FBQztBQUNwQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsOEJBQThCLEVBQzlCLG9CQUFvQixFQUNwQixlQUFlLEVBQ2Ysa0JBQWtCLEdBQ25CLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLDBCQUEwQixFQUFrQixNQUFNLGtCQUFrQixDQUFDO0FBQzlFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUUzRSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLE1BQU0sQ0FBQyxHQUFnQixFQUFFLENBQUMsV0FBVyxDQUFDO0lBQ3RDLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7UUFDdkIsRUFBRSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1FBQ3ZFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNCO1NBQU07UUFDTCxNQUFNLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7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\",\"filename\":\"/corp/tob-mantainance.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/d05136c4-f828-4f6d-9e5f-43e77934db97\",\"moduleSequenceNumber\":2528},{\"filename\":\"/corp/product-functions.js\",\"url\":\"blob:http://bitburner.local/57ba4184-de2c-4aac-98aa-678aa2c65156\",\"moduleSequenceNumber\":2547},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:http://bitburner.local/828120c1-140d-440a-b7a2-7b97dd3134b4\",\"moduleSequenceNumber\":2543},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:http://bitburner.local/0da61795-5eef-45e0-816f-18b011316551\",\"moduleSequenceNumber\":2543},{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/30d310ea-058b-4f5b-a9a6-c06924c49bd7\",\"moduleSequenceNumber\":2528},{\"filename\":\"/corp/corp-functions.js\",\"url\":\"blob:http://bitburner.local/50dc629a-9326-436d-839e-54b48fe182b1\",\"moduleSequenceNumber\":2544},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:http://bitburner.local/615c5ee3-b6a4-4650-8f03-676caac08252\",\"moduleSequenceNumber\":2522},{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/3b602b81-0921-4d88-b7f4-c71315debf44\",\"moduleSequenceNumber\":2528},{\"filename\":\"/corp/tob-mantainance.js\",\"url\":\"blob:http://bitburner.local/ee7fd1e3-5d68-431b-8803-fdb534cc662c\",\"moduleSequenceNumber\":2558}],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasResearched\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.research\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.limitProductProduction\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.discontinueProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevelCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getHireAdVertCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOfficeSizeUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TOBACCHI_MIN_INVESTMENT_VALUE, TOB_DIV_NAME, TOB_PROD1_NAME, TOB_PROD2_NAME, TOB_PROD3_NAME, } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { checkAndSpeedEmpStats, checkAndUpdateStage, manageAevumEmployees } from 'corp/corp-functions';\\nimport { CORP_TOB_MIDGAME_STAGE } from 'corp/corp-stages';\\nimport { manageProductSell } from 'corp/product-functions';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tail();\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(c, ns);\\n    }\\n}\\nasync function runStage(c, ns) {\\n    try {\\n        let currentStage = checkAndUpdateStage(ns);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== CORP_TOB_MIDGAME_STAGE.mainStage.val) {\\n            error = true;\\n            ns.print('WARN stage not tobacchi midgame, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_TOB_MIDGAME_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, c, currentStage);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Tobacchi midgame complete, moving into mantainance.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nasync function manageStage(ns, c, currentStage) {\\n    hireIntoAevum(ns, c);\\n    const prod2 = c.getProduct(TOB_DIV_NAME, TOB_PROD2_NAME);\\n    if (prod2.developmentProgress >= 100) {\\n        try {\\n            const prod3 = c.getProduct(TOB_DIV_NAME, TOB_PROD3_NAME);\\n            if (prod3.developmentProgress >= 100) {\\n                await manageProductSell(ns, c, prod3);\\n            }\\n        }\\n        catch (e) {\\n            if (c.getCorporation().funds > 1e9 * 2)\\n                c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD3_NAME, TOBACCHI_MIN_INVESTMENT_VALUE, TOBACCHI_MIN_INVESTMENT_VALUE);\\n        }\\n        await manageProductSell(ns, c, prod2);\\n    }\\n    else {\\n        await checkAndSpeedEmpStats(ns, currentStage);\\n        await manageProductSell(ns, c, c.getProduct(TOB_DIV_NAME, TOB_PROD1_NAME));\\n    }\\n}\\nfunction hireIntoAevum(ns, c) {\\n    const toAdd = 60 - c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).size;\\n    if (toAdd > 0) {\\n        c.upgradeOfficeSize(TOB_DIV_NAME, ns.enums.CityName.Aevum, toAdd);\\n        manageAevumEmployees(ns);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9iLW1pZGdhbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29ycC90b2ItbWlkZ2FtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsNkJBQTZCLEVBQzdCLFlBQVksRUFDWixjQUFjLEVBQ2QsY0FBYyxFQUNkLGNBQWMsR0FDZixNQUFNLFlBQVksQ0FBQztBQUNwQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxzQkFBc0IsRUFBa0IsTUFBTSxrQkFBa0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUUzRCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLE1BQU0sQ0FBQyxHQUFnQixFQUFFLENBQUMsV0FBVyxDQUFDO0lBQ3RDLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7UUFDdkIsRUFBRSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1FBQ3ZFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNCO1NBQU07UUFDTCxNQUFNLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDdkI7QUFDSCxDQUFDO0FBRUQsS0FBSyxVQUFVLFFBQVEsQ0FBQyxDQUFjLEVBQUUsRUFBTTtJQUM1QyxJQUFJO1FBQ0YsSUFBSSxZQUFZLEdBQW1CLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNELElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO1lBQzlCLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDYixFQUFFLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7WUFDbkMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ1g7YUFBTSxJQUFJLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDOUUsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNiLEVBQUUsQ0FBQyxLQUFLLENBQUMsdUVBQXVFLENBQUMsQ0FBQztZQUNsRixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDWDtRQUNELE1BQU0sZ0JBQWdCLEdBQUcsc0JBQXNCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztRQUM5RCxPQUFPLFlBQVksS0FBSyxTQUFTLElBQUksWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEtBQUssZ0JBQWdCLEVBQUU7WUFDcEYsRUFBRSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsRUFBRSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUN0RyxRQUFRLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO2dCQUNsQyxLQUFLLGdCQUFnQixDQUFDLENBQUM7b0JBQ3JCLE1BQU0sV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7b0JBQ3ZDLE1BQU07aUJBQ1A7Z0JBQ0Qsd0RBQXdEO2dCQUN4RCxPQUFPLENBQUMsQ0FBQztvQkFDUCxhQUFhLEdBQUcsSUFBSSxDQUFDO29CQUNyQixNQUFNO2lCQUNQO2FBQ0Y7WUFDRCxJQUFJLGFBQWE7Z0JBQUUsTUFBTTtZQUN6QixZQUFZLEdBQUcsbUJBQW1CLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ3JELEVBQUUsQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUUsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7U0FDckc7UUFDRCxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsRUFBRSxDQUFDLEtBQUssQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO1lBQ3hFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNYO1FBQ0QsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDM0I7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNYO0FBQ0gsQ0FBQztBQUVELEtBQUssVUFBVSxXQUFXLENBQUMsRUFBTSxFQUFFLENBQWMsRUFBRSxZQUE0QjtJQUM3RSxhQUFhLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JCLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3pELElBQUksS0FBSyxDQUFDLG1CQUFtQixJQUFJLEdBQUcsRUFBRTtRQUNwQyxJQUFJO1lBQ0YsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUM7WUFDekQsSUFBSSxLQUFLLENBQUMsbUJBQW1CLElBQUksR0FBRyxFQUFFO2dCQUNwQyxNQUFNLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDdkM7U0FDRjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxDQUFDO2dCQUNwQyxDQUFDLENBQUMsV0FBVyxDQUNYLFlBQVksRUFDWixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQ3ZCLGNBQWMsRUFDZCw2QkFBNkIsRUFDN0IsNkJBQTZCLENBQzlCLENBQUM7U0FDTDtRQUNELE1BQU0saUJBQWlCLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUN2QztTQUFNO1FBQ0wsTUFBTSxxQkFBcUIsQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDOUMsTUFBTSxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7S0FDNUU7QUFDSCxDQUFDO0FBRUQsU0FBUyxhQUFhLENBQUMsRUFBTSxFQUFFLENBQWM7SUFDM0MsTUFBTSxLQUFLLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQztJQUMzRSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7UUFDYixDQUFDLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsRSxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUMxQjtBQUNILENBQUMifQ==\",\"filename\":\"/corp/tob-midgame.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/6ff41004-943f-4686-bba9-3df80f865bdc\",\"moduleSequenceNumber\":429},{\"filename\":\"/corp/product-functions.js\",\"url\":\"blob:http://bitburner.local/c2313c51-5289-4dd5-aa3a-41e2b77491e4\",\"moduleSequenceNumber\":448},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:http://bitburner.local/1420804c-6b62-45d8-ba40-20272c144448\",\"moduleSequenceNumber\":444},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:http://bitburner.local/06bd273a-a92f-4af2-bd98-2fa75b181cfa\",\"moduleSequenceNumber\":444},{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/86d5b2af-33bb-45de-a0d9-f94a585dab10\",\"moduleSequenceNumber\":429},{\"filename\":\"/corp/corp-functions.js\",\"url\":\"blob:http://bitburner.local/1b3491e4-50e0-4b0c-b62d-39cce9125f98\",\"moduleSequenceNumber\":445},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:http://bitburner.local/e91a8c9f-e727-49db-9120-f81f3ab340b5\",\"moduleSequenceNumber\":423},{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/f3793bbb-a0f6-4b02-ac56-ec073b8d44bc\",\"moduleSequenceNumber\":429},{\"filename\":\"/corp/tob-midgame.js\",\"url\":\"blob:http://bitburner.local/3453ebde-74fa-46f4-abfd-0cad5ce57903\",\"moduleSequenceNumber\":3903}],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TOBACCHI_MIN_INVESTMENT_VALUE, TOB_DIV_NAME, TOB_PROD1_NAME, TOB_PROD2_NAME, } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { checkAndSpeedEmpStats, checkAndUpdateStage } from 'corp/corp-functions';\\nimport { CORP_TOB_SETUP_STAGE } from 'corp/corp-stages';\\nimport { manageProductSell } from 'corp/product-functions';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tail();\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(c, ns);\\n    }\\n}\\nasync function runStage(c, ns) {\\n    try {\\n        let currentStage = checkAndUpdateStage(ns);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== CORP_TOB_SETUP_STAGE.mainStage.val) {\\n            error = true;\\n            ns.print('WARN stage not tobacchi prep, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_TOB_SETUP_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            while (c.getCorporation().state !== 'EXPORT') {\\n                //when you make your main script, put things you want to be done\\n                //potentially multiple times every cycle, like buying upgrades, here.\\n                await ns.sleep(0);\\n            }\\n            while (c.getCorporation().state === 'EXPORT') {\\n                //same as above\\n                await ns.sleep(0);\\n            }\\n            //and to this part put things you want done exactly once per cycle\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, c, currentStage);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Tobacchi startup complete, moving into midgame.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nasync function manageStage(ns, c, currentStage) {\\n    switch (currentStage.subStage.val) {\\n        case 0: {\\n            c.expandIndustry('Tobacco', TOB_DIV_NAME);\\n            break;\\n        }\\n        case 1: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                if (!c.getDivision(TOB_DIV_NAME).cities.includes(city)) {\\n                    c.expandCity(TOB_DIV_NAME, city);\\n                    c.purchaseWarehouse(TOB_DIV_NAME, city);\\n                }\\n                c.setSmartSupply(TOB_DIV_NAME, city, true);\\n            }\\n            break;\\n        }\\n        case 2: {\\n            hireIntoAevum(ns, c);\\n            hireIntoOthers(ns, c);\\n            currentStage.lastEmpStatsCheck = Date.now();\\n            break;\\n        }\\n        case 3: {\\n            c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD1_NAME, TOBACCHI_MIN_INVESTMENT_VALUE, TOBACCHI_MIN_INVESTMENT_VALUE);\\n            await checkAndSpeedEmpStats(ns, currentStage);\\n            break;\\n        }\\n        case 4: {\\n            for (const upgr of [\\\"FocusWires\\\" /* UPGRADES.FWI */, \\\"Speech Processor Implants\\\" /* UPGRADES.SPI */, \\\"Neural Accelerators\\\" /* UPGRADES.NAC */, \\\"Nuoptimal Nootropic Injector Implants\\\" /* UPGRADES.NNI */]) {\\n                while (c.getUpgradeLevel(upgr) < 20) {\\n                    c.levelUpgrade(upgr);\\n                }\\n            }\\n            while (c.getUpgradeLevel(\\\"DreamSense\\\" /* UPGRADES.DSE */) < 30) {\\n                c.levelUpgrade(\\\"DreamSense\\\" /* UPGRADES.DSE */);\\n            }\\n            while (c.getUpgradeLevel(\\\"Project Insight\\\" /* UPGRADES.PIN */) < 10) {\\n                c.levelUpgrade(\\\"Project Insight\\\" /* UPGRADES.PIN */);\\n            }\\n            break;\\n        }\\n        case 5: {\\n            const prod1 = c.getProduct(TOB_DIV_NAME, TOB_PROD1_NAME);\\n            if (prod1.developmentProgress >= 100) {\\n                try {\\n                    c.getProduct(TOB_DIV_NAME, TOB_PROD2_NAME);\\n                }\\n                catch (e) {\\n                    if (c.getCorporation().funds > 1e9 * 3)\\n                        c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD2_NAME, TOBACCHI_MIN_INVESTMENT_VALUE, TOBACCHI_MIN_INVESTMENT_VALUE);\\n                }\\n                await manageProductSell(ns, c, prod1);\\n            }\\n            else {\\n                await checkAndSpeedEmpStats(ns, currentStage);\\n            }\\n            break;\\n        }\\n        case 6: {\\n            while (c.getUpgradeLevel(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */) < 10) {\\n                c.levelUpgrade(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */);\\n            }\\n            let funds = c.getCorporation().funds;\\n            while (funds > 4e9 && c.getHireAdVertCost(TOB_DIV_NAME) < funds) {\\n                c.hireAdVert(TOB_DIV_NAME);\\n                await ns.sleep(50);\\n                funds = c.getCorporation().funds;\\n            }\\n            await manageProductSell(ns, c, c.getProduct(TOB_DIV_NAME, TOB_PROD1_NAME));\\n            break;\\n        }\\n    }\\n}\\nfunction hireIntoAevum(ns, c) {\\n    const toAdd = 30 - c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).size;\\n    if (toAdd > 0)\\n        c.upgradeOfficeSize(TOB_DIV_NAME, ns.enums.CityName.Aevum, toAdd);\\n    while (c.hireEmployee(TOB_DIV_NAME, ns.enums.CityName.Aevum)) { }\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Operations\\\" /* JOBS.OPS */, 8);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Engineer\\\" /* JOBS.ENG */, 9);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Business\\\" /* JOBS.BUS */, 5);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Management\\\" /* JOBS.MAN */, 8);\\n}\\nfunction hireIntoOthers(ns, c) {\\n    for (const city of Object.values(ns.enums.CityName).filter((el) => el !== ns.enums.CityName.Aevum)) {\\n        const toAdd = 9 - c.getOffice(TOB_DIV_NAME, city).size;\\n        if (toAdd > 0)\\n            c.upgradeOfficeSize(TOB_DIV_NAME, city, toAdd);\\n        while (c.hireEmployee(TOB_DIV_NAME, city)) { }\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Management\\\" /* JOBS.MAN */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */, 5);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9iLXNldHVwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcnAvdG9iLXNldHVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFFTCw2QkFBNkIsRUFDN0IsWUFBWSxFQUNaLGNBQWMsRUFDZCxjQUFjLEdBRWYsTUFBTSxZQUFZLENBQUM7QUFDcEIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRixPQUFPLEVBQUUsb0JBQW9CLEVBQWtCLE1BQU0sa0JBQWtCLENBQUM7QUFDeEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFM0QscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDVixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDO0lBQ3pCLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7UUFDdkIsRUFBRSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1FBQ3ZFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNCO1NBQU07UUFDTCxNQUFNLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDdkI7QUFDSCxDQUFDO0FBRUQsS0FBSyxVQUFVLFFBQVEsQ0FBQyxDQUFjLEVBQUUsRUFBTTtJQUM1QyxJQUFJO1FBQ0YsSUFBSSxZQUFZLEdBQW1CLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNELElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLEtBQUssR0FB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\",\"filename\":\"/corp/tob-setup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/ba2c2b2d-58b6-4a66-b6dd-57d4f43d209e\",\"moduleSequenceNumber\":429},{\"filename\":\"/corp/product-functions.js\",\"url\":\"blob:http://bitburner.local/ce4d866c-2cf1-49d0-8439-1559759eca56\",\"moduleSequenceNumber\":448},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:http://bitburner.local/92364054-ff78-4539-8e0f-69bc833b7dd1\",\"moduleSequenceNumber\":444},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:http://bitburner.local/2885afce-7357-40c8-af2f-be2791ca5190\",\"moduleSequenceNumber\":444},{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/300aaf71-1dbd-47b8-8e20-3fe2b3b87967\",\"moduleSequenceNumber\":429},{\"filename\":\"/corp/corp-functions.js\",\"url\":\"blob:http://bitburner.local/5968707d-d496-4fba-bd15-1a814dec410d\",\"moduleSequenceNumber\":445},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:http://bitburner.local/e8904bb3-5e4a-4af6-b77a-7a2f58469446\",\"moduleSequenceNumber\":423},{\"filename\":\"/const/corp.js\",\"url\":\"blob:http://bitburner.local/76f0ef72-7626-47a0-af8e-2bae63f40de1\",\"moduleSequenceNumber\":429},{\"filename\":\"/corp/tob-setup.js\",\"url\":\"blob:http://bitburner.local/e91fee00-03df-46d5-b8ff-f4776be06347\",\"moduleSequenceNumber\":1235}],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getHireAdVertCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const scripts = ns.ls('home', 'corp/');\\n    ns.clearLog();\\n    ns.tail();\\n    ns.print(scripts);\\n    scripts.forEach((el) => ns.rm(el));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LWNsZWFudXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2NyaXB0LWNsZWFudXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2QsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1YsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsQixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckMsQ0FBQyJ9\",\"filename\":\"script-cleanup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { manageAevumEmployees } from 'corp/corp-functions';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    manageAevumEmployees(ns);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JwL3Rlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFM0QscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1Ysb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0IsQ0FBQyJ9\",\"filename\":\"/corp/test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { BATCH_BUFFER, HACK_SEC_INCREASE, HWGW_MONEY_ITERATION_PERCENTAGE, HWGW_MONEY_MIN_PERCENTAGE, HWGW_MONEY_PERCENTAGE, H_COST, WG_COST, } from 'const/hwgw';\\nexport class HwgwBatchScorer {\\n    batchMoney = 0;\\n    weakTime;\\n    weakGrowEndTime;\\n    hackThreads = 0;\\n    hackWeakThreads = 0;\\n    growThreads = 0;\\n    growWeakThreads = 0;\\n    serverMaxRam = 0;\\n    serverCores;\\n    calc;\\n    scriptDelay;\\n    iteration;\\n    canRun = false;\\n    constructor(ns, tempoWeak, serverRam, target, calc, serverCores = 1, iteration = 0, scriptDelay = 20) {\\n        this.calc = calc;\\n        this.iteration = iteration;\\n        this.scriptDelay = scriptDelay;\\n        this.weakTime = tempoWeak;\\n        this.serverMaxRam = serverRam;\\n        this.serverCores = serverCores;\\n        const buffer = BATCH_BUFFER + this.iteration * this.scriptDelay * 4;\\n        this.weakGrowEndTime = Date.now() + this.weakTime + this.scriptDelay * 4 + buffer;\\n        this.calcolaThreads(ns, calc, target);\\n        this.verificaServerCap(ns, calc, target);\\n    }\\n    calcolaThreads(ns, calc, target, percentage = HWGW_MONEY_PERCENTAGE) {\\n        const cores = this.serverCores;\\n        this.hackThreads = calc.calcolaHackThread(percentage);\\n        this.growThreads = calc.calcolaGrowThreads(target.maxMoney - target.maxMoney * percentage, cores);\\n        const WEAKEN_PER_THREAD = ns.weakenAnalyze(1, cores);\\n        const HW_THREADS = HACK_SEC_INCREASE / WEAKEN_PER_THREAD;\\n        const GW_THREADS = ns.growthAnalyzeSecurity(1, undefined, cores) / WEAKEN_PER_THREAD;\\n        this.hackWeakThreads = Math.max(1, Math.ceil(HW_THREADS * this.hackThreads));\\n        this.growWeakThreads = Math.max(1, Math.ceil(GW_THREADS * this.growThreads));\\n    }\\n    verificaServerCap(ns, calc, target) {\\n        let checkOrExit = false;\\n        let lowerPerc = HWGW_MONEY_PERCENTAGE - HWGW_MONEY_ITERATION_PERCENTAGE;\\n        while (!checkOrExit) {\\n            const ramNecessaria = (this.growWeakThreads + this.hackWeakThreads + this.growThreads) * WG_COST + this.hackThreads * H_COST;\\n            if (this.serverMaxRam >= ramNecessaria) {\\n                this.canRun = true;\\n                checkOrExit = true;\\n            }\\n            else if (lowerPerc > HWGW_MONEY_MIN_PERCENTAGE) {\\n                this.calcolaThreads(ns, calc, target, lowerPerc);\\n                lowerPerc -= HWGW_MONEY_ITERATION_PERCENTAGE;\\n            }\\n            else {\\n                checkOrExit = true;\\n            }\\n        }\\n        if (this.canRun) {\\n            this.batchMoney = target.maxMoney * lowerPerc;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1iYXRjaC1zY29yZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaHdndy9od2d3LWJhdGNoLXNjb3Jlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsWUFBWSxFQUNaLGlCQUFpQixFQUNqQiwrQkFBK0IsRUFDL0IseUJBQXlCLEVBQ3pCLHFCQUFxQixFQUNyQixNQUFNLEVBQ04sT0FBTyxHQUNSLE1BQU0sWUFBWSxDQUFDO0FBSXBCLE1BQU0sT0FBTyxlQUFlO0lBQzFCLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFFZixRQUFRLENBQVM7SUFDakIsZUFBZSxDQUFTO0lBQ3hCLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDaEIsZUFBZSxHQUFHLENBQUMsQ0FBQztJQUNwQixXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFDcEIsWUFBWSxHQUFHLENBQUMsQ0FBQztJQUNqQixXQUFXLENBQUM7SUFDWixJQUFJLENBQWtCO0lBQ3RCLFdBQVcsQ0FBUztJQUNwQixTQUFTLENBQVM7SUFDbEIsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUVmLFlBQ0UsRUFBTSxFQUNOLFNBQWlCLEVBQ2pCLFNBQWlCLEVBQ2pCLE1BQXNCLEVBQ3RCLElBQXFCLEVBQ3JCLFdBQVcsR0FBRyxDQUFDLEVBQ2YsU0FBUyxHQUFHLENBQUMsRUFDYixXQUFXLEdBQUcsRUFBRTtRQUVoQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztRQUM5QixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUUvQixNQUFNLE1BQU0sR0FB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\",\"filename\":\"/hwgw/hwgw-batch-scorer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HwgwBatchScorer } from 'hwgw/hwgw-batch-scorer';\\nimport { HwgOpsCalulator } from 'utils/hwg-ops-calulator';\\nexport class HwgwScorer {\\n    target;\\n    singleBatchScore = [];\\n    score = -1;\\n    constructor(ns, target, servers) {\\n        this.target = target.name;\\n        const calc = new HwgOpsCalulator(ns, target);\\n        const weakTime = calc.calcolaWeakTime();\\n        for (const server of servers) {\\n            const batchScore = new HwgwBatchScorer(ns, weakTime, server.getMaxRam(), target, calc, server.cores);\\n            if (batchScore.canRun)\\n                this.singleBatchScore.push(batchScore);\\n        }\\n        if (this.singleBatchScore.length > 1) {\\n            const money = this.singleBatchScore.map((el) => el.batchMoney).reduce((partialSum, a) => partialSum + a, 0);\\n            const time = this.singleBatchScore.map((el) => el.weakGrowEndTime).sort((a, b) => b - a)[0] - Date.now() + 10;\\n            this.score = money / time;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1zY29yZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaHdndy9od2d3LXNjb3Jlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDekQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBSTFELE1BQU0sT0FBTyxVQUFVO0lBQ3JCLE1BQU0sQ0FBUztJQUNmLGdCQUFnQixHQUFzQixFQUFFLENBQUM7SUFDekMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRVgsWUFBWSxFQUFNLEVBQUUsTUFBc0IsRUFBRSxPQUFxQjtRQUMvRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDMUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxlQUFlLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QyxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUM1QixNQUFNLFVBQVUsR0FBRyxJQUFJLGVBQWUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyRyxJQUFJLFVBQVUsQ0FBQyxNQUFNO2dCQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDL0Q7UUFDRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3BDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzVHLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztZQUM5RyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDM0I7SUFDSCxDQUFDO0NBQ0YifQ==\",\"filename\":\"/hwgw/hwgw-scorer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"srv-1\",\"srv-2\",\"srv-3\",\"srv-4\",\"srv-5\",\"srv-6\",\"srv-7\",\"srv-8\",\"srv-9\",\"srv-10\",\"srv-11\",\"srv-12\",\"srv-13\",\"srv-14\",\"srv-15\",\"srv-16\",\"srv-17\",\"srv-18\",\"srv-19\",\"srv-20\",\"srv-21\",\"srv-22\",\"srv-23\",\"srv-24\",\"srv-25\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/servers.txt\",\"text\":\"[\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"iron-gym\\\",\\\"omega-net\\\",\\\"computek\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"galactic-cyber\\\",\\\"aerocorp\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"zeus-med\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"applied-energetics\\\",\\\"stormtech\\\",\\\"helios\\\",\\\"omnitek\\\",\\\"4sigma\\\",\\\"clarkinc\\\",\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"b-and-a\\\",\\\"megacorp\\\",\\\"blade\\\",\\\"infocomm\\\",\\\"titan-labs\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"solaris\\\",\\\"taiyang-digital\\\",\\\"fulcrumtech\\\",\\\"vitalife\\\",\\\"kuai-gong\\\",\\\"nwo\\\",\\\"ecorp\\\",\\\"aevum-police\\\",\\\"rothman-uni\\\",\\\"summit-uni\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"alpha-ent\\\",\\\"millenium-fitness\\\",\\\"zb-institute\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"the-hub\\\",\\\"max-hardware\\\",\\\"neo-net\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/servers_detail.txt\",\"text\":\"[{\\\"name\\\":\\\"n00dles\\\",\\\"minSecurity\\\":1,\\\"maxMoney\\\":140000,\\\"weakenTm\\\":2,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":473.52406810450884,\\\"prepped\\\":false,\\\"minHackLevel\\\":1,\\\"currHackLevel\\\":104071,\\\"score\\\":7284970000000,\\\"hwgwScore\\\":7284970000000,\\\"farmScore\\\":236762.03405225443},{\\\"name\\\":\\\"foodnstuff\\\",\\\"minSecurity\\\":3,\\\"maxMoney\\\":4000000,\\\"weakenTm\\\":2,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":860.9528510991071,\\\"prepped\\\":true,\\\"minHackLevel\\\":1,\\\"currHackLevel\\\":104071,\\\"score\\\":624426000000000,\\\"hwgwScore\\\":624426000000000,\\\"farmScore\\\":430476.42554955353},{\\\"name\\\":\\\"sigma-cosmetics\\\",\\\"minSecurity\\\":3,\\\"maxMoney\\\":4600000,\\\"weakenTm\\\":2,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":860.9528510991071,\\\"prepped\\\":true,\\\"minHackLevel\\\":5,\\\"currHackLevel\\\":104071,\\\"score\\\":143617980000000,\\\"hwgwScore\\\":143617980000000,\\\"farmScore\\\":430476.42554955353},{\\\"name\\\":\\\"joesguns\\\",\\\"minSecurity\\\":5,\\\"maxMoney\\\":5000000,\\\"weakenTm\\\":3,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":1076.1910638738839,\\\"prepped\\\":true,\\\"minHackLevel\\\":10,\\\"currHackLevel\\\":104071,\\\"score\\\":86725833333333.33,\\\"hwgwScore\\\":86725833333333.33,\\\"farmScore\\\":358730.354624628},{\\\"name\\\":\\\"hong-fang-tea\\\",\\\"minSecurity\\\":5,\\\"maxMoney\\\":6000000,\\\"weakenTm\\\":4,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":1076.1910638738839,\\\"prepped\\\":true,\\\"minHackLevel\\\":30,\\\"currHackLevel\\\":104071,\\\"score\\\":26017750000000,\\\"hwgwScore\\\":26017750000000,\\\"farmScore\\\":269047.76596847095},{\\\"name\\\":\\\"harakiri-sushi\\\",\\\"minSecurity\\\":5,\\\"maxMoney\\\":8000000,\\\"weakenTm\\\":4,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":1076.1910638738839,\\\"prepped\\\":true,\\\"minHackLevel\\\":40,\\\"currHackLevel\\\":104071,\\\"score\\\":26017750000000,\\\"hwgwScore\\\":26017750000000,\\\"farmScore\\\":269047.76596847095},{\\\"name\\\":\\\"iron-gym\\\",\\\"minSecurity\\\":10,\\\"maxMoney\\\":40000000,\\\"weakenTm\\\":11,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":1721.9057021982142,\\\"prepped\\\":true,\\\"minHackLevel\\\":100,\\\"currHackLevel\\\":104071,\\\"score\\\":37844000000000.01,\\\"hwgwScore\\\":37844000000000.01,\\\"farmScore\\\":156536.88201801947},{\\\"name\\\":\\\"omega-net\\\",\\\"minSecurity\\\":11,\\\"maxMoney\\\":133256284,\\\"weakenTm\\\":20,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":1808.0009873081249,\\\"prepped\\\":true,\\\"minHackLevel\\\":186,\\\"currHackLevel\\\":104071,\\\"score\\\":41007866143495.695,\\\"hwgwScore\\\":41007866143495.695,\\\"farmScore\\\":90400.04936540624},{\\\"name\\\":\\\"computek\\\",\\\"minSecurity\\\":20,\\\"maxMoney\\\":440715594,\\\"weakenTm\\\":69,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3056.3826214018304,\\\"prepped\\\":true,\\\"minHackLevel\\\":376,\\\"currHackLevel\\\":104071,\\\"score\\\":35357471926591.12,\\\"hwgwScore\\\":35357471926591.12,\\\"farmScore\\\":44295.400310171455},{\\\"name\\\":\\\"nectar-net\\\",\\\"minSecurity\\\":7,\\\"maxMoney\\\":5500000,\\\"weakenTm\\\":4,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":1291.4292766486606,\\\"prepped\\\":true,\\\"minHackLevel\\\":20,\\\"currHackLevel\\\":104071,\\\"score\\\":50084168749999.99,\\\"hwgwScore\\\":50084168749999.99,\\\"farmScore\\\":322857.3191621651},{\\\"name\\\":\\\"phantasy\\\",\\\"minSecurity\\\":7,\\\"maxMoney\\\":48000000,\\\"weakenTm\\\":8,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":1291.4292766486606,\\\"prepped\\\":true,\\\"minHackLevel\\\":100,\\\"currHackLevel\\\":104071,\\\"score\\\":43709819999999.99,\\\"hwgwScore\\\":43709819999999.99,\\\"farmScore\\\":161428.65958108255},{\\\"name\\\":\\\"netlink\\\",\\\"minSecurity\\\":21,\\\"maxMoney\\\":550000000,\\\"weakenTm\\\":79,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3185.525549066696,\\\"prepped\\\":false,\\\"minHackLevel\\\":413,\\\"currHackLevel\\\":104071,\\\"score\\\":36841267968247.16,\\\"hwgwScore\\\":36841267968247.16,\\\"farmScore\\\":40323.108216034125},{\\\"name\\\":\\\"johnson-ortho\\\",\\\"minSecurity\\\":20,\\\"maxMoney\\\":141726918,\\\"weakenTm\\\":47,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3013.334978846875,\\\"prepped\\\":true,\\\"minHackLevel\\\":255,\\\"currHackLevel\\\":104071,\\\"score\\\":24613537059954.94,\\\"hwgwScore\\\":24613537059954.94,\\\"farmScore\\\":64113.51018823138},{\\\"name\\\":\\\"crush-fitness\\\",\\\"minSecurity\\\":13,\\\"maxMoney\\\":113786844,\\\"weakenTm\\\":28,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2109.3344851928123,\\\"prepped\\\":true,\\\"minHackLevel\\\":225,\\\"currHackLevel\\\":104071,\\\"score\\\":24435688626192.383,\\\"hwgwScore\\\":24435688626192.383,\\\"farmScore\\\":75333.37447117186},{\\\"name\\\":\\\"catalyst\\\",\\\"minSecurity\\\":23,\\\"maxMoney\\\":950580566,\\\"weakenTm\\\":92,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3400.763761841473,\\\"prepped\\\":false,\\\"minHackLevel\\\":442,\\\"currHackLevel\\\":104071,\\\"score\\\":55954677649426.47,\\\"hwgwScore\\\":55954677649426.47,\\\"farmScore\\\":36964.82349827688},{\\\"name\\\":\\\"lexo-corp\\\",\\\"minSecurity\\\":24,\\\"maxMoney\\\":1512066480,\\\"weakenTm\\\":143,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3529.906689506339,\\\"prepped\\\":true,\\\"minHackLevel\\\":662,\\\"currHackLevel\\\":104071,\\\"score\\\":39894941112563.336,\\\"hwgwScore\\\":39894941112563.336,\\\"farmScore\\\":24684.662164379995},{\\\"name\\\":\\\"galactic-cyber\\\",\\\"minSecurity\\\":20,\\\"maxMoney\\\":1553791942,\\\"weakenTm\\\":153,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2970.2873362919195,\\\"prepped\\\":true,\\\"minHackLevel\\\":854,\\\"currHackLevel\\\":104071,\\\"score\\\":24751600495305.75,\\\"hwgwScore\\\":24751600495305.75,\\\"farmScore\\\":19413.64272086222},{\\\"name\\\":\\\"aerocorp\\\",\\\"minSecurity\\\":27,\\\"maxMoney\\\":2111124936,\\\"weakenTm\\\":210,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3874.2878299459817,\\\"prepped\\\":true,\\\"minHackLevel\\\":870,\\\"currHackLevel\\\":104071,\\\"score\\\":32468997519377.734,\\\"hwgwScore\\\":32468997519377.734,\\\"farmScore\\\":18448.989666409438},{\\\"name\\\":\\\"global-pharm\\\",\\\"minSecurity\\\":28,\\\"maxMoney\\\":3092045646,\\\"weakenTm\\\":196,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4003.4307576108476,\\\"prepped\\\":true,\\\"minHackLevel\\\":781,\\\"currHackLevel\\\":104071,\\\"score\\\":58860852830595.57,\\\"hwgwScore\\\":58860852830595.57,\\\"farmScore\\\":20425.66713066759},{\\\"name\\\":\\\"snap-fitness\\\",\\\"minSecurity\\\":17,\\\"maxMoney\\\":900000000,\\\"weakenTm\\\":107,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2668.953838407232,\\\"prepped\\\":true,\\\"minHackLevel\\\":694,\\\"currHackLevel\\\":104071,\\\"score\\\":21442623017048.668,\\\"hwgwScore\\\":21442623017048.668,\\\"farmScore\\\":24943.49381689002},{\\\"name\\\":\\\"deltaone\\\",\\\"minSecurity\\\":28,\\\"maxMoney\\\":3093426668,\\\"weakenTm\\\":207,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4046.478400165803,\\\"prepped\\\":true,\\\"minHackLevel\\\":826,\\\"currHackLevel\\\":104071,\\\"score\\\":52720217271010.89,\\\"hwgwScore\\\":52720217271010.89,\\\"farmScore\\\":19548.204831718856},{\\\"name\\\":\\\"univ-energy\\\",\\\"minSecurity\\\":30,\\\"maxMoney\\\":2281945498,\\\"weakenTm\\\":225,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4261.71661294058,\\\"prepped\\\":true,\\\"minHackLevel\\\":839,\\\"currHackLevel\\\":104071,\\\"score\\\":37740858152142.7,\\\"hwgwScore\\\":37740858152142.7,\\\"farmScore\\\":18940.962724180354},{\\\"name\\\":\\\"nova-med\\\",\\\"minSecurity\\\":21,\\\"maxMoney\\\":2310129378,\\\"weakenTm\\\":151,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3142.4779065117405,\\\"prepped\\\":true,\\\"minHackLevel\\\":800,\\\"currHackLevel\\\":104071,\\\"score\\\":41794428513697.01,\\\"hwgwScore\\\":41794428513697.01,\\\"farmScore\\\":20811.11196365391},{\\\"name\\\":\\\"omnia\\\",\\\"minSecurity\\\":31,\\\"maxMoney\\\":1951939324,\\\"weakenTm\\\":260,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4390.8595406054455,\\\"prepped\\\":false,\\\"minHackLevel\\\":939,\\\"currHackLevel\\\":104071,\\\"score\\\":25794005894274.285,\\\"hwgwScore\\\":25794005894274.285,\\\"farmScore\\\":16887.921310020945},{\\\"name\\\":\\\"icarus\\\",\\\"minSecurity\\\":29,\\\"maxMoney\\\":1810835236,\\\"weakenTm\\\":239,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4175.621327830669,\\\"prepped\\\":false,\\\"minHackLevel\\\":922,\\\"currHackLevel\\\":104071,\\\"score\\\":24801493848768.477,\\\"hwgwScore\\\":24801493848768.477,\\\"farmScore\\\":17471.218944898195},{\\\"name\\\":\\\"zeus-med\\\",\\\"minSecurity\\\":27,\\\"maxMoney\\\":2725399244,\\\"weakenTm\\\":199,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3917.335472500937,\\\"prepped\\\":true,\\\"minHackLevel\\\":824,\\\"currHackLevel\\\":104071,\\\"score\\\":46702844730343.14,\\\"hwgwScore\\\":46702844730343.14,\\\"farmScore\\\":19685.10287688913},{\\\"name\\\":\\\"zb-def\\\",\\\"minSecurity\\\":20,\\\"maxMoney\\\":2022462822,\\\"weakenTm\\\":146,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2970.2873362919195,\\\"prepped\\\":true,\\\"minHackLevel\\\":811,\\\"currHackLevel\\\":104071,\\\"score\\\":35552206534865.13,\\\"hwgwScore\\\":35552206534865.13,\\\"farmScore\\\":20344.433810218627},{\\\"name\\\":\\\"microdyne\\\",\\\"minSecurity\\\":24,\\\"maxMoney\\\":1226744776,\\\"weakenTm\\\":177,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3572.9543320612943,\\\"prepped\\\":true,\\\"minHackLevel\\\":824,\\\"currHackLevel\\\":104071,\\\"score\\\":21008483722740.83,\\\"hwgwScore\\\":21008483722740.83,\\\"farmScore\\\":20186.182667012963},{\\\"name\\\":\\\"applied-energetics\\\",\\\"minSecurity\\\":23,\\\"maxMoney\\\":1491445430,\\\"weakenTm\\\":169,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3443.8114043964283,\\\"prepped\\\":false,\\\"minHackLevel\\\":818,\\\"currHackLevel\\\":104071,\\\"score\\\":25824083845337.812,\\\"hwgwScore\\\":25824083845337.812,\\\"farmScore\\\":20377.582274535078},{\\\"name\\\":\\\"stormtech\\\",\\\"minSecurity\\\":27,\\\"maxMoney\\\":2226581764,\\\"weakenTm\\\":228,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3874.2878299459817,\\\"prepped\\\":true,\\\"minHackLevel\\\":946,\\\"currHackLevel\\\":104071,\\\"score\\\":29007223167508.566,\\\"hwgwScore\\\":29007223167508.566,\\\"farmScore\\\":16992.49048221922},{\\\"name\\\":\\\"helios\\\",\\\"minSecurity\\\":29,\\\"maxMoney\\\":1341692994,\\\"weakenTm\\\":213,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4218.668970385625,\\\"prepped\\\":false,\\\"minHackLevel\\\":822,\\\"currHackLevel\\\":104071,\\\"score\\\":23127540841521.574,\\\"hwgwScore\\\":23127540841521.574,\\\"farmScore\\\":19805.95760744425},{\\\"name\\\":\\\"omnitek\\\",\\\"minSecurity\\\":30,\\\"maxMoney\\\":29458899754,\\\"weakenTm\\\":279,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4347.8118980504905,\\\"prepped\\\":true,\\\"minHackLevel\\\":1044,\\\"currHackLevel\\\":104071,\\\"score\\\":315764136725840.8,\\\"hwgwScore\\\":315764136725840.8,\\\"farmScore\\\":15583.555190145125},{\\\"name\\\":\\\"4sigma\\\",\\\"minSecurity\\\":24,\\\"maxMoney\\\":41453023678,\\\"weakenTm\\\":224,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3486.859046951384,\\\"prepped\\\":true,\\\"minHackLevel\\\":1045,\\\"currHackLevel\\\":104071,\\\"score\\\":442316229719050.4,\\\"hwgwScore\\\":442316229719050.4,\\\"farmScore\\\":15566.335031032962},{\\\"name\\\":\\\"clarkinc\\\",\\\"minSecurity\\\":21,\\\"maxMoney\\\":42613108418,\\\"weakenTm\\\":181,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3142.4779065117405,\\\"prepped\\\":true,\\\"minHackLevel\\\":960,\\\"currHackLevel\\\":104071,\\\"score\\\":535972404060561.94,\\\"hwgwScore\\\":535972404060561.94,\\\"farmScore\\\":17361.75638956763},{\\\"name\\\":\\\"powerhouse-fitness\\\",\\\"minSecurity\\\":20,\\\"maxMoney\\\":1800000000,\\\"weakenTm\\\":185,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2970.2873362919195,\\\"prepped\\\":true,\\\"minHackLevel\\\":1031,\\\"currHackLevel\\\":104071,\\\"score\\\":19642729441371.54,\\\"hwgwScore\\\":19642729441371.54,\\\"farmScore\\\":16055.607223199564},{\\\"name\\\":\\\"fulcrumassets\\\",\\\"minSecurity\\\":33,\\\"maxMoney\\\":2000000,\\\"weakenTm\\\":352,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4692.193038490134,\\\"prepped\\\":true,\\\"minHackLevel\\\":1197,\\\"currHackLevel\\\":104071,\\\"score\\\":16301848370.92732,\\\"hwgwScore\\\":16301848370.92732,\\\"farmScore\\\":13330.093859346973},{\\\"name\\\":\\\"b-and-a\\\",\\\"minSecurity\\\":26,\\\"maxMoney\\\":30421901456,\\\"weakenTm\\\":238,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3831.240187391026,\\\"prepped\\\":true,\\\"minHackLevel\\\":1025,\\\"currHackLevel\\\":104071,\\\"score\\\":337433819910275.75,\\\"hwgwScore\\\":337433819910275.75,\\\"farmScore\\\":16097.647846180784},{\\\"name\\\":\\\"megacorp\\\",\\\"minSecurity\\\":33,\\\"maxMoney\\\":106470806108,\\\"weakenTm\\\":331,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4692.193038490134,\\\"prepped\\\":true,\\\"minHackLevel\\\":1127,\\\"currHackLevel\\\":104071,\\\"score\\\":980217157175741.4,\\\"hwgwScore\\\":980217157175741.4,\\\"farmScore\\\":14175.80978395811},{\\\"name\\\":\\\"blade\\\",\\\"minSecurity\\\":31,\\\"maxMoney\\\":60835152958,\\\"weakenTm\\\":322,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4476.9548257153565,\\\"prepped\\\":true,\\\"minHackLevel\\\":1167,\\\"currHackLevel\\\":104071,\\\"score\\\":522299124761831.75,\\\"hwgwScore\\\":522299124761831.75,\\\"farmScore\\\":13903.586415265081},{\\\"name\\\":\\\"infocomm\\\",\\\"minSecurity\\\":29,\\\"maxMoney\\\":1412126552,\\\"weakenTm\\\":236,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4175.621327830669,\\\"prepped\\\":false,\\\"minHackLevel\\\":910,\\\"currHackLevel\\\":104071,\\\"score\\\":19844855882857.926,\\\"hwgwScore\\\":19844855882857.926,\\\"farmScore\\\":17693.310711146903},{\\\"name\\\":\\\"titan-labs\\\",\\\"minSecurity\\\":26,\\\"maxMoney\\\":1629127082,\\\"weakenTm\\\":201,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3745.1449022811153,\\\"prepped\\\":false,\\\"minHackLevel\\\":865,\\\"currHackLevel\\\":104071,\\\"score\\\":25353964272978.297,\\\"hwgwScore\\\":25353964272978.297,\\\"farmScore\\\":18632.56170289112},{\\\"name\\\":\\\"unitalife\\\",\\\"minSecurity\\\":24,\\\"maxMoney\\\":2121255578,\\\"weakenTm\\\":174,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3572.9543320612943,\\\"prepped\\\":true,\\\"minHackLevel\\\":808,\\\"currHackLevel\\\":104071,\\\"score\\\":37685419811887.68,\\\"hwgwScore\\\":37685419811887.68,\\\"farmScore\\\":20534.220299202843},{\\\"name\\\":\\\"defcomm\\\",\\\"minSecurity\\\":31,\\\"maxMoney\\\":1702850510,\\\"weakenTm\\\":270,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4476.9548257153565,\\\"prepped\\\":true,\\\"minHackLevel\\\":977,\\\"currHackLevel\\\":104071,\\\"score\\\":20826179984883.848,\\\"hwgwScore\\\":20826179984883.848,\\\"farmScore\\\":16581.314169316134},{\\\"name\\\":\\\"solaris\\\",\\\"minSecurity\\\":25,\\\"maxMoney\\\":1691156112,\\\"weakenTm\\\":181,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3659.049617171205,\\\"prepped\\\":true,\\\"minHackLevel\\\":806,\\\"currHackLevel\\\":104071,\\\"score\\\":30160589044176.96,\\\"hwgwScore\\\":30160589044176.96,\\\"farmScore\\\":20215.743741277376},{\\\"name\\\":\\\"taiyang-digital\\\",\\\"minSecurity\\\":26,\\\"maxMoney\\\":1643177838,\\\"weakenTm\\\":214,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3788.1925448360707,\\\"prepped\\\":false,\\\"minHackLevel\\\":920,\\\"currHackLevel\\\":104071,\\\"score\\\":22583229277940.613,\\\"hwgwScore\\\":22583229277940.613,\\\"farmScore\\\":17701.834321663882},{\\\"name\\\":\\\"fulcrumtech\\\",\\\"minSecurity\\\":32,\\\"maxMoney\\\":3001634932,\\\"weakenTm\\\":337,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4606.0977533802225,\\\"prepped\\\":true,\\\"minHackLevel\\\":1183,\\\"currHackLevel\\\":104071,\\\"score\\\":25073960153262.973,\\\"hwgwScore\\\":25073960153262.973,\\\"farmScore\\\":13667.945855727663},{\\\"name\\\":\\\"vitalife\\\",\\\"minSecurity\\\":30,\\\"maxMoney\\\":1559459254,\\\"weakenTm\\\":228,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4304.7642554955355,\\\"prepped\\\":false,\\\"minHackLevel\\\":850,\\\"currHackLevel\\\":104071,\\\"score\\\":25122985142884.52,\\\"hwgwScore\\\":25122985142884.52,\\\"farmScore\\\":18880.544980243576},{\\\"name\\\":\\\"kuai-gong\\\",\\\"minSecurity\\\":33,\\\"maxMoney\\\":49450051990,\\\"weakenTm\\\":365,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4692.193038490134,\\\"prepped\\\":true,\\\"minHackLevel\\\":1242,\\\"currHackLevel\\\":104071,\\\"score\\\":374624313196771.8,\\\"hwgwScore\\\":374624313196771.8,\\\"farmScore\\\":12855.323393123655},{\\\"name\\\":\\\"nwo\\\",\\\"minSecurity\\\":33,\\\"maxMoney\\\":50698825942,\\\"weakenTm\\\":329,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4692.193038490134,\\\"prepped\\\":true,\\\"minHackLevel\\\":1117,\\\"currHackLevel\\\":104071,\\\"score\\\":473797209694133.2,\\\"hwgwScore\\\":473797209694133.2,\\\"farmScore\\\":14261.9849194229},{\\\"name\\\":\\\"ecorp\\\",\\\"minSecurity\\\":33,\\\"maxMoney\\\":136951225142,\\\"weakenTm\\\":331,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4692.193038490134,\\\"prepped\\\":true,\\\"minHackLevel\\\":1127,\\\"currHackLevel\\\":104071,\\\"score\\\":1260833325937780.2,\\\"hwgwScore\\\":1260833325937780.2,\\\"farmScore\\\":14175.80978395811},{\\\"name\\\":\\\"aevum-police\\\",\\\"minSecurity\\\":24,\\\"maxMoney\\\":414417590,\\\"weakenTm\\\":98,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3486.859046951384,\\\"prepped\\\":false,\\\"minHackLevel\\\":450,\\\"currHackLevel\\\":104071,\\\"score\\\":23471484630688.434,\\\"hwgwScore\\\":23471484630688.434,\\\"farmScore\\\":35580.194356646774},{\\\"name\\\":\\\"rothman-uni\\\",\\\"minSecurity\\\":15,\\\"maxMoney\\\":493375466,\\\"weakenTm\\\":58,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2410.6679830774992,\\\"prepped\\\":false,\\\"minHackLevel\\\":422,\\\"currHackLevel\\\":104071,\\\"score\\\":31467199372090.62,\\\"hwgwScore\\\":31467199372090.62,\\\"farmScore\\\":41563.24108754309},{\\\"name\\\":\\\"summit-uni\\\",\\\"minSecurity\\\":19,\\\"maxMoney\\\":537063494,\\\"weakenTm\\\":79,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2841.1444086270535,\\\"prepped\\\":false,\\\"minHackLevel\\\":448,\\\"currHackLevel\\\":104071,\\\"score\\\":30005706453362.51,\\\"hwgwScore\\\":30005706453362.51,\\\"farmScore\\\":35963.85327376017},{\\\"name\\\":\\\"syscore\\\",\\\"minSecurity\\\":26,\\\"maxMoney\\\":939839736,\\\"weakenTm\\\":139,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3788.1925448360707,\\\"prepped\\\":false,\\\"minHackLevel\\\":588,\\\"currHackLevel\\\":104071,\\\"score\\\":31114637966728.523,\\\"hwgwScore\\\":31114637966728.523,\\\"farmScore\\\":27253.18377579907},{\\\"name\\\":\\\"rho-construction\\\",\\\"minSecurity\\\":19,\\\"maxMoney\\\":1314281264,\\\"weakenTm\\\":90,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2884.1920511820085,\\\"prepped\\\":true,\\\"minHackLevel\\\":523,\\\"currHackLevel\\\":104071,\\\"score\\\":55211233122777.49,\\\"hwgwScore\\\":55211233122777.49,\\\"farmScore\\\":32046.578346466762},{\\\"name\\\":\\\"alpha-ent\\\",\\\"minSecurity\\\":21,\\\"maxMoney\\\":1461210134,\\\"weakenTm\\\":104,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3099.430263956785,\\\"prepped\\\":true,\\\"minHackLevel\\\":550,\\\"currHackLevel\\\":104071,\\\"score\\\":55829748198702.7,\\\"hwgwScore\\\":55829748198702.7,\\\"farmScore\\\":29802.21407650755},{\\\"name\\\":\\\"millenium-fitness\\\",\\\"minSecurity\\\":18,\\\"maxMoney\\\":500000000,\\\"weakenTm\\\":84,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2755.0491235171426,\\\"prepped\\\":true,\\\"minHackLevel\\\":511,\\\"currHackLevel\\\":104071,\\\"score\\\":21820869443667.875,\\\"hwgwScore\\\":21820869443667.875,\\\"farmScore\\\":32798.20385139455},{\\\"name\\\":\\\"zb-institute\\\",\\\"minSecurity\\\":24,\\\"maxMoney\\\":1651555406,\\\"weakenTm\\\":165,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3486.859046951384,\\\"prepped\\\":true,\\\"minHackLevel\\\":765,\\\"currHackLevel\\\":104071,\\\"score\\\":32680503416817.777,\\\"hwgwScore\\\":32680503416817.777,\\\"farmScore\\\":21132.479072432627},{\\\"name\\\":\\\"zer0\\\",\\\"minSecurity\\\":8,\\\"maxMoney\\\":15000000,\\\"weakenTm\\\":8,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":1506.6674894234375,\\\"prepped\\\":true,\\\"minHackLevel\\\":75,\\\"currHackLevel\\\":104071,\\\"score\\\":20814200000000,\\\"hwgwScore\\\":20814200000000,\\\"farmScore\\\":188333.4361779297},{\\\"name\\\":\\\"silver-helix\\\",\\\"minSecurity\\\":10,\\\"maxMoney\\\":90000000,\\\"weakenTm\\\":16,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":1721.9057021982142,\\\"prepped\\\":false,\\\"minHackLevel\\\":150,\\\"currHackLevel\\\":104071,\\\"score\\\":39026625000000,\\\"hwgwScore\\\":39026625000000,\\\"farmScore\\\":107619.10638738838},{\\\"name\\\":\\\"the-hub\\\",\\\"minSecurity\\\":12,\\\"maxMoney\\\":329493590,\\\"weakenTm\\\":35,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2023.2392000829016,\\\"prepped\\\":false,\\\"minHackLevel\\\":306,\\\"currHackLevel\\\":104071,\\\"score\\\":38420983086711.484,\\\"hwgwScore\\\":38420983086711.484,\\\"farmScore\\\":57806.83428808289},{\\\"name\\\":\\\"max-hardware\\\",\\\"minSecurity\\\":5,\\\"maxMoney\\\":20000000,\\\"weakenTm\\\":6,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":1076.1910638738839,\\\"prepped\\\":false,\\\"minHackLevel\\\":80,\\\"currHackLevel\\\":104071,\\\"score\\\":21681458333333.332,\\\"hwgwScore\\\":21681458333333.332,\\\"farmScore\\\":179365.177312314},{\\\"name\\\":\\\"neo-net\\\",\\\"minSecurity\\\":8,\\\"maxMoney\\\":10000000,\\\"weakenTm\\\":6,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":1506.6674894234375,\\\"prepped\\\":false,\\\"minHackLevel\\\":50,\\\"currHackLevel\\\":104071,\\\"score\\\":27752266666666.668,\\\"hwgwScore\\\":27752266666666.668,\\\"farmScore\\\":251111.24823723958}]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/all_servers.txt\",\"text\":\"[\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"iron-gym\\\",\\\"darkweb\\\",\\\"CSEC\\\",\\\"omega-net\\\",\\\"computek\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"galactic-cyber\\\",\\\"aerocorp\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"omnia\\\",\\\"icarus\\\",\\\"zeus-med\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"applied-energetics\\\",\\\"stormtech\\\",\\\"helios\\\",\\\"omnitek\\\",\\\"4sigma\\\",\\\".\\\",\\\"clarkinc\\\",\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"b-and-a\\\",\\\"megacorp\\\",\\\"blade\\\",\\\"The-Cave\\\",\\\"w0r1d_d43m0n\\\",\\\"infocomm\\\",\\\"titan-labs\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"solaris\\\",\\\"taiyang-digital\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"vitalife\\\",\\\"kuai-gong\\\",\\\"nwo\\\",\\\"ecorp\\\",\\\"I.I.I.I\\\",\\\"aevum-police\\\",\\\"rothman-uni\\\",\\\"summit-uni\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"alpha-ent\\\",\\\"millenium-fitness\\\",\\\"zb-institute\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"the-hub\\\",\\\"max-hardware\\\",\\\"neo-net\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/files/servers.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/hwgw_log.txt\",\"text\":\"\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"47.1.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":136951225142,\"moneyMax\":136951225142,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1127,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"2.5.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":106470806108,\"moneyMax\":106470806108,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1127,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"82.1.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":26.002,\"minDifficulty\":26,\"moneyAvailable\":0.9417606507513483,\"moneyMax\":30421901456,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1025,\"serverGrowth\":65}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"70.9.2.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",73],\"dataMap\":{\"blade\":[0,0,0,41099]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":183998366.3820757,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2769,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":73,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/20ad3fae-b137-46f5-850e-842fd0fec56d\",\"moduleSequenceNumber\":2751}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":2751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":60835152958,\"moneyMax\":60835152958,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1167,\"serverGrowth\":63}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"97.6.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":50698825942,\"moneyMax\":50698825942,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1117,\"serverGrowth\":87}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"61.3.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":42613108418,\"moneyMax\":42613108418,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":960,\"serverGrowth\":52}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"6.6.9.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",73],\"dataMap\":{\"omnitek\":[0,0,0,48837]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":212334089.66509372,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2767,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":73,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/492df03b-198b-40cd-b18e-91a559f5d34d\",\"moduleSequenceNumber\":2749}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":2749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":30.002,\"minDifficulty\":30,\"moneyAvailable\":0.6071982647199548,\"moneyMax\":29458899754,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1044,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"38.5.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":41453023678,\"moneyMax\":41453023678,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1045,\"serverGrowth\":81}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"5.5.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":6422.195969133601,\"moneyMax\":49450051990,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1242,\"serverGrowth\":95}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"4.8.1.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",146],\"dataMap\":{\"fulcrumtech\":[0,0,0,79570]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":366507198.23646665,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2773,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":146,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/08e6248b-394e-4b50-bdd0-d9df10ea5d77\",\"moduleSequenceNumber\":2755}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":2755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":32,\"minDifficulty\":32,\"moneyAvailable\":3001634932,\"moneyMax\":3001634932,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1183,\"serverGrowth\":80}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"45.4.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":2000000,\"moneyMax\":2000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1197,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"70.4.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":2226581764,\"moneyMax\":2226581764,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":946,\"serverGrowth\":87}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"6.9.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":1702850510,\"moneyMax\":1702850510,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":977,\"serverGrowth\":62}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"14.9.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":7402.812231761372,\"moneyMax\":1412126552,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":910,\"serverGrowth\":72}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"75.8.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",18],\"dataMap\":{\"helios\":[0,0,0,15354]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":64773443.37130183,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2766,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/eb0ce30d-5b3a-4aaf-931c-ec63a7092f2b\",\"moduleSequenceNumber\":2748}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":2748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":8083.462496678438,\"moneyMax\":1341692994,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"83.3.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",36],\"dataMap\":{\"vitalife\":[0,0,0,28836]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":124132182.07146926,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2774,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":36,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/0ced2160-fad2-40e5-bfe5-2fe47f618eaa\",\"moduleSequenceNumber\":2756}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":2756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":9099.02580922385,\"moneyMax\":1559459254,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":63}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"98.9.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":6706.901657792921,\"moneyMax\":1810835236,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":922,\"serverGrowth\":86}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"94.0.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",18],\"dataMap\":{\"univ-energy\":[0,0,0,14652]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":62442671.81280473,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2763,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/1d1b1e87-fcdc-4cf0-a75d-ef232749aa65\",\"moduleSequenceNumber\":2745}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":2745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":2281945498,\"moneyMax\":2281945498,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":839,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"79.1.5.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",73],\"dataMap\":{\"titan-labs\":[0,0,0,66065]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":247422997.9692042,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2770,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":73,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/29e8812e-ff53-4d9c-ba59-c8fc7a8fc98b\",\"moduleSequenceNumber\":2752}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":2752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":6421.820509413144,\"moneyMax\":1629127082,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":75}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"11.4.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",9],\"dataMap\":{\"microdyne\":[0,0,0,9333]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33346382.781127315,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2765,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/c4ec5234-46cd-4dc8-b635-13c9bc4db515\",\"moduleSequenceNumber\":2747}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":2747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":1226744776,\"moneyMax\":1226744776,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":824,\"serverGrowth\":86}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"72.6.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":7185.855017318317,\"moneyMax\":1643177838,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":920,\"serverGrowth\":70}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"78.4.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":1553791942,\"moneyMax\":1553791942,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":88}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"7.4.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":2111124936,\"moneyMax\":2111124936,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":870,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"23.5.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\",18],\"dataMap\":{\"omnia\":[0,0,0,12780]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":56115184.92893697,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2764,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/158c6302-73ad-4e26-a70e-80e66cc52883\",\"moduleSequenceNumber\":2746}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":2746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":9502.159204646086,\"moneyMax\":1951939324,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":939,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"45.9.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":5493.991157041415,\"moneyMax\":2022462822,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":811,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"20.1.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":6326.449254934885,\"moneyMax\":1491445430,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":818,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"48.3.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",18],\"dataMap\":{\"solaris\":[0,0,0,18342]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":67114288.07815531,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2772,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/03463093-390a-4f50-be70-1478f777cca4\",\"moduleSequenceNumber\":2754}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":2754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":1691156112,\"moneyMax\":1691156112,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":78}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"6.2.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":28.002,\"minDifficulty\":28,\"moneyAvailable\":0.7181262761823746,\"moneyMax\":3093426668,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":826,\"serverGrowth\":50}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"24.4.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",36],\"dataMap\":{\"global-pharm\":[0,0,0,33732]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":135043726.3157267,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2762,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":36,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/d9474d5c-2d9d-4851-b4c2-104388610ed1\",\"moduleSequenceNumber\":2744}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":2744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":0.7482918023670209,\"moneyMax\":3092045646,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":781,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"72.8.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21.184,\"minDifficulty\":21,\"moneyAvailable\":4774.778231059447,\"moneyMax\":2310129378,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":83}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"67.8.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":7203.431782864971,\"moneyMax\":2725399244,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":824,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"17.1.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",18],\"dataMap\":{\"unitalife\":[0,0,0,18900]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":67528836.87595694,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2771,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/c3407ba5-28ea-4be4-9001-b169b2e4b7a6\",\"moduleSequenceNumber\":2753}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":2753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":4102.958152928029,\"moneyMax\":2121255578,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":808,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"87.9.3.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",73],\"dataMap\":{\"lexo-corp\":[0,0,0,83585]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":295047250.6423869,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2761,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":73,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/293e2d0f-4964-4616-9dc7-5f04e87dd243\",\"moduleSequenceNumber\":2743}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":2743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"aerocorp\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":1512066480,\"moneyMax\":1512066480,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":662,\"serverGrowth\":59}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"97.8.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",18],\"dataMap\":{\"rho-construction\":[0,0,0,32868]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":94797624.33825387,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2778,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/324e7dae-b7ee-4939-b4e1-c8188faf91c6\",\"moduleSequenceNumber\":2760}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":2760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":1314281264,\"moneyMax\":1314281264,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":523,\"serverGrowth\":47}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"7.8.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",36],\"dataMap\":{\"alpha-ent\":[0,0,0,57096]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":176965070.35087177,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2779,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":36,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/c77d4a49-66f9-469a-80ab-da58ca8684be\",\"moduleSequenceNumber\":2761}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":2761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":1461210134,\"moneyMax\":1461210134,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":550,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"32.6.0.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",36],\"dataMap\":{\"aevum-police\":[0,0,0,60372]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":210508654.38255617,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2775,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":36,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/a3abda87-6582-4e35-a1ed-e46f4480f0af\",\"moduleSequenceNumber\":2757}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":2757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":13435.850447163866,\"moneyMax\":414417590,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":450,\"serverGrowth\":33}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"50.1.8.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",73],\"dataMap\":{\"rothman-uni\":[0,0,0,180748]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":435723416.6052737,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2776,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":73,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/5b08bb9e-922a-4047-b59a-cd7a5c84e89c\",\"moduleSequenceNumber\":2758}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":2758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":6467.935193770073,\"moneyMax\":493375466,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":422,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"29.2.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",36],\"dataMap\":{\"zb-institute\":[0,0,0,38808]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":135318025.89408833,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2781,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":36,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/b8475dfa-01b3-49d4-810e-74329368c8b2\",\"moduleSequenceNumber\":2763}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":2763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":1651555406,\"moneyMax\":1651555406,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":765,\"serverGrowth\":79}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"79.1.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",9],\"dataMap\":{\"summit-uni\":[0,0,0,18801]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":53416356.02659519,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2777,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/ac8c40a5-087a-43c1-9fd7-07a96a38a243\",\"moduleSequenceNumber\":2759}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":2759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":6440.719654298539,\"moneyMax\":537063494,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":448,\"serverGrowth\":57}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"4.5.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":7677.804328692083,\"moneyMax\":939839736,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":588,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"76.6.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",9],\"dataMap\":{\"catalyst\":[0,0,0,16002]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":54419021.716988325,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2760,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/c2558090-c08a-4228-97bb-fd89b28cd048\",\"moduleSequenceNumber\":2742}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":2742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":10450.331852877336,\"moneyMax\":950580566,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":442,\"serverGrowth\":41}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"58.3.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",36],\"dataMap\":{\"the-hub\":[0,0,0,133416]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":269932481.1182619,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2782,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":36,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/dd045bfb-a68a-4760-a174-f6a1a2c44a48\",\"moduleSequenceNumber\":2764}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":2764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":12,\"minDifficulty\":12,\"moneyAvailable\":5310.893524035479,\"moneyMax\":329493590,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":306,\"serverGrowth\":45}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"27.4.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":440715594,\"moneyMax\":440715594,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":376,\"serverGrowth\":50}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"96.7.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",73],\"dataMap\":{\"netlink\":[0,0,0,151110]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":481364765.71945065,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2759,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":73,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/5c92c5d7-9222-41d8-a68a-60c5e280813f\",\"moduleSequenceNumber\":2741}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":2741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":6457.441891500726,\"moneyMax\":550000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":413,\"serverGrowth\":63}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"25.0.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":141726918,\"moneyMax\":141726918,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":255,\"serverGrowth\":55}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"5.9.0.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",2],\"dataMap\":{\"n00dles\":[0,0,0,27658]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13096728.675631149,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.00999999999254,\"pid\":6,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/2da05e89-f0b8-4d0b-9fc1-c6830de2762a\",\"moduleSequenceNumber\":2588}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":2588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0.3756551033420692,\"moneyMax\":140000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"99.9.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",9],\"dataMap\":{\"foodnstuff\":[0,0,0,124452]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":107147304.22496437,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.00999999999254,\"pid\":7,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/34df8bc3-fb37-468c-9c75-75cc51a913ef\",\"moduleSequenceNumber\":2589}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":4000000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"95.2.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",9],\"dataMap\":{\"sigma-cosmetics\":[0,0,0,124380]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":107085315.61968528,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.00999999999254,\"pid\":8,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/bbafa51b-ddf6-4d3a-b55a-16183683a01d\",\"moduleSequenceNumber\":2590}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":4600000,\"moneyMax\":4600000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"96.6.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",9],\"dataMap\":{\"joesguns\":[0,0,0,124164]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133624187.25487539,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.00999999999254,\"pid\":9,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/fc44301a-d403-427b-853d-f11ffc1abf84\",\"moduleSequenceNumber\":2591}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":2591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":5000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"3.4.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",18],\"dataMap\":{\"zer0\":[0,0,0,197946]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":298238802.8613369,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.00999999999254,\"pid\":16,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/b8914758-e5e8-4c94-8ff3-e61274029603\",\"moduleSequenceNumber\":2598}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":2598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":15000000,\"moneyMax\":15000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"44.0.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",9],\"dataMap\":{\"nectar-net\":[0,0,0,123561]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":159570292.85196722,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.00999999999254,\"pid\":14,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/d338bbb6-ddae-4f62-9ff8-68b27dd17aca\",\"moduleSequenceNumber\":2596}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":2596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":5500000,\"moneyMax\":5500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"30.8.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",18],\"dataMap\":{\"neo-net\":[0,0,0,223830]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":337237384.15755385,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.00999999999254,\"pid\":19,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/b4608ff0-7832-4fbe-8d9d-d42b4cc927e9\",\"moduleSequenceNumber\":2601}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":2601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":6722.494259669016,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"9.4.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",36],\"dataMap\":{\"silver-helix\":[0,0,0,262188]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":451463012.24800175,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.00999999999254,\"pid\":17,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/8e0ced24-05bf-4a4e-a34f-57decb816fba\",\"moduleSequenceNumber\":2599}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":6392.416376199854,\"moneyMax\":90000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"89.6.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",9],\"dataMap\":{\"hong-fang-tea\":[0,0,0,123444]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":132849329.6888859,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.00999999999254,\"pid\":10,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/56ac790d-a79b-4803-9614-98b2ab67b2fb\",\"moduleSequenceNumber\":2592}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":2592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":6000000,\"moneyMax\":6000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"70.2.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",9],\"dataMap\":{\"harakiri-sushi\":[0,0,0,122769]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":132122900.72077075,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.00999999999254,\"pid\":11,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/67684842-4038-46fc-8f12-fd0b727ae0e3\",\"moduleSequenceNumber\":2593}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":2593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":8000000,\"moneyMax\":8000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"14.3.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",18],\"dataMap\":{\"phantasy\":[0,0,0,187308]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":241895034.95048136,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.00999999999254,\"pid\":15,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/03680203-49b3-4bf1-8d2d-e6175755cbb0\",\"moduleSequenceNumber\":2597}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":2597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"netlink\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":48000000,\"moneyMax\":48000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"26.7.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",18],\"dataMap\":{\"max-hardware\":[0,0,0,223974]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":241038817.34015614,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.00999999999254,\"pid\":18,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/513c1dd8-6379-4f42-b60f-6d6e72e058fd\",\"moduleSequenceNumber\":2600}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":2600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":5380.981248775018,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"18.1.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",18],\"dataMap\":{\"omega-net\":[0,0,0,108324]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195849898.94915178,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.00999999999254,\"pid\":13,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/861ab331-5781-4434-b92b-d9323dfc68c4\",\"moduleSequenceNumber\":2595}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":2595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":32,\"hackDifficulty\":11,\"minDifficulty\":11,\"moneyAvailable\":133256284,\"moneyMax\":133256284,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":186,\"serverGrowth\":32}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"43.0.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":113786844,\"moneyMax\":113786844,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":225,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"97.2.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",18],\"dataMap\":{\"iron-gym\":[0,0,0,162054]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":279041706.6640576,\"onlineMoneyMade\":0,\"onlineRunningTime\":297.00999999999254,\"pid\":12,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/b85860ed-0992-4ae6-af29-c6b0416a19d4\",\"moduleSequenceNumber\":2594}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":2594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":40000000,\"moneyMax\":40000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"14.7.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",36],\"dataMap\":{\"millenium-fitness\":[0,0,0,71856]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":197966809.81945702,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2780,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":36,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/6872fcd2-b054-4c10-985a-53fbe37de34b\",\"moduleSequenceNumber\":2762}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":2762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":511,\"serverGrowth\":42}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"39.7.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",18],\"dataMap\":{\"powerhouse-fitness\":[0,0,0,17946]},\"filename\":\"/mono/server-weakenV2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":53304776.537095256,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.6099999999954,\"pid\":2768,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:http://bitburner.local/e5393a1d-4f18-4dc8-9302-edf19c91dc46\",\"moduleSequenceNumber\":2750}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":2750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":1800000000,\"moneyMax\":1800000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1031,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"20.8.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":900000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":694,\"serverGrowth\":46}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"71.8.1.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":534,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"91.8.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":345,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"64.4.0.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":218,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"94.1.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":533,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"58.6.1.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"foodnstuff\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":53,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"37.3.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\",\"w0r1d_d43m0n\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":true,\"ip\":\"72.2.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":15000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"59.1.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-1\",\"httpPortOpen\":false,\"ip\":\"32.0.0.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":383.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703857099,\\\"iteration\\\":1,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72398,\"ramUsage\":1.7,\"server\":\"srv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/39b2aa19-c610-4c2f-a146-0ee537f1e334\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/4ed81436-a5f2-43bc-97bf-28986c2672bc\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/a5a57126-4ea4-4714-835c-5159cefee49a\",\"moduleSequenceNumber\":3553}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857119,\\\"iteration\\\":1,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72399,\"ramUsage\":1.75,\"server\":\"srv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/77aecbe1-3b8a-4e82-83b7-8c1e8509bfaf\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/2d105aa2-a634-4a6b-be03-ab902e6013a0\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bb906e91-5f64-44b4-9b4b-dcbe2768c9fa\",\"moduleSequenceNumber\":3554}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703857139,\\\"iteration\\\":1,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72400,\"ramUsage\":1.75,\"server\":\"srv-1\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f548c81a-adfd-4f89-ac40-d8548a42bc8c\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9fcf1904-d35a-47d3-b2c8-d43a559a2d33\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/642812a2-e7d6-40ad-bcbc-972467133eef\",\"moduleSequenceNumber\":3555}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857159,\\\"iteration\\\":1,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72401,\"ramUsage\":1.75,\"server\":\"srv-1\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/77aecbe1-3b8a-4e82-83b7-8c1e8509bfaf\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/2d105aa2-a634-4a6b-be03-ab902e6013a0\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bb906e91-5f64-44b4-9b4b-dcbe2768c9fa\",\"moduleSequenceNumber\":3554}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703857423,\\\"iteration\\\":1,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72502,\"ramUsage\":1.7,\"server\":\"srv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/39b2aa19-c610-4c2f-a146-0ee537f1e334\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/4ed81436-a5f2-43bc-97bf-28986c2672bc\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/a5a57126-4ea4-4714-835c-5159cefee49a\",\"moduleSequenceNumber\":3553}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857443,\\\"iteration\\\":1,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72503,\"ramUsage\":1.75,\"server\":\"srv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/77aecbe1-3b8a-4e82-83b7-8c1e8509bfaf\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/2d105aa2-a634-4a6b-be03-ab902e6013a0\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bb906e91-5f64-44b4-9b4b-dcbe2768c9fa\",\"moduleSequenceNumber\":3554}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703857463,\\\"iteration\\\":1,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72504,\"ramUsage\":1.75,\"server\":\"srv-1\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f548c81a-adfd-4f89-ac40-d8548a42bc8c\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9fcf1904-d35a-47d3-b2c8-d43a559a2d33\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/642812a2-e7d6-40ad-bcbc-972467133eef\",\"moduleSequenceNumber\":3555}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857483,\\\"iteration\\\":1,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72505,\"ramUsage\":1.75,\"server\":\"srv-1\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/77aecbe1-3b8a-4e82-83b7-8c1e8509bfaf\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/2d105aa2-a634-4a6b-be03-ab902e6013a0\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bb906e91-5f64-44b4-9b4b-dcbe2768c9fa\",\"moduleSequenceNumber\":3554}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":57,\\\"scriptEstimatedEnd\\\":1691703857490,\\\"iteration\\\":1,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72606,\"ramUsage\":1.7,\"server\":\"srv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/39b2aa19-c610-4c2f-a146-0ee537f1e334\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/4ed81436-a5f2-43bc-97bf-28986c2672bc\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/a5a57126-4ea4-4714-835c-5159cefee49a\",\"moduleSequenceNumber\":3553}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":225,\\\"scriptEstimatedEnd\\\":1691703857510,\\\"iteration\\\":1,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72607,\"ramUsage\":1.75,\"server\":\"srv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/77aecbe1-3b8a-4e82-83b7-8c1e8509bfaf\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/2d105aa2-a634-4a6b-be03-ab902e6013a0\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bb906e91-5f64-44b4-9b4b-dcbe2768c9fa\",\"moduleSequenceNumber\":3554}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":183,\\\"scriptEstimatedEnd\\\":1691703857530,\\\"iteration\\\":1,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72608,\"ramUsage\":1.75,\"server\":\"srv-1\",\"threads\":65,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f548c81a-adfd-4f89-ac40-d8548a42bc8c\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9fcf1904-d35a-47d3-b2c8-d43a559a2d33\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/642812a2-e7d6-40ad-bcbc-972467133eef\",\"moduleSequenceNumber\":3555}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":225,\\\"scriptEstimatedEnd\\\":1691703857550,\\\"iteration\\\":1,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72609,\"ramUsage\":1.75,\"server\":\"srv-1\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/77aecbe1-3b8a-4e82-83b7-8c1e8509bfaf\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/2d105aa2-a634-4a6b-be03-ab902e6013a0\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bb906e91-5f64-44b4-9b4b-dcbe2768c9fa\",\"moduleSequenceNumber\":3554}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/39b2aa19-c610-4c2f-a146-0ee537f1e334\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/4ed81436-a5f2-43bc-97bf-28986c2672bc\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/a5a57126-4ea4-4714-835c-5159cefee49a\",\"moduleSequenceNumber\":3553}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":3553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f548c81a-adfd-4f89-ac40-d8548a42bc8c\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9fcf1904-d35a-47d3-b2c8-d43a559a2d33\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/642812a2-e7d6-40ad-bcbc-972467133eef\",\"moduleSequenceNumber\":3555}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":3555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/77aecbe1-3b8a-4e82-83b7-8c1e8509bfaf\",\"moduleSequenceNumber\":3118},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/2d105aa2-a634-4a6b-be03-ab902e6013a0\",\"moduleSequenceNumber\":3120},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bb906e91-5f64-44b4-9b4b-dcbe2768c9fa\",\"moduleSequenceNumber\":3554}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":3554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":3110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":3112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":3114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":3116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":3118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":3120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-2\",\"httpPortOpen\":false,\"ip\":\"34.3.9.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":383.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703857184,\\\"iteration\\\":2,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72402,\"ramUsage\":1.7,\"server\":\"srv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2150b6c7-412b-468c-b376-5f3808cd8861\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/20dc6182-b781-4759-9a8d-64256b534d3f\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ebe14254-ee2e-43d7-9114-e4882cc81b7b\",\"moduleSequenceNumber\":3556}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857204,\\\"iteration\\\":2,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72403,\"ramUsage\":1.75,\"server\":\"srv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4eba7756-94ac-4cfa-b268-08a271906642\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/bfe2ff58-9a86-47a6-80d9-21e873a4ab76\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a37a0051-7475-4024-ade4-ec9cdb4b0b3a\",\"moduleSequenceNumber\":3557}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703857224,\\\"iteration\\\":2,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72404,\"ramUsage\":1.75,\"server\":\"srv-2\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/735a8940-f3ee-4198-becb-a7e13ca1528c\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ac755b11-c215-43a6-8e3b-4016dbc387ab\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/fc5e22d0-87c5-4203-b051-41d0915062cf\",\"moduleSequenceNumber\":3558}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857244,\\\"iteration\\\":2,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72405,\"ramUsage\":1.75,\"server\":\"srv-2\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4eba7756-94ac-4cfa-b268-08a271906642\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/bfe2ff58-9a86-47a6-80d9-21e873a4ab76\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a37a0051-7475-4024-ade4-ec9cdb4b0b3a\",\"moduleSequenceNumber\":3557}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703857509,\\\"iteration\\\":2,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72506,\"ramUsage\":1.7,\"server\":\"srv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2150b6c7-412b-468c-b376-5f3808cd8861\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/20dc6182-b781-4759-9a8d-64256b534d3f\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ebe14254-ee2e-43d7-9114-e4882cc81b7b\",\"moduleSequenceNumber\":3556}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857529,\\\"iteration\\\":2,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72507,\"ramUsage\":1.75,\"server\":\"srv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4eba7756-94ac-4cfa-b268-08a271906642\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/bfe2ff58-9a86-47a6-80d9-21e873a4ab76\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a37a0051-7475-4024-ade4-ec9cdb4b0b3a\",\"moduleSequenceNumber\":3557}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703857549,\\\"iteration\\\":2,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72508,\"ramUsage\":1.75,\"server\":\"srv-2\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/735a8940-f3ee-4198-becb-a7e13ca1528c\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ac755b11-c215-43a6-8e3b-4016dbc387ab\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/fc5e22d0-87c5-4203-b051-41d0915062cf\",\"moduleSequenceNumber\":3558}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857569,\\\"iteration\\\":2,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72509,\"ramUsage\":1.75,\"server\":\"srv-2\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4eba7756-94ac-4cfa-b268-08a271906642\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/bfe2ff58-9a86-47a6-80d9-21e873a4ab76\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a37a0051-7475-4024-ade4-ec9cdb4b0b3a\",\"moduleSequenceNumber\":3557}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":57,\\\"scriptEstimatedEnd\\\":1691703857575,\\\"iteration\\\":2,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72610,\"ramUsage\":1.7,\"server\":\"srv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2150b6c7-412b-468c-b376-5f3808cd8861\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/20dc6182-b781-4759-9a8d-64256b534d3f\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ebe14254-ee2e-43d7-9114-e4882cc81b7b\",\"moduleSequenceNumber\":3556}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":225,\\\"scriptEstimatedEnd\\\":1691703857595,\\\"iteration\\\":2,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72611,\"ramUsage\":1.75,\"server\":\"srv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4eba7756-94ac-4cfa-b268-08a271906642\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/bfe2ff58-9a86-47a6-80d9-21e873a4ab76\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a37a0051-7475-4024-ade4-ec9cdb4b0b3a\",\"moduleSequenceNumber\":3557}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":183,\\\"scriptEstimatedEnd\\\":1691703857615,\\\"iteration\\\":2,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72612,\"ramUsage\":1.75,\"server\":\"srv-2\",\"threads\":65,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/735a8940-f3ee-4198-becb-a7e13ca1528c\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ac755b11-c215-43a6-8e3b-4016dbc387ab\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/fc5e22d0-87c5-4203-b051-41d0915062cf\",\"moduleSequenceNumber\":3558}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":225,\\\"scriptEstimatedEnd\\\":1691703857635,\\\"iteration\\\":2,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72613,\"ramUsage\":1.75,\"server\":\"srv-2\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4eba7756-94ac-4cfa-b268-08a271906642\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/bfe2ff58-9a86-47a6-80d9-21e873a4ab76\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a37a0051-7475-4024-ade4-ec9cdb4b0b3a\",\"moduleSequenceNumber\":3557}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2150b6c7-412b-468c-b376-5f3808cd8861\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/20dc6182-b781-4759-9a8d-64256b534d3f\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ebe14254-ee2e-43d7-9114-e4882cc81b7b\",\"moduleSequenceNumber\":3556}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":3556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/735a8940-f3ee-4198-becb-a7e13ca1528c\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ac755b11-c215-43a6-8e3b-4016dbc387ab\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/fc5e22d0-87c5-4203-b051-41d0915062cf\",\"moduleSequenceNumber\":3558}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":3558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4eba7756-94ac-4cfa-b268-08a271906642\",\"moduleSequenceNumber\":3136},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/bfe2ff58-9a86-47a6-80d9-21e873a4ab76\",\"moduleSequenceNumber\":3138},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a37a0051-7475-4024-ade4-ec9cdb4b0b3a\",\"moduleSequenceNumber\":3557}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":3557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":3128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":3130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":3132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":3134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":3136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":3138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-3\",\"httpPortOpen\":false,\"ip\":\"27.3.7.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":484.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703857104,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72302,\"ramUsage\":1.7,\"server\":\"srv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/abdb4914-468c-46a9-b665-e3321dcf9ae8\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/05d158c0-2e6a-4cac-81ba-979fb279e488\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/2a74df78-42fc-4321-82f2-6ef07ca4d58f\",\"moduleSequenceNumber\":3559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857124,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72303,\"ramUsage\":1.75,\"server\":\"srv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/869a41d0-b31a-4afc-a0c0-26612dc96424\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dd3b9212-0df5-420d-8e02-8101bc670973\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f3e604ec-433f-40d4-ad35-0d38a9ef5b86\",\"moduleSequenceNumber\":3560}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703857144,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72304,\"ramUsage\":1.75,\"server\":\"srv-3\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/042eff8d-60d8-439e-9123-2db2b9169e09\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/24a011bd-9974-4fff-a419-f0ba67604c0e\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/5e40eace-4a89-401d-b687-ec28e7dcf25c\",\"moduleSequenceNumber\":3561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857164,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72305,\"ramUsage\":1.75,\"server\":\"srv-3\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/869a41d0-b31a-4afc-a0c0-26612dc96424\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dd3b9212-0df5-420d-8e02-8101bc670973\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f3e604ec-433f-40d4-ad35-0d38a9ef5b86\",\"moduleSequenceNumber\":3560}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703857267,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72406,\"ramUsage\":1.7,\"server\":\"srv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/abdb4914-468c-46a9-b665-e3321dcf9ae8\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/05d158c0-2e6a-4cac-81ba-979fb279e488\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/2a74df78-42fc-4321-82f2-6ef07ca4d58f\",\"moduleSequenceNumber\":3559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857287,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72407,\"ramUsage\":1.75,\"server\":\"srv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/869a41d0-b31a-4afc-a0c0-26612dc96424\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dd3b9212-0df5-420d-8e02-8101bc670973\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f3e604ec-433f-40d4-ad35-0d38a9ef5b86\",\"moduleSequenceNumber\":3560}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703857307,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72408,\"ramUsage\":1.75,\"server\":\"srv-3\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/042eff8d-60d8-439e-9123-2db2b9169e09\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/24a011bd-9974-4fff-a419-f0ba67604c0e\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/5e40eace-4a89-401d-b687-ec28e7dcf25c\",\"moduleSequenceNumber\":3561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857327,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72409,\"ramUsage\":1.75,\"server\":\"srv-3\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/869a41d0-b31a-4afc-a0c0-26612dc96424\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dd3b9212-0df5-420d-8e02-8101bc670973\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f3e604ec-433f-40d4-ad35-0d38a9ef5b86\",\"moduleSequenceNumber\":3560}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703857593,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72510,\"ramUsage\":1.7,\"server\":\"srv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/abdb4914-468c-46a9-b665-e3321dcf9ae8\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/05d158c0-2e6a-4cac-81ba-979fb279e488\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/2a74df78-42fc-4321-82f2-6ef07ca4d58f\",\"moduleSequenceNumber\":3559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857613,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72511,\"ramUsage\":1.75,\"server\":\"srv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/869a41d0-b31a-4afc-a0c0-26612dc96424\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dd3b9212-0df5-420d-8e02-8101bc670973\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f3e604ec-433f-40d4-ad35-0d38a9ef5b86\",\"moduleSequenceNumber\":3560}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703857633,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72512,\"ramUsage\":1.75,\"server\":\"srv-3\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/042eff8d-60d8-439e-9123-2db2b9169e09\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/24a011bd-9974-4fff-a419-f0ba67604c0e\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/5e40eace-4a89-401d-b687-ec28e7dcf25c\",\"moduleSequenceNumber\":3561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857653,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72513,\"ramUsage\":1.75,\"server\":\"srv-3\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/869a41d0-b31a-4afc-a0c0-26612dc96424\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dd3b9212-0df5-420d-8e02-8101bc670973\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f3e604ec-433f-40d4-ad35-0d38a9ef5b86\",\"moduleSequenceNumber\":3560}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":57,\\\"scriptEstimatedEnd\\\":1691703857659,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72614,\"ramUsage\":1.7,\"server\":\"srv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/abdb4914-468c-46a9-b665-e3321dcf9ae8\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/05d158c0-2e6a-4cac-81ba-979fb279e488\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/2a74df78-42fc-4321-82f2-6ef07ca4d58f\",\"moduleSequenceNumber\":3559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":225,\\\"scriptEstimatedEnd\\\":1691703857679,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72615,\"ramUsage\":1.75,\"server\":\"srv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/869a41d0-b31a-4afc-a0c0-26612dc96424\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dd3b9212-0df5-420d-8e02-8101bc670973\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f3e604ec-433f-40d4-ad35-0d38a9ef5b86\",\"moduleSequenceNumber\":3560}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":183,\\\"scriptEstimatedEnd\\\":1691703857699,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72616,\"ramUsage\":1.75,\"server\":\"srv-3\",\"threads\":65,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/042eff8d-60d8-439e-9123-2db2b9169e09\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/24a011bd-9974-4fff-a419-f0ba67604c0e\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/5e40eace-4a89-401d-b687-ec28e7dcf25c\",\"moduleSequenceNumber\":3561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":225,\\\"scriptEstimatedEnd\\\":1691703857719,\\\"iteration\\\":3,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72617,\"ramUsage\":1.75,\"server\":\"srv-3\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/869a41d0-b31a-4afc-a0c0-26612dc96424\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dd3b9212-0df5-420d-8e02-8101bc670973\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f3e604ec-433f-40d4-ad35-0d38a9ef5b86\",\"moduleSequenceNumber\":3560}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/abdb4914-468c-46a9-b665-e3321dcf9ae8\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/05d158c0-2e6a-4cac-81ba-979fb279e488\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/2a74df78-42fc-4321-82f2-6ef07ca4d58f\",\"moduleSequenceNumber\":3559}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":3559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/042eff8d-60d8-439e-9123-2db2b9169e09\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/24a011bd-9974-4fff-a419-f0ba67604c0e\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/5e40eace-4a89-401d-b687-ec28e7dcf25c\",\"moduleSequenceNumber\":3561}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":3561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/869a41d0-b31a-4afc-a0c0-26612dc96424\",\"moduleSequenceNumber\":3154},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dd3b9212-0df5-420d-8e02-8101bc670973\",\"moduleSequenceNumber\":3156},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f3e604ec-433f-40d4-ad35-0d38a9ef5b86\",\"moduleSequenceNumber\":3560}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":3560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":3146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":3148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":3150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":3152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":3154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":3156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-4\",\"httpPortOpen\":false,\"ip\":\"67.2.3.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":491.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857095,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72205,\"ramUsage\":1.75,\"server\":\"srv-4\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fabc8f68-7a3c-43b4-b9de-c65c3189c463\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/00dbd26c-c315-47c6-a2c3-adcdf87bbb35\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/44d6d7c1-6e96-4785-a525-0cef4a7c19f6\",\"moduleSequenceNumber\":3563}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703857188,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72306,\"ramUsage\":1.7,\"server\":\"srv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c7e3e9a0-c947-4fa0-a9db-bdcd03e17603\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6974c786-01ba-40bf-8bc0-8dcb0242c5f9\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9414932f-c876-4c2a-8424-bc3d0be42ad1\",\"moduleSequenceNumber\":3562}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857208,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72307,\"ramUsage\":1.75,\"server\":\"srv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fabc8f68-7a3c-43b4-b9de-c65c3189c463\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/00dbd26c-c315-47c6-a2c3-adcdf87bbb35\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/44d6d7c1-6e96-4785-a525-0cef4a7c19f6\",\"moduleSequenceNumber\":3563}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703857228,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72308,\"ramUsage\":1.75,\"server\":\"srv-4\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fd3d2d5b-a653-45ce-8b0d-86316062dabd\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8090fbb3-08f7-4c55-a84b-639e7f3f8d4c\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/df3d0538-7217-4374-a226-9c8efabf05a2\",\"moduleSequenceNumber\":3564}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857248,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72309,\"ramUsage\":1.75,\"server\":\"srv-4\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fabc8f68-7a3c-43b4-b9de-c65c3189c463\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/00dbd26c-c315-47c6-a2c3-adcdf87bbb35\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/44d6d7c1-6e96-4785-a525-0cef4a7c19f6\",\"moduleSequenceNumber\":3563}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703857353,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72410,\"ramUsage\":1.7,\"server\":\"srv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c7e3e9a0-c947-4fa0-a9db-bdcd03e17603\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6974c786-01ba-40bf-8bc0-8dcb0242c5f9\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9414932f-c876-4c2a-8424-bc3d0be42ad1\",\"moduleSequenceNumber\":3562}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857373,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72411,\"ramUsage\":1.75,\"server\":\"srv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fabc8f68-7a3c-43b4-b9de-c65c3189c463\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/00dbd26c-c315-47c6-a2c3-adcdf87bbb35\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/44d6d7c1-6e96-4785-a525-0cef4a7c19f6\",\"moduleSequenceNumber\":3563}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703857393,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72412,\"ramUsage\":1.75,\"server\":\"srv-4\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fd3d2d5b-a653-45ce-8b0d-86316062dabd\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8090fbb3-08f7-4c55-a84b-639e7f3f8d4c\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/df3d0538-7217-4374-a226-9c8efabf05a2\",\"moduleSequenceNumber\":3564}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857413,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72413,\"ramUsage\":1.75,\"server\":\"srv-4\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fabc8f68-7a3c-43b4-b9de-c65c3189c463\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/00dbd26c-c315-47c6-a2c3-adcdf87bbb35\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/44d6d7c1-6e96-4785-a525-0cef4a7c19f6\",\"moduleSequenceNumber\":3563}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703857680,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72514,\"ramUsage\":1.7,\"server\":\"srv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c7e3e9a0-c947-4fa0-a9db-bdcd03e17603\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6974c786-01ba-40bf-8bc0-8dcb0242c5f9\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9414932f-c876-4c2a-8424-bc3d0be42ad1\",\"moduleSequenceNumber\":3562}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857700,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72515,\"ramUsage\":1.75,\"server\":\"srv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fabc8f68-7a3c-43b4-b9de-c65c3189c463\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/00dbd26c-c315-47c6-a2c3-adcdf87bbb35\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/44d6d7c1-6e96-4785-a525-0cef4a7c19f6\",\"moduleSequenceNumber\":3563}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703857720,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72516,\"ramUsage\":1.75,\"server\":\"srv-4\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fd3d2d5b-a653-45ce-8b0d-86316062dabd\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8090fbb3-08f7-4c55-a84b-639e7f3f8d4c\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/df3d0538-7217-4374-a226-9c8efabf05a2\",\"moduleSequenceNumber\":3564}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857740,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72517,\"ramUsage\":1.75,\"server\":\"srv-4\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fabc8f68-7a3c-43b4-b9de-c65c3189c463\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/00dbd26c-c315-47c6-a2c3-adcdf87bbb35\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/44d6d7c1-6e96-4785-a525-0cef4a7c19f6\",\"moduleSequenceNumber\":3563}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":57,\\\"scriptEstimatedEnd\\\":1691703857743,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72618,\"ramUsage\":1.7,\"server\":\"srv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c7e3e9a0-c947-4fa0-a9db-bdcd03e17603\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6974c786-01ba-40bf-8bc0-8dcb0242c5f9\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9414932f-c876-4c2a-8424-bc3d0be42ad1\",\"moduleSequenceNumber\":3562}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":225,\\\"scriptEstimatedEnd\\\":1691703857763,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72619,\"ramUsage\":1.75,\"server\":\"srv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fabc8f68-7a3c-43b4-b9de-c65c3189c463\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/00dbd26c-c315-47c6-a2c3-adcdf87bbb35\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/44d6d7c1-6e96-4785-a525-0cef4a7c19f6\",\"moduleSequenceNumber\":3563}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":183,\\\"scriptEstimatedEnd\\\":1691703857783,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72620,\"ramUsage\":1.75,\"server\":\"srv-4\",\"threads\":65,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fd3d2d5b-a653-45ce-8b0d-86316062dabd\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8090fbb3-08f7-4c55-a84b-639e7f3f8d4c\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/df3d0538-7217-4374-a226-9c8efabf05a2\",\"moduleSequenceNumber\":3564}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"univ-energy\\\",\\\"scriptExecTime\\\":225,\\\"scriptEstimatedEnd\\\":1691703857803,\\\"iteration\\\":4,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703857060],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72621,\"ramUsage\":1.75,\"server\":\"srv-4\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fabc8f68-7a3c-43b4-b9de-c65c3189c463\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/00dbd26c-c315-47c6-a2c3-adcdf87bbb35\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/44d6d7c1-6e96-4785-a525-0cef4a7c19f6\",\"moduleSequenceNumber\":3563}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c7e3e9a0-c947-4fa0-a9db-bdcd03e17603\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6974c786-01ba-40bf-8bc0-8dcb0242c5f9\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9414932f-c876-4c2a-8424-bc3d0be42ad1\",\"moduleSequenceNumber\":3562}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":3562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fd3d2d5b-a653-45ce-8b0d-86316062dabd\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8090fbb3-08f7-4c55-a84b-639e7f3f8d4c\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/df3d0538-7217-4374-a226-9c8efabf05a2\",\"moduleSequenceNumber\":3564}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":3564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/fabc8f68-7a3c-43b4-b9de-c65c3189c463\",\"moduleSequenceNumber\":3172},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/00dbd26c-c315-47c6-a2c3-adcdf87bbb35\",\"moduleSequenceNumber\":3174},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/44d6d7c1-6e96-4785-a525-0cef4a7c19f6\",\"moduleSequenceNumber\":3563}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":3563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":3164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":3166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":3168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":3170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":3172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":3174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-5\",\"httpPortOpen\":false,\"ip\":\"88.4.2.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":447.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703857119,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72206,\"ramUsage\":1.7,\"server\":\"srv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1c6f812c-b5e7-406d-930c-016c052b598e\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/442d90fd-ec27-467a-bff3-44c0b0748ecc\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/7a9ae3d4-200d-43da-b5a5-112984eabe28\",\"moduleSequenceNumber\":3565}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857139,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72207,\"ramUsage\":1.75,\"server\":\"srv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d12e916c-9bb0-45b7-8135-0ecbdb86f9e7\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7bbb9169-686d-4cb4-8d6d-6e7646194ad9\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f049160e-376f-436b-8fce-f874507a9c16\",\"moduleSequenceNumber\":3566}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703857159,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72208,\"ramUsage\":1.75,\"server\":\"srv-5\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c1f706c3-209d-4f8d-a414-c0d75bb9dca5\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e8c6c65a-091e-471a-971e-d64ee739d8b5\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a5e782a2-537c-455e-95f8-b87aa03b01b2\",\"moduleSequenceNumber\":3567}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857179,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72209,\"ramUsage\":1.75,\"server\":\"srv-5\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d12e916c-9bb0-45b7-8135-0ecbdb86f9e7\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7bbb9169-686d-4cb4-8d6d-6e7646194ad9\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f049160e-376f-436b-8fce-f874507a9c16\",\"moduleSequenceNumber\":3566}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703857272,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72310,\"ramUsage\":1.7,\"server\":\"srv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1c6f812c-b5e7-406d-930c-016c052b598e\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/442d90fd-ec27-467a-bff3-44c0b0748ecc\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/7a9ae3d4-200d-43da-b5a5-112984eabe28\",\"moduleSequenceNumber\":3565}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857292,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72311,\"ramUsage\":1.75,\"server\":\"srv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d12e916c-9bb0-45b7-8135-0ecbdb86f9e7\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7bbb9169-686d-4cb4-8d6d-6e7646194ad9\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f049160e-376f-436b-8fce-f874507a9c16\",\"moduleSequenceNumber\":3566}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703857312,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72312,\"ramUsage\":1.75,\"server\":\"srv-5\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c1f706c3-209d-4f8d-a414-c0d75bb9dca5\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e8c6c65a-091e-471a-971e-d64ee739d8b5\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a5e782a2-537c-455e-95f8-b87aa03b01b2\",\"moduleSequenceNumber\":3567}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857332,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72313,\"ramUsage\":1.75,\"server\":\"srv-5\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d12e916c-9bb0-45b7-8135-0ecbdb86f9e7\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7bbb9169-686d-4cb4-8d6d-6e7646194ad9\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f049160e-376f-436b-8fce-f874507a9c16\",\"moduleSequenceNumber\":3566}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703857437,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72414,\"ramUsage\":1.7,\"server\":\"srv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1c6f812c-b5e7-406d-930c-016c052b598e\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/442d90fd-ec27-467a-bff3-44c0b0748ecc\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/7a9ae3d4-200d-43da-b5a5-112984eabe28\",\"moduleSequenceNumber\":3565}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857457,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72415,\"ramUsage\":1.75,\"server\":\"srv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d12e916c-9bb0-45b7-8135-0ecbdb86f9e7\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7bbb9169-686d-4cb4-8d6d-6e7646194ad9\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f049160e-376f-436b-8fce-f874507a9c16\",\"moduleSequenceNumber\":3566}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703857477,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72416,\"ramUsage\":1.75,\"server\":\"srv-5\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c1f706c3-209d-4f8d-a414-c0d75bb9dca5\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e8c6c65a-091e-471a-971e-d64ee739d8b5\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a5e782a2-537c-455e-95f8-b87aa03b01b2\",\"moduleSequenceNumber\":3567}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857497,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72417,\"ramUsage\":1.75,\"server\":\"srv-5\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d12e916c-9bb0-45b7-8135-0ecbdb86f9e7\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7bbb9169-686d-4cb4-8d6d-6e7646194ad9\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f049160e-376f-436b-8fce-f874507a9c16\",\"moduleSequenceNumber\":3566}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703857764,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72518,\"ramUsage\":1.7,\"server\":\"srv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1c6f812c-b5e7-406d-930c-016c052b598e\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/442d90fd-ec27-467a-bff3-44c0b0748ecc\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/7a9ae3d4-200d-43da-b5a5-112984eabe28\",\"moduleSequenceNumber\":3565}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857784,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72519,\"ramUsage\":1.75,\"server\":\"srv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d12e916c-9bb0-45b7-8135-0ecbdb86f9e7\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7bbb9169-686d-4cb4-8d6d-6e7646194ad9\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f049160e-376f-436b-8fce-f874507a9c16\",\"moduleSequenceNumber\":3566}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703857804,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72520,\"ramUsage\":1.75,\"server\":\"srv-5\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c1f706c3-209d-4f8d-a414-c0d75bb9dca5\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e8c6c65a-091e-471a-971e-d64ee739d8b5\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a5e782a2-537c-455e-95f8-b87aa03b01b2\",\"moduleSequenceNumber\":3567}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857824,\\\"iteration\\\":5,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72521,\"ramUsage\":1.75,\"server\":\"srv-5\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d12e916c-9bb0-45b7-8135-0ecbdb86f9e7\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7bbb9169-686d-4cb4-8d6d-6e7646194ad9\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f049160e-376f-436b-8fce-f874507a9c16\",\"moduleSequenceNumber\":3566}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1c6f812c-b5e7-406d-930c-016c052b598e\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/442d90fd-ec27-467a-bff3-44c0b0748ecc\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/7a9ae3d4-200d-43da-b5a5-112984eabe28\",\"moduleSequenceNumber\":3565}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":3565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c1f706c3-209d-4f8d-a414-c0d75bb9dca5\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e8c6c65a-091e-471a-971e-d64ee739d8b5\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a5e782a2-537c-455e-95f8-b87aa03b01b2\",\"moduleSequenceNumber\":3567}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":3567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d12e916c-9bb0-45b7-8135-0ecbdb86f9e7\",\"moduleSequenceNumber\":3190},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7bbb9169-686d-4cb4-8d6d-6e7646194ad9\",\"moduleSequenceNumber\":3192},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/f049160e-376f-436b-8fce-f874507a9c16\",\"moduleSequenceNumber\":3566}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":3566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":3182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":3184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":3186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":3188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":3190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":3192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-6\",\"httpPortOpen\":false,\"ip\":\"13.2.8.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":579,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703857095,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72106,\"ramUsage\":1.7,\"server\":\"srv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/daa38796-ce60-49af-b94d-e6b911df9b01\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/51558e6c-8cf4-409e-8bad-0e8c1ec8c7aa\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/281f7e4f-d825-4624-b3f6-054391b0c988\",\"moduleSequenceNumber\":3568}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857115,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72107,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bde9fada-0a44-4cb0-bb15-87e5e338b2bc\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/46391837-8fb0-47b6-b78b-8539c983c05f\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a1fc775f-acc5-45d8-bc60-a23108e60a5d\",\"moduleSequenceNumber\":3569}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703857135,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72108,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7474c3cd-5dad-42ce-bbd1-ff1f4b60e757\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/671e68d7-2081-4682-b6be-640d84c10a07\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1bc36f11-8996-408e-bf8a-af5a757dc392\",\"moduleSequenceNumber\":3570}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857155,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72109,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bde9fada-0a44-4cb0-bb15-87e5e338b2bc\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/46391837-8fb0-47b6-b78b-8539c983c05f\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a1fc775f-acc5-45d8-bc60-a23108e60a5d\",\"moduleSequenceNumber\":3569}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703857203,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72210,\"ramUsage\":1.7,\"server\":\"srv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/daa38796-ce60-49af-b94d-e6b911df9b01\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/51558e6c-8cf4-409e-8bad-0e8c1ec8c7aa\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/281f7e4f-d825-4624-b3f6-054391b0c988\",\"moduleSequenceNumber\":3568}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857223,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72211,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bde9fada-0a44-4cb0-bb15-87e5e338b2bc\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/46391837-8fb0-47b6-b78b-8539c983c05f\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a1fc775f-acc5-45d8-bc60-a23108e60a5d\",\"moduleSequenceNumber\":3569}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703857243,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72212,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7474c3cd-5dad-42ce-bbd1-ff1f4b60e757\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/671e68d7-2081-4682-b6be-640d84c10a07\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1bc36f11-8996-408e-bf8a-af5a757dc392\",\"moduleSequenceNumber\":3570}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857263,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72213,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bde9fada-0a44-4cb0-bb15-87e5e338b2bc\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/46391837-8fb0-47b6-b78b-8539c983c05f\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a1fc775f-acc5-45d8-bc60-a23108e60a5d\",\"moduleSequenceNumber\":3569}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703857357,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72314,\"ramUsage\":1.7,\"server\":\"srv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/daa38796-ce60-49af-b94d-e6b911df9b01\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/51558e6c-8cf4-409e-8bad-0e8c1ec8c7aa\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/281f7e4f-d825-4624-b3f6-054391b0c988\",\"moduleSequenceNumber\":3568}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857377,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72315,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bde9fada-0a44-4cb0-bb15-87e5e338b2bc\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/46391837-8fb0-47b6-b78b-8539c983c05f\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a1fc775f-acc5-45d8-bc60-a23108e60a5d\",\"moduleSequenceNumber\":3569}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703857397,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72316,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7474c3cd-5dad-42ce-bbd1-ff1f4b60e757\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/671e68d7-2081-4682-b6be-640d84c10a07\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1bc36f11-8996-408e-bf8a-af5a757dc392\",\"moduleSequenceNumber\":3570}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857417,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72317,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bde9fada-0a44-4cb0-bb15-87e5e338b2bc\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/46391837-8fb0-47b6-b78b-8539c983c05f\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a1fc775f-acc5-45d8-bc60-a23108e60a5d\",\"moduleSequenceNumber\":3569}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703857521,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72418,\"ramUsage\":1.7,\"server\":\"srv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/daa38796-ce60-49af-b94d-e6b911df9b01\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/51558e6c-8cf4-409e-8bad-0e8c1ec8c7aa\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/281f7e4f-d825-4624-b3f6-054391b0c988\",\"moduleSequenceNumber\":3568}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857541,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72419,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bde9fada-0a44-4cb0-bb15-87e5e338b2bc\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/46391837-8fb0-47b6-b78b-8539c983c05f\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a1fc775f-acc5-45d8-bc60-a23108e60a5d\",\"moduleSequenceNumber\":3569}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703857561,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72420,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7474c3cd-5dad-42ce-bbd1-ff1f4b60e757\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/671e68d7-2081-4682-b6be-640d84c10a07\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1bc36f11-8996-408e-bf8a-af5a757dc392\",\"moduleSequenceNumber\":3570}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857581,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72421,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bde9fada-0a44-4cb0-bb15-87e5e338b2bc\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/46391837-8fb0-47b6-b78b-8539c983c05f\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a1fc775f-acc5-45d8-bc60-a23108e60a5d\",\"moduleSequenceNumber\":3569}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703857848,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72522,\"ramUsage\":1.7,\"server\":\"srv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/daa38796-ce60-49af-b94d-e6b911df9b01\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/51558e6c-8cf4-409e-8bad-0e8c1ec8c7aa\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/281f7e4f-d825-4624-b3f6-054391b0c988\",\"moduleSequenceNumber\":3568}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857868,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72523,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bde9fada-0a44-4cb0-bb15-87e5e338b2bc\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/46391837-8fb0-47b6-b78b-8539c983c05f\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a1fc775f-acc5-45d8-bc60-a23108e60a5d\",\"moduleSequenceNumber\":3569}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703857888,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72524,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7474c3cd-5dad-42ce-bbd1-ff1f4b60e757\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/671e68d7-2081-4682-b6be-640d84c10a07\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1bc36f11-8996-408e-bf8a-af5a757dc392\",\"moduleSequenceNumber\":3570}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857908,\\\"iteration\\\":6,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72525,\"ramUsage\":1.75,\"server\":\"srv-6\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bde9fada-0a44-4cb0-bb15-87e5e338b2bc\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/46391837-8fb0-47b6-b78b-8539c983c05f\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a1fc775f-acc5-45d8-bc60-a23108e60a5d\",\"moduleSequenceNumber\":3569}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/daa38796-ce60-49af-b94d-e6b911df9b01\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/51558e6c-8cf4-409e-8bad-0e8c1ec8c7aa\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/281f7e4f-d825-4624-b3f6-054391b0c988\",\"moduleSequenceNumber\":3568}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":3568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7474c3cd-5dad-42ce-bbd1-ff1f4b60e757\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/671e68d7-2081-4682-b6be-640d84c10a07\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1bc36f11-8996-408e-bf8a-af5a757dc392\",\"moduleSequenceNumber\":3570}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":3570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bde9fada-0a44-4cb0-bb15-87e5e338b2bc\",\"moduleSequenceNumber\":3208},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/46391837-8fb0-47b6-b78b-8539c983c05f\",\"moduleSequenceNumber\":3210},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/a1fc775f-acc5-45d8-bc60-a23108e60a5d\",\"moduleSequenceNumber\":3569}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":3569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":3200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":3202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":3204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":3206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":3208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":3210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-7\",\"httpPortOpen\":false,\"ip\":\"93.3.4.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":775,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857081,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72007,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d2f197e2-e670-469c-a2fe-373aaa9ddcee\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6b8423e4-4d15-4511-91be-65c07339f650\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b9c51190-4bf6-4cff-9532-7d3829892c53\",\"moduleSequenceNumber\":3572}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703857101,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72008,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9ccb4164-730e-4721-8537-4ddec1d6c888\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/24c0d11c-a4a5-4839-86f0-cc7145208f1c\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/ef4e8d49-5e35-448e-8188-be8d287b9e09\",\"moduleSequenceNumber\":3573}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857121,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72009,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d2f197e2-e670-469c-a2fe-373aaa9ddcee\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6b8423e4-4d15-4511-91be-65c07339f650\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b9c51190-4bf6-4cff-9532-7d3829892c53\",\"moduleSequenceNumber\":3572}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703857180,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72110,\"ramUsage\":1.7,\"server\":\"srv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/adec8205-65cc-42ad-b7a0-62af2178029f\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d7160280-1d01-4dab-baf3-badecc338a13\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/7a560299-bd9e-4057-9c85-169dd99c44a4\",\"moduleSequenceNumber\":3571}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857200,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72111,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d2f197e2-e670-469c-a2fe-373aaa9ddcee\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6b8423e4-4d15-4511-91be-65c07339f650\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b9c51190-4bf6-4cff-9532-7d3829892c53\",\"moduleSequenceNumber\":3572}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703857220,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72112,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9ccb4164-730e-4721-8537-4ddec1d6c888\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/24c0d11c-a4a5-4839-86f0-cc7145208f1c\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/ef4e8d49-5e35-448e-8188-be8d287b9e09\",\"moduleSequenceNumber\":3573}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857240,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72113,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d2f197e2-e670-469c-a2fe-373aaa9ddcee\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6b8423e4-4d15-4511-91be-65c07339f650\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b9c51190-4bf6-4cff-9532-7d3829892c53\",\"moduleSequenceNumber\":3572}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703857287,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72214,\"ramUsage\":1.7,\"server\":\"srv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/adec8205-65cc-42ad-b7a0-62af2178029f\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d7160280-1d01-4dab-baf3-badecc338a13\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/7a560299-bd9e-4057-9c85-169dd99c44a4\",\"moduleSequenceNumber\":3571}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857307,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72215,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d2f197e2-e670-469c-a2fe-373aaa9ddcee\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6b8423e4-4d15-4511-91be-65c07339f650\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b9c51190-4bf6-4cff-9532-7d3829892c53\",\"moduleSequenceNumber\":3572}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703857327,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72216,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9ccb4164-730e-4721-8537-4ddec1d6c888\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/24c0d11c-a4a5-4839-86f0-cc7145208f1c\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/ef4e8d49-5e35-448e-8188-be8d287b9e09\",\"moduleSequenceNumber\":3573}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857347,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72217,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d2f197e2-e670-469c-a2fe-373aaa9ddcee\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6b8423e4-4d15-4511-91be-65c07339f650\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b9c51190-4bf6-4cff-9532-7d3829892c53\",\"moduleSequenceNumber\":3572}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703857441,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72318,\"ramUsage\":1.7,\"server\":\"srv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/adec8205-65cc-42ad-b7a0-62af2178029f\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d7160280-1d01-4dab-baf3-badecc338a13\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/7a560299-bd9e-4057-9c85-169dd99c44a4\",\"moduleSequenceNumber\":3571}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857461,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72319,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d2f197e2-e670-469c-a2fe-373aaa9ddcee\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6b8423e4-4d15-4511-91be-65c07339f650\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b9c51190-4bf6-4cff-9532-7d3829892c53\",\"moduleSequenceNumber\":3572}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703857481,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72320,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9ccb4164-730e-4721-8537-4ddec1d6c888\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/24c0d11c-a4a5-4839-86f0-cc7145208f1c\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/ef4e8d49-5e35-448e-8188-be8d287b9e09\",\"moduleSequenceNumber\":3573}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857501,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72321,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d2f197e2-e670-469c-a2fe-373aaa9ddcee\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6b8423e4-4d15-4511-91be-65c07339f650\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b9c51190-4bf6-4cff-9532-7d3829892c53\",\"moduleSequenceNumber\":3572}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703857638,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72422,\"ramUsage\":1.7,\"server\":\"srv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/adec8205-65cc-42ad-b7a0-62af2178029f\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d7160280-1d01-4dab-baf3-badecc338a13\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/7a560299-bd9e-4057-9c85-169dd99c44a4\",\"moduleSequenceNumber\":3571}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857658,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72423,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d2f197e2-e670-469c-a2fe-373aaa9ddcee\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6b8423e4-4d15-4511-91be-65c07339f650\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b9c51190-4bf6-4cff-9532-7d3829892c53\",\"moduleSequenceNumber\":3572}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703857678,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72424,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9ccb4164-730e-4721-8537-4ddec1d6c888\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/24c0d11c-a4a5-4839-86f0-cc7145208f1c\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/ef4e8d49-5e35-448e-8188-be8d287b9e09\",\"moduleSequenceNumber\":3573}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857698,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72425,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d2f197e2-e670-469c-a2fe-373aaa9ddcee\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6b8423e4-4d15-4511-91be-65c07339f650\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b9c51190-4bf6-4cff-9532-7d3829892c53\",\"moduleSequenceNumber\":3572}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703857932,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72526,\"ramUsage\":1.7,\"server\":\"srv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/adec8205-65cc-42ad-b7a0-62af2178029f\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d7160280-1d01-4dab-baf3-badecc338a13\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/7a560299-bd9e-4057-9c85-169dd99c44a4\",\"moduleSequenceNumber\":3571}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857952,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72527,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d2f197e2-e670-469c-a2fe-373aaa9ddcee\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6b8423e4-4d15-4511-91be-65c07339f650\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b9c51190-4bf6-4cff-9532-7d3829892c53\",\"moduleSequenceNumber\":3572}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703857972,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72528,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9ccb4164-730e-4721-8537-4ddec1d6c888\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/24c0d11c-a4a5-4839-86f0-cc7145208f1c\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/ef4e8d49-5e35-448e-8188-be8d287b9e09\",\"moduleSequenceNumber\":3573}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703857992,\\\"iteration\\\":7,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72529,\"ramUsage\":1.75,\"server\":\"srv-7\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d2f197e2-e670-469c-a2fe-373aaa9ddcee\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6b8423e4-4d15-4511-91be-65c07339f650\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b9c51190-4bf6-4cff-9532-7d3829892c53\",\"moduleSequenceNumber\":3572}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/adec8205-65cc-42ad-b7a0-62af2178029f\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d7160280-1d01-4dab-baf3-badecc338a13\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/7a560299-bd9e-4057-9c85-169dd99c44a4\",\"moduleSequenceNumber\":3571}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":3571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9ccb4164-730e-4721-8537-4ddec1d6c888\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/24c0d11c-a4a5-4839-86f0-cc7145208f1c\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/ef4e8d49-5e35-448e-8188-be8d287b9e09\",\"moduleSequenceNumber\":3573}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":3573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d2f197e2-e670-469c-a2fe-373aaa9ddcee\",\"moduleSequenceNumber\":3226},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/6b8423e4-4d15-4511-91be-65c07339f650\",\"moduleSequenceNumber\":3228},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b9c51190-4bf6-4cff-9532-7d3829892c53\",\"moduleSequenceNumber\":3572}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":3572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":3218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":3220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":3222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":3224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":3226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":3228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-8\",\"httpPortOpen\":false,\"ip\":\"23.5.5.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":776.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703857145,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72010,\"ramUsage\":1.7,\"server\":\"srv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1adeffc5-9594-419d-a93e-e74bb08a8e76\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e0a7a7ef-2e6f-470f-a864-e85270d8cbbf\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/030e1b9a-639c-4ef8-a572-e4ca6d8df28d\",\"moduleSequenceNumber\":3574}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857165,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72011,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/52795d70-5688-4b0d-b202-e3bf2b059a11\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0db456fa-0508-46b5-b7cb-d5ed44553c24\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9b552bee-dd18-4fa3-86ca-744b3c9f3ec4\",\"moduleSequenceNumber\":3575}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703857185,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72012,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/90a83ed1-3029-4f16-9ab0-a77b775d2e2d\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8ab656d7-55f5-459a-9bbf-f7f6b9e37b6b\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/2973f9e0-5c35-4612-98d0-ada6f109318f\",\"moduleSequenceNumber\":3576}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857205,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72013,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/52795d70-5688-4b0d-b202-e3bf2b059a11\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0db456fa-0508-46b5-b7cb-d5ed44553c24\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9b552bee-dd18-4fa3-86ca-744b3c9f3ec4\",\"moduleSequenceNumber\":3575}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703857264,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72114,\"ramUsage\":1.7,\"server\":\"srv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1adeffc5-9594-419d-a93e-e74bb08a8e76\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e0a7a7ef-2e6f-470f-a864-e85270d8cbbf\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/030e1b9a-639c-4ef8-a572-e4ca6d8df28d\",\"moduleSequenceNumber\":3574}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857284,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72115,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/52795d70-5688-4b0d-b202-e3bf2b059a11\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0db456fa-0508-46b5-b7cb-d5ed44553c24\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9b552bee-dd18-4fa3-86ca-744b3c9f3ec4\",\"moduleSequenceNumber\":3575}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703857304,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72116,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/90a83ed1-3029-4f16-9ab0-a77b775d2e2d\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8ab656d7-55f5-459a-9bbf-f7f6b9e37b6b\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/2973f9e0-5c35-4612-98d0-ada6f109318f\",\"moduleSequenceNumber\":3576}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857324,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72117,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/52795d70-5688-4b0d-b202-e3bf2b059a11\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0db456fa-0508-46b5-b7cb-d5ed44553c24\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9b552bee-dd18-4fa3-86ca-744b3c9f3ec4\",\"moduleSequenceNumber\":3575}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703857371,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72218,\"ramUsage\":1.7,\"server\":\"srv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1adeffc5-9594-419d-a93e-e74bb08a8e76\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e0a7a7ef-2e6f-470f-a864-e85270d8cbbf\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/030e1b9a-639c-4ef8-a572-e4ca6d8df28d\",\"moduleSequenceNumber\":3574}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857391,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72219,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/52795d70-5688-4b0d-b202-e3bf2b059a11\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0db456fa-0508-46b5-b7cb-d5ed44553c24\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9b552bee-dd18-4fa3-86ca-744b3c9f3ec4\",\"moduleSequenceNumber\":3575}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703857411,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72220,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/90a83ed1-3029-4f16-9ab0-a77b775d2e2d\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8ab656d7-55f5-459a-9bbf-f7f6b9e37b6b\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/2973f9e0-5c35-4612-98d0-ada6f109318f\",\"moduleSequenceNumber\":3576}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857431,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72221,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/52795d70-5688-4b0d-b202-e3bf2b059a11\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0db456fa-0508-46b5-b7cb-d5ed44553c24\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9b552bee-dd18-4fa3-86ca-744b3c9f3ec4\",\"moduleSequenceNumber\":3575}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703857525,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72322,\"ramUsage\":1.7,\"server\":\"srv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1adeffc5-9594-419d-a93e-e74bb08a8e76\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e0a7a7ef-2e6f-470f-a864-e85270d8cbbf\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/030e1b9a-639c-4ef8-a572-e4ca6d8df28d\",\"moduleSequenceNumber\":3574}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857545,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72323,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/52795d70-5688-4b0d-b202-e3bf2b059a11\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0db456fa-0508-46b5-b7cb-d5ed44553c24\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9b552bee-dd18-4fa3-86ca-744b3c9f3ec4\",\"moduleSequenceNumber\":3575}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703857565,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72324,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/90a83ed1-3029-4f16-9ab0-a77b775d2e2d\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8ab656d7-55f5-459a-9bbf-f7f6b9e37b6b\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/2973f9e0-5c35-4612-98d0-ada6f109318f\",\"moduleSequenceNumber\":3576}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857585,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72325,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/52795d70-5688-4b0d-b202-e3bf2b059a11\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0db456fa-0508-46b5-b7cb-d5ed44553c24\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9b552bee-dd18-4fa3-86ca-744b3c9f3ec4\",\"moduleSequenceNumber\":3575}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703857727,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72426,\"ramUsage\":1.7,\"server\":\"srv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1adeffc5-9594-419d-a93e-e74bb08a8e76\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e0a7a7ef-2e6f-470f-a864-e85270d8cbbf\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/030e1b9a-639c-4ef8-a572-e4ca6d8df28d\",\"moduleSequenceNumber\":3574}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857747,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72427,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/52795d70-5688-4b0d-b202-e3bf2b059a11\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0db456fa-0508-46b5-b7cb-d5ed44553c24\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9b552bee-dd18-4fa3-86ca-744b3c9f3ec4\",\"moduleSequenceNumber\":3575}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703857767,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72428,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/90a83ed1-3029-4f16-9ab0-a77b775d2e2d\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8ab656d7-55f5-459a-9bbf-f7f6b9e37b6b\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/2973f9e0-5c35-4612-98d0-ada6f109318f\",\"moduleSequenceNumber\":3576}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857787,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72429,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/52795d70-5688-4b0d-b202-e3bf2b059a11\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0db456fa-0508-46b5-b7cb-d5ed44553c24\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9b552bee-dd18-4fa3-86ca-744b3c9f3ec4\",\"moduleSequenceNumber\":3575}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703858016,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72530,\"ramUsage\":1.7,\"server\":\"srv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1adeffc5-9594-419d-a93e-e74bb08a8e76\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e0a7a7ef-2e6f-470f-a864-e85270d8cbbf\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/030e1b9a-639c-4ef8-a572-e4ca6d8df28d\",\"moduleSequenceNumber\":3574}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858036,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72531,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/52795d70-5688-4b0d-b202-e3bf2b059a11\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0db456fa-0508-46b5-b7cb-d5ed44553c24\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9b552bee-dd18-4fa3-86ca-744b3c9f3ec4\",\"moduleSequenceNumber\":3575}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703858056,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72532,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/90a83ed1-3029-4f16-9ab0-a77b775d2e2d\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8ab656d7-55f5-459a-9bbf-f7f6b9e37b6b\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/2973f9e0-5c35-4612-98d0-ada6f109318f\",\"moduleSequenceNumber\":3576}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858076,\\\"iteration\\\":8,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72533,\"ramUsage\":1.75,\"server\":\"srv-8\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/52795d70-5688-4b0d-b202-e3bf2b059a11\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0db456fa-0508-46b5-b7cb-d5ed44553c24\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9b552bee-dd18-4fa3-86ca-744b3c9f3ec4\",\"moduleSequenceNumber\":3575}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/1adeffc5-9594-419d-a93e-e74bb08a8e76\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e0a7a7ef-2e6f-470f-a864-e85270d8cbbf\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/030e1b9a-639c-4ef8-a572-e4ca6d8df28d\",\"moduleSequenceNumber\":3574}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":3574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/90a83ed1-3029-4f16-9ab0-a77b775d2e2d\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8ab656d7-55f5-459a-9bbf-f7f6b9e37b6b\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/2973f9e0-5c35-4612-98d0-ada6f109318f\",\"moduleSequenceNumber\":3576}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":3576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/52795d70-5688-4b0d-b202-e3bf2b059a11\",\"moduleSequenceNumber\":3244},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0db456fa-0508-46b5-b7cb-d5ed44553c24\",\"moduleSequenceNumber\":3246},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/9b552bee-dd18-4fa3-86ca-744b3c9f3ec4\",\"moduleSequenceNumber\":3575}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":3575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":3236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":3238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":3240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":3242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":3244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":3246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-9\",\"httpPortOpen\":false,\"ip\":\"43.5.0.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":885.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703857098,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71912,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ed798bf9-e60e-4757-8491-42558b792f95\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/29b8b19e-5458-4176-bd06-1b9677186391\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/52ad66b6-dfaf-411d-a339-ab73eb50e67b\",\"moduleSequenceNumber\":3579}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857118,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71913,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0bb23a9b-dd8f-4b65-9c05-54b3a5b8b76f\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a9d1d753-b3f7-48d7-8dfe-b8d4c92ac561\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/56ac8592-afe4-4f34-9b4f-59e7ec367de0\",\"moduleSequenceNumber\":3578}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703857229,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72014,\"ramUsage\":1.7,\"server\":\"srv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bcbd4f41-0a60-4896-b35d-a11713c34a7e\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/bd90bd4d-89dc-43fa-96f9-11334b179b18\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/3ddc1f57-8155-456d-8d7f-50b9e9069253\",\"moduleSequenceNumber\":3577}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857249,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72015,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0bb23a9b-dd8f-4b65-9c05-54b3a5b8b76f\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a9d1d753-b3f7-48d7-8dfe-b8d4c92ac561\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/56ac8592-afe4-4f34-9b4f-59e7ec367de0\",\"moduleSequenceNumber\":3578}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703857269,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72016,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ed798bf9-e60e-4757-8491-42558b792f95\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/29b8b19e-5458-4176-bd06-1b9677186391\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/52ad66b6-dfaf-411d-a339-ab73eb50e67b\",\"moduleSequenceNumber\":3579}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857289,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72017,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0bb23a9b-dd8f-4b65-9c05-54b3a5b8b76f\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a9d1d753-b3f7-48d7-8dfe-b8d4c92ac561\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/56ac8592-afe4-4f34-9b4f-59e7ec367de0\",\"moduleSequenceNumber\":3578}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703857348,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72118,\"ramUsage\":1.7,\"server\":\"srv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bcbd4f41-0a60-4896-b35d-a11713c34a7e\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/bd90bd4d-89dc-43fa-96f9-11334b179b18\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/3ddc1f57-8155-456d-8d7f-50b9e9069253\",\"moduleSequenceNumber\":3577}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857368,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72119,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0bb23a9b-dd8f-4b65-9c05-54b3a5b8b76f\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a9d1d753-b3f7-48d7-8dfe-b8d4c92ac561\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/56ac8592-afe4-4f34-9b4f-59e7ec367de0\",\"moduleSequenceNumber\":3578}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703857388,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72120,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ed798bf9-e60e-4757-8491-42558b792f95\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/29b8b19e-5458-4176-bd06-1b9677186391\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/52ad66b6-dfaf-411d-a339-ab73eb50e67b\",\"moduleSequenceNumber\":3579}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857408,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72121,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0bb23a9b-dd8f-4b65-9c05-54b3a5b8b76f\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a9d1d753-b3f7-48d7-8dfe-b8d4c92ac561\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/56ac8592-afe4-4f34-9b4f-59e7ec367de0\",\"moduleSequenceNumber\":3578}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703857455,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72222,\"ramUsage\":1.7,\"server\":\"srv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bcbd4f41-0a60-4896-b35d-a11713c34a7e\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/bd90bd4d-89dc-43fa-96f9-11334b179b18\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/3ddc1f57-8155-456d-8d7f-50b9e9069253\",\"moduleSequenceNumber\":3577}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857475,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72223,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0bb23a9b-dd8f-4b65-9c05-54b3a5b8b76f\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a9d1d753-b3f7-48d7-8dfe-b8d4c92ac561\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/56ac8592-afe4-4f34-9b4f-59e7ec367de0\",\"moduleSequenceNumber\":3578}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703857495,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72224,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ed798bf9-e60e-4757-8491-42558b792f95\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/29b8b19e-5458-4176-bd06-1b9677186391\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/52ad66b6-dfaf-411d-a339-ab73eb50e67b\",\"moduleSequenceNumber\":3579}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857515,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72225,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0bb23a9b-dd8f-4b65-9c05-54b3a5b8b76f\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a9d1d753-b3f7-48d7-8dfe-b8d4c92ac561\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/56ac8592-afe4-4f34-9b4f-59e7ec367de0\",\"moduleSequenceNumber\":3578}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703857609,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72326,\"ramUsage\":1.7,\"server\":\"srv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bcbd4f41-0a60-4896-b35d-a11713c34a7e\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/bd90bd4d-89dc-43fa-96f9-11334b179b18\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/3ddc1f57-8155-456d-8d7f-50b9e9069253\",\"moduleSequenceNumber\":3577}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857629,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72327,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0bb23a9b-dd8f-4b65-9c05-54b3a5b8b76f\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a9d1d753-b3f7-48d7-8dfe-b8d4c92ac561\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/56ac8592-afe4-4f34-9b4f-59e7ec367de0\",\"moduleSequenceNumber\":3578}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703857649,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72328,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ed798bf9-e60e-4757-8491-42558b792f95\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/29b8b19e-5458-4176-bd06-1b9677186391\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/52ad66b6-dfaf-411d-a339-ab73eb50e67b\",\"moduleSequenceNumber\":3579}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857669,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72329,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0bb23a9b-dd8f-4b65-9c05-54b3a5b8b76f\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a9d1d753-b3f7-48d7-8dfe-b8d4c92ac561\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/56ac8592-afe4-4f34-9b4f-59e7ec367de0\",\"moduleSequenceNumber\":3578}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703857811,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72430,\"ramUsage\":1.7,\"server\":\"srv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bcbd4f41-0a60-4896-b35d-a11713c34a7e\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/bd90bd4d-89dc-43fa-96f9-11334b179b18\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/3ddc1f57-8155-456d-8d7f-50b9e9069253\",\"moduleSequenceNumber\":3577}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857831,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72431,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0bb23a9b-dd8f-4b65-9c05-54b3a5b8b76f\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a9d1d753-b3f7-48d7-8dfe-b8d4c92ac561\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/56ac8592-afe4-4f34-9b4f-59e7ec367de0\",\"moduleSequenceNumber\":3578}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703857851,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72432,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ed798bf9-e60e-4757-8491-42558b792f95\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/29b8b19e-5458-4176-bd06-1b9677186391\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/52ad66b6-dfaf-411d-a339-ab73eb50e67b\",\"moduleSequenceNumber\":3579}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857871,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72433,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0bb23a9b-dd8f-4b65-9c05-54b3a5b8b76f\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a9d1d753-b3f7-48d7-8dfe-b8d4c92ac561\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/56ac8592-afe4-4f34-9b4f-59e7ec367de0\",\"moduleSequenceNumber\":3578}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703858101,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72534,\"ramUsage\":1.7,\"server\":\"srv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bcbd4f41-0a60-4896-b35d-a11713c34a7e\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/bd90bd4d-89dc-43fa-96f9-11334b179b18\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/3ddc1f57-8155-456d-8d7f-50b9e9069253\",\"moduleSequenceNumber\":3577}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858121,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72535,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0bb23a9b-dd8f-4b65-9c05-54b3a5b8b76f\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a9d1d753-b3f7-48d7-8dfe-b8d4c92ac561\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/56ac8592-afe4-4f34-9b4f-59e7ec367de0\",\"moduleSequenceNumber\":3578}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703858141,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72536,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ed798bf9-e60e-4757-8491-42558b792f95\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/29b8b19e-5458-4176-bd06-1b9677186391\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/52ad66b6-dfaf-411d-a339-ab73eb50e67b\",\"moduleSequenceNumber\":3579}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858161,\\\"iteration\\\":9,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72537,\"ramUsage\":1.75,\"server\":\"srv-9\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0bb23a9b-dd8f-4b65-9c05-54b3a5b8b76f\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a9d1d753-b3f7-48d7-8dfe-b8d4c92ac561\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/56ac8592-afe4-4f34-9b4f-59e7ec367de0\",\"moduleSequenceNumber\":3578}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bcbd4f41-0a60-4896-b35d-a11713c34a7e\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/bd90bd4d-89dc-43fa-96f9-11334b179b18\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/3ddc1f57-8155-456d-8d7f-50b9e9069253\",\"moduleSequenceNumber\":3577}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":3577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ed798bf9-e60e-4757-8491-42558b792f95\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/29b8b19e-5458-4176-bd06-1b9677186391\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/52ad66b6-dfaf-411d-a339-ab73eb50e67b\",\"moduleSequenceNumber\":3579}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":3579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0bb23a9b-dd8f-4b65-9c05-54b3a5b8b76f\",\"moduleSequenceNumber\":3262},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a9d1d753-b3f7-48d7-8dfe-b8d4c92ac561\",\"moduleSequenceNumber\":3264},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/56ac8592-afe4-4f34-9b4f-59e7ec367de0\",\"moduleSequenceNumber\":3578}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":3578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":3254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":3256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":3258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":3260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":3262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":3264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-10\",\"httpPortOpen\":false,\"ip\":\"38.7.4.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":997.1500000000001,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857096,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71811,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703857116,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71812,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9d4dae3f-852e-4320-bffc-8391b5c077ad\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/eea9f910-bf3b-4e9a-b0f5-1c8e777c03cb\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/180e4802-7f81-469e-9ad8-52bf9a4d6bf5\",\"moduleSequenceNumber\":3582}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857136,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71813,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703857142,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71914,\"ramUsage\":1.7,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/b4ad9baf-4c1f-4b25-a0bd-6a144c419d78\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/64b96fc4-c91f-4655-bf37-ec48f9e3a5c4\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/717db076-d1eb-4b66-8619-df482ad5b9f1\",\"moduleSequenceNumber\":3580}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857162,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71915,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703857182,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71916,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9d4dae3f-852e-4320-bffc-8391b5c077ad\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/eea9f910-bf3b-4e9a-b0f5-1c8e777c03cb\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/180e4802-7f81-469e-9ad8-52bf9a4d6bf5\",\"moduleSequenceNumber\":3582}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857202,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71917,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703857314,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72018,\"ramUsage\":1.7,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/b4ad9baf-4c1f-4b25-a0bd-6a144c419d78\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/64b96fc4-c91f-4655-bf37-ec48f9e3a5c4\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/717db076-d1eb-4b66-8619-df482ad5b9f1\",\"moduleSequenceNumber\":3580}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857334,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72019,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703857354,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72020,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9d4dae3f-852e-4320-bffc-8391b5c077ad\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/eea9f910-bf3b-4e9a-b0f5-1c8e777c03cb\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/180e4802-7f81-469e-9ad8-52bf9a4d6bf5\",\"moduleSequenceNumber\":3582}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857374,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72021,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703857432,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72122,\"ramUsage\":1.7,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/b4ad9baf-4c1f-4b25-a0bd-6a144c419d78\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/64b96fc4-c91f-4655-bf37-ec48f9e3a5c4\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/717db076-d1eb-4b66-8619-df482ad5b9f1\",\"moduleSequenceNumber\":3580}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857452,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72123,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703857472,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72124,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9d4dae3f-852e-4320-bffc-8391b5c077ad\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/eea9f910-bf3b-4e9a-b0f5-1c8e777c03cb\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/180e4802-7f81-469e-9ad8-52bf9a4d6bf5\",\"moduleSequenceNumber\":3582}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857492,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72125,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703857540,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72226,\"ramUsage\":1.7,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/b4ad9baf-4c1f-4b25-a0bd-6a144c419d78\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/64b96fc4-c91f-4655-bf37-ec48f9e3a5c4\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/717db076-d1eb-4b66-8619-df482ad5b9f1\",\"moduleSequenceNumber\":3580}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857560,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72227,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703857580,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72228,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9d4dae3f-852e-4320-bffc-8391b5c077ad\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/eea9f910-bf3b-4e9a-b0f5-1c8e777c03cb\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/180e4802-7f81-469e-9ad8-52bf9a4d6bf5\",\"moduleSequenceNumber\":3582}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857600,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72229,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703857693,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72330,\"ramUsage\":1.7,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/b4ad9baf-4c1f-4b25-a0bd-6a144c419d78\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/64b96fc4-c91f-4655-bf37-ec48f9e3a5c4\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/717db076-d1eb-4b66-8619-df482ad5b9f1\",\"moduleSequenceNumber\":3580}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857713,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72331,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703857733,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72332,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9d4dae3f-852e-4320-bffc-8391b5c077ad\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/eea9f910-bf3b-4e9a-b0f5-1c8e777c03cb\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/180e4802-7f81-469e-9ad8-52bf9a4d6bf5\",\"moduleSequenceNumber\":3582}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857753,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72333,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703857896,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72434,\"ramUsage\":1.7,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/b4ad9baf-4c1f-4b25-a0bd-6a144c419d78\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/64b96fc4-c91f-4655-bf37-ec48f9e3a5c4\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/717db076-d1eb-4b66-8619-df482ad5b9f1\",\"moduleSequenceNumber\":3580}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857916,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72435,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703857936,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72436,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9d4dae3f-852e-4320-bffc-8391b5c077ad\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/eea9f910-bf3b-4e9a-b0f5-1c8e777c03cb\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/180e4802-7f81-469e-9ad8-52bf9a4d6bf5\",\"moduleSequenceNumber\":3582}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703857956,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72437,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703858185,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72538,\"ramUsage\":1.7,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/b4ad9baf-4c1f-4b25-a0bd-6a144c419d78\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/64b96fc4-c91f-4655-bf37-ec48f9e3a5c4\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/717db076-d1eb-4b66-8619-df482ad5b9f1\",\"moduleSequenceNumber\":3580}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858205,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72539,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703858225,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72540,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9d4dae3f-852e-4320-bffc-8391b5c077ad\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/eea9f910-bf3b-4e9a-b0f5-1c8e777c03cb\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/180e4802-7f81-469e-9ad8-52bf9a4d6bf5\",\"moduleSequenceNumber\":3582}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858245,\\\"iteration\\\":10,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72541,\"ramUsage\":1.75,\"server\":\"srv-10\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/b4ad9baf-4c1f-4b25-a0bd-6a144c419d78\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/64b96fc4-c91f-4655-bf37-ec48f9e3a5c4\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/717db076-d1eb-4b66-8619-df482ad5b9f1\",\"moduleSequenceNumber\":3580}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":3580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9d4dae3f-852e-4320-bffc-8391b5c077ad\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/eea9f910-bf3b-4e9a-b0f5-1c8e777c03cb\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/180e4802-7f81-469e-9ad8-52bf9a4d6bf5\",\"moduleSequenceNumber\":3582}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":3582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9790a362-704f-4fd6-90c1-5841baa06952\",\"moduleSequenceNumber\":3280},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/891bbfbe-f604-4527-a98b-1ed1b5f6004e\",\"moduleSequenceNumber\":3282},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/fceb32dc-729e-45c9-a2b3-1eaa313aa5fe\",\"moduleSequenceNumber\":3581}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":3581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":3272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":3274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":3276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":3278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":3280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":3282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-11\",\"httpPortOpen\":false,\"ip\":\"67.9.4.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":998.8500000000001,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703857161,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71814,\"ramUsage\":1.7,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/40416390-bcf7-495a-b9b1-20e7dbd2a733\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fd913a7f-a43b-4b29-824b-4bcf39fca202\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/73e84264-90db-4bd3-9a8b-9fd70d4645e4\",\"moduleSequenceNumber\":3583}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857181,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71815,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703857201,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71816,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/38f6944c-c457-4ca8-85d4-3a9c8cfffc69\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/484c0a1d-700e-41ad-8aa0-ff954aac4b71\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/9a272626-789d-4aa5-aa8f-639e97e54212\",\"moduleSequenceNumber\":3585}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857221,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71817,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703857226,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71918,\"ramUsage\":1.7,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/40416390-bcf7-495a-b9b1-20e7dbd2a733\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fd913a7f-a43b-4b29-824b-4bcf39fca202\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/73e84264-90db-4bd3-9a8b-9fd70d4645e4\",\"moduleSequenceNumber\":3583}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857246,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71919,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703857266,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71920,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/38f6944c-c457-4ca8-85d4-3a9c8cfffc69\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/484c0a1d-700e-41ad-8aa0-ff954aac4b71\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/9a272626-789d-4aa5-aa8f-639e97e54212\",\"moduleSequenceNumber\":3585}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857286,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71921,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703857397,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72022,\"ramUsage\":1.7,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/40416390-bcf7-495a-b9b1-20e7dbd2a733\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fd913a7f-a43b-4b29-824b-4bcf39fca202\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/73e84264-90db-4bd3-9a8b-9fd70d4645e4\",\"moduleSequenceNumber\":3583}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857417,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72023,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703857437,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72024,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/38f6944c-c457-4ca8-85d4-3a9c8cfffc69\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/484c0a1d-700e-41ad-8aa0-ff954aac4b71\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/9a272626-789d-4aa5-aa8f-639e97e54212\",\"moduleSequenceNumber\":3585}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857457,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72025,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703857526,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72126,\"ramUsage\":1.7,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/40416390-bcf7-495a-b9b1-20e7dbd2a733\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fd913a7f-a43b-4b29-824b-4bcf39fca202\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/73e84264-90db-4bd3-9a8b-9fd70d4645e4\",\"moduleSequenceNumber\":3583}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857546,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72127,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703857566,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72128,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/38f6944c-c457-4ca8-85d4-3a9c8cfffc69\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/484c0a1d-700e-41ad-8aa0-ff954aac4b71\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/9a272626-789d-4aa5-aa8f-639e97e54212\",\"moduleSequenceNumber\":3585}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857586,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72129,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703857623,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72230,\"ramUsage\":1.7,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/40416390-bcf7-495a-b9b1-20e7dbd2a733\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fd913a7f-a43b-4b29-824b-4bcf39fca202\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/73e84264-90db-4bd3-9a8b-9fd70d4645e4\",\"moduleSequenceNumber\":3583}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857643,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72231,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703857663,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72232,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/38f6944c-c457-4ca8-85d4-3a9c8cfffc69\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/484c0a1d-700e-41ad-8aa0-ff954aac4b71\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/9a272626-789d-4aa5-aa8f-639e97e54212\",\"moduleSequenceNumber\":3585}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857683,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72233,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703857778,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72334,\"ramUsage\":1.7,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/40416390-bcf7-495a-b9b1-20e7dbd2a733\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fd913a7f-a43b-4b29-824b-4bcf39fca202\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/73e84264-90db-4bd3-9a8b-9fd70d4645e4\",\"moduleSequenceNumber\":3583}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857798,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72335,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703857818,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72336,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/38f6944c-c457-4ca8-85d4-3a9c8cfffc69\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/484c0a1d-700e-41ad-8aa0-ff954aac4b71\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/9a272626-789d-4aa5-aa8f-639e97e54212\",\"moduleSequenceNumber\":3585}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857838,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72337,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703857980,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72438,\"ramUsage\":1.7,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/40416390-bcf7-495a-b9b1-20e7dbd2a733\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fd913a7f-a43b-4b29-824b-4bcf39fca202\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/73e84264-90db-4bd3-9a8b-9fd70d4645e4\",\"moduleSequenceNumber\":3583}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858000,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72439,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703858020,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72440,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/38f6944c-c457-4ca8-85d4-3a9c8cfffc69\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/484c0a1d-700e-41ad-8aa0-ff954aac4b71\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/9a272626-789d-4aa5-aa8f-639e97e54212\",\"moduleSequenceNumber\":3585}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858040,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72441,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703858270,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72542,\"ramUsage\":1.7,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/40416390-bcf7-495a-b9b1-20e7dbd2a733\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fd913a7f-a43b-4b29-824b-4bcf39fca202\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/73e84264-90db-4bd3-9a8b-9fd70d4645e4\",\"moduleSequenceNumber\":3583}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858290,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72543,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703858310,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72544,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/38f6944c-c457-4ca8-85d4-3a9c8cfffc69\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/484c0a1d-700e-41ad-8aa0-ff954aac4b71\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/9a272626-789d-4aa5-aa8f-639e97e54212\",\"moduleSequenceNumber\":3585}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858330,\\\"iteration\\\":11,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72545,\"ramUsage\":1.75,\"server\":\"srv-11\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/40416390-bcf7-495a-b9b1-20e7dbd2a733\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fd913a7f-a43b-4b29-824b-4bcf39fca202\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/73e84264-90db-4bd3-9a8b-9fd70d4645e4\",\"moduleSequenceNumber\":3583}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":3583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/38f6944c-c457-4ca8-85d4-3a9c8cfffc69\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/484c0a1d-700e-41ad-8aa0-ff954aac4b71\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/9a272626-789d-4aa5-aa8f-639e97e54212\",\"moduleSequenceNumber\":3585}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":3585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/286d31e1-4ab2-4715-a134-15f6b4dd4fbb\",\"moduleSequenceNumber\":3298},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7990095d-529a-44a3-bfec-28895c981eee\",\"moduleSequenceNumber\":3300},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57411b68-7245-497b-9468-1d6393875f37\",\"moduleSequenceNumber\":3584}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":3584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":3290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":3292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":3294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":3296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":3298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":3300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-12\",\"httpPortOpen\":false,\"ip\":\"10.1.6.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1138.8500000000001,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857097,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71715,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":192,\\\"scriptEstimatedEnd\\\":1691703857117,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71716,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d6b8b74c-ae77-47e3-9306-0f2e29b783fd\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/60fe0aef-2d12-4d8c-8a48-575c305b13b3\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a8420316-57ec-403d-a978-7460717c40c3\",\"moduleSequenceNumber\":3588}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857137,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71717,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703857245,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71818,\"ramUsage\":1.7,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/cb40c316-053a-4843-aa9e-2c106c57fe23\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8f6f1868-8d19-4cb1-ba9a-4039fe6a86d0\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9367b2e9-b398-4bd2-b7c8-8d3777ab444c\",\"moduleSequenceNumber\":3586}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857265,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71819,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703857285,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71820,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d6b8b74c-ae77-47e3-9306-0f2e29b783fd\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/60fe0aef-2d12-4d8c-8a48-575c305b13b3\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a8420316-57ec-403d-a978-7460717c40c3\",\"moduleSequenceNumber\":3588}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857305,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71821,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703857311,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71922,\"ramUsage\":1.7,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/cb40c316-053a-4843-aa9e-2c106c57fe23\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8f6f1868-8d19-4cb1-ba9a-4039fe6a86d0\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9367b2e9-b398-4bd2-b7c8-8d3777ab444c\",\"moduleSequenceNumber\":3586}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857331,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71923,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703857351,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71924,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d6b8b74c-ae77-47e3-9306-0f2e29b783fd\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/60fe0aef-2d12-4d8c-8a48-575c305b13b3\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a8420316-57ec-403d-a978-7460717c40c3\",\"moduleSequenceNumber\":3588}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857371,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71925,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703857482,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72026,\"ramUsage\":1.7,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/cb40c316-053a-4843-aa9e-2c106c57fe23\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8f6f1868-8d19-4cb1-ba9a-4039fe6a86d0\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9367b2e9-b398-4bd2-b7c8-8d3777ab444c\",\"moduleSequenceNumber\":3586}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857502,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72027,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703857522,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72028,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d6b8b74c-ae77-47e3-9306-0f2e29b783fd\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/60fe0aef-2d12-4d8c-8a48-575c305b13b3\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a8420316-57ec-403d-a978-7460717c40c3\",\"moduleSequenceNumber\":3588}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857542,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72029,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703857610,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72130,\"ramUsage\":1.7,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/cb40c316-053a-4843-aa9e-2c106c57fe23\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8f6f1868-8d19-4cb1-ba9a-4039fe6a86d0\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9367b2e9-b398-4bd2-b7c8-8d3777ab444c\",\"moduleSequenceNumber\":3586}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857630,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72131,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703857650,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72132,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d6b8b74c-ae77-47e3-9306-0f2e29b783fd\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/60fe0aef-2d12-4d8c-8a48-575c305b13b3\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a8420316-57ec-403d-a978-7460717c40c3\",\"moduleSequenceNumber\":3588}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857670,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72133,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703857707,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72234,\"ramUsage\":1.7,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/cb40c316-053a-4843-aa9e-2c106c57fe23\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8f6f1868-8d19-4cb1-ba9a-4039fe6a86d0\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9367b2e9-b398-4bd2-b7c8-8d3777ab444c\",\"moduleSequenceNumber\":3586}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857727,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72235,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703857747,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72236,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d6b8b74c-ae77-47e3-9306-0f2e29b783fd\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/60fe0aef-2d12-4d8c-8a48-575c305b13b3\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a8420316-57ec-403d-a978-7460717c40c3\",\"moduleSequenceNumber\":3588}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857767,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72237,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703857862,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72338,\"ramUsage\":1.7,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/cb40c316-053a-4843-aa9e-2c106c57fe23\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8f6f1868-8d19-4cb1-ba9a-4039fe6a86d0\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9367b2e9-b398-4bd2-b7c8-8d3777ab444c\",\"moduleSequenceNumber\":3586}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857882,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72339,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703857902,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72340,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d6b8b74c-ae77-47e3-9306-0f2e29b783fd\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/60fe0aef-2d12-4d8c-8a48-575c305b13b3\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a8420316-57ec-403d-a978-7460717c40c3\",\"moduleSequenceNumber\":3588}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857922,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72341,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703858064,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72442,\"ramUsage\":1.7,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/cb40c316-053a-4843-aa9e-2c106c57fe23\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8f6f1868-8d19-4cb1-ba9a-4039fe6a86d0\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9367b2e9-b398-4bd2-b7c8-8d3777ab444c\",\"moduleSequenceNumber\":3586}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858084,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72443,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703858104,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72444,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d6b8b74c-ae77-47e3-9306-0f2e29b783fd\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/60fe0aef-2d12-4d8c-8a48-575c305b13b3\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a8420316-57ec-403d-a978-7460717c40c3\",\"moduleSequenceNumber\":3588}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858124,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72445,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703858354,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72546,\"ramUsage\":1.7,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/cb40c316-053a-4843-aa9e-2c106c57fe23\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8f6f1868-8d19-4cb1-ba9a-4039fe6a86d0\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9367b2e9-b398-4bd2-b7c8-8d3777ab444c\",\"moduleSequenceNumber\":3586}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858374,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72547,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703858394,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72548,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d6b8b74c-ae77-47e3-9306-0f2e29b783fd\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/60fe0aef-2d12-4d8c-8a48-575c305b13b3\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a8420316-57ec-403d-a978-7460717c40c3\",\"moduleSequenceNumber\":3588}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858414,\\\"iteration\\\":12,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72549,\"ramUsage\":1.75,\"server\":\"srv-12\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/cb40c316-053a-4843-aa9e-2c106c57fe23\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8f6f1868-8d19-4cb1-ba9a-4039fe6a86d0\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9367b2e9-b398-4bd2-b7c8-8d3777ab444c\",\"moduleSequenceNumber\":3586}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":3586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d6b8b74c-ae77-47e3-9306-0f2e29b783fd\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/60fe0aef-2d12-4d8c-8a48-575c305b13b3\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/a8420316-57ec-403d-a978-7460717c40c3\",\"moduleSequenceNumber\":3588}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":3588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e4753bc8-996c-490c-a5a6-443ca3bfb50f\",\"moduleSequenceNumber\":3316},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/8d7cb040-f2ed-4996-b055-2343eb585dbf\",\"moduleSequenceNumber\":3318},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b1ab417e-bf25-4506-be0e-d3d3c36356db\",\"moduleSequenceNumber\":3587}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":3587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":3308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":3310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":3312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":3314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":3316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":3318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-13\",\"httpPortOpen\":false,\"ip\":\"6.7.9.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1264.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":92,\\\"scriptEstimatedEnd\\\":1691703857082,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71614,\"ramUsage\":1.7,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/16a43ebe-c9ed-451c-a88f-3e1dc5076551\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e33c28e1-7f00-4c6e-a923-5f8070d651cc\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/b4a9b5e3-63e4-448d-9251-764482e3700b\",\"moduleSequenceNumber\":3589}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857102,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71615,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":295,\\\"scriptEstimatedEnd\\\":1691703857122,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71616,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":63,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/656cf236-dbcb-4ac9-85ac-0b2683fb9452\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/77186f59-0f72-4ff1-a16b-b44f9e36503b\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/d4c59d83-00ff-42b7-8ef3-7fe545c4246f\",\"moduleSequenceNumber\":3591}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857142,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71617,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":60,\\\"scriptEstimatedEnd\\\":1691703857169,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71718,\"ramUsage\":1.7,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/16a43ebe-c9ed-451c-a88f-3e1dc5076551\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e33c28e1-7f00-4c6e-a923-5f8070d651cc\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/b4a9b5e3-63e4-448d-9251-764482e3700b\",\"moduleSequenceNumber\":3589}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857189,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71719,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":192,\\\"scriptEstimatedEnd\\\":1691703857209,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71720,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/656cf236-dbcb-4ac9-85ac-0b2683fb9452\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/77186f59-0f72-4ff1-a16b-b44f9e36503b\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/d4c59d83-00ff-42b7-8ef3-7fe545c4246f\",\"moduleSequenceNumber\":3591}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857229,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71721,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703857329,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71822,\"ramUsage\":1.7,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/16a43ebe-c9ed-451c-a88f-3e1dc5076551\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e33c28e1-7f00-4c6e-a923-5f8070d651cc\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/b4a9b5e3-63e4-448d-9251-764482e3700b\",\"moduleSequenceNumber\":3589}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857349,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71823,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703857369,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71824,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/656cf236-dbcb-4ac9-85ac-0b2683fb9452\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/77186f59-0f72-4ff1-a16b-b44f9e36503b\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/d4c59d83-00ff-42b7-8ef3-7fe545c4246f\",\"moduleSequenceNumber\":3591}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857389,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71825,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703857395,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71926,\"ramUsage\":1.7,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/16a43ebe-c9ed-451c-a88f-3e1dc5076551\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e33c28e1-7f00-4c6e-a923-5f8070d651cc\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/b4a9b5e3-63e4-448d-9251-764482e3700b\",\"moduleSequenceNumber\":3589}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857415,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71927,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703857435,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71928,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/656cf236-dbcb-4ac9-85ac-0b2683fb9452\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/77186f59-0f72-4ff1-a16b-b44f9e36503b\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/d4c59d83-00ff-42b7-8ef3-7fe545c4246f\",\"moduleSequenceNumber\":3591}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857455,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71929,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703857567,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72030,\"ramUsage\":1.7,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/16a43ebe-c9ed-451c-a88f-3e1dc5076551\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e33c28e1-7f00-4c6e-a923-5f8070d651cc\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/b4a9b5e3-63e4-448d-9251-764482e3700b\",\"moduleSequenceNumber\":3589}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857587,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72031,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703857607,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72032,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/656cf236-dbcb-4ac9-85ac-0b2683fb9452\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/77186f59-0f72-4ff1-a16b-b44f9e36503b\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/d4c59d83-00ff-42b7-8ef3-7fe545c4246f\",\"moduleSequenceNumber\":3591}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857627,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72033,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703857694,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72134,\"ramUsage\":1.7,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/16a43ebe-c9ed-451c-a88f-3e1dc5076551\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e33c28e1-7f00-4c6e-a923-5f8070d651cc\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/b4a9b5e3-63e4-448d-9251-764482e3700b\",\"moduleSequenceNumber\":3589}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857714,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72135,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703857734,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72136,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/656cf236-dbcb-4ac9-85ac-0b2683fb9452\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/77186f59-0f72-4ff1-a16b-b44f9e36503b\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/d4c59d83-00ff-42b7-8ef3-7fe545c4246f\",\"moduleSequenceNumber\":3591}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857754,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72137,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703857793,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72238,\"ramUsage\":1.7,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/16a43ebe-c9ed-451c-a88f-3e1dc5076551\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e33c28e1-7f00-4c6e-a923-5f8070d651cc\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/b4a9b5e3-63e4-448d-9251-764482e3700b\",\"moduleSequenceNumber\":3589}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857813,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72239,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703857833,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72240,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/656cf236-dbcb-4ac9-85ac-0b2683fb9452\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/77186f59-0f72-4ff1-a16b-b44f9e36503b\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/d4c59d83-00ff-42b7-8ef3-7fe545c4246f\",\"moduleSequenceNumber\":3591}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857853,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72241,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703857947,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72342,\"ramUsage\":1.7,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/16a43ebe-c9ed-451c-a88f-3e1dc5076551\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e33c28e1-7f00-4c6e-a923-5f8070d651cc\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/b4a9b5e3-63e4-448d-9251-764482e3700b\",\"moduleSequenceNumber\":3589}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703857967,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72343,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703857987,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72344,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/656cf236-dbcb-4ac9-85ac-0b2683fb9452\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/77186f59-0f72-4ff1-a16b-b44f9e36503b\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/d4c59d83-00ff-42b7-8ef3-7fe545c4246f\",\"moduleSequenceNumber\":3591}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858007,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72345,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703858148,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72446,\"ramUsage\":1.7,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/16a43ebe-c9ed-451c-a88f-3e1dc5076551\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e33c28e1-7f00-4c6e-a923-5f8070d651cc\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/b4a9b5e3-63e4-448d-9251-764482e3700b\",\"moduleSequenceNumber\":3589}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858168,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72447,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703858188,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72448,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/656cf236-dbcb-4ac9-85ac-0b2683fb9452\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/77186f59-0f72-4ff1-a16b-b44f9e36503b\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/d4c59d83-00ff-42b7-8ef3-7fe545c4246f\",\"moduleSequenceNumber\":3591}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858208,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72449,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703858438,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72550,\"ramUsage\":1.7,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/16a43ebe-c9ed-451c-a88f-3e1dc5076551\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e33c28e1-7f00-4c6e-a923-5f8070d651cc\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/b4a9b5e3-63e4-448d-9251-764482e3700b\",\"moduleSequenceNumber\":3589}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858458,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72551,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703858478,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72552,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/656cf236-dbcb-4ac9-85ac-0b2683fb9452\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/77186f59-0f72-4ff1-a16b-b44f9e36503b\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/d4c59d83-00ff-42b7-8ef3-7fe545c4246f\",\"moduleSequenceNumber\":3591}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858498,\\\"iteration\\\":13,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72553,\"ramUsage\":1.75,\"server\":\"srv-13\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/16a43ebe-c9ed-451c-a88f-3e1dc5076551\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/e33c28e1-7f00-4c6e-a923-5f8070d651cc\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/b4a9b5e3-63e4-448d-9251-764482e3700b\",\"moduleSequenceNumber\":3589}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":3589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/656cf236-dbcb-4ac9-85ac-0b2683fb9452\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/77186f59-0f72-4ff1-a16b-b44f9e36503b\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/d4c59d83-00ff-42b7-8ef3-7fe545c4246f\",\"moduleSequenceNumber\":3591}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":3591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/e435e875-9d03-4d97-83b6-a2c22cecc0ad\",\"moduleSequenceNumber\":3334},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a1991623-efc7-413a-af56-006c6be8dbc3\",\"moduleSequenceNumber\":3336},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bd79f6a8-eb3f-476a-9271-50e4a562a2f5\",\"moduleSequenceNumber\":3590}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":3590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":3326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":3328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":3330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":3332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":3334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":3336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-14\",\"httpPortOpen\":false,\"ip\":\"22.1.1.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1264.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":92,\\\"scriptEstimatedEnd\\\":1691703857166,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71618,\"ramUsage\":1.7,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/62659eae-c45d-4a37-b368-c456a01e368d\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ad57a46f-472a-4ec7-b464-ac8fdae5b317\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/20c9de30-5f88-496f-aca5-734ccfbfca17\",\"moduleSequenceNumber\":3592}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857186,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71619,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":295,\\\"scriptEstimatedEnd\\\":1691703857206,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71620,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":63,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2e4afa9f-5a0f-4663-813e-9321df138e51\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc58d65d-aec0-4977-bc16-fc9ee034768d\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/43dceefc-d975-44e8-af37-0c6a59606509\",\"moduleSequenceNumber\":3594}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857226,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71621,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":60,\\\"scriptEstimatedEnd\\\":1691703857253,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71722,\"ramUsage\":1.7,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/62659eae-c45d-4a37-b368-c456a01e368d\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ad57a46f-472a-4ec7-b464-ac8fdae5b317\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/20c9de30-5f88-496f-aca5-734ccfbfca17\",\"moduleSequenceNumber\":3592}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857273,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71723,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":192,\\\"scriptEstimatedEnd\\\":1691703857293,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71724,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2e4afa9f-5a0f-4663-813e-9321df138e51\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc58d65d-aec0-4977-bc16-fc9ee034768d\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/43dceefc-d975-44e8-af37-0c6a59606509\",\"moduleSequenceNumber\":3594}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857313,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71725,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703857413,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71826,\"ramUsage\":1.7,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/62659eae-c45d-4a37-b368-c456a01e368d\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ad57a46f-472a-4ec7-b464-ac8fdae5b317\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/20c9de30-5f88-496f-aca5-734ccfbfca17\",\"moduleSequenceNumber\":3592}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857433,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71827,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703857453,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71828,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2e4afa9f-5a0f-4663-813e-9321df138e51\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc58d65d-aec0-4977-bc16-fc9ee034768d\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/43dceefc-d975-44e8-af37-0c6a59606509\",\"moduleSequenceNumber\":3594}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857473,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71829,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703857479,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71930,\"ramUsage\":1.7,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/62659eae-c45d-4a37-b368-c456a01e368d\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ad57a46f-472a-4ec7-b464-ac8fdae5b317\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/20c9de30-5f88-496f-aca5-734ccfbfca17\",\"moduleSequenceNumber\":3592}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857499,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71931,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703857519,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71932,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2e4afa9f-5a0f-4663-813e-9321df138e51\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc58d65d-aec0-4977-bc16-fc9ee034768d\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/43dceefc-d975-44e8-af37-0c6a59606509\",\"moduleSequenceNumber\":3594}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857539,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71933,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703857652,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72034,\"ramUsage\":1.7,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/62659eae-c45d-4a37-b368-c456a01e368d\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ad57a46f-472a-4ec7-b464-ac8fdae5b317\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/20c9de30-5f88-496f-aca5-734ccfbfca17\",\"moduleSequenceNumber\":3592}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857672,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72035,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703857692,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72036,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2e4afa9f-5a0f-4663-813e-9321df138e51\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc58d65d-aec0-4977-bc16-fc9ee034768d\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/43dceefc-d975-44e8-af37-0c6a59606509\",\"moduleSequenceNumber\":3594}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857712,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72037,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703857800,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72138,\"ramUsage\":1.7,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/62659eae-c45d-4a37-b368-c456a01e368d\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ad57a46f-472a-4ec7-b464-ac8fdae5b317\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/20c9de30-5f88-496f-aca5-734ccfbfca17\",\"moduleSequenceNumber\":3592}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857820,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72139,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703857840,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72140,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2e4afa9f-5a0f-4663-813e-9321df138e51\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc58d65d-aec0-4977-bc16-fc9ee034768d\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/43dceefc-d975-44e8-af37-0c6a59606509\",\"moduleSequenceNumber\":3594}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857860,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72141,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703857880,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72242,\"ramUsage\":1.7,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/62659eae-c45d-4a37-b368-c456a01e368d\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ad57a46f-472a-4ec7-b464-ac8fdae5b317\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/20c9de30-5f88-496f-aca5-734ccfbfca17\",\"moduleSequenceNumber\":3592}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857900,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72243,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703857920,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72244,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2e4afa9f-5a0f-4663-813e-9321df138e51\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc58d65d-aec0-4977-bc16-fc9ee034768d\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/43dceefc-d975-44e8-af37-0c6a59606509\",\"moduleSequenceNumber\":3594}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857940,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72245,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703858032,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72346,\"ramUsage\":1.7,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/62659eae-c45d-4a37-b368-c456a01e368d\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ad57a46f-472a-4ec7-b464-ac8fdae5b317\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/20c9de30-5f88-496f-aca5-734ccfbfca17\",\"moduleSequenceNumber\":3592}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858052,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72347,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703858072,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72348,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2e4afa9f-5a0f-4663-813e-9321df138e51\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc58d65d-aec0-4977-bc16-fc9ee034768d\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/43dceefc-d975-44e8-af37-0c6a59606509\",\"moduleSequenceNumber\":3594}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858092,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72349,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703858232,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72450,\"ramUsage\":1.7,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/62659eae-c45d-4a37-b368-c456a01e368d\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ad57a46f-472a-4ec7-b464-ac8fdae5b317\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/20c9de30-5f88-496f-aca5-734ccfbfca17\",\"moduleSequenceNumber\":3592}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858252,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72451,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703858272,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72452,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2e4afa9f-5a0f-4663-813e-9321df138e51\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc58d65d-aec0-4977-bc16-fc9ee034768d\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/43dceefc-d975-44e8-af37-0c6a59606509\",\"moduleSequenceNumber\":3594}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858292,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72453,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703858523,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72554,\"ramUsage\":1.7,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/62659eae-c45d-4a37-b368-c456a01e368d\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ad57a46f-472a-4ec7-b464-ac8fdae5b317\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/20c9de30-5f88-496f-aca5-734ccfbfca17\",\"moduleSequenceNumber\":3592}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858543,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72555,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703858563,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72556,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2e4afa9f-5a0f-4663-813e-9321df138e51\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc58d65d-aec0-4977-bc16-fc9ee034768d\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/43dceefc-d975-44e8-af37-0c6a59606509\",\"moduleSequenceNumber\":3594}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858583,\\\"iteration\\\":14,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72557,\"ramUsage\":1.75,\"server\":\"srv-14\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/62659eae-c45d-4a37-b368-c456a01e368d\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ad57a46f-472a-4ec7-b464-ac8fdae5b317\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/20c9de30-5f88-496f-aca5-734ccfbfca17\",\"moduleSequenceNumber\":3592}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":3592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/2e4afa9f-5a0f-4663-813e-9321df138e51\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc58d65d-aec0-4977-bc16-fc9ee034768d\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/43dceefc-d975-44e8-af37-0c6a59606509\",\"moduleSequenceNumber\":3594}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":3594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6bf797c2-5b91-401c-afc9-4eba223edb26\",\"moduleSequenceNumber\":3352},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1bd318ed-0290-4981-b2c0-3e61f5f5a03f\",\"moduleSequenceNumber\":3354},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/dadcd93a-c863-4361-a87f-fe3b58ff44de\",\"moduleSequenceNumber\":3593}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":3593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":3344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":3346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":3348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":3350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":3352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":3354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-15\",\"httpPortOpen\":false,\"ip\":\"54.0.4.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1264.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":92,\\\"scriptEstimatedEnd\\\":1691703857250,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71622,\"ramUsage\":1.7,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9b76e9e8-650c-4f36-b0c1-21c5143715b1\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/5f94af7f-5412-40f8-a484-7b88a665ea16\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/4e2bb109-4f25-4d3d-8147-be73cc721b60\",\"moduleSequenceNumber\":3595}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857270,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71623,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":295,\\\"scriptEstimatedEnd\\\":1691703857290,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71624,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":63,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/78430c3a-917e-4ff8-b19c-b6619b27c453\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/feffbb4c-2886-483c-8013-1bd908ca3f05\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/62237bf0-2d31-4193-b778-9f15943f7047\",\"moduleSequenceNumber\":3597}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857310,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71625,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":60,\\\"scriptEstimatedEnd\\\":1691703857337,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71726,\"ramUsage\":1.7,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9b76e9e8-650c-4f36-b0c1-21c5143715b1\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/5f94af7f-5412-40f8-a484-7b88a665ea16\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/4e2bb109-4f25-4d3d-8147-be73cc721b60\",\"moduleSequenceNumber\":3595}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857357,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71727,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":192,\\\"scriptEstimatedEnd\\\":1691703857377,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71728,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/78430c3a-917e-4ff8-b19c-b6619b27c453\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/feffbb4c-2886-483c-8013-1bd908ca3f05\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/62237bf0-2d31-4193-b778-9f15943f7047\",\"moduleSequenceNumber\":3597}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857397,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71729,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703857499,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71830,\"ramUsage\":1.7,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9b76e9e8-650c-4f36-b0c1-21c5143715b1\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/5f94af7f-5412-40f8-a484-7b88a665ea16\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/4e2bb109-4f25-4d3d-8147-be73cc721b60\",\"moduleSequenceNumber\":3595}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857519,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71831,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703857539,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71832,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/78430c3a-917e-4ff8-b19c-b6619b27c453\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/feffbb4c-2886-483c-8013-1bd908ca3f05\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/62237bf0-2d31-4193-b778-9f15943f7047\",\"moduleSequenceNumber\":3597}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857559,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71833,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703857563,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71934,\"ramUsage\":1.7,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9b76e9e8-650c-4f36-b0c1-21c5143715b1\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/5f94af7f-5412-40f8-a484-7b88a665ea16\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/4e2bb109-4f25-4d3d-8147-be73cc721b60\",\"moduleSequenceNumber\":3595}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857583,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71935,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703857603,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71936,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/78430c3a-917e-4ff8-b19c-b6619b27c453\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/feffbb4c-2886-483c-8013-1bd908ca3f05\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/62237bf0-2d31-4193-b778-9f15943f7047\",\"moduleSequenceNumber\":3597}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857623,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71937,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703857744,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72038,\"ramUsage\":1.7,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9b76e9e8-650c-4f36-b0c1-21c5143715b1\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/5f94af7f-5412-40f8-a484-7b88a665ea16\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/4e2bb109-4f25-4d3d-8147-be73cc721b60\",\"moduleSequenceNumber\":3595}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857764,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72039,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703857784,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72040,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/78430c3a-917e-4ff8-b19c-b6619b27c453\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/feffbb4c-2886-483c-8013-1bd908ca3f05\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/62237bf0-2d31-4193-b778-9f15943f7047\",\"moduleSequenceNumber\":3597}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857804,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72041,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703857884,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72142,\"ramUsage\":1.7,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9b76e9e8-650c-4f36-b0c1-21c5143715b1\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/5f94af7f-5412-40f8-a484-7b88a665ea16\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/4e2bb109-4f25-4d3d-8147-be73cc721b60\",\"moduleSequenceNumber\":3595}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857904,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72143,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703857924,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72144,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/78430c3a-917e-4ff8-b19c-b6619b27c453\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/feffbb4c-2886-483c-8013-1bd908ca3f05\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/62237bf0-2d31-4193-b778-9f15943f7047\",\"moduleSequenceNumber\":3597}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857944,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72145,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703857964,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72246,\"ramUsage\":1.7,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9b76e9e8-650c-4f36-b0c1-21c5143715b1\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/5f94af7f-5412-40f8-a484-7b88a665ea16\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/4e2bb109-4f25-4d3d-8147-be73cc721b60\",\"moduleSequenceNumber\":3595}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703857984,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72247,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703858004,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72248,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/78430c3a-917e-4ff8-b19c-b6619b27c453\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/feffbb4c-2886-483c-8013-1bd908ca3f05\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/62237bf0-2d31-4193-b778-9f15943f7047\",\"moduleSequenceNumber\":3597}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858024,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72249,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703858128,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72350,\"ramUsage\":1.7,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9b76e9e8-650c-4f36-b0c1-21c5143715b1\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/5f94af7f-5412-40f8-a484-7b88a665ea16\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/4e2bb109-4f25-4d3d-8147-be73cc721b60\",\"moduleSequenceNumber\":3595}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858148,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72351,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703858168,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72352,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/78430c3a-917e-4ff8-b19c-b6619b27c453\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/feffbb4c-2886-483c-8013-1bd908ca3f05\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/62237bf0-2d31-4193-b778-9f15943f7047\",\"moduleSequenceNumber\":3597}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858188,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72353,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703858317,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72454,\"ramUsage\":1.7,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9b76e9e8-650c-4f36-b0c1-21c5143715b1\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/5f94af7f-5412-40f8-a484-7b88a665ea16\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/4e2bb109-4f25-4d3d-8147-be73cc721b60\",\"moduleSequenceNumber\":3595}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858337,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72455,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703858357,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72456,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/78430c3a-917e-4ff8-b19c-b6619b27c453\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/feffbb4c-2886-483c-8013-1bd908ca3f05\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/62237bf0-2d31-4193-b778-9f15943f7047\",\"moduleSequenceNumber\":3597}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858377,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72457,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703858668,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72558,\"ramUsage\":1.7,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9b76e9e8-650c-4f36-b0c1-21c5143715b1\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/5f94af7f-5412-40f8-a484-7b88a665ea16\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/4e2bb109-4f25-4d3d-8147-be73cc721b60\",\"moduleSequenceNumber\":3595}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858688,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72559,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703858708,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72560,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/78430c3a-917e-4ff8-b19c-b6619b27c453\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/feffbb4c-2886-483c-8013-1bd908ca3f05\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/62237bf0-2d31-4193-b778-9f15943f7047\",\"moduleSequenceNumber\":3597}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858728,\\\"iteration\\\":15,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72561,\"ramUsage\":1.75,\"server\":\"srv-15\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/9b76e9e8-650c-4f36-b0c1-21c5143715b1\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/5f94af7f-5412-40f8-a484-7b88a665ea16\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/4e2bb109-4f25-4d3d-8147-be73cc721b60\",\"moduleSequenceNumber\":3595}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":3595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/78430c3a-917e-4ff8-b19c-b6619b27c453\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/feffbb4c-2886-483c-8013-1bd908ca3f05\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/62237bf0-2d31-4193-b778-9f15943f7047\",\"moduleSequenceNumber\":3597}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":3597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a85cb508-ee33-4825-91c1-c0458b1f6545\",\"moduleSequenceNumber\":3370},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7f29086c-0196-4017-b245-4aaa0e98f037\",\"moduleSequenceNumber\":3372},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/663465ed-fd2a-4998-8562-2400cc438ab4\",\"moduleSequenceNumber\":3596}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":3596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":3362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":3364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":3366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":3368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":3370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":3372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-16\",\"httpPortOpen\":false,\"ip\":\"90.7.2.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1264.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":92,\\\"scriptEstimatedEnd\\\":1691703857335,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71626,\"ramUsage\":1.7,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c6ef3ec6-2b35-4d50-813b-b90ead7e6828\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86515ae5-e54b-4409-9ee6-30e102a717f8\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/95029076-6075-4898-b17e-1e71f53274e6\",\"moduleSequenceNumber\":3598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857355,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71627,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":295,\\\"scriptEstimatedEnd\\\":1691703857375,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71628,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":63,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a47eaf42-66fe-491a-beb2-f35aa8696d1c\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7b13ad78-8f84-4ecb-ae4a-c9f0b64789e0\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/712f20f2-b79b-4aeb-9fbd-db7128286d94\",\"moduleSequenceNumber\":3600}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857395,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71629,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":60,\\\"scriptEstimatedEnd\\\":1691703857423,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71730,\"ramUsage\":1.7,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c6ef3ec6-2b35-4d50-813b-b90ead7e6828\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86515ae5-e54b-4409-9ee6-30e102a717f8\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/95029076-6075-4898-b17e-1e71f53274e6\",\"moduleSequenceNumber\":3598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857443,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71731,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":192,\\\"scriptEstimatedEnd\\\":1691703857463,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71732,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a47eaf42-66fe-491a-beb2-f35aa8696d1c\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7b13ad78-8f84-4ecb-ae4a-c9f0b64789e0\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/712f20f2-b79b-4aeb-9fbd-db7128286d94\",\"moduleSequenceNumber\":3600}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857483,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71733,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703857584,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71834,\"ramUsage\":1.7,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c6ef3ec6-2b35-4d50-813b-b90ead7e6828\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86515ae5-e54b-4409-9ee6-30e102a717f8\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/95029076-6075-4898-b17e-1e71f53274e6\",\"moduleSequenceNumber\":3598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857604,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71835,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703857624,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71836,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a47eaf42-66fe-491a-beb2-f35aa8696d1c\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7b13ad78-8f84-4ecb-ae4a-c9f0b64789e0\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/712f20f2-b79b-4aeb-9fbd-db7128286d94\",\"moduleSequenceNumber\":3600}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857644,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71837,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703857648,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71938,\"ramUsage\":1.7,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c6ef3ec6-2b35-4d50-813b-b90ead7e6828\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86515ae5-e54b-4409-9ee6-30e102a717f8\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/95029076-6075-4898-b17e-1e71f53274e6\",\"moduleSequenceNumber\":3598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857668,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71939,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703857688,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71940,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a47eaf42-66fe-491a-beb2-f35aa8696d1c\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7b13ad78-8f84-4ecb-ae4a-c9f0b64789e0\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/712f20f2-b79b-4aeb-9fbd-db7128286d94\",\"moduleSequenceNumber\":3600}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857708,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71941,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703857828,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72042,\"ramUsage\":1.7,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c6ef3ec6-2b35-4d50-813b-b90ead7e6828\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86515ae5-e54b-4409-9ee6-30e102a717f8\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/95029076-6075-4898-b17e-1e71f53274e6\",\"moduleSequenceNumber\":3598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857848,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72043,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703857868,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72044,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a47eaf42-66fe-491a-beb2-f35aa8696d1c\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7b13ad78-8f84-4ecb-ae4a-c9f0b64789e0\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/712f20f2-b79b-4aeb-9fbd-db7128286d94\",\"moduleSequenceNumber\":3600}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857888,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72045,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703857968,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72146,\"ramUsage\":1.7,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c6ef3ec6-2b35-4d50-813b-b90ead7e6828\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86515ae5-e54b-4409-9ee6-30e102a717f8\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/95029076-6075-4898-b17e-1e71f53274e6\",\"moduleSequenceNumber\":3598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703857988,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72147,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703858008,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72148,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a47eaf42-66fe-491a-beb2-f35aa8696d1c\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7b13ad78-8f84-4ecb-ae4a-c9f0b64789e0\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/712f20f2-b79b-4aeb-9fbd-db7128286d94\",\"moduleSequenceNumber\":3600}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858028,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72149,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703858048,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72250,\"ramUsage\":1.7,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c6ef3ec6-2b35-4d50-813b-b90ead7e6828\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86515ae5-e54b-4409-9ee6-30e102a717f8\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/95029076-6075-4898-b17e-1e71f53274e6\",\"moduleSequenceNumber\":3598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858068,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72251,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703858088,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72252,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a47eaf42-66fe-491a-beb2-f35aa8696d1c\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7b13ad78-8f84-4ecb-ae4a-c9f0b64789e0\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/712f20f2-b79b-4aeb-9fbd-db7128286d94\",\"moduleSequenceNumber\":3600}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858108,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72253,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703858218,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72354,\"ramUsage\":1.7,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c6ef3ec6-2b35-4d50-813b-b90ead7e6828\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86515ae5-e54b-4409-9ee6-30e102a717f8\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/95029076-6075-4898-b17e-1e71f53274e6\",\"moduleSequenceNumber\":3598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858238,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72355,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703858258,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72356,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a47eaf42-66fe-491a-beb2-f35aa8696d1c\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7b13ad78-8f84-4ecb-ae4a-c9f0b64789e0\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/712f20f2-b79b-4aeb-9fbd-db7128286d94\",\"moduleSequenceNumber\":3600}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858278,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72357,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703858401,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72458,\"ramUsage\":1.7,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c6ef3ec6-2b35-4d50-813b-b90ead7e6828\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86515ae5-e54b-4409-9ee6-30e102a717f8\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/95029076-6075-4898-b17e-1e71f53274e6\",\"moduleSequenceNumber\":3598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858421,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72459,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703858441,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72460,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a47eaf42-66fe-491a-beb2-f35aa8696d1c\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7b13ad78-8f84-4ecb-ae4a-c9f0b64789e0\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/712f20f2-b79b-4aeb-9fbd-db7128286d94\",\"moduleSequenceNumber\":3600}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858461,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72461,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703858755,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72562,\"ramUsage\":1.7,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c6ef3ec6-2b35-4d50-813b-b90ead7e6828\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86515ae5-e54b-4409-9ee6-30e102a717f8\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/95029076-6075-4898-b17e-1e71f53274e6\",\"moduleSequenceNumber\":3598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858775,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72563,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703858795,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72564,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a47eaf42-66fe-491a-beb2-f35aa8696d1c\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7b13ad78-8f84-4ecb-ae4a-c9f0b64789e0\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/712f20f2-b79b-4aeb-9fbd-db7128286d94\",\"moduleSequenceNumber\":3600}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858815,\\\"iteration\\\":16,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72565,\"ramUsage\":1.75,\"server\":\"srv-16\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c6ef3ec6-2b35-4d50-813b-b90ead7e6828\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86515ae5-e54b-4409-9ee6-30e102a717f8\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/95029076-6075-4898-b17e-1e71f53274e6\",\"moduleSequenceNumber\":3598}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":3598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a47eaf42-66fe-491a-beb2-f35aa8696d1c\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/7b13ad78-8f84-4ecb-ae4a-c9f0b64789e0\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/712f20f2-b79b-4aeb-9fbd-db7128286d94\",\"moduleSequenceNumber\":3600}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":3600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/0877bdc9-ef73-493a-8404-3a21823de097\",\"moduleSequenceNumber\":3388},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/86af23a8-61a7-473a-b521-2ed67d7bcc02\",\"moduleSequenceNumber\":3390},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/430c680b-37ad-4bc6-8e0c-0e1762297a8b\",\"moduleSequenceNumber\":3599}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":3599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":3380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":3382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":3384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":3386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":3388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":3390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-17\",\"httpPortOpen\":false,\"ip\":\"26.3.1.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1264.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":92,\\\"scriptEstimatedEnd\\\":1691703857419,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71630,\"ramUsage\":1.7,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/af60670a-dd31-4209-8abd-d1243a775167\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ca7fbc6e-f6c7-43c5-a94d-9557ba2cf6ea\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/167147db-2aa8-4d3c-af49-2a84af870a0a\",\"moduleSequenceNumber\":3601}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857439,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71631,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":295,\\\"scriptEstimatedEnd\\\":1691703857459,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71632,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":63,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c5a2c060-9cad-4ebb-86d9-e6f9b6cb4896\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0ddb84ac-e470-48c1-bb32-70d322da9bb6\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/c26f9ee9-e16a-4766-81bc-8810ebf7997a\",\"moduleSequenceNumber\":3603}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857479,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71633,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":60,\\\"scriptEstimatedEnd\\\":1691703857507,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71734,\"ramUsage\":1.7,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/af60670a-dd31-4209-8abd-d1243a775167\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ca7fbc6e-f6c7-43c5-a94d-9557ba2cf6ea\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/167147db-2aa8-4d3c-af49-2a84af870a0a\",\"moduleSequenceNumber\":3601}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857527,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71735,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":192,\\\"scriptEstimatedEnd\\\":1691703857547,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71736,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c5a2c060-9cad-4ebb-86d9-e6f9b6cb4896\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0ddb84ac-e470-48c1-bb32-70d322da9bb6\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/c26f9ee9-e16a-4766-81bc-8810ebf7997a\",\"moduleSequenceNumber\":3603}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857567,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71737,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703857668,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71838,\"ramUsage\":1.7,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/af60670a-dd31-4209-8abd-d1243a775167\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ca7fbc6e-f6c7-43c5-a94d-9557ba2cf6ea\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/167147db-2aa8-4d3c-af49-2a84af870a0a\",\"moduleSequenceNumber\":3601}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857688,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71839,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703857708,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71840,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c5a2c060-9cad-4ebb-86d9-e6f9b6cb4896\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0ddb84ac-e470-48c1-bb32-70d322da9bb6\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/c26f9ee9-e16a-4766-81bc-8810ebf7997a\",\"moduleSequenceNumber\":3603}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857728,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71841,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703857732,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71942,\"ramUsage\":1.7,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/af60670a-dd31-4209-8abd-d1243a775167\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ca7fbc6e-f6c7-43c5-a94d-9557ba2cf6ea\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/167147db-2aa8-4d3c-af49-2a84af870a0a\",\"moduleSequenceNumber\":3601}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857752,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71943,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703857772,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71944,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c5a2c060-9cad-4ebb-86d9-e6f9b6cb4896\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0ddb84ac-e470-48c1-bb32-70d322da9bb6\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/c26f9ee9-e16a-4766-81bc-8810ebf7997a\",\"moduleSequenceNumber\":3603}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857792,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71945,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703857912,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72046,\"ramUsage\":1.7,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/af60670a-dd31-4209-8abd-d1243a775167\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ca7fbc6e-f6c7-43c5-a94d-9557ba2cf6ea\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/167147db-2aa8-4d3c-af49-2a84af870a0a\",\"moduleSequenceNumber\":3601}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857932,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72047,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703857952,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72048,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c5a2c060-9cad-4ebb-86d9-e6f9b6cb4896\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0ddb84ac-e470-48c1-bb32-70d322da9bb6\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/c26f9ee9-e16a-4766-81bc-8810ebf7997a\",\"moduleSequenceNumber\":3603}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703857972,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72049,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703858052,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72150,\"ramUsage\":1.7,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/af60670a-dd31-4209-8abd-d1243a775167\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ca7fbc6e-f6c7-43c5-a94d-9557ba2cf6ea\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/167147db-2aa8-4d3c-af49-2a84af870a0a\",\"moduleSequenceNumber\":3601}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858072,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72151,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703858092,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72152,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c5a2c060-9cad-4ebb-86d9-e6f9b6cb4896\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0ddb84ac-e470-48c1-bb32-70d322da9bb6\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/c26f9ee9-e16a-4766-81bc-8810ebf7997a\",\"moduleSequenceNumber\":3603}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858112,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72153,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703858132,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72254,\"ramUsage\":1.7,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/af60670a-dd31-4209-8abd-d1243a775167\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ca7fbc6e-f6c7-43c5-a94d-9557ba2cf6ea\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/167147db-2aa8-4d3c-af49-2a84af870a0a\",\"moduleSequenceNumber\":3601}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858152,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72255,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703858172,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72256,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c5a2c060-9cad-4ebb-86d9-e6f9b6cb4896\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0ddb84ac-e470-48c1-bb32-70d322da9bb6\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/c26f9ee9-e16a-4766-81bc-8810ebf7997a\",\"moduleSequenceNumber\":3603}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858192,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72257,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703858304,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72358,\"ramUsage\":1.7,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/af60670a-dd31-4209-8abd-d1243a775167\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ca7fbc6e-f6c7-43c5-a94d-9557ba2cf6ea\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/167147db-2aa8-4d3c-af49-2a84af870a0a\",\"moduleSequenceNumber\":3601}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858324,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72359,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703858344,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72360,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c5a2c060-9cad-4ebb-86d9-e6f9b6cb4896\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0ddb84ac-e470-48c1-bb32-70d322da9bb6\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/c26f9ee9-e16a-4766-81bc-8810ebf7997a\",\"moduleSequenceNumber\":3603}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858364,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72361,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703858485,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72462,\"ramUsage\":1.7,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/af60670a-dd31-4209-8abd-d1243a775167\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ca7fbc6e-f6c7-43c5-a94d-9557ba2cf6ea\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/167147db-2aa8-4d3c-af49-2a84af870a0a\",\"moduleSequenceNumber\":3601}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858505,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72463,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703858525,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72464,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c5a2c060-9cad-4ebb-86d9-e6f9b6cb4896\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0ddb84ac-e470-48c1-bb32-70d322da9bb6\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/c26f9ee9-e16a-4766-81bc-8810ebf7997a\",\"moduleSequenceNumber\":3603}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858545,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72465,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703858839,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72566,\"ramUsage\":1.7,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/af60670a-dd31-4209-8abd-d1243a775167\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ca7fbc6e-f6c7-43c5-a94d-9557ba2cf6ea\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/167147db-2aa8-4d3c-af49-2a84af870a0a\",\"moduleSequenceNumber\":3601}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858859,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72567,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703858879,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72568,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c5a2c060-9cad-4ebb-86d9-e6f9b6cb4896\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0ddb84ac-e470-48c1-bb32-70d322da9bb6\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/c26f9ee9-e16a-4766-81bc-8810ebf7997a\",\"moduleSequenceNumber\":3603}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858899,\\\"iteration\\\":17,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72569,\"ramUsage\":1.75,\"server\":\"srv-17\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/af60670a-dd31-4209-8abd-d1243a775167\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/ca7fbc6e-f6c7-43c5-a94d-9557ba2cf6ea\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/167147db-2aa8-4d3c-af49-2a84af870a0a\",\"moduleSequenceNumber\":3601}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":3601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c5a2c060-9cad-4ebb-86d9-e6f9b6cb4896\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0ddb84ac-e470-48c1-bb32-70d322da9bb6\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/c26f9ee9-e16a-4766-81bc-8810ebf7997a\",\"moduleSequenceNumber\":3603}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":3603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/6acde84f-bb3f-43ae-bf1a-ad248be0678b\",\"moduleSequenceNumber\":3406},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/18b631bd-99e2-48d9-a38d-059e2f70a88f\",\"moduleSequenceNumber\":3408},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/bdcd1f16-0124-4b9b-990e-384a8b60cea4\",\"moduleSequenceNumber\":3602}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":3602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":3398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":3400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":3402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":3404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":3406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":3408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-18\",\"httpPortOpen\":false,\"ip\":\"79.3.2.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1264.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":92,\\\"scriptEstimatedEnd\\\":1691703857503,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71634,\"ramUsage\":1.7,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/10522720-eaa3-45c3-a223-d6f180e50d2e\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9a2e4215-de99-433c-b472-8fc2844645fe\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/79c67f46-6231-4d15-ab30-6de1aafbcb4d\",\"moduleSequenceNumber\":3604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857523,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71635,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":295,\\\"scriptEstimatedEnd\\\":1691703857543,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71636,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":63,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c958b0fb-9d1a-4d7d-9a07-0c16d311d94b\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a6a70e01-683a-4161-bc65-53214bddcd66\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/98f86d23-31c1-42de-bf22-08b3e0541e5d\",\"moduleSequenceNumber\":3606}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857563,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71637,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":60,\\\"scriptEstimatedEnd\\\":1691703857591,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71738,\"ramUsage\":1.7,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/10522720-eaa3-45c3-a223-d6f180e50d2e\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9a2e4215-de99-433c-b472-8fc2844645fe\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/79c67f46-6231-4d15-ab30-6de1aafbcb4d\",\"moduleSequenceNumber\":3604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857611,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71739,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":192,\\\"scriptEstimatedEnd\\\":1691703857631,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71740,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c958b0fb-9d1a-4d7d-9a07-0c16d311d94b\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a6a70e01-683a-4161-bc65-53214bddcd66\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/98f86d23-31c1-42de-bf22-08b3e0541e5d\",\"moduleSequenceNumber\":3606}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857651,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71741,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703857752,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71842,\"ramUsage\":1.7,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/10522720-eaa3-45c3-a223-d6f180e50d2e\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9a2e4215-de99-433c-b472-8fc2844645fe\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/79c67f46-6231-4d15-ab30-6de1aafbcb4d\",\"moduleSequenceNumber\":3604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857772,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71843,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703857792,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71844,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c958b0fb-9d1a-4d7d-9a07-0c16d311d94b\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a6a70e01-683a-4161-bc65-53214bddcd66\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/98f86d23-31c1-42de-bf22-08b3e0541e5d\",\"moduleSequenceNumber\":3606}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857812,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71845,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703857816,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71946,\"ramUsage\":1.7,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/10522720-eaa3-45c3-a223-d6f180e50d2e\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9a2e4215-de99-433c-b472-8fc2844645fe\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/79c67f46-6231-4d15-ab30-6de1aafbcb4d\",\"moduleSequenceNumber\":3604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857836,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71947,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703857856,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71948,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c958b0fb-9d1a-4d7d-9a07-0c16d311d94b\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a6a70e01-683a-4161-bc65-53214bddcd66\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/98f86d23-31c1-42de-bf22-08b3e0541e5d\",\"moduleSequenceNumber\":3606}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857876,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71949,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703857997,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72050,\"ramUsage\":1.7,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/10522720-eaa3-45c3-a223-d6f180e50d2e\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9a2e4215-de99-433c-b472-8fc2844645fe\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/79c67f46-6231-4d15-ab30-6de1aafbcb4d\",\"moduleSequenceNumber\":3604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858017,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72051,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703858037,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72052,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c958b0fb-9d1a-4d7d-9a07-0c16d311d94b\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a6a70e01-683a-4161-bc65-53214bddcd66\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/98f86d23-31c1-42de-bf22-08b3e0541e5d\",\"moduleSequenceNumber\":3606}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858057,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72053,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703858136,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72154,\"ramUsage\":1.7,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/10522720-eaa3-45c3-a223-d6f180e50d2e\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9a2e4215-de99-433c-b472-8fc2844645fe\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/79c67f46-6231-4d15-ab30-6de1aafbcb4d\",\"moduleSequenceNumber\":3604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858156,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72155,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703858176,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72156,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c958b0fb-9d1a-4d7d-9a07-0c16d311d94b\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a6a70e01-683a-4161-bc65-53214bddcd66\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/98f86d23-31c1-42de-bf22-08b3e0541e5d\",\"moduleSequenceNumber\":3606}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858196,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72157,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703858216,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72258,\"ramUsage\":1.7,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/10522720-eaa3-45c3-a223-d6f180e50d2e\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9a2e4215-de99-433c-b472-8fc2844645fe\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/79c67f46-6231-4d15-ab30-6de1aafbcb4d\",\"moduleSequenceNumber\":3604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858236,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72259,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703858256,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72260,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c958b0fb-9d1a-4d7d-9a07-0c16d311d94b\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a6a70e01-683a-4161-bc65-53214bddcd66\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/98f86d23-31c1-42de-bf22-08b3e0541e5d\",\"moduleSequenceNumber\":3606}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858276,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72261,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703858388,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72362,\"ramUsage\":1.7,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/10522720-eaa3-45c3-a223-d6f180e50d2e\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9a2e4215-de99-433c-b472-8fc2844645fe\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/79c67f46-6231-4d15-ab30-6de1aafbcb4d\",\"moduleSequenceNumber\":3604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858408,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72363,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703858428,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72364,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c958b0fb-9d1a-4d7d-9a07-0c16d311d94b\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a6a70e01-683a-4161-bc65-53214bddcd66\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/98f86d23-31c1-42de-bf22-08b3e0541e5d\",\"moduleSequenceNumber\":3606}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858448,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72365,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703858570,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72466,\"ramUsage\":1.7,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/10522720-eaa3-45c3-a223-d6f180e50d2e\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9a2e4215-de99-433c-b472-8fc2844645fe\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/79c67f46-6231-4d15-ab30-6de1aafbcb4d\",\"moduleSequenceNumber\":3604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858590,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72467,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703858610,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72468,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c958b0fb-9d1a-4d7d-9a07-0c16d311d94b\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a6a70e01-683a-4161-bc65-53214bddcd66\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/98f86d23-31c1-42de-bf22-08b3e0541e5d\",\"moduleSequenceNumber\":3606}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858630,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72469,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703858923,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72570,\"ramUsage\":1.7,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/10522720-eaa3-45c3-a223-d6f180e50d2e\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9a2e4215-de99-433c-b472-8fc2844645fe\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/79c67f46-6231-4d15-ab30-6de1aafbcb4d\",\"moduleSequenceNumber\":3604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858943,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72571,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703858963,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72572,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c958b0fb-9d1a-4d7d-9a07-0c16d311d94b\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a6a70e01-683a-4161-bc65-53214bddcd66\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/98f86d23-31c1-42de-bf22-08b3e0541e5d\",\"moduleSequenceNumber\":3606}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703858983,\\\"iteration\\\":18,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72573,\"ramUsage\":1.75,\"server\":\"srv-18\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/10522720-eaa3-45c3-a223-d6f180e50d2e\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9a2e4215-de99-433c-b472-8fc2844645fe\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/79c67f46-6231-4d15-ab30-6de1aafbcb4d\",\"moduleSequenceNumber\":3604}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":3604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c958b0fb-9d1a-4d7d-9a07-0c16d311d94b\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a6a70e01-683a-4161-bc65-53214bddcd66\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/98f86d23-31c1-42de-bf22-08b3e0541e5d\",\"moduleSequenceNumber\":3606}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":3606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/432de518-0bdb-4f68-ad98-6bd0a2987dd0\",\"moduleSequenceNumber\":3424},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/0071dca3-d2a2-4971-9b6f-30ec5c409328\",\"moduleSequenceNumber\":3426},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/338f8c85-1b85-42a3-b3ab-f319032c7289\",\"moduleSequenceNumber\":3605}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":3605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":3416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":3418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":3420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":3422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":3424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":3426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-19\",\"httpPortOpen\":false,\"ip\":\"66.4.4.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1264.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":92,\\\"scriptEstimatedEnd\\\":1691703857589,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71638,\"ramUsage\":1.7,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d4564682-6dce-4736-98df-6e8533fbf7dc\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/35e491fe-c2f9-413d-8be6-e817b76bb8a8\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/495f54a8-c3d8-40dc-b005-052e138f0e1d\",\"moduleSequenceNumber\":3607}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857609,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71639,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":295,\\\"scriptEstimatedEnd\\\":1691703857629,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71640,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":63,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a9f5a4f8-8e3b-4a02-8961-991f5055ba62\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a147f56e-06cb-467b-a728-b4891b9de013\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/17bf6134-f4c0-4afc-b2b3-b317d9e08137\",\"moduleSequenceNumber\":3609}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857649,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71641,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":60,\\\"scriptEstimatedEnd\\\":1691703857675,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71742,\"ramUsage\":1.7,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d4564682-6dce-4736-98df-6e8533fbf7dc\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/35e491fe-c2f9-413d-8be6-e817b76bb8a8\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/495f54a8-c3d8-40dc-b005-052e138f0e1d\",\"moduleSequenceNumber\":3607}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857695,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71743,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":192,\\\"scriptEstimatedEnd\\\":1691703857715,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71744,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a9f5a4f8-8e3b-4a02-8961-991f5055ba62\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a147f56e-06cb-467b-a728-b4891b9de013\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/17bf6134-f4c0-4afc-b2b3-b317d9e08137\",\"moduleSequenceNumber\":3609}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857735,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71745,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703857838,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71846,\"ramUsage\":1.7,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d4564682-6dce-4736-98df-6e8533fbf7dc\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/35e491fe-c2f9-413d-8be6-e817b76bb8a8\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/495f54a8-c3d8-40dc-b005-052e138f0e1d\",\"moduleSequenceNumber\":3607}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857858,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71847,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703857878,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71848,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a9f5a4f8-8e3b-4a02-8961-991f5055ba62\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a147f56e-06cb-467b-a728-b4891b9de013\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/17bf6134-f4c0-4afc-b2b3-b317d9e08137\",\"moduleSequenceNumber\":3609}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857898,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71849,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703857900,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71950,\"ramUsage\":1.7,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d4564682-6dce-4736-98df-6e8533fbf7dc\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/35e491fe-c2f9-413d-8be6-e817b76bb8a8\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/495f54a8-c3d8-40dc-b005-052e138f0e1d\",\"moduleSequenceNumber\":3607}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857920,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71951,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703857940,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71952,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a9f5a4f8-8e3b-4a02-8961-991f5055ba62\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a147f56e-06cb-467b-a728-b4891b9de013\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/17bf6134-f4c0-4afc-b2b3-b317d9e08137\",\"moduleSequenceNumber\":3609}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703857960,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71953,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703858081,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72054,\"ramUsage\":1.7,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d4564682-6dce-4736-98df-6e8533fbf7dc\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/35e491fe-c2f9-413d-8be6-e817b76bb8a8\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/495f54a8-c3d8-40dc-b005-052e138f0e1d\",\"moduleSequenceNumber\":3607}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858101,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72055,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703858121,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72056,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a9f5a4f8-8e3b-4a02-8961-991f5055ba62\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a147f56e-06cb-467b-a728-b4891b9de013\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/17bf6134-f4c0-4afc-b2b3-b317d9e08137\",\"moduleSequenceNumber\":3609}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858141,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72057,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703858221,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72158,\"ramUsage\":1.7,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d4564682-6dce-4736-98df-6e8533fbf7dc\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/35e491fe-c2f9-413d-8be6-e817b76bb8a8\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/495f54a8-c3d8-40dc-b005-052e138f0e1d\",\"moduleSequenceNumber\":3607}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858241,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72159,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703858261,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72160,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a9f5a4f8-8e3b-4a02-8961-991f5055ba62\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a147f56e-06cb-467b-a728-b4891b9de013\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/17bf6134-f4c0-4afc-b2b3-b317d9e08137\",\"moduleSequenceNumber\":3609}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858281,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72161,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703858301,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72262,\"ramUsage\":1.7,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d4564682-6dce-4736-98df-6e8533fbf7dc\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/35e491fe-c2f9-413d-8be6-e817b76bb8a8\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/495f54a8-c3d8-40dc-b005-052e138f0e1d\",\"moduleSequenceNumber\":3607}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858321,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72263,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703858341,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72264,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a9f5a4f8-8e3b-4a02-8961-991f5055ba62\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a147f56e-06cb-467b-a728-b4891b9de013\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/17bf6134-f4c0-4afc-b2b3-b317d9e08137\",\"moduleSequenceNumber\":3609}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858361,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72265,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703858472,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72366,\"ramUsage\":1.7,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d4564682-6dce-4736-98df-6e8533fbf7dc\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/35e491fe-c2f9-413d-8be6-e817b76bb8a8\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/495f54a8-c3d8-40dc-b005-052e138f0e1d\",\"moduleSequenceNumber\":3607}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858492,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72367,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703858512,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72368,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a9f5a4f8-8e3b-4a02-8961-991f5055ba62\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a147f56e-06cb-467b-a728-b4891b9de013\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/17bf6134-f4c0-4afc-b2b3-b317d9e08137\",\"moduleSequenceNumber\":3609}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858532,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72369,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703858654,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72470,\"ramUsage\":1.7,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d4564682-6dce-4736-98df-6e8533fbf7dc\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/35e491fe-c2f9-413d-8be6-e817b76bb8a8\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/495f54a8-c3d8-40dc-b005-052e138f0e1d\",\"moduleSequenceNumber\":3607}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858674,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72471,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703858694,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72472,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a9f5a4f8-8e3b-4a02-8961-991f5055ba62\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a147f56e-06cb-467b-a728-b4891b9de013\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/17bf6134-f4c0-4afc-b2b3-b317d9e08137\",\"moduleSequenceNumber\":3609}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858714,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72473,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703859007,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72574,\"ramUsage\":1.7,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d4564682-6dce-4736-98df-6e8533fbf7dc\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/35e491fe-c2f9-413d-8be6-e817b76bb8a8\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/495f54a8-c3d8-40dc-b005-052e138f0e1d\",\"moduleSequenceNumber\":3607}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703859027,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72575,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703859047,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72576,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a9f5a4f8-8e3b-4a02-8961-991f5055ba62\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a147f56e-06cb-467b-a728-b4891b9de013\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/17bf6134-f4c0-4afc-b2b3-b317d9e08137\",\"moduleSequenceNumber\":3609}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703859067,\\\"iteration\\\":19,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72577,\"ramUsage\":1.75,\"server\":\"srv-19\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/d4564682-6dce-4736-98df-6e8533fbf7dc\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/35e491fe-c2f9-413d-8be6-e817b76bb8a8\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/495f54a8-c3d8-40dc-b005-052e138f0e1d\",\"moduleSequenceNumber\":3607}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":3607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a9f5a4f8-8e3b-4a02-8961-991f5055ba62\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/a147f56e-06cb-467b-a728-b4891b9de013\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/17bf6134-f4c0-4afc-b2b3-b317d9e08137\",\"moduleSequenceNumber\":3609}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":3609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bddc04f1-2ed7-4f53-9661-64256d821495\",\"moduleSequenceNumber\":3442},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/daa4a2ca-dc15-4f9a-b33a-336ff01f4669\",\"moduleSequenceNumber\":3444},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/c7d7a4ff-e1ec-458e-80c5-436e1126a69a\",\"moduleSequenceNumber\":3608}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":3608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":3434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":3436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":3438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":3440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":3442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":3444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-20\",\"httpPortOpen\":false,\"ip\":\"32.5.2.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1264.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":92,\\\"scriptEstimatedEnd\\\":1691703857673,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71642,\"ramUsage\":1.7,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/74ad865b-a656-4717-8351-c8eae760f193\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/029e8d6f-2a8a-484e-adf0-53e2ee9a11e8\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ef0a01c4-e7c7-47e0-95d4-208cba93a22d\",\"moduleSequenceNumber\":3610}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857693,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71643,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":295,\\\"scriptEstimatedEnd\\\":1691703857713,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71644,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":63,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ba116bc2-6793-4b9b-8ca4-ab1bc3949822\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d3f7060e-d935-4a19-bda9-e59efe523567\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1a415e88-f567-4861-a07f-b1d7a1e21b62\",\"moduleSequenceNumber\":3612}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857733,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71645,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":60,\\\"scriptEstimatedEnd\\\":1691703857759,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71746,\"ramUsage\":1.7,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/74ad865b-a656-4717-8351-c8eae760f193\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/029e8d6f-2a8a-484e-adf0-53e2ee9a11e8\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ef0a01c4-e7c7-47e0-95d4-208cba93a22d\",\"moduleSequenceNumber\":3610}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857779,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71747,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":192,\\\"scriptEstimatedEnd\\\":1691703857799,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71748,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ba116bc2-6793-4b9b-8ca4-ab1bc3949822\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d3f7060e-d935-4a19-bda9-e59efe523567\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1a415e88-f567-4861-a07f-b1d7a1e21b62\",\"moduleSequenceNumber\":3612}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857819,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71749,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703857923,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71850,\"ramUsage\":1.7,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/74ad865b-a656-4717-8351-c8eae760f193\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/029e8d6f-2a8a-484e-adf0-53e2ee9a11e8\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ef0a01c4-e7c7-47e0-95d4-208cba93a22d\",\"moduleSequenceNumber\":3610}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857943,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71851,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703857963,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71852,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ba116bc2-6793-4b9b-8ca4-ab1bc3949822\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d3f7060e-d935-4a19-bda9-e59efe523567\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1a415e88-f567-4861-a07f-b1d7a1e21b62\",\"moduleSequenceNumber\":3612}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703857983,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71853,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703857985,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71954,\"ramUsage\":1.7,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/74ad865b-a656-4717-8351-c8eae760f193\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/029e8d6f-2a8a-484e-adf0-53e2ee9a11e8\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ef0a01c4-e7c7-47e0-95d4-208cba93a22d\",\"moduleSequenceNumber\":3610}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703858005,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71955,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703858025,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71956,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ba116bc2-6793-4b9b-8ca4-ab1bc3949822\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d3f7060e-d935-4a19-bda9-e59efe523567\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1a415e88-f567-4861-a07f-b1d7a1e21b62\",\"moduleSequenceNumber\":3612}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703858045,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71957,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703858165,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72058,\"ramUsage\":1.7,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/74ad865b-a656-4717-8351-c8eae760f193\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/029e8d6f-2a8a-484e-adf0-53e2ee9a11e8\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ef0a01c4-e7c7-47e0-95d4-208cba93a22d\",\"moduleSequenceNumber\":3610}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858185,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72059,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703858205,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72060,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ba116bc2-6793-4b9b-8ca4-ab1bc3949822\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d3f7060e-d935-4a19-bda9-e59efe523567\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1a415e88-f567-4861-a07f-b1d7a1e21b62\",\"moduleSequenceNumber\":3612}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858225,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72061,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703858305,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72162,\"ramUsage\":1.7,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/74ad865b-a656-4717-8351-c8eae760f193\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/029e8d6f-2a8a-484e-adf0-53e2ee9a11e8\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ef0a01c4-e7c7-47e0-95d4-208cba93a22d\",\"moduleSequenceNumber\":3610}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858325,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72163,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703858345,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72164,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ba116bc2-6793-4b9b-8ca4-ab1bc3949822\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d3f7060e-d935-4a19-bda9-e59efe523567\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1a415e88-f567-4861-a07f-b1d7a1e21b62\",\"moduleSequenceNumber\":3612}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858365,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72165,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703858385,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72266,\"ramUsage\":1.7,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/74ad865b-a656-4717-8351-c8eae760f193\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/029e8d6f-2a8a-484e-adf0-53e2ee9a11e8\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ef0a01c4-e7c7-47e0-95d4-208cba93a22d\",\"moduleSequenceNumber\":3610}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858405,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72267,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703858425,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72268,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ba116bc2-6793-4b9b-8ca4-ab1bc3949822\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d3f7060e-d935-4a19-bda9-e59efe523567\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1a415e88-f567-4861-a07f-b1d7a1e21b62\",\"moduleSequenceNumber\":3612}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858445,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72269,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703858556,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72370,\"ramUsage\":1.7,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/74ad865b-a656-4717-8351-c8eae760f193\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/029e8d6f-2a8a-484e-adf0-53e2ee9a11e8\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ef0a01c4-e7c7-47e0-95d4-208cba93a22d\",\"moduleSequenceNumber\":3610}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858576,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72371,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703858596,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72372,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ba116bc2-6793-4b9b-8ca4-ab1bc3949822\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d3f7060e-d935-4a19-bda9-e59efe523567\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1a415e88-f567-4861-a07f-b1d7a1e21b62\",\"moduleSequenceNumber\":3612}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858616,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72373,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703858739,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72474,\"ramUsage\":1.7,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/74ad865b-a656-4717-8351-c8eae760f193\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/029e8d6f-2a8a-484e-adf0-53e2ee9a11e8\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ef0a01c4-e7c7-47e0-95d4-208cba93a22d\",\"moduleSequenceNumber\":3610}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858759,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72475,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703858779,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72476,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ba116bc2-6793-4b9b-8ca4-ab1bc3949822\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d3f7060e-d935-4a19-bda9-e59efe523567\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1a415e88-f567-4861-a07f-b1d7a1e21b62\",\"moduleSequenceNumber\":3612}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858799,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72477,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703859092,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72578,\"ramUsage\":1.7,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/74ad865b-a656-4717-8351-c8eae760f193\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/029e8d6f-2a8a-484e-adf0-53e2ee9a11e8\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ef0a01c4-e7c7-47e0-95d4-208cba93a22d\",\"moduleSequenceNumber\":3610}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703859112,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72579,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703859132,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72580,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ba116bc2-6793-4b9b-8ca4-ab1bc3949822\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d3f7060e-d935-4a19-bda9-e59efe523567\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1a415e88-f567-4861-a07f-b1d7a1e21b62\",\"moduleSequenceNumber\":3612}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703859152,\\\"iteration\\\":20,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72581,\"ramUsage\":1.75,\"server\":\"srv-20\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/74ad865b-a656-4717-8351-c8eae760f193\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/029e8d6f-2a8a-484e-adf0-53e2ee9a11e8\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/ef0a01c4-e7c7-47e0-95d4-208cba93a22d\",\"moduleSequenceNumber\":3610}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":3610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/ba116bc2-6793-4b9b-8ca4-ab1bc3949822\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d3f7060e-d935-4a19-bda9-e59efe523567\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/1a415e88-f567-4861-a07f-b1d7a1e21b62\",\"moduleSequenceNumber\":3612}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":3612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/41c75ccb-970d-4c46-b0eb-cad472cc6063\",\"moduleSequenceNumber\":3460},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fca140ab-3b91-4468-bb38-26965f8c03aa\",\"moduleSequenceNumber\":3462},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/57f0503a-40ec-497f-8829-4e14e2fb6d23\",\"moduleSequenceNumber\":3611}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":3611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":3452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":3454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":3456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":3458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":3460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":3462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-21\",\"httpPortOpen\":false,\"ip\":\"35.6.9.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1264.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":92,\\\"scriptEstimatedEnd\\\":1691703857757,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71646,\"ramUsage\":1.7,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c0df8118-b952-40df-a9cf-4a7dd26abc73\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d0cc487f-22a4-4825-8190-f7887bc90e52\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6bf94e09-32a4-4180-b1d5-e94773b3d8f2\",\"moduleSequenceNumber\":3613}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857777,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71647,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":295,\\\"scriptEstimatedEnd\\\":1691703857797,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71648,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":63,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4135bb10-959b-4c97-ad73-1fb3fbd683fa\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c7dd61b2-c72a-439d-aa1e-1b2889ee6dda\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/0a036eb6-0e19-4631-bbbe-c65a0c82d4c0\",\"moduleSequenceNumber\":3615}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857817,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71649,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":60,\\\"scriptEstimatedEnd\\\":1691703857844,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71750,\"ramUsage\":1.7,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c0df8118-b952-40df-a9cf-4a7dd26abc73\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d0cc487f-22a4-4825-8190-f7887bc90e52\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6bf94e09-32a4-4180-b1d5-e94773b3d8f2\",\"moduleSequenceNumber\":3613}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857864,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71751,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":192,\\\"scriptEstimatedEnd\\\":1691703857884,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71752,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4135bb10-959b-4c97-ad73-1fb3fbd683fa\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c7dd61b2-c72a-439d-aa1e-1b2889ee6dda\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/0a036eb6-0e19-4631-bbbe-c65a0c82d4c0\",\"moduleSequenceNumber\":3615}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857904,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71753,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703858007,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71854,\"ramUsage\":1.7,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c0df8118-b952-40df-a9cf-4a7dd26abc73\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d0cc487f-22a4-4825-8190-f7887bc90e52\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6bf94e09-32a4-4180-b1d5-e94773b3d8f2\",\"moduleSequenceNumber\":3613}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703858027,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71855,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703858047,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71856,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4135bb10-959b-4c97-ad73-1fb3fbd683fa\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c7dd61b2-c72a-439d-aa1e-1b2889ee6dda\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/0a036eb6-0e19-4631-bbbe-c65a0c82d4c0\",\"moduleSequenceNumber\":3615}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703858067,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71857,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703858070,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71958,\"ramUsage\":1.7,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c0df8118-b952-40df-a9cf-4a7dd26abc73\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d0cc487f-22a4-4825-8190-f7887bc90e52\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6bf94e09-32a4-4180-b1d5-e94773b3d8f2\",\"moduleSequenceNumber\":3613}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703858090,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71959,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703858110,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71960,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4135bb10-959b-4c97-ad73-1fb3fbd683fa\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c7dd61b2-c72a-439d-aa1e-1b2889ee6dda\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/0a036eb6-0e19-4631-bbbe-c65a0c82d4c0\",\"moduleSequenceNumber\":3615}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703858130,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71961,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703858250,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72062,\"ramUsage\":1.7,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c0df8118-b952-40df-a9cf-4a7dd26abc73\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d0cc487f-22a4-4825-8190-f7887bc90e52\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6bf94e09-32a4-4180-b1d5-e94773b3d8f2\",\"moduleSequenceNumber\":3613}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858270,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72063,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703858290,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72064,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4135bb10-959b-4c97-ad73-1fb3fbd683fa\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c7dd61b2-c72a-439d-aa1e-1b2889ee6dda\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/0a036eb6-0e19-4631-bbbe-c65a0c82d4c0\",\"moduleSequenceNumber\":3615}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858310,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72065,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703858389,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72166,\"ramUsage\":1.7,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c0df8118-b952-40df-a9cf-4a7dd26abc73\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d0cc487f-22a4-4825-8190-f7887bc90e52\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6bf94e09-32a4-4180-b1d5-e94773b3d8f2\",\"moduleSequenceNumber\":3613}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858409,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72167,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703858429,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72168,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4135bb10-959b-4c97-ad73-1fb3fbd683fa\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c7dd61b2-c72a-439d-aa1e-1b2889ee6dda\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/0a036eb6-0e19-4631-bbbe-c65a0c82d4c0\",\"moduleSequenceNumber\":3615}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858449,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72169,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703858469,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72270,\"ramUsage\":1.7,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c0df8118-b952-40df-a9cf-4a7dd26abc73\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d0cc487f-22a4-4825-8190-f7887bc90e52\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6bf94e09-32a4-4180-b1d5-e94773b3d8f2\",\"moduleSequenceNumber\":3613}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858489,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72271,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703858509,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72272,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4135bb10-959b-4c97-ad73-1fb3fbd683fa\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c7dd61b2-c72a-439d-aa1e-1b2889ee6dda\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/0a036eb6-0e19-4631-bbbe-c65a0c82d4c0\",\"moduleSequenceNumber\":3615}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858529,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72273,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703858641,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72374,\"ramUsage\":1.7,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c0df8118-b952-40df-a9cf-4a7dd26abc73\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d0cc487f-22a4-4825-8190-f7887bc90e52\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6bf94e09-32a4-4180-b1d5-e94773b3d8f2\",\"moduleSequenceNumber\":3613}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858661,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72375,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703858681,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72376,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4135bb10-959b-4c97-ad73-1fb3fbd683fa\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c7dd61b2-c72a-439d-aa1e-1b2889ee6dda\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/0a036eb6-0e19-4631-bbbe-c65a0c82d4c0\",\"moduleSequenceNumber\":3615}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858701,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72377,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703858828,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72478,\"ramUsage\":1.7,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c0df8118-b952-40df-a9cf-4a7dd26abc73\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d0cc487f-22a4-4825-8190-f7887bc90e52\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6bf94e09-32a4-4180-b1d5-e94773b3d8f2\",\"moduleSequenceNumber\":3613}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858848,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72479,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703858868,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72480,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4135bb10-959b-4c97-ad73-1fb3fbd683fa\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c7dd61b2-c72a-439d-aa1e-1b2889ee6dda\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/0a036eb6-0e19-4631-bbbe-c65a0c82d4c0\",\"moduleSequenceNumber\":3615}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858888,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72481,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703859177,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72582,\"ramUsage\":1.7,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c0df8118-b952-40df-a9cf-4a7dd26abc73\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d0cc487f-22a4-4825-8190-f7887bc90e52\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6bf94e09-32a4-4180-b1d5-e94773b3d8f2\",\"moduleSequenceNumber\":3613}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703859197,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72583,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703859217,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72584,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4135bb10-959b-4c97-ad73-1fb3fbd683fa\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c7dd61b2-c72a-439d-aa1e-1b2889ee6dda\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/0a036eb6-0e19-4631-bbbe-c65a0c82d4c0\",\"moduleSequenceNumber\":3615}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703859237,\\\"iteration\\\":21,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72585,\"ramUsage\":1.75,\"server\":\"srv-21\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/c0df8118-b952-40df-a9cf-4a7dd26abc73\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d0cc487f-22a4-4825-8190-f7887bc90e52\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6bf94e09-32a4-4180-b1d5-e94773b3d8f2\",\"moduleSequenceNumber\":3613}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":3613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/4135bb10-959b-4c97-ad73-1fb3fbd683fa\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c7dd61b2-c72a-439d-aa1e-1b2889ee6dda\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/0a036eb6-0e19-4631-bbbe-c65a0c82d4c0\",\"moduleSequenceNumber\":3615}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":3615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/8a9265a6-7eb5-4f92-863c-5cfb2dc1ab74\",\"moduleSequenceNumber\":3478},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/9de027c1-5d9e-4ddd-aaaf-00101b2a04ea\",\"moduleSequenceNumber\":3480},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/7954ab8b-3e7d-408f-81d6-61409120355a\",\"moduleSequenceNumber\":3614}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":3614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":3470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":3472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":3474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":3476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":3478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":3480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-22\",\"httpPortOpen\":false,\"ip\":\"77.9.1.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1264.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":92,\\\"scriptEstimatedEnd\\\":1691703857843,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71650,\"ramUsage\":1.7,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/031eae49-abed-4404-9f26-fda0ac6e9b52\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d9006240-c29c-4906-95b5-fa033a879845\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/e5deb27d-c572-48bd-9b20-d568611603ab\",\"moduleSequenceNumber\":3616}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857863,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71651,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":295,\\\"scriptEstimatedEnd\\\":1691703857883,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71652,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":63,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/69bb478f-4f3f-4fdd-b313-56597ee6b058\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1a39926b-0056-487e-a445-6a9d704dd1f6\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/7a30e87a-c795-4a18-a7d5-86470d7f4ae3\",\"moduleSequenceNumber\":3618}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857903,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71653,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":60,\\\"scriptEstimatedEnd\\\":1691703857928,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71754,\"ramUsage\":1.7,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/031eae49-abed-4404-9f26-fda0ac6e9b52\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d9006240-c29c-4906-95b5-fa033a879845\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/e5deb27d-c572-48bd-9b20-d568611603ab\",\"moduleSequenceNumber\":3616}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857948,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71755,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":192,\\\"scriptEstimatedEnd\\\":1691703857968,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71756,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/69bb478f-4f3f-4fdd-b313-56597ee6b058\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1a39926b-0056-487e-a445-6a9d704dd1f6\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/7a30e87a-c795-4a18-a7d5-86470d7f4ae3\",\"moduleSequenceNumber\":3618}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703857988,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71757,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703858093,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71858,\"ramUsage\":1.7,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/031eae49-abed-4404-9f26-fda0ac6e9b52\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d9006240-c29c-4906-95b5-fa033a879845\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/e5deb27d-c572-48bd-9b20-d568611603ab\",\"moduleSequenceNumber\":3616}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703858113,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71859,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703858133,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71860,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/69bb478f-4f3f-4fdd-b313-56597ee6b058\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1a39926b-0056-487e-a445-6a9d704dd1f6\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/7a30e87a-c795-4a18-a7d5-86470d7f4ae3\",\"moduleSequenceNumber\":3618}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703858153,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71861,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703858154,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71962,\"ramUsage\":1.7,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/031eae49-abed-4404-9f26-fda0ac6e9b52\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d9006240-c29c-4906-95b5-fa033a879845\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/e5deb27d-c572-48bd-9b20-d568611603ab\",\"moduleSequenceNumber\":3616}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703858174,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71963,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703858194,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71964,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/69bb478f-4f3f-4fdd-b313-56597ee6b058\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1a39926b-0056-487e-a445-6a9d704dd1f6\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/7a30e87a-c795-4a18-a7d5-86470d7f4ae3\",\"moduleSequenceNumber\":3618}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703858214,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71965,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703858334,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72066,\"ramUsage\":1.7,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/031eae49-abed-4404-9f26-fda0ac6e9b52\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d9006240-c29c-4906-95b5-fa033a879845\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/e5deb27d-c572-48bd-9b20-d568611603ab\",\"moduleSequenceNumber\":3616}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858354,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72067,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703858374,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72068,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/69bb478f-4f3f-4fdd-b313-56597ee6b058\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1a39926b-0056-487e-a445-6a9d704dd1f6\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/7a30e87a-c795-4a18-a7d5-86470d7f4ae3\",\"moduleSequenceNumber\":3618}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858394,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72069,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703858473,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72170,\"ramUsage\":1.7,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/031eae49-abed-4404-9f26-fda0ac6e9b52\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d9006240-c29c-4906-95b5-fa033a879845\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/e5deb27d-c572-48bd-9b20-d568611603ab\",\"moduleSequenceNumber\":3616}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858493,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72171,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703858513,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72172,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/69bb478f-4f3f-4fdd-b313-56597ee6b058\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1a39926b-0056-487e-a445-6a9d704dd1f6\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/7a30e87a-c795-4a18-a7d5-86470d7f4ae3\",\"moduleSequenceNumber\":3618}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858533,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72173,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703858553,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72274,\"ramUsage\":1.7,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/031eae49-abed-4404-9f26-fda0ac6e9b52\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d9006240-c29c-4906-95b5-fa033a879845\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/e5deb27d-c572-48bd-9b20-d568611603ab\",\"moduleSequenceNumber\":3616}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858573,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72275,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703858593,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72276,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/69bb478f-4f3f-4fdd-b313-56597ee6b058\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1a39926b-0056-487e-a445-6a9d704dd1f6\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/7a30e87a-c795-4a18-a7d5-86470d7f4ae3\",\"moduleSequenceNumber\":3618}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858613,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72277,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703858726,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72378,\"ramUsage\":1.7,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/031eae49-abed-4404-9f26-fda0ac6e9b52\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d9006240-c29c-4906-95b5-fa033a879845\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/e5deb27d-c572-48bd-9b20-d568611603ab\",\"moduleSequenceNumber\":3616}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858746,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72379,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703858766,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72380,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/69bb478f-4f3f-4fdd-b313-56597ee6b058\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1a39926b-0056-487e-a445-6a9d704dd1f6\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/7a30e87a-c795-4a18-a7d5-86470d7f4ae3\",\"moduleSequenceNumber\":3618}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858786,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72381,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703858915,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72482,\"ramUsage\":1.7,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/031eae49-abed-4404-9f26-fda0ac6e9b52\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d9006240-c29c-4906-95b5-fa033a879845\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/e5deb27d-c572-48bd-9b20-d568611603ab\",\"moduleSequenceNumber\":3616}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858935,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72483,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703858955,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72484,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/69bb478f-4f3f-4fdd-b313-56597ee6b058\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1a39926b-0056-487e-a445-6a9d704dd1f6\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/7a30e87a-c795-4a18-a7d5-86470d7f4ae3\",\"moduleSequenceNumber\":3618}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703858975,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72485,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703859260,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72586,\"ramUsage\":1.7,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/031eae49-abed-4404-9f26-fda0ac6e9b52\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d9006240-c29c-4906-95b5-fa033a879845\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/e5deb27d-c572-48bd-9b20-d568611603ab\",\"moduleSequenceNumber\":3616}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703859280,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72587,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703859300,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72588,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/69bb478f-4f3f-4fdd-b313-56597ee6b058\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1a39926b-0056-487e-a445-6a9d704dd1f6\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/7a30e87a-c795-4a18-a7d5-86470d7f4ae3\",\"moduleSequenceNumber\":3618}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703859320,\\\"iteration\\\":22,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72589,\"ramUsage\":1.75,\"server\":\"srv-22\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/031eae49-abed-4404-9f26-fda0ac6e9b52\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d9006240-c29c-4906-95b5-fa033a879845\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/e5deb27d-c572-48bd-9b20-d568611603ab\",\"moduleSequenceNumber\":3616}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":3616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/69bb478f-4f3f-4fdd-b313-56597ee6b058\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/1a39926b-0056-487e-a445-6a9d704dd1f6\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/7a30e87a-c795-4a18-a7d5-86470d7f4ae3\",\"moduleSequenceNumber\":3618}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":3618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/bf8ca6b9-569a-4663-b38e-8ee2dec16fbc\",\"moduleSequenceNumber\":3496},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/fe62ef2f-7d64-498e-a572-566e7e81375f\",\"moduleSequenceNumber\":3498},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/97a96e6c-9093-42bd-8971-9f5c098232c2\",\"moduleSequenceNumber\":3617}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":3617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":3488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":3490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":3492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":3494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":3496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":3498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-23\",\"httpPortOpen\":false,\"ip\":\"59.0.2.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1264.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":92,\\\"scriptEstimatedEnd\\\":1691703857927,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71654,\"ramUsage\":1.7,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/dd58d7d5-522e-4598-8e95-b6fade34df4f\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c22558a3-4df5-4adc-9284-35502ee60b81\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9c930b09-bd1f-4d18-9bdc-2dcd6f51e5ba\",\"moduleSequenceNumber\":3619}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857947,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71655,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":295,\\\"scriptEstimatedEnd\\\":1691703857967,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71656,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":63,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f0411cd9-a587-4969-b698-2f1bfba20f53\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/67b96233-619e-4061-94ae-1d8518c40dff\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4a8c65ed-ea32-4c6a-b291-4d3b84a4c242\",\"moduleSequenceNumber\":3621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703857987,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71657,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":60,\\\"scriptEstimatedEnd\\\":1691703858012,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71758,\"ramUsage\":1.7,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/dd58d7d5-522e-4598-8e95-b6fade34df4f\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c22558a3-4df5-4adc-9284-35502ee60b81\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9c930b09-bd1f-4d18-9bdc-2dcd6f51e5ba\",\"moduleSequenceNumber\":3619}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703858032,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71759,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":192,\\\"scriptEstimatedEnd\\\":1691703858052,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71760,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f0411cd9-a587-4969-b698-2f1bfba20f53\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/67b96233-619e-4061-94ae-1d8518c40dff\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4a8c65ed-ea32-4c6a-b291-4d3b84a4c242\",\"moduleSequenceNumber\":3621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703858072,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71761,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703858204,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71862,\"ramUsage\":1.7,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/dd58d7d5-522e-4598-8e95-b6fade34df4f\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c22558a3-4df5-4adc-9284-35502ee60b81\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9c930b09-bd1f-4d18-9bdc-2dcd6f51e5ba\",\"moduleSequenceNumber\":3619}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703858224,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71863,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703858244,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71864,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f0411cd9-a587-4969-b698-2f1bfba20f53\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/67b96233-619e-4061-94ae-1d8518c40dff\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4a8c65ed-ea32-4c6a-b291-4d3b84a4c242\",\"moduleSequenceNumber\":3621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703858264,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71865,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703858240,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71966,\"ramUsage\":1.7,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/dd58d7d5-522e-4598-8e95-b6fade34df4f\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c22558a3-4df5-4adc-9284-35502ee60b81\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9c930b09-bd1f-4d18-9bdc-2dcd6f51e5ba\",\"moduleSequenceNumber\":3619}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703858260,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71967,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703858280,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71968,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f0411cd9-a587-4969-b698-2f1bfba20f53\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/67b96233-619e-4061-94ae-1d8518c40dff\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4a8c65ed-ea32-4c6a-b291-4d3b84a4c242\",\"moduleSequenceNumber\":3621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703858300,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71969,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703858418,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72070,\"ramUsage\":1.7,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/dd58d7d5-522e-4598-8e95-b6fade34df4f\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c22558a3-4df5-4adc-9284-35502ee60b81\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9c930b09-bd1f-4d18-9bdc-2dcd6f51e5ba\",\"moduleSequenceNumber\":3619}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858438,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72071,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703858458,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72072,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f0411cd9-a587-4969-b698-2f1bfba20f53\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/67b96233-619e-4061-94ae-1d8518c40dff\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4a8c65ed-ea32-4c6a-b291-4d3b84a4c242\",\"moduleSequenceNumber\":3621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858478,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72073,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703858557,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72174,\"ramUsage\":1.7,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/dd58d7d5-522e-4598-8e95-b6fade34df4f\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c22558a3-4df5-4adc-9284-35502ee60b81\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9c930b09-bd1f-4d18-9bdc-2dcd6f51e5ba\",\"moduleSequenceNumber\":3619}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858577,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72175,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703858597,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72176,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f0411cd9-a587-4969-b698-2f1bfba20f53\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/67b96233-619e-4061-94ae-1d8518c40dff\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4a8c65ed-ea32-4c6a-b291-4d3b84a4c242\",\"moduleSequenceNumber\":3621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858617,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72177,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703858637,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72278,\"ramUsage\":1.7,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/dd58d7d5-522e-4598-8e95-b6fade34df4f\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c22558a3-4df5-4adc-9284-35502ee60b81\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9c930b09-bd1f-4d18-9bdc-2dcd6f51e5ba\",\"moduleSequenceNumber\":3619}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858657,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72279,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703858677,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72280,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f0411cd9-a587-4969-b698-2f1bfba20f53\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/67b96233-619e-4061-94ae-1d8518c40dff\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4a8c65ed-ea32-4c6a-b291-4d3b84a4c242\",\"moduleSequenceNumber\":3621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858697,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72281,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703858810,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72382,\"ramUsage\":1.7,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/dd58d7d5-522e-4598-8e95-b6fade34df4f\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c22558a3-4df5-4adc-9284-35502ee60b81\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9c930b09-bd1f-4d18-9bdc-2dcd6f51e5ba\",\"moduleSequenceNumber\":3619}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858830,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72383,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703858850,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72384,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f0411cd9-a587-4969-b698-2f1bfba20f53\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/67b96233-619e-4061-94ae-1d8518c40dff\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4a8c65ed-ea32-4c6a-b291-4d3b84a4c242\",\"moduleSequenceNumber\":3621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858870,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72385,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703858999,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72486,\"ramUsage\":1.7,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/dd58d7d5-522e-4598-8e95-b6fade34df4f\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c22558a3-4df5-4adc-9284-35502ee60b81\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9c930b09-bd1f-4d18-9bdc-2dcd6f51e5ba\",\"moduleSequenceNumber\":3619}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703859019,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72487,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703859039,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72488,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f0411cd9-a587-4969-b698-2f1bfba20f53\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/67b96233-619e-4061-94ae-1d8518c40dff\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4a8c65ed-ea32-4c6a-b291-4d3b84a4c242\",\"moduleSequenceNumber\":3621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703859059,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72489,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703859344,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72590,\"ramUsage\":1.7,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/dd58d7d5-522e-4598-8e95-b6fade34df4f\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c22558a3-4df5-4adc-9284-35502ee60b81\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9c930b09-bd1f-4d18-9bdc-2dcd6f51e5ba\",\"moduleSequenceNumber\":3619}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703859364,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72591,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703859384,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72592,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f0411cd9-a587-4969-b698-2f1bfba20f53\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/67b96233-619e-4061-94ae-1d8518c40dff\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4a8c65ed-ea32-4c6a-b291-4d3b84a4c242\",\"moduleSequenceNumber\":3621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703859404,\\\"iteration\\\":23,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72593,\"ramUsage\":1.75,\"server\":\"srv-23\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/dd58d7d5-522e-4598-8e95-b6fade34df4f\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c22558a3-4df5-4adc-9284-35502ee60b81\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/9c930b09-bd1f-4d18-9bdc-2dcd6f51e5ba\",\"moduleSequenceNumber\":3619}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":3619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/f0411cd9-a587-4969-b698-2f1bfba20f53\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/67b96233-619e-4061-94ae-1d8518c40dff\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4a8c65ed-ea32-4c6a-b291-4d3b84a4c242\",\"moduleSequenceNumber\":3621}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":3621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/510a2e74-b6f7-442c-bb0a-a2c2e637ddf5\",\"moduleSequenceNumber\":3514},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/f83d4a6b-19c3-4f67-aa0e-744e105d4d29\",\"moduleSequenceNumber\":3516},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/54952199-0b3e-4fde-a301-fcd5719f0cf4\",\"moduleSequenceNumber\":3620}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":3620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":3506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":3508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":3510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":3512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":3514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":3516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-24\",\"httpPortOpen\":false,\"ip\":\"0.2.3.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1264.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":92,\\\"scriptEstimatedEnd\\\":1691703858011,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71658,\"ramUsage\":1.7,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/65213d44-ab96-4a1a-9b81-c5473066b927\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc052c43-b839-4be7-a9e8-df959d34b129\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6da4f101-0978-4631-9353-ea5d512bb553\",\"moduleSequenceNumber\":3622}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703858031,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71659,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":295,\\\"scriptEstimatedEnd\\\":1691703858051,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71660,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":63,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/925bc5a8-9efb-4546-a80c-0ad4c7dd1d11\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d2786682-a009-4347-b8e4-cdc334eefcca\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/b6ea0cc1-ff41-4977-a8aa-ce92f7038f92\",\"moduleSequenceNumber\":3624}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703858071,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71661,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":60,\\\"scriptEstimatedEnd\\\":1691703858096,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71762,\"ramUsage\":1.7,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/65213d44-ab96-4a1a-9b81-c5473066b927\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc052c43-b839-4be7-a9e8-df959d34b129\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6da4f101-0978-4631-9353-ea5d512bb553\",\"moduleSequenceNumber\":3622}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703858116,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71763,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":192,\\\"scriptEstimatedEnd\\\":1691703858136,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71764,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/925bc5a8-9efb-4546-a80c-0ad4c7dd1d11\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d2786682-a009-4347-b8e4-cdc334eefcca\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/b6ea0cc1-ff41-4977-a8aa-ce92f7038f92\",\"moduleSequenceNumber\":3624}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703858156,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71765,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703858291,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71866,\"ramUsage\":1.7,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/65213d44-ab96-4a1a-9b81-c5473066b927\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc052c43-b839-4be7-a9e8-df959d34b129\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6da4f101-0978-4631-9353-ea5d512bb553\",\"moduleSequenceNumber\":3622}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703858311,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71867,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703858331,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71868,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/925bc5a8-9efb-4546-a80c-0ad4c7dd1d11\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d2786682-a009-4347-b8e4-cdc334eefcca\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/b6ea0cc1-ff41-4977-a8aa-ce92f7038f92\",\"moduleSequenceNumber\":3624}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703858351,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71869,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703858324,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71970,\"ramUsage\":1.7,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/65213d44-ab96-4a1a-9b81-c5473066b927\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc052c43-b839-4be7-a9e8-df959d34b129\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6da4f101-0978-4631-9353-ea5d512bb553\",\"moduleSequenceNumber\":3622}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703858344,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71971,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703858364,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71972,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/925bc5a8-9efb-4546-a80c-0ad4c7dd1d11\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d2786682-a009-4347-b8e4-cdc334eefcca\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/b6ea0cc1-ff41-4977-a8aa-ce92f7038f92\",\"moduleSequenceNumber\":3624}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703858384,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71973,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703858502,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72074,\"ramUsage\":1.7,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/65213d44-ab96-4a1a-9b81-c5473066b927\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc052c43-b839-4be7-a9e8-df959d34b129\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6da4f101-0978-4631-9353-ea5d512bb553\",\"moduleSequenceNumber\":3622}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858522,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72075,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703858542,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72076,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/925bc5a8-9efb-4546-a80c-0ad4c7dd1d11\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d2786682-a009-4347-b8e4-cdc334eefcca\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/b6ea0cc1-ff41-4977-a8aa-ce92f7038f92\",\"moduleSequenceNumber\":3624}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858562,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72077,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703858642,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72178,\"ramUsage\":1.7,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/65213d44-ab96-4a1a-9b81-c5473066b927\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc052c43-b839-4be7-a9e8-df959d34b129\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6da4f101-0978-4631-9353-ea5d512bb553\",\"moduleSequenceNumber\":3622}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858662,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72179,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703858682,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72180,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/925bc5a8-9efb-4546-a80c-0ad4c7dd1d11\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d2786682-a009-4347-b8e4-cdc334eefcca\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/b6ea0cc1-ff41-4977-a8aa-ce92f7038f92\",\"moduleSequenceNumber\":3624}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858702,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72181,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703858722,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72282,\"ramUsage\":1.7,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/65213d44-ab96-4a1a-9b81-c5473066b927\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc052c43-b839-4be7-a9e8-df959d34b129\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6da4f101-0978-4631-9353-ea5d512bb553\",\"moduleSequenceNumber\":3622}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858742,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72283,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703858762,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72284,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/925bc5a8-9efb-4546-a80c-0ad4c7dd1d11\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d2786682-a009-4347-b8e4-cdc334eefcca\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/b6ea0cc1-ff41-4977-a8aa-ce92f7038f92\",\"moduleSequenceNumber\":3624}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858782,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72285,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703858894,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72386,\"ramUsage\":1.7,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/65213d44-ab96-4a1a-9b81-c5473066b927\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc052c43-b839-4be7-a9e8-df959d34b129\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6da4f101-0978-4631-9353-ea5d512bb553\",\"moduleSequenceNumber\":3622}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858914,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72387,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703858934,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72388,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/925bc5a8-9efb-4546-a80c-0ad4c7dd1d11\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d2786682-a009-4347-b8e4-cdc334eefcca\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/b6ea0cc1-ff41-4977-a8aa-ce92f7038f92\",\"moduleSequenceNumber\":3624}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703858954,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72389,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703859084,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72490,\"ramUsage\":1.7,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/65213d44-ab96-4a1a-9b81-c5473066b927\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc052c43-b839-4be7-a9e8-df959d34b129\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6da4f101-0978-4631-9353-ea5d512bb553\",\"moduleSequenceNumber\":3622}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703859104,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72491,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703859124,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72492,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/925bc5a8-9efb-4546-a80c-0ad4c7dd1d11\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d2786682-a009-4347-b8e4-cdc334eefcca\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/b6ea0cc1-ff41-4977-a8aa-ce92f7038f92\",\"moduleSequenceNumber\":3624}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703859144,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72493,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703859429,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72594,\"ramUsage\":1.7,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/65213d44-ab96-4a1a-9b81-c5473066b927\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc052c43-b839-4be7-a9e8-df959d34b129\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6da4f101-0978-4631-9353-ea5d512bb553\",\"moduleSequenceNumber\":3622}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703859449,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72595,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703859469,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72596,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/925bc5a8-9efb-4546-a80c-0ad4c7dd1d11\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d2786682-a009-4347-b8e4-cdc334eefcca\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/b6ea0cc1-ff41-4977-a8aa-ce92f7038f92\",\"moduleSequenceNumber\":3624}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703859489,\\\"iteration\\\":24,\\\"writePort\\\":-1,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72597,\"ramUsage\":1.75,\"server\":\"srv-24\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/65213d44-ab96-4a1a-9b81-c5473066b927\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/dc052c43-b839-4be7-a9e8-df959d34b129\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/6da4f101-0978-4631-9353-ea5d512bb553\",\"moduleSequenceNumber\":3622}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":3622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/925bc5a8-9efb-4546-a80c-0ad4c7dd1d11\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/d2786682-a009-4347-b8e4-cdc334eefcca\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/b6ea0cc1-ff41-4977-a8aa-ce92f7038f92\",\"moduleSequenceNumber\":3624}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":3624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/7fbf7862-12e4-467b-a308-c77795519749\",\"moduleSequenceNumber\":3532},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/b671fa09-21fa-46e2-8388-137b0905bcf8\",\"moduleSequenceNumber\":3534},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/151dfb1c-fedc-4213-bb79-fef806ec8623\",\"moduleSequenceNumber\":3623}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":3623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":3524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":3526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":3528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":3530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":3532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":3534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-25\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-25\",\"httpPortOpen\":false,\"ip\":\"14.2.9.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1268.2500000000002,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"n00dles\\\",\\\"scriptExecTime\\\":4,\\\"scriptEstimatedEnd\\\":1691703857090,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703854808],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"pid\":71488,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/466d616c-136f-4fa4-b977-0244e351cee6\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c3f79096-6ad7-40a1-b7f9-05914dc092de\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4f296b2d-c5ce-487d-917e-937edb48d89e\",\"moduleSequenceNumber\":3627}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"n00dles\\\",\\\"scriptExecTime\\\":2,\\\"scriptEstimatedEnd\\\":1691703857110,\\\"iteration\\\":25,\\\"writePort\\\":100,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703854808],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"pid\":71489,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":92,\\\"scriptEstimatedEnd\\\":1691703858096,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71662,\"ramUsage\":1.7,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/320defc8-23d7-49b1-929c-29db97c1cbdd\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/89b7d04a-ca33-4b1d-ba88-50191ad22b95\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/49b90670-9cae-4fbd-8bd8-338f605fd062\",\"moduleSequenceNumber\":3625}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703858116,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71663,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":295,\\\"scriptEstimatedEnd\\\":1691703858136,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71664,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":63,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/466d616c-136f-4fa4-b977-0244e351cee6\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c3f79096-6ad7-40a1-b7f9-05914dc092de\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4f296b2d-c5ce-487d-917e-937edb48d89e\",\"moduleSequenceNumber\":3627}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"kuai-gong\\\",\\\"scriptExecTime\\\":365,\\\"scriptEstimatedEnd\\\":1691703858156,\\\"iteration\\\":25,\\\"writePort\\\":100,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855489],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":71665,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":60,\\\"scriptEstimatedEnd\\\":1691703858181,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71766,\"ramUsage\":1.7,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/320defc8-23d7-49b1-929c-29db97c1cbdd\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/89b7d04a-ca33-4b1d-ba88-50191ad22b95\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/49b90670-9cae-4fbd-8bd8-338f605fd062\",\"moduleSequenceNumber\":3625}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703858201,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71767,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":192,\\\"scriptEstimatedEnd\\\":1691703858221,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71768,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/466d616c-136f-4fa4-b977-0244e351cee6\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c3f79096-6ad7-40a1-b7f9-05914dc092de\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4f296b2d-c5ce-487d-917e-937edb48d89e\",\"moduleSequenceNumber\":3627}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"b-and-a\\\",\\\"scriptExecTime\\\":238,\\\"scriptEstimatedEnd\\\":1691703858241,\\\"iteration\\\":25,\\\"writePort\\\":101,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855616],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":71769,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":70,\\\"scriptEstimatedEnd\\\":1691703858375,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71870,\"ramUsage\":1.7,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/320defc8-23d7-49b1-929c-29db97c1cbdd\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/89b7d04a-ca33-4b1d-ba88-50191ad22b95\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/49b90670-9cae-4fbd-8bd8-338f605fd062\",\"moduleSequenceNumber\":3625}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703858395,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71871,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":224,\\\"scriptEstimatedEnd\\\":1691703858415,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71872,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":56,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/466d616c-136f-4fa4-b977-0244e351cee6\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c3f79096-6ad7-40a1-b7f9-05914dc092de\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4f296b2d-c5ce-487d-917e-937edb48d89e\",\"moduleSequenceNumber\":3627}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"omnitek\\\",\\\"scriptExecTime\\\":279,\\\"scriptEstimatedEnd\\\":1691703858435,\\\"iteration\\\":25,\\\"writePort\\\":100,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855827],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71873,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":49,\\\"scriptEstimatedEnd\\\":1691703858409,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71974,\"ramUsage\":1.7,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/320defc8-23d7-49b1-929c-29db97c1cbdd\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/89b7d04a-ca33-4b1d-ba88-50191ad22b95\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/49b90670-9cae-4fbd-8bd8-338f605fd062\",\"moduleSequenceNumber\":3625}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703858429,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71975,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":157,\\\"scriptEstimatedEnd\\\":1691703858449,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71976,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":57,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/466d616c-136f-4fa4-b977-0244e351cee6\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c3f79096-6ad7-40a1-b7f9-05914dc092de\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4f296b2d-c5ce-487d-917e-937edb48d89e\",\"moduleSequenceNumber\":3627}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"global-pharm\\\",\\\"scriptExecTime\\\":196,\\\"scriptEstimatedEnd\\\":1691703858469,\\\"iteration\\\":25,\\\"writePort\\\":101,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703855980],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":71977,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":52,\\\"scriptEstimatedEnd\\\":1691703858587,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72078,\"ramUsage\":1.7,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/320defc8-23d7-49b1-929c-29db97c1cbdd\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/89b7d04a-ca33-4b1d-ba88-50191ad22b95\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/49b90670-9cae-4fbd-8bd8-338f605fd062\",\"moduleSequenceNumber\":3625}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858607,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72079,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":167,\\\"scriptEstimatedEnd\\\":1691703858627,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72080,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":102,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/466d616c-136f-4fa4-b977-0244e351cee6\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c3f79096-6ad7-40a1-b7f9-05914dc092de\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4f296b2d-c5ce-487d-917e-937edb48d89e\",\"moduleSequenceNumber\":3627}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"deltaone\\\",\\\"scriptExecTime\\\":207,\\\"scriptEstimatedEnd\\\":1691703858647,\\\"iteration\\\":25,\\\"writePort\\\":100,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856107],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":72081,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":9,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":50,\\\"scriptEstimatedEnd\\\":1691703858727,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72182,\"ramUsage\":1.7,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/320defc8-23d7-49b1-929c-29db97c1cbdd\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/89b7d04a-ca33-4b1d-ba88-50191ad22b95\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/49b90670-9cae-4fbd-8bd8-338f605fd062\",\"moduleSequenceNumber\":3625}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858747,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72183,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":160,\\\"scriptEstimatedEnd\\\":1691703858767,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72184,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":67,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/466d616c-136f-4fa4-b977-0244e351cee6\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c3f79096-6ad7-40a1-b7f9-05914dc092de\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4f296b2d-c5ce-487d-917e-937edb48d89e\",\"moduleSequenceNumber\":3627}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zeus-med\\\",\\\"scriptExecTime\\\":199,\\\"scriptEstimatedEnd\\\":1691703858787,\\\"iteration\\\":25,\\\"writePort\\\":100,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856270],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":72185,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":38,\\\"scriptEstimatedEnd\\\":1691703858807,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72286,\"ramUsage\":1.7,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/320defc8-23d7-49b1-929c-29db97c1cbdd\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/89b7d04a-ca33-4b1d-ba88-50191ad22b95\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/49b90670-9cae-4fbd-8bd8-338f605fd062\",\"moduleSequenceNumber\":3625}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858827,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72287,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":122,\\\"scriptEstimatedEnd\\\":1691703858847,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72288,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":46,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/466d616c-136f-4fa4-b977-0244e351cee6\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c3f79096-6ad7-40a1-b7f9-05914dc092de\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4f296b2d-c5ce-487d-917e-937edb48d89e\",\"moduleSequenceNumber\":3627}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"nova-med\\\",\\\"scriptExecTime\\\":151,\\\"scriptEstimatedEnd\\\":1691703858867,\\\"iteration\\\":25,\\\"writePort\\\":101,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856412],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72289,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":4,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":37,\\\"scriptEstimatedEnd\\\":1691703858982,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72390,\"ramUsage\":1.7,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/320defc8-23d7-49b1-929c-29db97c1cbdd\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/89b7d04a-ca33-4b1d-ba88-50191ad22b95\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/49b90670-9cae-4fbd-8bd8-338f605fd062\",\"moduleSequenceNumber\":3625}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703859002,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72391,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":119,\\\"scriptEstimatedEnd\\\":1691703859022,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72392,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":51,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/466d616c-136f-4fa4-b977-0244e351cee6\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c3f79096-6ad7-40a1-b7f9-05914dc092de\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4f296b2d-c5ce-487d-917e-937edb48d89e\",\"moduleSequenceNumber\":3627}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"zb-def\\\",\\\"scriptExecTime\\\":146,\\\"scriptEstimatedEnd\\\":1691703859042,\\\"iteration\\\":25,\\\"writePort\\\":100,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856579],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":72393,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":44,\\\"scriptEstimatedEnd\\\":1691703859169,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72494,\"ramUsage\":1.7,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/320defc8-23d7-49b1-929c-29db97c1cbdd\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/89b7d04a-ca33-4b1d-ba88-50191ad22b95\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/49b90670-9cae-4fbd-8bd8-338f605fd062\",\"moduleSequenceNumber\":3625}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703859189,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72495,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":141,\\\"scriptEstimatedEnd\\\":1691703859209,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72496,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":58,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/466d616c-136f-4fa4-b977-0244e351cee6\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c3f79096-6ad7-40a1-b7f9-05914dc092de\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4f296b2d-c5ce-487d-917e-937edb48d89e\",\"moduleSequenceNumber\":3627}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"unitalife\\\",\\\"scriptExecTime\\\":174,\\\"scriptEstimatedEnd\\\":1691703859229,\\\"iteration\\\":25,\\\"writePort\\\":101,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856721],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":72497,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":5,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":85,\\\"scriptEstimatedEnd\\\":1691703859514,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72598,\"ramUsage\":1.7,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/320defc8-23d7-49b1-929c-29db97c1cbdd\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/89b7d04a-ca33-4b1d-ba88-50191ad22b95\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/49b90670-9cae-4fbd-8bd8-338f605fd062\",\"moduleSequenceNumber\":3625}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703859534,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"weakType\\\":1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72599,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":272,\\\"scriptEstimatedEnd\\\":1691703859554,\\\"iteration\\\":25,\\\"writePort\\\":-1,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72600,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":73,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/466d616c-136f-4fa4-b977-0244e351cee6\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c3f79096-6ad7-40a1-b7f9-05914dc092de\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4f296b2d-c5ce-487d-917e-937edb48d89e\",\"moduleSequenceNumber\":3627}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"{\\\"target\\\":\\\"fulcrumtech\\\",\\\"scriptExecTime\\\":337,\\\"scriptEstimatedEnd\\\":1691703859574,\\\"iteration\\\":25,\\\"writePort\\\":100,\\\"weakType\\\":2,\\\"type\\\":\\\"BATCH\\\",\\\"debug\\\":false}\",1691703856879],\"dataMap\":{},\"filename\":\"/hwgw/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":72601,\"ramUsage\":1.75,\"server\":\"srv-25\",\"threads\":6,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/320defc8-23d7-49b1-929c-29db97c1cbdd\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/89b7d04a-ca33-4b1d-ba88-50191ad22b95\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:http://bitburner.local/49b90670-9cae-4fbd-8bd8-338f605fd062\",\"moduleSequenceNumber\":3625}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":3625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    if (prop.debug) {\\n        info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n            .toString()\\n            .slice(-6)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNkLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsc0JBQXNCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUN2RyxJQUFJLENBQUMsa0JBQWtCLENBQ3hCO2FBQ0UsUUFBUSxFQUFFO2FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDZixDQUFDO0tBQ0g7QUFDSCxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/466d616c-136f-4fa4-b977-0244e351cee6\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/c3f79096-6ad7-40a1-b7f9-05914dc092de\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:http://bitburner.local/4f296b2d-c5ce-487d-917e-937edb48d89e\",\"moduleSequenceNumber\":3627}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":3627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else if (prop.debug) {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    ns.atExit(() => {\\n        const end = Date.now();\\n        if (prop.debug) {\\n            info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n                .toString()\\n                .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n        }\\n        if (prop.writePort > -1)\\n            ns.tryWritePort(prop.writePort, prop.target);\\n    });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNyQixJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsUUFBUSxDQUFDLEtBQUssZUFBZSxDQUFDLENBQUM7S0FDN0c7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLFVBQVUsSUFBSSxDQUFDLFFBQVEsZ0JBQWdCLEdBQUc7aUJBQ3BGLFFBQVEsRUFBRTtpQkFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:http://bitburner.local/a7fb9ddc-7e7a-4798-8e10-618366603d8f\",\"moduleSequenceNumber\":3550},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:http://bitburner.local/322483b2-5f0f-4032-a037-9117ed73afd6\",\"moduleSequenceNumber\":3552},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:http://bitburner.local/b7fc07e7-138e-4785-9b6c-74a8d4e8b5b8\",\"moduleSequenceNumber\":3626}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":3626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":3542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":3544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":3546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    debug = false;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZixRQUFRLENBQW9CO0lBQzVCLElBQUksQ0FBbUI7SUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNkLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":3548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":3550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":3552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":201.961,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":169.2143,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":128.9129,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":163.9993,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":99.0087,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":18.1794,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":18.8366,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":2977.9243,\"isBanned\":false,\"isMember\":true,\"name\":\"Illuminati\",\"playerReputation\":1649015.313097526}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":1233.7731,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":691503.5054826069}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":1233.7731,\"isBanned\":false,\"isMember\":true,\"name\":\"The Covenant\",\"playerReputation\":663083.3739984402}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":884.943,\"isBanned\":false,\"isMember\":true,\"name\":\"ECorp\",\"playerReputation\":466884.5617778425}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":884.9429,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":438734.8346764262}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":884.9429,\"isBanned\":false,\"isMember\":true,\"name\":\"Clarke Incorporated\",\"playerReputation\":415492.8172425588}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":1232.7731,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":883.9428,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":883.9428,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":883.9428,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":1232.7731,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":1232.7731,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":1232.7731,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":883.9428,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":94.345,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":884.9428,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":1232.7731,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":884.9429,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":883.9428,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":883.9428,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"dd-MM-yyyy hh:mm:ss\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":25,\"MaxLogCapacity\":50,\"MaxPortCapacity\":65,\"MaxTerminalCapacity\":350,\"RemoteFileApiPort\":52466,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":14,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"one-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":true,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"30","AllGangsSave":"","LastExportBonus":"1691703851730","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"storedCycles\":0}}"}}