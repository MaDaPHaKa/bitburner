{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":98700,\"max\":98700},\"skills\":{\"hacking\":126491,\"strength\":3383733,\"defense\":986909,\"dexterity\":181792,\"agility\":216444,\"charisma\":25728,\"intelligence\":0},\"exp\":{\"hacking\":2856933770363.472,\"strength\":15547899.28924605,\"defense\":15547899.28924605,\"dexterity\":17880084.18262803,\"agility\":15547899.28924605,\"charisma\":14356587.079480734,\"intelligence\":0},\"mults\":{\"hacking_chance\":138.22866678354197,\"hacking_speed\":100.4222662067613,\"hacking_money\":1171.9507369029654,\"hacking_grow\":63.50994678623858,\"hacking\":503.50129578130475,\"strength\":25641.875619259346,\"defense\":7478.783813746438,\"dexterity\":1359.1951431707323,\"agility\":1640.210069290227,\"charisma\":196.4858254900127,\"hacking_exp\":355.83165604588294,\"strength_exp\":189.66635302525515,\"defense_exp\":189.66635302525515,\"dexterity_exp\":218.11630597904332,\"agility_exp\":189.66635302525515,\"charisma_exp\":174.12143922490006,\"company_rep\":225.53773377862964,\"faction_rep\":68.27649132038556,\"crime_money\":88.43784654723856,\"crime_success\":47.324600159057425,\"hacknet_node_money\":73.22424678967081,\"hacknet_node_purchase_cost\":0.024283270296906332,\"hacknet_node_ram_cost\":0.03174283698942004,\"hacknet_node_core_cost\":0.03174283698942004,\"hacknet_node_level_cost\":0.026981411441007033,\"work_money\":77.63541833180656,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":313},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"The Red Pill\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"QLink\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":1,\"name\":\"Graphene Bone Lacings\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"Neotra\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"TITN-41 Gene-Modification Injection\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"Hydroflame Left Arm\"},{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"},{\"level\":1,\"name\":\"Unstable Circadian Modulator\"},{\"level\":1,\"name\":\"Graphene BrachiBlades Upgrade\"},{\"level\":1,\"name\":\"Graphene Bionic Arms Upgrade\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":10,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Totally Legit Corporation\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"sciResearch\":879.6196471174592,\"researched\":{},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"products\":{},\"awareness\":2189.324242704976,\"popularity\":551.6394536315631,\"startingCost\":40000000000,\"prodMult\":501.6341461468345,\"state\":\"PURCHASE\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":74.7,\"avgCha\":75.7,\"totalExp\":964.6970000005039,\"avgCre\":80.5,\"avgEff\":68.2,\"totalEmployees\":9,\"totalSalary\":10969.79100000151,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":167273.48566666682,\"Engineer\":104446.80566666684,\"Business\":73168.54855555561,\"Management\":149160.45711111123,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":494049.2970000005},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Aevum\",\"size\":9}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":70.6,\"avgCha\":74.8,\"totalExp\":1068.3155000005015,\"avgCre\":76.9,\"avgEff\":83.4,\"totalEmployees\":9,\"totalSalary\":11458.846500001504,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":178570.32516666685,\"Engineer\":112100.26516666684,\"Business\":71422.38172222227,\"Management\":154802.52344444455,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":516895.49550000054},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Chongqing\",\"size\":9}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":81.7,\"avgCha\":66.6,\"totalExp\":963.8005000004991,\"avgCre\":80.9,\"avgEff\":69.2,\"totalEmployees\":9,\"totalSalary\":10948.201500001498,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":171933.8068333335,\"Engineer\":109352.7868333335,\"Business\":68808.8489444445,\"Management\":137105.61788888898,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":487201.0605000005},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Sector-12\",\"size\":9}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":77.1,\"avgCha\":78.1,\"totalExp\":974.9900000004963,\"avgCre\":75.7,\"avgEff\":70.9,\"totalEmployees\":9,\"totalSalary\":11073.57000000149,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":169332.15666666685,\"Engineer\":108145.51666666684,\"Business\":75494.81222222227,\"Management\":153127.90444444455,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":506100.3900000005},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"New Tokyo\",\"size\":9}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":86,\"avgCha\":77.5,\"totalExp\":971.0300000004946,\"avgCre\":72.2,\"avgEff\":70.5,\"totalEmployees\":9,\"totalSalary\":11180.490000001482,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":172579.77666666682,\"Engineer\":113984.67666666684,\"Business\":77542.69222222228,\"Management\":151618.46444444454,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":515725.61000000045},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Ishima\",\"size\":9}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":100,\"avgInt\":85.1,\"avgCha\":75.8,\"totalExp\":972.5060000004921,\"avgCre\":80.2,\"avgEff\":75.7,\"totalEmployees\":9,\"totalSalary\":11471.118000001476,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":181392.8886666668,\"Engineer\":116843.12866666683,\"Business\":76117.33622222228,\"Management\":152892.07244444458,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":527245.4260000004},\"employeeJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":2,\"Business\":2,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Volhaven\",\"size\":9}}},\"numAdVerts\":17,\"type\":\"Agriculture\",\"name\":\"Veggies\",\"lastCycleRevenue\":27762244406.085968,\"lastCycleExpenses\":5793210242.79922,\"thisCycleRevenue\":0,\"thisCycleExpenses\":57935582782.061646,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":160457.9991666954,\"smartSupplyEnabled\":true,\"smartSupplyStore\":525859.997222318,\"loc\":\"Aevum\",\"size\":657400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":2629299.9861115897,\"qlt\":0,\"dmd\":83.0044868180498,\"dmdR\":[65,85],\"cmp\":57.48181037666567,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":262929.998611159,\"sll\":0,\"prd\":-262929.99616760446,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1479.4776284779414,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":2629299.9861115897,\"qlt\":0,\"dmd\":86.88812904564286,\"dmdR\":[80,99],\"cmp\":69.31447071936746,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":262929.998611159,\"sll\":0,\"prd\":-262929.99616760446,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2297.4026555107907,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1190.1797731531726,\"dmd\":89.96494286161474,\"dmdR\":[70,90],\"cmp\":46.45128345864572,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":525859.9923352089,\"prd\":525859.9923352089,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7293.0411354671605,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":23859210.259066623,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1190.1797731531726,\"dmd\":85.28325300024657,\"dmdR\":[20,90],\"cmp\":49.95411295118254,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":525859.9923352089,\"prd\":525859.9923352089,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2927.5034430472033,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":21352389.37914539,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":9300,\"qlt\":0,\"dmd\":85.47603876029875,\"dmdR\":[80,90],\"cmp\":72.43311041758419,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8262.707576001812,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":726,\"qlt\":0,\"dmd\":93.56059804202195,\"dmdR\":[80,99],\"cmp\":84.71744826498995,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":91330.09424211485,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":6270,\"qlt\":0,\"dmd\":83.10355775264537,\"dmdR\":[80,99],\"cmp\":81.44058823970056,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":12683.450587372188,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":230400,\"qlt\":0,\"dmd\":19.499589376889098,\"dmdR\":[5,99],\"cmp\":25,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":137472.83419713788,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":163753.67289488536,\"smartSupplyEnabled\":true,\"smartSupplyStore\":536845.5763162845,\"loc\":\"Chongqing\",\"size\":657400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":2684227.8815814224,\"qlt\":0,\"dmd\":77.54217671387308,\"dmdR\":[65,85],\"cmp\":50.10055066972824,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":268422.78815814224,\"sll\":0,\"prd\":-268422.78579944634,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1658.0756341112797,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":2684227.8815814224,\"qlt\":0,\"dmd\":80.042832304439,\"dmdR\":[80,99],\"cmp\":73.6998516525876,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":268422.78815814224,\"sll\":0,\"prd\":-268422.78579944634,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1944.4279610156598,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1275.2182120420614,\"dmd\":88.03899563150642,\"dmdR\":[70,90],\"cmp\":48.87934930332684,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":536845.5715988927,\"prd\":536845.5715988927,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6145.310674869922,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":23518333.561756335,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1275.2182120420614,\"dmd\":81.34933473107897,\"dmdR\":[20,90],\"cmp\":46.45471079942987,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":536845.5715988927,\"prd\":536845.5715988927,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2888.3667016472564,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":22991000.38457097,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":9300,\"qlt\":0,\"dmd\":81.20621707452258,\"dmdR\":[80,90],\"cmp\":75.32589657537562,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7427.152861282379,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":726,\"qlt\":0,\"dmd\":98.71442805437741,\"dmdR\":[80,99],\"cmp\":89.43621858978204,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":65860.69449785848,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":6270,\"qlt\":0,\"dmd\":82.13184408936989,\"dmdR\":[80,99],\"cmp\":88.10005437948041,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":16076.499620089895,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":230400,\"qlt\":0,\"dmd\":61.965764079919204,\"dmdR\":[5,99],\"cmp\":44.761551942312174,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74943.34327775767,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":159551.61662912666,\"smartSupplyEnabled\":true,\"smartSupplyStore\":522838.72209708876,\"loc\":\"Sector-12\",\"size\":657400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":2614193.610485444,\"qlt\":0,\"dmd\":73.61279156918872,\"dmdR\":[65,85],\"cmp\":46.252141759690076,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":261419.36104854438,\"sll\":0,\"prd\":-261419.35859135637,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1680.1313134298555,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":2614193.610485444,\"qlt\":0,\"dmd\":94.57489754662792,\"dmdR\":[80,99],\"cmp\":70.55567474987613,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":261419.36104854438,\"sll\":0,\"prd\":-261419.35859135637,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1989.1670904876635,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1244.6906750050243,\"dmd\":76.46570627701986,\"dmdR\":[70,90],\"cmp\":71.3749585420238,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":522838.71718271275,\"prd\":522838.71718271275,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4302.647754233868,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":10895722.845744565,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1244.6906750050243,\"dmd\":44.94833563915892,\"dmdR\":[20,90],\"cmp\":63.33093818424789,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":522838.71718271275,\"prd\":522838.71718271275,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2197.49018593362,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":8322281.427810726,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":9300,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,90],\"cmp\":78.2811014387403,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9165.717398726127,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":726,\"qlt\":0,\"dmd\":89.65153387084753,\"dmdR\":[80,99],\"cmp\":81.94146334201476,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":54853.96273046824,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":6270,\"qlt\":0,\"dmd\":93.68768301913903,\"dmdR\":[80,99],\"cmp\":96.73733696967416,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":18998.25058428648,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":230400,\"qlt\":0,\"dmd\":93.91580386852971,\"dmdR\":[5,99],\"cmp\":27.875528956897696,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":255094.3334894738,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":161537.71342001433,\"smartSupplyEnabled\":true,\"smartSupplyStore\":529459.0447333811,\"loc\":\"New Tokyo\",\"size\":657400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":2647295.2236669054,\"qlt\":0,\"dmd\":67.97106809812932,\"dmdR\":[65,85],\"cmp\":41.80314804187127,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":264729.52236669057,\"sll\":0,\"prd\":-264729.51995154435,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1554.2003404486973,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":2647295.2236669054,\"qlt\":0,\"dmd\":81.43181067829853,\"dmdR\":[80,99],\"cmp\":88.2510479456548,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":264729.52236669057,\"sll\":0,\"prd\":-264729.51995154435,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1786.9762197954792,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1231.2765620420612,\"dmd\":74.76962131141215,\"dmdR\":[70,90],\"cmp\":63.13937593565227,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":529459.0399030887,\"prd\":529459.0399030887,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4797.176108999321,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":14418828.520965183,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1231.2765620420612,\"dmd\":89.557401229105,\"dmdR\":[20,90],\"cmp\":42.349306696932814,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":529459.0399030887,\"prd\":529459.0399030887,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3488.2285442696993,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":27058840.132820126,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":9300,\"qlt\":0,\"dmd\":86.08090150792268,\"dmdR\":[80,90],\"cmp\":73.11906617594205,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9012.494284432752,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":726,\"qlt\":0,\"dmd\":95.71007395962486,\"dmdR\":[80,99],\"cmp\":82.52861614179403,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":87248.892979442,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":6270,\"qlt\":0,\"dmd\":84.96134542743998,\"dmdR\":[80,99],\"cmp\":83.79574014967663,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":17310.751662031573,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":230400,\"qlt\":0,\"dmd\":7.874816809498788,\"dmdR\":[5,99],\"cmp\":36.511985951016314,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":90027.57710411889,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":162033.5390293744,\"smartSupplyEnabled\":true,\"smartSupplyStore\":531111.7967645813,\"loc\":\"Ishima\",\"size\":657400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":2655558.983822907,\"qlt\":0,\"dmd\":83.71272187654016,\"dmdR\":[65,85],\"cmp\":55.623182045679286,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":265555.8983822907,\"sll\":0,\"prd\":-265555.89598570945,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1453.076671443624,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":2655558.983822907,\"qlt\":0,\"dmd\":86.1105847520517,\"dmdR\":[80,99],\"cmp\":68.17652225493639,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":265555.8983822907,\"sll\":0,\"prd\":-265555.89598570945,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2319.5930243769553,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1296.156117597617,\"dmd\":75.5870012101414,\"dmdR\":[70,90],\"cmp\":41.28450723807446,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":531111.7919714189,\"prd\":531111.7919714189,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5674.604366224102,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":25091745.970093813,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1296.156117597617,\"dmd\":38.0278834296459,\"dmdR\":[20,90],\"cmp\":46.32872124203008,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":531111.7919714189,\"prd\":531111.7919714189,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2846.903436616576,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":11425638.002802351,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":9300,\"qlt\":0,\"dmd\":88.39839554637243,\"dmdR\":[80,90],\"cmp\":69.16623861669788,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7779.31520935788,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":726,\"qlt\":0,\"dmd\":94.33206944420404,\"dmdR\":[80,99],\"cmp\":92.00672046202317,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":64876.97254311238,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":6270,\"qlt\":0,\"dmd\":96.65147340540922,\"dmdR\":[80,99],\"cmp\":83.29025440628766,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14980.37202127286,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":230400,\"qlt\":0,\"dmd\":21.763921634659148,\"dmdR\":[5,99],\"cmp\":59.70754566323199,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":29706.07464755648,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":164072.59289682997,\"smartSupplyEnabled\":true,\"smartSupplyStore\":537908.6429894331,\"loc\":\"Volhaven\",\"size\":657400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":2689543.214947166,\"qlt\":0,\"dmd\":76.15731500012132,\"dmdR\":[65,85],\"cmp\":49.0346387445884,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":268954.32149471657,\"sll\":0,\"prd\":-268954.319148347,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1533.6621407326413,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":2689543.214947166,\"qlt\":0,\"dmd\":90.88057332690887,\"dmdR\":[80,99],\"cmp\":66.86701631407806,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":268954.32149471657,\"sll\":0,\"prd\":-268954.319148347,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2139.5042385197344,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1327.9166953753945,\"dmd\":82.31102051892938,\"dmdR\":[70,90],\"cmp\":46.33245414389694,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":537908.638296694,\"prd\":537908.638296694,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7063.176743850667,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":25353772.393387828,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":1327.9166953753945,\"dmd\":55.82672471199941,\"dmdR\":[20,90],\"cmp\":53.415091469041926,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":537908.638296694,\"prd\":537908.638296694,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2619.3605377288172,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":14890928.652025547,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":9300,\"qlt\":0,\"dmd\":82.23799105380735,\"dmdR\":[80,90],\"cmp\":68.20007623618554,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8095.8785611479425,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":726,\"qlt\":0,\"dmd\":98.68281657998517,\"dmdR\":[80,99],\"cmp\":87.40464222128435,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":77406.51792389504,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":6270,\"qlt\":0,\"dmd\":83.47580635379164,\"dmdR\":[80,99],\"cmp\":93.01131324844195,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9025.181047247048,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":230400,\"qlt\":0,\"dmd\":26.105102996424158,\"dmdR\":[5,99],\"cmp\":25.69055490705516,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40100.574791253355,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}}},\"makesProducts\":false,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMats\":[\"Plants\",\"Food\"]}},{\"ctor\":\"Industry\",\"data\":{\"sciResearch\":576009396.4435875,\"researched\":{\"Hi-Tech R&D Laboratory\":true,\"Market-TA.I\":true,\"Market-TA.II\":true,\"Overclock\":true,\"Sti.mu\":true,\"Self-Correcting Assemblers\":true,\"Drones\":true,\"Drones - Assembly\":true,\"Drones - Transport\":true,\"JoyWire\":true,\"Automatic Drug Administration\":true,\"Go-Juice\":true,\"CPH4 Injections\":true,\"uPgrade: Fulcrum\":true,\"uPgrade: Capacity.I\":true,\"uPgrade: Capacity.II\":true,\"Bulk Purchasing\":true,\"AutoBrew\":true,\"AutoPartyManager\":true},\"reqMats\":{\"Plants\":1,\"Water\":0.2},\"products\":{\"Totally Not Cheese\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Totally Not Cheese\",\"dmd\":99.81280000000044,\"cmp\":44.187199999999564,\"mku\":3.0054705302033386e-18,\"pCost\":15684.350719020917,\"sCost\":\"MP\",\"fin\":true,\"prog\":100,\"createCity\":\"Aevum\",\"designCost\":3.378397391203655e+101,\"advCost\":3.378397391203655e+101,\"creationProd\":{\"Operations\":8520484.826771071,\"Engineer\":8549902.180769464,\"Business\":2380135.8003340983,\"Management\":9971032.845266785,\"Research & Development\":0,\"total\":29421555.65314141,\"Training\":null,\"Unassigned\":null},\"rat\":1092987426814629900,\"qlt\":1177706221995829500,\"per\":1273900944474144300,\"dur\":878244588076334200,\"rel\":1187869070066566400,\"aes\":903843063049579800,\"fea\":1294626397989985500,\"data\":{\"Aevum\":[0,20219.703678412974,20219.703678412974],\"Chongqing\":[0,3734.66295463298,3734.66295463298],\"Ishima\":[7.275957614183426e-12,3730.374149030694,3730.374149030694],\"New Tokyo\":[7.275957614183426e-12,3725.6875965675003,3725.6875965675003],\"Sector-12\":[1.4551915228366852e-11,3745.74148900638,3745.7414890063797],\"Volhaven\":[0,3744.507152870216,3744.507152870216]},\"loc\":\"\",\"siz\":0.060000000000000005,\"reqMats\":{\"Plants\":1,\"Water\":0.2},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":true,\"marketTa2Price\":{\"Aevum\":2.3962568381845313e+94,\"Chongqing\":1.5827960574032815e+94,\"Ishima\":1.5879013193646264e+94,\"New Tokyo\":1.5919337381960985e+94,\"Sector-12\":1.5877684521317346e+94,\"Volhaven\":1.5842918661575665e+94},\"maxsll\":3744.5071528702165}},\"Totally Not Lemon Haze\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Totally Not Lemon Haze\",\"dmd\":99.86760000000031,\"cmp\":14.132400000000091,\"mku\":3.212063955618126e-18,\"pCost\":15684.350719020917,\"sCost\":\"MP\",\"fin\":true,\"prog\":100,\"createCity\":\"Aevum\",\"designCost\":2.1961363082335696e+101,\"advCost\":2.1961363082335696e+101,\"creationProd\":{\"Operations\":8520496.330602579,\"Engineer\":8549919.436516723,\"Business\":2380138.6094092336,\"Management\":9971044.349098293,\"Research & Development\":0,\"total\":29421598.72562682,\"Training\":null,\"Unassigned\":null},\"rat\":1054324897726059800,\"qlt\":1136047008614891100,\"per\":1228839239390121700,\"dur\":847178197521885300,\"rel\":1145849971184628900,\"aes\":871870859717236900,\"fea\":1248831221515433200,\"data\":{\"Aevum\":[0,20219.703678412974,20219.703678412974],\"Chongqing\":[7.275957614183426e-12,3734.66295463298,3734.6629546329796],\"Ishima\":[0,3730.374149030694,3730.374149030695],\"New Tokyo\":[0,3725.6875965675003,3725.6875965675003],\"Sector-12\":[7.275957614183426e-12,3745.74148900638,3745.7414890063797],\"Volhaven\":[7.275957614183426e-12,3744.507152870216,3744.507152870215]},\"loc\":\"\",\"siz\":0.060000000000000005,\"reqMats\":{\"Plants\":1,\"Water\":0.2},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":true,\"marketTa2Price\":{\"Aevum\":2.6522246724737104e+94,\"Chongqing\":1.751870120115991e+94,\"Ishima\":1.7575207254757974e+94,\"New Tokyo\":1.7619838867463905e+94,\"Sector-12\":1.7573736653828966e+94,\"Volhaven\":1.753525710960928e+94},\"maxsll\":3744.507152870215}},\"Totally Not White Widow\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Totally Not White Widow\",\"dmd\":99.94000000000014,\"cmp\":10.060000000000038,\"mku\":2.916251613718821e-18,\"pCost\":15684.350719020917,\"sCost\":\"MP\",\"fin\":true,\"prog\":100,\"createCity\":\"Aevum\",\"designCost\":3.733757230978804e+101,\"advCost\":3.733757230978804e+101,\"creationProd\":{\"Operations\":8520519.338265598,\"Engineer\":8549953.948011253,\"Business\":2380144.2275595064,\"Management\":9971067.356761308,\"Research & Development\":0,\"total\":29421684.870597675,\"Training\":null,\"Unassigned\":null},\"rat\":1127373688661894000,\"qlt\":1214758112227933200,\"per\":1313979933403961900,\"dur\":905874816942063500,\"rel\":1225239432810176800,\"aes\":932277642040672800,\"fea\":1335356321151393800,\"data\":{\"Aevum\":[0,20219.703678412974,20219.703678412974],\"Chongqing\":[0,3734.66295463298,3734.66295463298],\"Ishima\":[7.275957614183426e-12,3730.374149030694,3730.374149030694],\"New Tokyo\":[0,3725.6875965675003,3725.6875965675003],\"Sector-12\":[0,3745.74148900638,3745.74148900638],\"Volhaven\":[0,3744.507152870216,3744.507152870216]},\"loc\":\"\",\"siz\":0.060000000000000005,\"reqMats\":{\"Plants\":1,\"Water\":0.2},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":true,\"marketTa2Price\":{\"Aevum\":3.26837441375164e+94,\"Chongqing\":2.158854615986486e+94,\"Ishima\":2.16581793782414e+94,\"New Tokyo\":2.1713179553198854e+94,\"Sector-12\":2.1656367135674204e+94,\"Volhaven\":2.1608948242740395e+94},\"maxsll\":3744.507152870216}},\"Totally Not NY Diesel\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Totally Not NY Diesel\",\"dmd\":99.98040000000005,\"cmp\":0.019599999999999992,\"mku\":3.2032380149361745e-18,\"pCost\":15684.350719020917,\"sCost\":\"MP\",\"fin\":true,\"prog\":100,\"createCity\":\"Aevum\",\"designCost\":2.0575306994179695e+101,\"advCost\":2.0575306994179695e+101,\"creationProd\":{\"Operations\":8520530.842097111,\"Engineer\":8549971.203758521,\"Business\":2380147.036634642,\"Management\":9971078.860592825,\"Research & Development\":0,\"total\":29421727.9430831,\"Training\":null,\"Unassigned\":null},\"rat\":1069471528306657000,\"qlt\":1152367965780512800,\"per\":1246493964995900000,\"dur\":859348871214148400,\"rel\":1162310565373059000,\"aes\":884395325694416800,\"fea\":1266772107303505400,\"data\":{\"Aevum\":[0,20219.70310828535,20219.703108285357],\"Chongqing\":[0,3734.662848890222,3734.662848890223],\"Ishima\":[0,3730.374043105881,3730.374043105881],\"New Tokyo\":[7.275957614183426e-12,3725.687490391534,3725.687490391533],\"Sector-12\":[7.275957614183426e-12,3745.7413837859704,3745.7413837859704],\"Volhaven\":[1.4551915228366852e-11,3744.5070475641114,3744.50704756411]},\"loc\":\"\",\"siz\":0.060000000000000005,\"reqMats\":{\"Plants\":1,\"Water\":0.2},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":true,\"marketTa2Price\":{\"Aevum\":2.926143440481175e+94,\"Chongqing\":1.9328012871819283e+94,\"Ishima\":1.9390354807591612e+94,\"New Tokyo\":1.943959592384565e+94,\"Sector-12\":1.9388732321707387e+94,\"Volhaven\":1.9346278653943466e+94},\"maxsll\":3744.50704756411}},\"Totally Not Super Skunk\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Totally Not Super Skunk\",\"dmd\":0.001,\"cmp\":0.013199999999999998,\"mku\":0,\"pCost\":0,\"sCost\":\"MP\",\"fin\":false,\"prog\":72.40864516181924,\"createCity\":\"Aevum\",\"designCost\":8.144334221544715e+100,\"advCost\":8.144334221544715e+100,\"creationProd\":{\"Operations\":6169604.897455602,\"Engineer\":6190924.241514437,\"Business\":1723433.187621926,\"Management\":7219927.065069962,\"Research & Development\":0,\"total\":21303889.391661927,\"Training\":null,\"Unassigned\":null},\"rat\":0,\"qlt\":0,\"per\":0,\"dur\":0,\"rel\":0,\"aes\":0,\"fea\":0,\"data\":{\"Aevum\":[0,0,0],\"Chongqing\":[0,0,0],\"Ishima\":[0,0,0],\"New Tokyo\":[0,0,0],\"Sector-12\":[0,0,0],\"Volhaven\":[0,0,0]},\"loc\":\"\",\"siz\":0,\"reqMats\":{},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":true,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0},\"maxsll\":0}}},\"awareness\":1.7976931348623157e+308,\"popularity\":1.7976931348623157e+308,\"startingCost\":20000000000,\"prodMult\":6,\"state\":\"PURCHASE\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":110,\"maxHap\":110,\"maxMor\":110,\"avgEne\":110,\"avgHap\":110,\"avgMor\":110,\"avgInt\":75.56810631229236,\"avgCha\":73.95681063122922,\"totalExp\":29157.217500010876,\"avgCre\":74.47176079734221,\"avgEff\":75.21262458471763,\"totalEmployees\":300,\"totalSalary\":356760.0245930559,\"autoCoffee\":true,\"autoParty\":true,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":8520538.277444998,\"Engineer\":8549982.356780354,\"Business\":2380148.8522428474,\"Management\":9971086.29594071,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":29421755.782408908},\"employeeJobs\":{\"Operations\":86,\"Engineer\":86,\"Business\":42,\"Management\":86,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":86,\"Engineer\":86,\"Business\":42,\"Management\":86,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Aevum\",\"size\":300}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":110,\"maxHap\":110,\"maxMor\":110,\"avgEne\":110,\"avgHap\":110,\"avgMor\":110,\"avgInt\":73.51867219917013,\"avgCha\":74.60580912863064,\"totalExp\":22953.80700000844,\"avgCre\":74.10373443983403,\"avgEff\":76.90456431535267,\"totalEmployees\":240,\"totalSalary\":284237.02265977627,\"autoCoffee\":true,\"autoParty\":true,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":99306.34932865143,\"Engineer\":99221.80831725102,\"Business\":56478.84835249997,\"Management\":117311.01458686714,\"Research & Development\":31109681.030814208,\"Training\":0,\"Unassigned\":0,\"total\":31481999.051399477},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"loc\":\"Chongqing\",\"size\":240}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":110,\"maxHap\":110,\"maxMor\":110,\"avgEne\":110,\"avgHap\":110,\"avgMor\":110,\"avgInt\":75.67219917012451,\"avgCha\":75.87136929460581,\"totalExp\":23138.80700000844,\"avgCre\":75.64315352697099,\"avgEff\":76.02904564315355,\"totalEmployees\":240,\"totalSalary\":287731.77369712084,\"autoCoffee\":true,\"autoParty\":true,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":100025.20348997581,\"Engineer\":100096.72242417533,\"Business\":57665.93237818293,\"Management\":118362.14016808783,\"Research & Development\":31711233.981542293,\"Training\":0,\"Unassigned\":0,\"total\":32087383.980002716},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"loc\":\"Sector-12\",\"size\":240}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":110,\"maxHap\":110,\"maxMor\":110,\"avgEne\":110,\"avgHap\":110,\"avgMor\":110,\"avgInt\":75.5850622406639,\"avgCha\":75.8838174273859,\"totalExp\":22828.80700000844,\"avgCre\":74.50207468879665,\"avgEff\":73.79668049792528,\"totalEmployees\":240,\"totalSalary\":284319.118095461,\"autoCoffee\":true,\"autoParty\":true,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":98288.40002699514,\"Engineer\":98626.01156532673,\"Business\":57649.307879825385,\"Management\":117267.9137923271,\"Research & Development\":31388154.71623924,\"Training\":0,\"Unassigned\":0,\"total\":31759986.349503715},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"loc\":\"New Tokyo\",\"size\":240}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":110,\"maxHap\":110,\"maxMor\":110,\"avgEne\":110,\"avgHap\":110,\"avgMor\":110,\"avgInt\":76.0290456431535,\"avgCha\":74.68879668049793,\"totalExp\":22935.80700000844,\"avgCre\":75.597510373444,\"avgEff\":74.6680497925311,\"totalEmployees\":240,\"totalSalary\":285515.4707925564,\"autoCoffee\":true,\"autoParty\":true,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":99226.374039751,\"Engineer\":99399.2763876348,\"Business\":57156.688890207464,\"Management\":116554.98808541494,\"Research & Development\":31683861.670003574,\"Training\":0,\"Unassigned\":0,\"total\":32056198.997406583},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"loc\":\"Ishima\",\"size\":240}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":110,\"maxHap\":110,\"maxMor\":110,\"avgEne\":110,\"avgHap\":110,\"avgMor\":110,\"avgInt\":73.41493775933615,\"avgCha\":75.79668049792531,\"totalExp\":23615.482000008255,\"avgCre\":74.93775933609965,\"avgEff\":77.13278008298757,\"totalEmployees\":240,\"totalSalary\":287769.59952699585,\"autoCoffee\":true,\"autoParty\":true,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":99686.69473978953,\"Engineer\":99366.4640922154,\"Business\":57057.67824952132,\"Management\":118706.88193213391,\"Research & Development\":31203882.784225244,\"Training\":0,\"Unassigned\":0,\"total\":31578700.503238905},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":236,\"Training\":0,\"Unassigned\":0},\"loc\":\"Volhaven\",\"size\":240}}},\"numAdVerts\":3667,\"type\":\"Tobacco\",\"name\":\"Totally Not Ganja\",\"lastCycleRevenue\":3.664237923000895e+99,\"lastCycleExpenses\":580216811.654667,\"thisCycleRevenue\":0,\"thisCycleExpenses\":5802671541.985861,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":3,\"sizeUsed\":48527.28882819114,\"smartSupplyEnabled\":true,\"smartSupplyStore\":80878.8147136519,\"loc\":\"Aevum\",\"size\":155700,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":161757.6294273038,\"qlt\":0,\"dmd\":85,\"dmdR\":[65,85],\"cmp\":50.3442936118184,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":16175.76294273038,\"sll\":0,\"prd\":-16175.762828704856,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1503.7369308194113,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":808788.147136519,\"qlt\":0,\"dmd\":54.85118488467414,\"dmdR\":[20,90],\"cmp\":41.1803322685519,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":80878.8147136519,\"sll\":0,\"prd\":-80878.81414352427,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3803.5042424440685,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":83.05342569439472,\"dmdR\":[80,90],\"cmp\":82.77792385821252,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7511.332519472002,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":97.26489592690952,\"dmdR\":[80,99],\"cmp\":94.96903170741666,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":65798.38855026342,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":97.83265346182505,\"dmdR\":[80,99],\"cmp\":83.64088430543583,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9477.267820518218,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":48.574168809492654,\"dmdR\":[5,99],\"cmp\":62.227900822123324,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":55753.35580276229,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":8963.191091119153,\"smartSupplyEnabled\":true,\"smartSupplyStore\":14938.65181853192,\"loc\":\"Chongqing\",\"size\":51900,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":29877.303637063844,\"qlt\":0,\"dmd\":65.59863707801394,\"dmdR\":[65,85],\"cmp\":57.66983045804554,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":2987.730363706384,\"sll\":0,\"prd\":-2987.7303425578325,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1365.725438314001,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":149386.5181853192,\"qlt\":0,\"dmd\":54.474578221340586,\"dmdR\":[20,90],\"cmp\":38.67503264730771,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":14938.65181853192,\"sll\":0,\"prd\":-14938.651712789162,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2779.592367653414,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80.91445597243526,\"dmdR\":[80,90],\"cmp\":85.14819854200147,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9463.337257974108,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":99,\"dmdR\":[80,99],\"cmp\":89.84682836619719,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":82795.64046612412,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":84.66803585896808,\"dmdR\":[80,99],\"cmp\":81.15539074159238,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":11941.080201870835,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":87.58421683923807,\"dmdR\":[5,99],\"cmp\":70.02409568315996,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":166580.9334885601,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":8989.779573615311,\"smartSupplyEnabled\":true,\"smartSupplyStore\":14982.96595602552,\"loc\":\"Sector-12\",\"size\":51900,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":29965.931912051034,\"qlt\":0,\"dmd\":83.7318849926947,\"dmdR\":[65,85],\"cmp\":41.064080458930015,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":2996.593191205104,\"sll\":0,\"prd\":-2996.5931701610225,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1626.5171091311033,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":149829.65956025518,\"qlt\":0,\"dmd\":66.45040450955625,\"dmdR\":[20,90],\"cmp\":56.44330207718929,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":14982.96595602552,\"sll\":0,\"prd\":-14982.96585080511,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3217.0018157255404,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":87.4880546795291,\"dmdR\":[80,90],\"cmp\":82.10965935746529,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8301.490261258827,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":87.13244176863792,\"dmdR\":[80,99],\"cmp\":90.76620771152271,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75566.25732736099,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":98.41698635698489,\"dmdR\":[80,99],\"cmp\":85.48993645248198,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15953.949030220167,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":59.090748718160555,\"dmdR\":[5,99],\"cmp\":58.32889220066827,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":47367.65030331947,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":8941.650231762002,\"smartSupplyEnabled\":true,\"smartSupplyStore\":14902.750386270001,\"loc\":\"New Tokyo\",\"size\":51900,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":29805.500772540006,\"qlt\":0,\"dmd\":70.25831847308619,\"dmdR\":[65,85],\"cmp\":57.61685731106121,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":2980.5500772540004,\"sll\":0,\"prd\":-2980.5500560188075,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1449.4030583552696,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":149027.50386270002,\"qlt\":0,\"dmd\":45.43368561304326,\"dmdR\":[20,90],\"cmp\":32.28141414924953,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":14902.750386270001,\"sll\":0,\"prd\":-14902.750280094035,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3396.8497792123508,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":82.5093526543864,\"dmdR\":[80,90],\"cmp\":91.25310018443228,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7834.973576211115,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":92.27442661860248,\"dmdR\":[80,99],\"cmp\":93.85293202989628,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":76068.2063554606,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":97.37940729313353,\"dmdR\":[80,99],\"cmp\":94.42287325043304,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13139.125773480522,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":20.676258936440046,\"dmdR\":[5,99],\"cmp\":40.68374515787733,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":22970.276426458728,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":8952.897957673666,\"smartSupplyEnabled\":true,\"smartSupplyStore\":14921.496596122775,\"loc\":\"Ishima\",\"size\":51900,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":29842.99319224555,\"qlt\":0,\"dmd\":65,\"dmdR\":[65,85],\"cmp\":45.402578680594225,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":2984.2993192245553,\"sll\":0,\"prd\":-2984.299298039592,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1361.6244444623464,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":149214.96596122775,\"qlt\":0,\"dmd\":32.83112611533149,\"dmdR\":[20,90],\"cmp\":34.15165099401877,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":14921.496596122775,\"sll\":0,\"prd\":-14921.496490197964,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2913.477509906867,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":86.14553853339237,\"dmdR\":[80,90],\"cmp\":69.86367316251915,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8933.345633668667,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":99,\"dmdR\":[80,99],\"cmp\":89.19066622669399,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":66779.80291379064,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":91.0253513432497,\"dmdR\":[80,99],\"cmp\":98.13070127355955,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":10149.643075072725,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":10.534940426766415,\"dmdR\":[5,99],\"cmp\":26.95499886797769,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":49806.94944787361,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":8986.817166888519,\"smartSupplyEnabled\":true,\"smartSupplyStore\":14978.028611480864,\"loc\":\"Volhaven\",\"size\":51900,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":29956.05722296173,\"qlt\":0,\"dmd\":65.73904503692279,\"dmdR\":[65,85],\"cmp\":55.51331679116258,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":2995.605722296173,\"sll\":0,\"prd\":-2995.605701234952,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1377.9058657854887,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":149780.28611480864,\"qlt\":0,\"dmd\":59.43207201234361,\"dmdR\":[20,90],\"cmp\":42.53270435910886,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":14978.028611480864,\"sll\":0,\"prd\":-14978.02850617476,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2861.288970647086,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":84.14035106609323,\"dmdR\":[80,90],\"cmp\":72.65176591455895,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8072.607423911651,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":89.72318265976642,\"dmdR\":[80,99],\"cmp\":88.44334342419785,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":62467.07420062298,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":88.4514899534643,\"dmdR\":[80,99],\"cmp\":84.84465828095712,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15329.160532484157,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":26.016758468782996,\"dmdR\":[5,99],\"cmp\":75,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":57146.027392391145,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}}},\"makesProducts\":true,\"reFac\":0.15,\"sciFac\":0.75,\"hwFac\":0.15,\"robFac\":0.2,\"aiFac\":0.15,\"advFac\":0.2,\"prodMats\":[]}}],\"funds\":9.158608274100879e+101,\"revenue\":3.664237923000895e+99,\"expenses\":6373427054.453887,\"fundingRound\":4,\"public\":true,\"totalShares\":1000000000,\"numShares\":100000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendRate\":0.01,\"dividendTax\":0.09999999999999995,\"issuedShares\":0,\"sharePrice\":2.624795184312556e+37,\"storedCycles\":92697,\"cycleValuation\":1.8708124968596118e+104,\"valuationsList\":[1.8699888950299035e+104,1.8702061678220883e+104,1.8704070663645467e+104,1.8706119871313257e+104,1.8708124968596118e+104],\"valuation\":1.8704053226414952e+104,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":2}},\"unlockUpgrades\":[0,1,0,0,0,1,1,1,1],\"upgrades\":[3450,3450,30,526,3450,3450,3450,3450,3168,3145],\"upgradeMultipliers\":[104.5,346,1.03,3.63,346,346,346,346,32.68,158.25]}},\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Illuminati\",\"Daedalus\",\"The Covenant\",\"MegaCorp\",\"Bachman & Associates\",\"Blade Industries\",\"NWO\",\"Clarke Incorporated\",\"Four Sigma\",\"KuaiGong International\",\"Sector-12\",\"Speakers for the Dead\",\"The Dark Army\",\"The Syndicate\",\"Silhouette\",\"Tetrads\",\"Slum Snakes\",\"Netburners\",\"Tian Di Hui\",\"Shadows of Anarchy\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":335781.1045865693,\"onlineTimeSeconds\":5973.399999996758,\"ram\":64,\"totalMoneyGenerated\":2005325372.2352169,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":335781.1045865693,\"onlineTimeSeconds\":5969.7999999967615,\"ram\":64,\"totalMoneyGenerated\":2002567773.272631,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":335781.1045865693,\"onlineTimeSeconds\":5969.199999996762,\"ram\":64,\"totalMoneyGenerated\":2002129128.923356,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":335781.1045865693,\"onlineTimeSeconds\":5969.199999996762,\"ram\":64,\"totalMoneyGenerated\":2000719403.7379391,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":335781.1045865693,\"onlineTimeSeconds\":5968.999999996762,\"ram\":64,\"totalMoneyGenerated\":2001227170.3311646,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":335781.1045865693,\"onlineTimeSeconds\":5968.799999996762,\"ram\":64,\"totalMoneyGenerated\":2001747245.5276608,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":335781.1045865693,\"onlineTimeSeconds\":5968.799999996762,\"ram\":64,\"totalMoneyGenerated\":2000001469.3583755,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":335781.1045865693,\"onlineTimeSeconds\":5968.199999996763,\"ram\":64,\"totalMoneyGenerated\":1999443616.7705228,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":335781.1045865693,\"onlineTimeSeconds\":5967.799999996763,\"ram\":64,\"totalMoneyGenerated\":1999040695.920475,\"name\":\"hacknet-node-8\"}}],\"has4SData\":true,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{\"KuaiGong International\":\"Chief Executive Officer\",\"Icarus Microsystems\":\"Operations Manager\",\"FoodNStuff\":\"Employee\"},\"karma\":-531.75,\"numPeopleKilled\":34,\"location\":\"FoodNStuff\",\"money\":1.4064575606823895e+91,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":1.4064575606823895e+91,\"crime\":67654952.60863754,\"gang\":0,\"hacking\":46853260661037810,\"hacknet\":18012201876.028564,\"hacknet_expenses\":-115537334.61308014,\"hospitalization\":-97400000,\"infiltration\":277182264.27673906,\"sleeves\":-137935918750000,\"stock\":0,\"total\":1.4064575606823895e+91,\"work\":43998483.66556319,\"servers\":-7466185528113.395,\"other\":-5306100000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":1.4065922804167053e+91,\"crime\":235790464.41436195,\"gang\":0,\"hacking\":60406668550941760,\"hacknet\":18027027129.109737,\"hacknet_expenses\":-683433277.1482084,\"hospitalization\":-97400000,\"infiltration\":277182264.27673906,\"sleeves\":-113106301372574240,\"stock\":-7386919792.347961,\"total\":1.4065922801262766e+91,\"work\":1749392554.153188,\"servers\":-21748608089081586000,\"other\":-37160900000,\"augmentations\":-2.9042859973403883e+81}},\"playtimeSinceLastAug\":88179800,\"playtimeSinceLastBitnode\":390152200,\"purchasedServers\":[\"srv-1\",\"srv-2\",\"srv-3\",\"srv-4\",\"srv-5\",\"srv-6\",\"srv-7\",\"srv-8\",\"srv-9\",\"srv-10\",\"srv-11\",\"srv-12\",\"srv-13\",\"srv-14\",\"srv-15\"],\"scriptProdSinceLastAug\":4120323459281404,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":17,\"max\":17},\"skills\":{\"hacking\":2,\"strength\":308,\"defense\":73,\"dexterity\":14,\"agility\":22,\"charisma\":2,\"intelligence\":0},\"exp\":{\"hacking\":0,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.2715375000000004,\"hacking_speed\":2.457652295700001,\"hacking_money\":8.808800000000002,\"hacking_grow\":1,\"hacking\":5.707237361230946,\"hacking_exp\":3.0203926830000003,\"strength\":767.9947685774068,\"strength_exp\":4.30353,\"defense\":183.9963706521458,\"defense_exp\":4.30353,\"dexterity\":37.00816922679378,\"dexterity_exp\":4.9490595,\"agility\":56.494450210275005,\"agility_exp\":4.30353,\"charisma\":5.5085184,\"charisma_exp\":4.399164,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":7.2082135125,\"faction_rep\":2.1821249999999996,\"work_money\":1.32,\"crime_success\":1.2100000000000002,\"crime_money\":2.56953125,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Hydroflame Left Arm\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Unstable Circadian Modulator\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":null,\"memory\":100,\"shock\":0,\"storedCycles\":1242324,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":17,\"max\":17},\"skills\":{\"hacking\":2,\"strength\":308,\"defense\":73,\"dexterity\":14,\"agility\":22,\"charisma\":2,\"intelligence\":0},\"exp\":{\"hacking\":0,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.2715375000000004,\"hacking_speed\":2.4576522957000004,\"hacking_money\":8.808800000000002,\"hacking_grow\":1,\"hacking\":5.707237361230947,\"hacking_exp\":3.0203926830000003,\"strength\":767.9947685774071,\"strength_exp\":4.30353,\"defense\":183.99637065214577,\"defense_exp\":4.30353,\"dexterity\":37.008169226793775,\"dexterity_exp\":4.9490595,\"agility\":56.49445021027501,\"agility_exp\":4.30353,\"charisma\":5.508518400000002,\"charisma_exp\":4.399164000000001,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":7.2082135125,\"faction_rep\":2.1821249999999996,\"work_money\":1.32,\"crime_success\":1.2100000000000002,\"crime_money\":2.56953125,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Hydroflame Left Arm\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Unstable Circadian Modulator\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveSynchroWork\",\"data\":{\"type\":\"SYNCHRO\"}},\"memory\":100,\"shock\":0,\"storedCycles\":1,\"sync\":30.865000000002272}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":17,\"max\":17},\"skills\":{\"hacking\":2,\"strength\":308,\"defense\":73,\"dexterity\":14,\"agility\":22,\"charisma\":2,\"intelligence\":0},\"exp\":{\"hacking\":0,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.2715375000000004,\"hacking_speed\":2.4576522957000004,\"hacking_money\":8.808800000000002,\"hacking_grow\":1,\"hacking\":5.707237361230947,\"hacking_exp\":3.0203926830000003,\"strength\":767.9947685774071,\"strength_exp\":4.30353,\"defense\":183.99637065214577,\"defense_exp\":4.30353,\"dexterity\":37.008169226793775,\"dexterity_exp\":4.9490595,\"agility\":56.49445021027501,\"agility_exp\":4.30353,\"charisma\":5.508518400000002,\"charisma_exp\":4.399164000000001,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":7.2082135125,\"faction_rep\":2.1821249999999996,\"work_money\":1.32,\"crime_success\":1.2100000000000002,\"crime_money\":2.56953125,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Hydroflame Left Arm\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Unstable Circadian Modulator\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveSynchroWork\",\"data\":{\"type\":\"SYNCHRO\"}},\"memory\":100,\"shock\":0,\"storedCycles\":4,\"sync\":30.86040000000229}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":17,\"max\":17},\"skills\":{\"hacking\":2,\"strength\":308,\"defense\":73,\"dexterity\":14,\"agility\":22,\"charisma\":2,\"intelligence\":0},\"exp\":{\"hacking\":0,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.2715375000000004,\"hacking_speed\":2.4576522957000004,\"hacking_money\":8.808800000000002,\"hacking_grow\":1,\"hacking\":5.707237361230947,\"hacking_exp\":3.0203926830000003,\"strength\":767.9947685774071,\"strength_exp\":4.30353,\"defense\":183.99637065214577,\"defense_exp\":4.30353,\"dexterity\":37.008169226793775,\"dexterity_exp\":4.9490595,\"agility\":56.49445021027501,\"agility_exp\":4.30353,\"charisma\":5.508518400000002,\"charisma_exp\":4.399164000000001,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":7.2082135125,\"faction_rep\":2.1821249999999996,\"work_money\":1.32,\"crime_success\":1.2100000000000002,\"crime_money\":2.56953125,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Hydroflame Left Arm\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Unstable Circadian Modulator\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveSynchroWork\",\"data\":{\"type\":\"SYNCHRO\"}},\"memory\":100,\"shock\":0,\"storedCycles\":2,\"sync\":30.86080000000229}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":17,\"max\":17},\"skills\":{\"hacking\":2,\"strength\":308,\"defense\":73,\"dexterity\":14,\"agility\":22,\"charisma\":2,\"intelligence\":0},\"exp\":{\"hacking\":0,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.2715375000000004,\"hacking_speed\":2.4576522957000004,\"hacking_money\":8.808800000000002,\"hacking_grow\":1,\"hacking\":5.707237361230947,\"hacking_exp\":3.0203926830000003,\"strength\":767.9947685774071,\"strength_exp\":4.30353,\"defense\":183.99637065214577,\"defense_exp\":4.30353,\"dexterity\":37.008169226793775,\"dexterity_exp\":4.9490595,\"agility\":56.49445021027501,\"agility_exp\":4.30353,\"charisma\":5.508518400000002,\"charisma_exp\":4.399164000000001,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":7.2082135125,\"faction_rep\":2.1821249999999996,\"work_money\":1.32,\"crime_success\":1.2100000000000002,\"crime_money\":2.56953125,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Hydroflame Left Arm\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Unstable Circadian Modulator\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveSynchroWork\",\"data\":{\"type\":\"SYNCHRO\"}},\"memory\":100,\"shock\":0,\"storedCycles\":2,\"sync\":30.8588000000023}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":17,\"max\":17},\"skills\":{\"hacking\":2,\"strength\":308,\"defense\":73,\"dexterity\":14,\"agility\":22,\"charisma\":2,\"intelligence\":0},\"exp\":{\"hacking\":0,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.2715375000000004,\"hacking_speed\":2.4576522957000004,\"hacking_money\":8.808800000000002,\"hacking_grow\":1,\"hacking\":5.707237361230947,\"hacking_exp\":3.0203926830000003,\"strength\":767.9947685774071,\"strength_exp\":4.30353,\"defense\":183.99637065214577,\"defense_exp\":4.30353,\"dexterity\":37.008169226793775,\"dexterity_exp\":4.9490595,\"agility\":56.49445021027501,\"agility_exp\":4.30353,\"charisma\":5.508518400000002,\"charisma_exp\":4.399164000000001,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":7.2082135125,\"faction_rep\":2.1821249999999996,\"work_money\":1.32,\"crime_success\":1.2100000000000002,\"crime_money\":2.56953125,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Hydroflame Left Arm\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Unstable Circadian Modulator\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveSynchroWork\",\"data\":{\"type\":\"SYNCHRO\"}},\"memory\":100,\"shock\":0,\"storedCycles\":4,\"sync\":30.85840000000228}}],\"sleevesFromCovenant\":5,\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":12},{\"lvl\":3,\"n\":3}],\"exploits\":[\"EditSaveFile\",\"Unclickable\",\"TimeCompression\",\"UndocumentedFunctionCall\",\"N00dles\",\"Bypass\",\"PrototypeTampering\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1680935638091},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1680935758091},{\"ID\":\"FROZE\",\"unlockedOn\":1680942143690},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1680950846262},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1680965522092},{\"ID\":\"WORKOUT\",\"unlockedOn\":1680971462079},{\"ID\":\"TOR\",\"unlockedOn\":1680973022082},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1681022277906},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1681024917915},{\"ID\":\"TRAVEL\",\"unlockedOn\":1681026177914},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1681027137905},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1681027197905},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1681057981282},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1681149292392},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1681157823985},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1681165143971},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1681241119121},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1681313453401},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1681319093406},{\"ID\":\"NITESEC\",\"unlockedOn\":1681414366741},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1681482482790},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1681497442767},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1681547463960},{\"ID\":\"DONATION\",\"unlockedOn\":1681583940595},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1681592065302},{\"ID\":\"SF1.1\",\"unlockedOn\":1681636847839},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1682029996642},{\"ID\":\"FAST_BN\",\"unlockedOn\":1682189839395},{\"ID\":\"SF12.1\",\"unlockedOn\":1682671134645},{\"ID\":\"CORPORATION\",\"unlockedOn\":1683360752965},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1683364739130},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1683394543033},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1683396763825},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1683397543837},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1683397843828},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1683398263819},{\"ID\":\"SF3.1\",\"unlockedOn\":1683407360488},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1684010489607},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1684010549607},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1684014390206},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1684014450208},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1684014690197},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1684014990195},{\"ID\":\"HACKING_100000\",\"unlockedOn\":1684015830399},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1684015950399},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1684431554830},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1684431794830},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1684431794833},{\"ID\":\"N00DLES\",\"unlockedOn\":1684431854834},{\"ID\":\"BYPASS\",\"unlockedOn\":1684432173196},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1684432173200},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1684530041966},{\"ID\":\"4S\",\"unlockedOn\":1684955415201}],\"terminalCommandHistory\":[\"run misc/buy-and-upgrade-servers.js\",\"run corp/tob-mantainance.js\",\"run startup-hwgw.js\",\"connect darkweb\",\"buy -a\",\"home\",\"connect darkweb\",\"buy -a\",\"run startup-hwgw.js\",\"home\",\"run corp/tob-mantainance.js\",\"run startup-hwgw.js\",\"clear\",\"run startup-hwgw.js\",\"run corp/tob-mantainance.js\",\"clear\",\"connect darkweb\",\"buy -a\",\"home\",\"run startup-hwgw.js\",\"clear\",\"run tests/stats.js\",\"run corp/tob-mantainance.js\",\"run startup-hwgw.js\",\"connect darkweb\",\"buy -a\",\"home\",\"run misc/buy-and-upgrade-servers.js\",\"clear\",\"run tests/stats.js\",\"ls\",\"nano test.js\",\"clear\",\"mem test.js\",\"run test.js\",\"clear\",\"kill test.js\",\"ls\",\"clear\",\"run startup-hwgw.js\",\"run corp/tob-mantainance.js\",\"clear\",\"ls\",\"kill managers/hwgw-manager.js\",\"kill scan-and-nuke/scan-and-update-file.js\",\"clear\",\"kill logs/logmanager.js\",\"clear\",\"run kill-all-script.js\",\"run corp/tob-mantainance.js\"],\"lastUpdate\":1685043644083,\"lastSave\":1685043642416,\"totalPlaytime\":4108605600,\"currentWork\":null,\"focus\":false,\"entropy\":0,\"identifier\":\"ba2e25a8340bf\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":8,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"20.2.3.7\",\"isConnectedTo\":true,\"maxRam\":1073741824,\"messages\":[\"hackers-starting-handbook.lit\",\"icarus.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\",\"Formulas.exe\"],\"ramUsed\":1024,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/corp/tob-mantainance.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":507.6099999999797,\"pid\":1173422,\"ramUsage\":1024,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/89f038c4-a3c2-4fd4-930d-d6fb89a01e6d\",\"moduleSequenceNumber\":372},{\"filename\":\"/corp/product-functions.js\",\"url\":\"blob:https://danielyxie.github.io/730620fd-9667-498f-ae4d-d990f44d2109\",\"moduleSequenceNumber\":391},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:https://danielyxie.github.io/abbd620c-4aed-4a1a-a6de-ab2b690152ff\",\"moduleSequenceNumber\":387},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:https://danielyxie.github.io/bbdc5a7d-dbc2-4192-bf94-366b29f3f077\",\"moduleSequenceNumber\":387},{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/58b7c06a-2603-45ee-b871-8e0e9161d2e9\",\"moduleSequenceNumber\":372},{\"filename\":\"/corp/corp-functions.js\",\"url\":\"blob:https://danielyxie.github.io/4ed0c728-5945-4d97-bdbf-c1a0754db2dc\",\"moduleSequenceNumber\":388},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/318fe0e4-605e-485a-9bb8-411084a627bd\",\"moduleSequenceNumber\":366},{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/60401e9f-324e-4678-a49b-a8c5fe60f98d\",\"moduleSequenceNumber\":372},{\"filename\":\"/corp/tob-mantainance.js\",\"url\":\"blob:https://danielyxie.github.io/0de2896c-d685-4a96-8707-5913ab2931ba\",\"moduleSequenceNumber\":618}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const secThresh = ns.args[1];\\n    const moneyThresh = ns.args[2];\\n    const numberOfThread = ns.args[3];\\n    let securityLevel = ns.getServerSecurityLevel(target);\\n    let serverMoney = ns.getServerMoneyAvailable(target);\\n    let moneyOk = serverMoney > moneyThresh;\\n    let secOk = securityLevel < secThresh;\\n    while (moneyOk && secOk) {\\n        await ns.hack(target, { threads: numberOfThread });\\n        securityLevel = ns.getServerSecurityLevel(target);\\n        serverMoney = ns.getServerMoneyAvailable(target);\\n        moneyOk = serverMoney > moneyThresh;\\n        secOk = securityLevel < secThresh;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby9zZXJ2ZXItaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQ3BDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUN6QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLElBQUksYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0RCxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckQsSUFBSSxPQUFPLEdBQUcsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUN4QyxJQUFJLEtBQUssR0FBRyxhQUFhLEdBQUcsU0FBUyxDQUFDO0lBQ3RDLE9BQU8sT0FBTyxJQUFJLEtBQUssRUFBRTtRQUN2QixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7UUFDbkQsYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsRCxXQUFXLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELE9BQU8sR0FBRyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLEtBQUssR0FBRyxhQUFhLEdBQUcsU0FBUyxDQUFDO0tBQ25DO0FBQ0gsQ0FBQyJ9\",\"filename\":\"/mono/server-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyThresh = ns.args[1];\\n    const secThresh = ns.args[2];\\n    const numberOfThread = ns.args[3];\\n    let serverMoney = ns.getServerMoneyAvailable(target);\\n    let serverSec = ns.getServerSecurityLevel(target);\\n    while (serverMoney < moneyThresh && serverSec < secThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        await ns.grow(target, { threads: numberOfThread });\\n        serverMoney = ns.getServerMoneyAvailable(target);\\n        serverSec = ns.getServerSecurityLevel(target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby9zZXJ2ZXItZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQ3BDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDekMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUN2QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyRCxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEQsT0FBTyxXQUFXLEdBQUcsV0FBVyxJQUFJLFNBQVMsR0FBRyxTQUFTLEVBQUU7UUFDekQsNERBQTREO1FBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNuRCxXQUFXLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELFNBQVMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDL0M7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-grow.js\",\"url\":\"blob:file:///96fbf436-cf5c-4bef-9bdb-c9d0791369c7\",\"moduleSequenceNumber\":17761}],\"dependents\":[],\"ramUsage\":1.95,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const secThresh = ns.args[1];\\n    const numberOfThread = ns.args[2];\\n    let serverSec = ns.getServerSecurityLevel(target);\\n    while (serverSec > secThresh) {\\n        await ns.weaken(target, { threads: numberOfThread });\\n        serverSec = ns.getServerSecurityLevel(target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb25vL3NlcnZlci13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUNwQyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQ3ZDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDNUMsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xELE9BQU8sU0FBUyxHQUFHLFNBQVMsRUFBRTtRQUM1QixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7UUFDckQsU0FBUyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUMvQztBQUNILENBQUMifQ==\",\"filename\":\"/mono/server-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weaken.js\",\"url\":\"blob:file:///efb1849a-17b8-4a72-afaf-241ef6ae3a46\",\"moduleSequenceNumber\":19355}],\"dependents\":[],\"ramUsage\":1.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class FileHandler {\\n    #file;\\n    #ns;\\n    constructor(ns, file) {\\n        this.#ns = ns;\\n        this.#file = file;\\n    }\\n    newFile() {\\n        this.#ns.write(this.#file, '', 'w');\\n    }\\n    write(data, mode = 'a') {\\n        this.#ns.write(this.#file, JSON.stringify(data), mode);\\n    }\\n    writeText(data, mode = 'a') {\\n        this.#ns.write(this.#file, data, mode);\\n    }\\n    read() {\\n        let dataString = this.#ns.read(this.#file);\\n        if (dataString.length > 1) {\\n            return JSON.parse(dataString);\\n        }\\n        else {\\n            return [];\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmlsZXMvZmlsZWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLFdBQVc7SUFDdEIsS0FBSyxDQUFNO0lBQ1gsR0FBRyxDQUFLO0lBRVIsWUFBWSxFQUFNLEVBQUUsSUFBUztRQUMzQixJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFTLEVBQUUsT0FBOEIsR0FBRztRQUNoRCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFTLEVBQUUsT0FBOEIsR0FBRztRQUNwRCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMvQjthQUFNO1lBQ0wsT0FBTyxFQUFFLENBQUM7U0FDWDtJQUNILENBQUM7Q0FDRiJ9\",\"filename\":\"/files/filehandler.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FARM_SERVER_GB, MAX_FARMER_SERVER_NUM, MAX_RAM, MAX_SERVER_NUM, SERVER_GB_WANTED, SERVER_NAME_PREFIX, XP_FARMER_SERVER_PREFIX, } from 'const/servers';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const purch = ns.getPurchasedServers().filter((el) => el.startsWith(SERVER_NAME_PREFIX));\\n    const farm = ns.getPurchasedServers().filter((el) => el.startsWith(XP_FARMER_SERVER_PREFIX));\\n    let totalCost = 0;\\n    let farmingCost = 0;\\n    let serverCost = 0;\\n    let upgradeCost = 0;\\n    let farmUpgradeCost = 0;\\n    for (let server of purch) {\\n        if (server == 'home')\\n            continue;\\n        const serverRam = ns.getServerMaxRam(server);\\n        const cost = ns.getPurchasedServerUpgradeCost(server, SERVER_GB_WANTED);\\n        if (cost > 0) {\\n            if (cost > upgradeCost)\\n                upgradeCost = cost;\\n            serverCost += cost;\\n            totalCost += cost;\\n        }\\n    }\\n    for (let count = purch.length; count < MAX_SERVER_NUM; count++) {\\n        const cost = ns.getPurchasedServerCost(SERVER_GB_WANTED);\\n        if (cost > 0) {\\n            serverCost += cost;\\n            totalCost += cost;\\n        }\\n    }\\n    for (let server of farm) {\\n        if (server == 'home')\\n            continue;\\n        const serverRam = ns.getServerMaxRam(server);\\n        const cost = ns.getPurchasedServerUpgradeCost(server, FARM_SERVER_GB);\\n        if (cost > 0) {\\n            if (cost > farmUpgradeCost)\\n                farmUpgradeCost = cost;\\n            farmingCost += cost;\\n            totalCost += cost;\\n        }\\n    }\\n    for (let count = farm.length; count < MAX_FARMER_SERVER_NUM; count++) {\\n        const cost = ns.getPurchasedServerCost(FARM_SERVER_GB);\\n        if (cost > 0) {\\n            farmingCost += cost;\\n            totalCost += cost;\\n        }\\n    }\\n    ns.tprint('massima ram: ', ns.getPurchasedServerMaxRam());\\n    ns.tprint('costo per arrivare a ' + MAX_SERVER_NUM + ' server da ' + SERVER_GB_WANTED + ' : ', ns.formatNumber(serverCost, 3));\\n    ns.tprint('costo per arrivare a ' + MAX_FARMER_SERVER_NUM + ' xp farm server da ' + FARM_SERVER_GB + ' : ', ns.formatNumber(farmingCost, 3));\\n    ns.tprint('costo totale: ', ns.formatNumber(totalCost, 3));\\n    ns.tprint('costo server: ', ns.formatNumber(ns.getPurchasedServerCost(SERVER_GB_WANTED), 3));\\n    ns.tprint('costo server upgrade: ', ns.formatNumber(upgradeCost, 3));\\n    ns.tprint('costo server farm: ', ns.formatNumber(ns.getPurchasedServerCost(FARM_SERVER_GB), 3));\\n    ns.tprint('costo server farm upgrade: ', ns.formatNumber(farmUpgradeCost, 3));\\n    ns.tprint('costo server a massima ram: ', ns.formatNumber(ns.getPurchasedServerCost(MAX_RAM), 3));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VzdGlvbmUtc2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pc2MvZ2VzdGlvbmUtc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxjQUFjLEVBQ2QscUJBQXFCLEVBQ3JCLE9BQU8sRUFDUCxjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLGtCQUFrQixFQUNsQix1QkFBdUIsR0FDeEIsTUFBTSxlQUFlLENBQUM7QUFFdkIscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztJQUN6RixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0lBQzdGLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNsQixJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDcEIsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNwQixJQUFJLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFFeEIsS0FBSyxJQUFJLE1BQU0sSUFBSSxLQUFLLEVBQUU7UUFDeEIsSUFBSSxNQUFNLElBQUksTUFBTTtZQUFFLFNBQVM7UUFDL0IsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsNkJBQTZCLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFD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\",\"filename\":\"/misc/gestione-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/a9b47fd4-96f4-4750-bddd-5742081a16d1\",\"moduleSequenceNumber\":4751},{\"filename\":\"/misc/gestione-server.js\",\"url\":\"blob:https://danielyxie.github.io/a3cb3353-7c25-4994-8154-9d06ab9cb38a\",\"moduleSequenceNumber\":4778}],\"dependents\":[],\"ramUsage\":4.3,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerUpgradeCost\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ServerInfo {\\n    name = '';\\n    minSecurity = -1;\\n    maxMoney = -1;\\n    weakenTm = Infinity;\\n    hackValue = 0;\\n    hackChance = 0;\\n    hackXp = 0;\\n    prepped = false;\\n    minHackLevel = 10000;\\n    currHackLevel = 0;\\n    score = -1;\\n    hwgwScore = -1;\\n    farmScore = -1;\\n    calcolaScore() {\\n        const hackLevelFactor = this.minHackLevel > this.currHackLevel * 0.65 ? 0.4 : 1;\\n        const upper = this.maxMoney * this.hackValue * this.currHackLevel;\\n        const lower = (this.weakenTm / 1000 / this.minSecurity) * this.minHackLevel;\\n        this.score = (upper / lower) * hackLevelFactor;\\n        if (isNaN(this.score)) {\\n            this.score = -1;\\n        }\\n        if (this.hackChance >= 0.999) {\\n            this.hwgwScore = this.score;\\n        }\\n        else {\\n            this.hwgwScore = this.score / 2;\\n        }\\n        if (this.hackXp > 0) {\\n            this.farmScore = this.hackXp / (this.weakenTm / 1000);\\n        }\\n        else if (this.name == 'joesguns') {\\n            this.farmScore = 0;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLWluZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvc2VydmVyLWluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLFVBQVU7SUFDckIsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNWLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqQixRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZCxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQ3BCLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZCxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNYLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDaEIsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUNyQixhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNYLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNmLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUVmLFlBQVk7UUFDVixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUNsRSxNQUFNLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzVFLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsZUFBZSxDQUFDO1FBQy9DLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO1FBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLEtBQUssRUFBRTtZQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDN0I7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDakM7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDdkQ7YUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksVUFBVSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztDQUNGIn0=\",\"filename\":\"/utils/server-info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const augmentations = [\\n        // TIANDAN\\n        new Augmentation('Wired Reflexes', 2500000, 'tiandan'),\\n        new Augmentation('Speech Enhancement', 12500000, 'tiandan'),\\n        new Augmentation('ADR-V1 Pheromone Gene', 17500000, 'tiandan'),\\n        new Augmentation('Nuoptimal Nootropic Injector Implant', 20000000, 'tiandan'),\\n        new Augmentation('Social Negotiation Assistant (S.N.A)', 30000000, 'tiandan'),\\n        new Augmentation('Speech Processor Implant', 50000000, 'tiandan'),\\n        new Augmentation('Nanofiber Weave', 125000000, 'tiandan'),\\n        new Augmentation('Neuroreceptor Management Implant', 550000000, 'tiandan'),\\n        // SEC12\\n        new Augmentation('Augmented Targeting I', 15000000, 'sec12'),\\n        new Augmentation('Augmented Targeting II', 42500000, 'sec12'),\\n        new Augmentation('Speech Processor Implant', 50000000, 'sec12'),\\n        new Augmentation('CashRoot Starter Kit', 125000000, 'sec12'),\\n        new Augmentation('Neuralstimulator', 3000000000, 'sec12'),\\n        // CSEC\\n        new Augmentation('Neurotrainer I', 4000000, 'csec'),\\n        new Augmentation('Synaptic Enhancement Implant', 7500000, 'csec'),\\n        new Augmentation('BitWire', 10000000, 'csec'),\\n        new Augmentation('Cranial Signal Processors - Gen I', 70000000, 'csec'),\\n        new Augmentation('Cranial Signal Processors - Gen II', 125000000, 'csec'),\\n        // NITESEC\\n        new Augmentation('Neurotrainer II', 45000000, 'nitesec'),\\n        new Augmentation('Artificial Synaptic Potentiation', 80000000, 'nitesec'),\\n        new Augmentation('Cranial Signal Processors - Gen II', 125000000, 'nitesec'),\\n        new Augmentation('CRTX42-AA Gene Modification', 225000000, 'nitesec'),\\n        new Augmentation('Neural-Retention Enhancement', 250000000, 'nitesec'),\\n        new Augmentation('Embedded Netburner Module', 250000000, 'nitesec'),\\n        new Augmentation('DataJack', 450000000, 'nitesec'),\\n        new Augmentation('Cranial Signal Processors - Gen III', 550000000, 'nitesec'),\\n        new Augmentation('BitWire', 10000000, 'nitesec'),\\n        new Augmentation('Cranial Signal Processors - Gen I', 70000000, 'nitesec'),\\n        // BLACK HAND\\n        new Augmentation('Artificial Synaptic Potentiation', 80000000, 'blackhand'),\\n        new Augmentation('Embedded Netburner Module', 250000000, 'blackhand'),\\n        new Augmentation('DataJack', 450000000, 'blackhand'),\\n        new Augmentation('Cranial Signal Processors - Gen III', 550000000, 'blackhand'),\\n        new Augmentation('The Black Hand', 550000000, 'blackhand'),\\n        new Augmentation('Cranial Signal Processors - Gen IV', 1100000000, 'blackhand'),\\n        new Augmentation('Enhanced Myelin Sheathing', 1375000000, 'blackhand'),\\n        new Augmentation('Embedded Netburner Module Core Implant', 2500000000, 'blackhand'),\\n        new Augmentation('Neuralstimulator', 3000000000, 'blackhand'),\\n    ];\\n    const singled = [];\\n    augmentations.forEach((el) => {\\n        const duplicate = singled.find((sin) => el.name == sin.name);\\n        if (duplicate) {\\n            duplicate.faction += '/' + el.faction;\\n        }\\n        else {\\n            singled.push(el);\\n        }\\n    });\\n    singled.sort(function (a, b) {\\n        return b.cost - a.cost;\\n    });\\n    ns.tprint('ordine acquisto: ', singled);\\n    const costoTotale = calcolaSpesa(singled);\\n    ns.tprint('costo totale: ', ns.formatNumber(costoTotale, 3));\\n}\\nfunction calcolaSpesa(augmentations = []) {\\n    if (augmentations.length <= 0)\\n        return 0;\\n    const comprato = augmentations.shift();\\n    if (comprato) {\\n        let costo = comprato.cost;\\n        augmentations.forEach((el) => {\\n            el.cost = el.cost * 2;\\n        });\\n        augmentations.sort(function (a, b) {\\n            return b.cost - a.cost;\\n        });\\n        costo += calcolaSpesa(augmentations);\\n        return costo;\\n    }\\n    return 0;\\n}\\nexport class Augmentation {\\n    name;\\n    cost;\\n    faction;\\n    constructor(name, cost, faction) {\\n        this.name = name;\\n        this.cost = cost;\\n        this.faction = faction;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudGF0aW9uLWNhbGN1bGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlzYy9hdWdtZW50YXRpb24tY2FsY3VsYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLGFBQWEsR0FBbUI7UUFDcEMsVUFBVTtRQUNWLElBQUksWUFBWSxDQUFDLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUM7UUFDdEQsSUFBSSxZQUFZLENBQUMsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUMzRCxJQUFJLFlBQVksQ0FBQyx1QkFBdUIsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDO1FBQzlELElBQUksWUFBWSxDQUFDLHNDQUFzQyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDN0UsSUFBSSxZQUFZLENBQUMsc0NBQXNDLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUM3RSxJQUFJLFlBQVksQ0FBQywwQkFBMEIsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDO1FBQ2pFLElBQUksWUFBWSxDQUFDLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7UUFDekQsSUFBSSxZQUFZLENBQUMsa0NBQWtDLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQztRQUUxRSxRQUFRO1FBQ1IsSUFBSSxZQUFZLENBQUMsdUJBQXVCLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQztRQUM1RCxJQUFJLFlBQVksQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDO1FBQzdELElBQUksWUFBWSxDQUFDLDBCQUEwQixFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUM7UUFDL0QsSUFBSSxZQUFZLENBQUMsc0JBQXNCLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQztRQUM1RCxJQUFJLFlBQVksQ0FBQyxrQkFB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\",\"filename\":\"/misc/augmentation-calculator.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/misc/augmentation-calculator.js\",\"url\":\"blob:https://danielyxie.github.io/7e7184ec-cb9d-4001-b301-cb5be78119ab\",\"moduleSequenceNumber\":1630}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/weak.js\",\"url\":\"blob:https://danielyxie.github.io/ef33113a-3088-4bf7-91e5-58e241132dbc\",\"moduleSequenceNumber\":25534}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/56b7e669-9194-436b-8270-284cd7e7179d\",\"moduleSequenceNumber\":25531}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES_TO_COPY } from 'const/scripts';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = ns.getPurchasedServers();\\n    for (let server of servers) {\\n        ns.scp(FILES_TO_COPY, server);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlcC1zZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ByZXAvcHJlcC1zZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDekMsS0FBSyxJQUFJLE1BQU0sSUFBSSxPQUFPLEVBQUU7UUFDMUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDL0I7QUFDSCxDQUFDIn0=\",\"filename\":\"/prep/prep-servers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/84143119-7846-491c-83b9-821fda3effec\",\"moduleSequenceNumber\":5477},{\"filename\":\"/prep/prep-servers.js\",\"url\":\"blob:https://danielyxie.github.io/c634ab7c-4af4-439e-9f4d-227a80ab06d4\",\"moduleSequenceNumber\":5645}],\"dependents\":[],\"ramUsage\":4.45,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MAX_SERVER_NUM, SERVER_GB, SERVER_NAME_PREFIX } from 'const/servers';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const purch = ns.getPurchasedServers().filter((el) => el.startsWith(SERVER_NAME_PREFIX));\\n    for (let server of purch) {\\n        const serverRam = ns.getServerMaxRam(server);\\n        if (serverRam != SERVER_GB) {\\n            //ns.tprint('dry run upgrade');\\n            ns.upgradePurchasedServer(server, SERVER_GB);\\n        }\\n    }\\n    for (let count = purch.length; count < MAX_SERVER_NUM; count++) {\\n        //ns.tprint('dry run buy');\\n        ns.purchaseServer(SERVER_NAME_PREFIX + (count + 1), SERVER_GB);\\n    }\\n    ns.exec('/prep/prep-servers.js', 'home', 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5LWFuZC11cGdyYWRlLXNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlzYy9idXktYW5kLXVwZ3JhZGUtc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5RSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQ3pGLEtBQUssSUFBSSxNQUFNLElBQUksS0FBSyxFQUFFO1FBQ3hCLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsSUFBSSxTQUFTLElBQUksU0FBUyxFQUFFO1lBQzFCLCtCQUErQjtZQUMvQixFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQzlDO0tBQ0Y7SUFDRCxLQUFLLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFHLGNBQWMsRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUM5RCwyQkFBMkI7UUFDM0IsRUFBRSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztLQUNoRTtJQUNELEVBQUUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlDLENBQUMifQ==\",\"filename\":\"/misc/buy-and-upgrade-servers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/ed517632-a4f0-4314-8571-8176468d2d7f\",\"moduleSequenceNumber\":5476},{\"filename\":\"/misc/buy-and-upgrade-servers.js\",\"url\":\"blob:https://danielyxie.github.io/67becd9b-fdae-4d51-b495-a01c4937e3c5\",\"moduleSequenceNumber\":5644}],\"dependents\":[],\"ramUsage\":7.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"upgradePurchasedServer\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { loadTargetNames } from './utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = await loadTargetNames(ns);\\n    for (let server of servers) {\\n        ns.tprint('-------');\\n        ns.tprint('server: ', server);\\n        ns.tprint('MinSec: ', ns.getServerMinSecurityLevel(server));\\n        ns.tprint('CurSec: ', ns.getServerSecurityLevel(server));\\n        ns.tprint('MaxMoney: ', ns.formatNumber(ns.getServerMaxMoney(server), 3));\\n        ns.tprint('CurMoney: ', ns.formatNumber(ns.getServerMoneyAvailable(server), 3));\\n        ns.tprint('MinHackLevel: ', ns.formatNumber(ns.getServerRequiredHackingLevel(server), 3));\\n        ns.tprint('-------');\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2stc2VydmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jaGVjay1zZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV4RCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLE9BQU8sR0FBYSxNQUFNLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwRCxLQUFLLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUMxQixFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JCLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzlCLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzVELEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3pELEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRixFQUFFLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUYsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN0QjtBQUNILENBQUMifQ==\",\"filename\":\"check-servers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/c1b8139b-f098-4839-b72c-bc60f0caa769\",\"moduleSequenceNumber\":562},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/d2d524ee-039f-452a-8e1f-df41ae1b78a6\",\"moduleSequenceNumber\":560},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/fe3b5f61-2994-4bde-aea7-bbaf273aac38\",\"moduleSequenceNumber\":566},{\"filename\":\"check-servers.js\",\"url\":\"blob:https://danielyxie.github.io/8f0c538d-01c0-4606-85cc-533b401a8f36\",\"moduleSequenceNumber\":86306}],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MANAGE_ALL_NAME, SCAN_SCRIPT_NAME } from 'const/scripts';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.exec(SCAN_SCRIPT_NAME, 'home', 1);\\n    ns.spawn(MANAGE_ALL_NAME, 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnR1cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zdGFydHVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBaUIsZUFBZSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpGLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQy9CLENBQUMifQ==\",\"filename\":\"startup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"startup.js\",\"url\":\"blob:https://danielyxie.github.io/65dc4a82-88be-40ac-8718-c267e5d63326\",\"moduleSequenceNumber\":12596}],\"dependents\":[],\"ramUsage\":4.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/e9b99757-5a9f-460e-8649-d69e1a7cdb7c\",\"moduleSequenceNumber\":4392}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { BEGINNER_MANAGER_NAME, SCAN_SCRIPT_NAME } from 'const/scripts';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.exec(SCAN_SCRIPT_NAME, 'home', 1);\\n    ns.spawn(BEGINNER_MANAGER_NAME, 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItc3RhcnR1cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1zdGFydHVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxxQkFBcUIsRUFBaUIsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkYscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckMsRUFBRSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNyQyxDQUFDIn0=\",\"filename\":\"beginner-startup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/eebd7acc-5ecf-466d-bfe7-7506d50be534\",\"moduleSequenceNumber\":556},{\"filename\":\"beginner-startup.js\",\"url\":\"blob:https://danielyxie.github.io/97140e69-6518-42d2-945b-8c719d83a305\",\"moduleSequenceNumber\":7772}],\"dependents\":[],\"ramUsage\":4.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVER_NAME_PREFIX } from 'const/servers';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = ns.getPurchasedServers().filter((el) => el.startsWith(SERVER_NAME_PREFIX));\\n    for (const server of servers) {\\n        ns.killall(server);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2lsbC1zZXJ2ZXJzLXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9raWxsLXNlcnZlcnMtc2NyaXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQzNGLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzVCLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"kill-servers-script.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/477e80eb-56e7-498b-832e-7198573866c3\",\"moduleSequenceNumber\":13215},{\"filename\":\"kill-servers-script.js\",\"url\":\"blob:https://danielyxie.github.io/4aab57be-cce8-476c-a629-61e89597a9d3\",\"moduleSequenceNumber\":14326}],\"dependents\":[],\"ramUsage\":4.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function calcolaThreadGrow(ns, serverInfo, debug = false) {\\n    const currentMoney = ns.getServerMoneyAvailable(serverInfo.name);\\n    const rate = serverInfo.maxMoney / (currentMoney > 0 ? currentMoney : 1);\\n    const thr = ns.growthAnalyze(serverInfo.name, rate);\\n    if (debug) {\\n        ns.print('------ grow thread calc ------');\\n        ns.print('currentMoney: ', currentMoney);\\n        ns.print('grow rate: ', rate);\\n        ns.print('growthAna: ', thr);\\n        ns.print('-----------------------------');\\n    }\\n    return Math.ceil(thr);\\n}\\nexport function calcolaThreadWeak(ns, serverInfo, debug = false) {\\n    const currentSec = ns.getServerSecurityLevel(serverInfo.name);\\n    const secWeak = ns.weakenAnalyze(1);\\n    const rate = (currentSec - serverInfo.minSecurity) / secWeak;\\n    if (debug) {\\n        ns.print('------ weak thread calc ------');\\n        ns.print('currSec: ', currentSec);\\n        ns.print('minSec: ', serverInfo.minSecurity);\\n        ns.print('weakSec: ', secWeak);\\n        ns.print('secRate: ', rate);\\n        ns.print('-----------------------------');\\n    }\\n    return Math.ceil(rate);\\n}\\nexport function calcolaThreadHack(ns, serverInfo, debug = false) {\\n    const maxMoney = serverInfo.maxMoney;\\n    const moneyPerThread = ns.hackAnalyze(serverInfo.name) * maxMoney;\\n    const minWanted = maxMoney * 0.65;\\n    const rate = (maxMoney - minWanted) / moneyPerThread;\\n    const threads = Math.floor(rate);\\n    if (debug) {\\n        ns.print('------ hack thread calc ------');\\n        ns.print('moneyPerThread: ', moneyPerThread);\\n        ns.print('maxMoney: ', maxMoney);\\n        ns.print('minWanted: ', minWanted);\\n        ns.print('hack rate: ', rate);\\n        ns.print('growthAna: ', threads);\\n        ns.print('-----------------------------');\\n    }\\n    return threads;\\n}\\nexport function calcolaWeakThreadPerGrow(growThreads) {\\n    return Math.ceil((growThreads * 0.004) / 0.05);\\n}\\nexport function calcolaTempiBatch(tempoHack, tempoWeak, tempoGrow, batchStartDelay = 200, scritpDelay = 100, iteration = 0) {\\n    const sleepWeakHack = (batchStartDelay + scritpDelay * 2) * iteration;\\n    const sleepHack = tempoWeak - tempoHack - scritpDelay + sleepWeakHack;\\n    const endHack = sleepHack + tempoHack;\\n    const endWeakHack = tempoWeak + sleepWeakHack;\\n    const sleepGrow = endWeakHack - tempoGrow + scritpDelay;\\n    const endGrow = sleepGrow + tempoGrow;\\n    const sleepWeakGrow = endGrow - tempoWeak + scritpDelay;\\n    const endWeakGrow = sleepWeakGrow + tempoWeak;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsY3VsYXRpb24tdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvY2FsY3VsYXRpb24tdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQU0sRUFBRSxVQUFzQixFQUFFLEtBQUssR0FBRyxLQUFLO0lBQzdFLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakUsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLFFBQVEsR0FBRyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekUsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3BELElBQUksS0FBSyxFQUFFO1FBQ1QsRUFBRSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQzNDLEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDekMsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDN0IsRUFBRSxDQUFDLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0tBQzNDO0lBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsRUFBTSxFQUFFLFVBQXNCLEVBQUUsS0FBSyxHQUFHLEtBQUs7SUFDN0UsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMs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\",\"filename\":\"/utils/calculation-utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/hack.js\",\"url\":\"blob:https://danielyxie.github.io/10d24270-c89a-4b65-96b6-4cc3b9758191\",\"moduleSequenceNumber\":25533}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerData } from 'utils/server-data';\\nexport class ServerManager {\\n    ns;\\n    servers = [];\\n    hackTargets = [];\\n    growTargets = [];\\n    weakTargets = [];\\n    constructor(ns, serverNames) {\\n        this.ns = ns;\\n        for (let server of serverNames) {\\n            const serverData = new ServerData(ns, server);\\n            serverData.aggiornaServer();\\n            this.servers.push(serverData);\\n        }\\n    }\\n    avviaScript(scriptName, threadNeeded, ramPerThread, target, debug = false) {\\n        if (threadNeeded <= 0) {\\n            return;\\n        }\\n        this.aggiornaUtilizzo();\\n        const availableServers = this.servers.filter((el) => el.freeRam > 0 && el.freeRam > ramPerThread);\\n        for (let server of availableServers) {\\n            const freeThreads = server.freeRam / ramPerThread;\\n            let threadToLaunch = Math.floor(freeThreads > threadNeeded ? threadNeeded : freeThreads);\\n            if (threadToLaunch > 0 && threadToLaunch < 1)\\n                threadToLaunch = 1;\\n            if (threadToLaunch <= 0)\\n                break;\\n            this.ns.exec(scriptName, server.name, threadToLaunch, target, threadToLaunch);\\n            server.aggiornaServer();\\n            threadNeeded -= threadToLaunch;\\n            if (threadNeeded <= 0) {\\n                this.aggiornaTargetInterni(scriptName, target);\\n                break;\\n            }\\n        }\\n    }\\n    aggiornaUtilizzo(clearTargets = false) {\\n        if (clearTargets) {\\n            this.hackTargets = [];\\n            this.weakTargets = [];\\n            this.growTargets = [];\\n        }\\n        this.servers.forEach((el) => {\\n            el.aggiornaServer();\\n            let processes = this.ns.ps(el.name);\\n            for (let process of processes) {\\n                this.aggiornaTargetInterni(process.filename, process.args[0]);\\n            }\\n        });\\n    }\\n    serverLiberi() {\\n        return this.servers.find((el) => el.freeRam > 0) !== undefined;\\n    }\\n    aggiornaTargetInterni(scriptName, target) {\\n        if (scriptName.indexOf('hack') > 0) {\\n            if (this.hackTargets.indexOf(target) < 0)\\n                this.hackTargets.push(target);\\n        }\\n        if (scriptName.indexOf('grow') > 0) {\\n            if (this.growTargets.indexOf(target) < 0)\\n                this.growTargets.push(target);\\n        }\\n        if (scriptName.indexOf('weak') > 0) {\\n            if (this.weakTargets.indexOf(target) < 0)\\n                this.weakTargets.push(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvc2VydmVyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRS9DLE1BQU0sT0FBTyxhQUFhO0lBQ3hCLEVBQUUsQ0FBSztJQUNQLE9BQU8sR0FBaUIsRUFBRSxDQUFDO0lBQzNCLFdBQVcsR0FBYSxFQUFFLENBQUM7SUFDM0IsV0FBVyxHQUFhLEVBQUUsQ0FBQztJQUMzQixXQUFXLEdBQWEsRUFBRSxDQUFDO0lBRTNCLFlBQVksRUFBTSxFQUFFLFdBQXFCO1FBQ3ZDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDOUIsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzlDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFRCxXQUFXLENBQUMsVUFBa0IsRUFBRSxZQUFvQixFQUFFLFlBQW9CLEVBQUUsTUFBYyxFQUFFLEtBQUssR0FBRyxLQUFLO1FBQ3ZHLElBQUksWUFBWSxJQUFJLENBQUMsRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQyxDQUFDO1FBQ2xHLEtBQUssSUFBSSxNQUFNLElBQUksZ0JBQWdCLEVBQUU7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\",\"filename\":\"/utils/server-manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_FREE_RAM_TO_KEEP } from 'const/servers';\\nexport class ServerData {\\n    ns;\\n    name;\\n    freeRam;\\n    maxRam;\\n    cores = 1;\\n    constructor(ns, name) {\\n        this.ns = ns;\\n        this.name = name;\\n        const nsServer = ns.getServer(name);\\n        this.maxRam = nsServer.maxRam;\\n        this.freeRam = this.maxRam - this.ns.getServerUsedRam(name);\\n        this.cores = nsServer.cpuCores;\\n    }\\n    calcolaThreadRunnabili(costoScript) {\\n        return this.freeRam > 0 ? Math.floor(this.freeRam / costoScript) : 0;\\n    }\\n    aggiornaServer() {\\n        this.maxRam = this.ns.getServerMaxRam(this.name);\\n        if (this.name == 'home')\\n            this.freeRam = this.maxRam - this.ns.getServerUsedRam(this.name) - HOME_FREE_RAM_TO_KEEP;\\n        else\\n            this.freeRam = this.maxRam - this.ns.getServerUsedRam(this.name);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvc2VydmVyLWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRELE1BQU0sT0FBTyxVQUFVO0lBQ3JCLEVBQUUsQ0FBSztJQUNQLElBQUksQ0FBUztJQUNiLE9BQU8sQ0FBUztJQUNoQixNQUFNLENBQVM7SUFDZixLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBRVYsWUFBWSxFQUFNLEVBQUUsSUFBWTtRQUM5QixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLE1BQU0sUUFBUSxHQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUNqQyxDQUFDO0lBRUQsc0JBQXNCLENBQUMsV0FBbUI7UUFDeEMsT0FBTyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELGNBQWM7UUFDWixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksTUFBTTtZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxxQkFBcUIsQ0FBQzs7WUFDN0csSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hFLENBQUM7Q0FDRiJ9\",\"filename\":\"/utils/server-data.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MANAGERV2_NAME, SCAN_SCRIPT_NAME } from 'const/scripts';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.exec(SCAN_SCRIPT_NAME, 'home', 1);\\n    ns.spawn(MANAGERV2_NAME, 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnR1cFYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3N0YXJ0dXBWMi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQWlCLGNBQWMsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVoRixxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyQyxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QixDQUFDIn0=\",\"filename\":\"startupV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/cf82a8f9-d058-47b2-8868-03e4161f0f76\",\"moduleSequenceNumber\":299},{\"filename\":\"startupV2.js\",\"url\":\"blob:https://danielyxie.github.io/d734f84b-3745-4893-aa18-43667e858e42\",\"moduleSequenceNumber\":15640}],\"dependents\":[],\"ramUsage\":4.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVER_NAME_PREFIX } from 'const/servers';\\nexport class ScanResult {\\n    ns;\\n    allServers = [];\\n    hackable = [];\\n    constructor(ns) {\\n        this.ns = ns;\\n        this.scanAndCheckNetwork();\\n    }\\n    scanAndCheckNetwork() {\\n        let device = 'home';\\n        this.scan(device);\\n    }\\n    scan(device, depth = 1, maxDepth = Infinity) {\\n        if (depth > maxDepth)\\n            return {};\\n        const scanTargets = this.ns.scan(device);\\n        const localTargets = [];\\n        scanTargets.forEach((newDevice) => {\\n            const alreadyThere = this.allServers.includes(newDevice);\\n            const canHack = this.nukeServer(this.ns, newDevice, this.ns.getHostname());\\n            const isMine = newDevice === 'home' || newDevice.startsWith(SERVER_NAME_PREFIX);\\n            const profitable = this.ns.getServerMaxMoney(newDevice) > 0;\\n            if (!alreadyThere && !isMine) {\\n                localTargets.push(newDevice);\\n                this.allServers.push(newDevice);\\n                if (canHack && profitable)\\n                    this.hackable.push(newDevice);\\n            }\\n        });\\n        for (let target of localTargets) {\\n            this.scan(target, depth + 1);\\n        }\\n        return;\\n    }\\n    nukeServer(ns, target, runningHost) {\\n        if (ns.hasRootAccess(target))\\n            return true;\\n        const reqHackLevel = ns.getServerRequiredHackingLevel(target);\\n        const myHackLevel = ns.getHackingLevel();\\n        if (reqHackLevel > myHackLevel)\\n            return false;\\n        const portRequired = ns.getServerNumPortsRequired(target);\\n        const cracks = [];\\n        if (ns.fileExists('brutessh.exe', runningHost)) {\\n            cracks.push(ns.brutessh);\\n        }\\n        if (ns.fileExists('ftpcrack.exe', runningHost)) {\\n            cracks.push(ns.ftpcrack);\\n        }\\n        if (ns.fileExists('httpworm.exe', runningHost)) {\\n            cracks.push(ns.httpworm);\\n        }\\n        if (ns.fileExists('relaysmtp.exe', runningHost)) {\\n            cracks.push(ns.relaysmtp);\\n        }\\n        if (ns.fileExists('sqlinject.exe', runningHost)) {\\n            cracks.push(ns.sqlinject);\\n        }\\n        if (portRequired > cracks.length) {\\n            ns.print('cannot crack ', target);\\n            return false;\\n        }\\n        for (let crack of cracks)\\n            crack(target);\\n        // Get root access to target server\\n        ns.print('cracked ', target);\\n        ns.nuke(target);\\n        return true;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbi1yZXN1bHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2Nhbi1hbmQtbnVrZS9zY2FuLXJlc3VsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsTUFBTSxPQUFPLFVBQVU7SUFDckIsRUFBRSxDQUFLO0lBQ1AsVUFBVSxHQUFhLEVBQUUsQ0FBQztJQUMxQixRQUFRLEdBQWEsRUFBRSxDQUFDO0lBRXhCLFlBQVksRUFBTTtRQUNoQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxtQkFBbUI7UUFDakIsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVPLElBQUksQ0FBQyxNQUFjLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsUUFBUTtRQUN6RCxJQUFJLEtBQUssR0FBRyxRQUFRO1lBQUUsT0FBTyxFQUFFLENBQUM7UUFDaEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekMsTUFBTSxZQUFZLEdBQWEsRUFBRSxDQUFDO1FBQ2xDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUNoQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztZQUMzRSxNQUFNLE1BQU0sR0FBRyxTQUFT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\",\"filename\":\"/scan-and-nuke/scan-result.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ALL_SERVERS_FILENAME, SERVERS_DETAIL_FILENAME, SERVERS_FILENAME } from 'const/files';\\nimport { FileHandler } from 'files/filehandler';\\nimport { ScanResult } from 'scan-and-nuke/scan-result';\\nimport { HwgOpsCalulator } from 'utils/hwg-ops-calulator';\\nimport { HwgwServerInfo } from 'utils/hwgw-server-info';\\nimport { ServerInfo } from 'utils/server-info';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const lastScanRun = Date.now();\\n    let scanResult = await scan(ns);\\n    while (true) {\\n        ns.disableLog('ALL');\\n        if (Date.now() - lastScanRun > 60000) {\\n            scanResult = await scan(ns);\\n        }\\n        await getStats(ns, scanResult.hackable);\\n        await ns.sleep(60000);\\n    }\\n}\\nasync function scan(ns) {\\n    const scanResult = new ScanResult(ns);\\n    await new FileHandler(ns, SERVERS_FILENAME).write(scanResult.hackable, 'w');\\n    await new FileHandler(ns, ALL_SERVERS_FILENAME).write(scanResult.allServers, 'w');\\n    return scanResult;\\n}\\nasync function getStats(ns, targets) {\\n    let serverInfo = [];\\n    for (const target of targets) {\\n        const minSecurity = ns.getServerMinSecurityLevel(target);\\n        const maxMoney = ns.getServerMaxMoney(target);\\n        const serverMoney = ns.getServerMoneyAvailable(target);\\n        const serverSecurity = ns.getServerSecurityLevel(target);\\n        const hackReq = ns.getServerRequiredHackingLevel(target);\\n        const infoObj = new ServerInfo();\\n        infoObj.name = target;\\n        infoObj.minSecurity = minSecurity;\\n        infoObj.maxMoney = maxMoney;\\n        infoObj.minHackLevel = hackReq;\\n        infoObj.currHackLevel = ns.getHackingLevel();\\n        const tempInfo = new HwgwServerInfo(ns, infoObj);\\n        const calc = new HwgOpsCalulator(ns, tempInfo);\\n        infoObj.hackXp = calc.calcolaHackXp();\\n        const weakent = calc.calcolaWeakTime();\\n        const hackA = calc.calcolaHackPerc();\\n        const hackChance = calc.calcolaHackChance();\\n        infoObj.weakenTm = weakent;\\n        infoObj.hackChance = hackChance;\\n        infoObj.hackValue = hackA;\\n        infoObj.prepped = serverSecurity == minSecurity && serverMoney == maxMoney;\\n        infoObj.calcolaScore();\\n        serverInfo = [...serverInfo, infoObj];\\n    }\\n    const handler = new FileHandler(ns, SERVERS_DETAIL_FILENAME);\\n    await handler.write(serverInfo, 'w');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbi1hbmQtdXBkYXRlLWZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2Nhbi1hbmQtbnVrZS9zY2FuLWFuZC11cGRhdGUtZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsdUJBQXVCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDOUYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUUvQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDL0IsSUFBSSxVQUFVLEdBQWUsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUMsT0FBTyxJQUFJLEVBQUU7UUFDWCxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFdBQVcsR0FBRyxLQUFLLEVBQUU7WUFDcEMsVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzdCO1FBQ0QsTUFBTSxRQUFRLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDdkI7QUFDSCxDQUFDO0FBRUQsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQ3hC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\",\"filename\":\"/scan-and-nuke/scan-and-update-file.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/server-info.js\",\"url\":\"blob:https://danielyxie.github.io/c8551df8-193f-448f-ba7c-36cc6f3f6cc6\",\"moduleSequenceNumber\":314},{\"filename\":\"/utils/hwgw-server-info.js\",\"url\":\"blob:https://danielyxie.github.io/d1c6983e-f189-4359-9ff2-bffce74ca854\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"blob:https://danielyxie.github.io/f4bd174b-93f7-474f-9407-b672896e1a1f\",\"moduleSequenceNumber\":343},{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/25a82f20-5178-4810-9cf6-65f201cfc43d\",\"moduleSequenceNumber\":365},{\"filename\":\"/scan-and-nuke/scan-result.js\",\"url\":\"blob:https://danielyxie.github.io/8b453dc3-2afb-4a0b-8942-5ace80e99e92\",\"moduleSequenceNumber\":331},{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/ce28fbce-0884-4351-bab4-4fc02c35f4f3\",\"moduleSequenceNumber\":312},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/a0112c91-7aae-4a8b-b71b-0025e016aa2f\",\"moduleSequenceNumber\":311},{\"filename\":\"/scan-and-nuke/scan-and-update-file.js\",\"url\":\"blob:https://danielyxie.github.io/7d42a196-e845-4597-9a36-e6f4cf1e8538\",\"moduleSequenceNumber\":616}],\"dependents\":[],\"ramUsage\":9.5,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVERS_DETAIL_FILENAME, SERVERS_FILENAME } from 'const/files';\\nimport { FileHandler } from 'files/filehandler';\\nimport { HwgOpsCalulator } from 'utils/hwg-ops-calulator';\\nimport { ServerInfo } from 'utils/server-info';\\nimport { HwgwServerInfo } from '/utils/hwgw-server-info';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        let handler = new FileHandler(ns, SERVERS_FILENAME);\\n        const servers = await handler.read();\\n        let serverInfo = [];\\n        for (let target of servers) {\\n            const minSecurity = ns.getServerMinSecurityLevel(target);\\n            const maxMoney = ns.getServerMaxMoney(target);\\n            const serverMoney = ns.getServerMoneyAvailable(target);\\n            const serverSecurity = ns.getServerSecurityLevel(target);\\n            const hackReq = ns.getServerRequiredHackingLevel(target);\\n            const infoObj = new ServerInfo();\\n            infoObj.name = target;\\n            infoObj.minSecurity = minSecurity;\\n            infoObj.maxMoney = maxMoney;\\n            infoObj.minHackLevel = hackReq;\\n            infoObj.currHackLevel = ns.getHackingLevel();\\n            const tempInfo = new HwgwServerInfo(ns, infoObj);\\n            const calc = new HwgOpsCalulator(ns, tempInfo);\\n            infoObj.hackXp = calc.calcolaHackXp();\\n            const weakent = calc.calcolaWeakTime();\\n            const hackA = calc.calcolaHackPerc();\\n            const hackChance = calc.calcolaHackChance();\\n            infoObj.weakenTm = weakent;\\n            infoObj.hackChance = hackChance;\\n            infoObj.hackValue = hackA;\\n            infoObj.prepped = serverSecurity == minSecurity && serverMoney == maxMoney;\\n            infoObj.calcolaScore();\\n            serverInfo = [...serverInfo, infoObj];\\n        }\\n        handler = new FileHandler(ns, SERVERS_DETAIL_FILENAME);\\n        await handler.write(serverInfo, 'w');\\n        await ns.sleep(1000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXN0YXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjYW4tYW5kLW51a2UvZ2V0LXN0YXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzFELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFekQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUNwRCxNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQyxJQUFJLFVBQVUsR0FBaUIsRUFBRSxDQUFDO1FBQ2xDLEtBQUssSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQzFCLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6RCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6RCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekQsTUFBTSxPQUFPLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUNqQyxPQUFPLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztZQUN0QixPQUFPLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztZQUNsQyxPQUFPLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztZQUM1QixPQUFPLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztZQUMvQixPQUFPLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUM3QyxNQUFNLFFBQVEsR0FBbUIsSUFBSSxjQUFjLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sSUFBSSxHQUFvQixJQUFJLGVBQWUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDaEUsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDdEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3ZDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUNyQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUM1QyxPQUFPLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztZQUMzQixPQUFPLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztZQUNoQyxPQUFPLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUMxQixPQUFPLENBQUMsT0FBTyxHQUFHLGNBQWMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsQ0FBQztZQUMzRSxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDdkIsVUFBVSxHQUFHLENBQUMsR0FBRyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDdkM7UUFDRCxPQUFPLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLHVCQUF1QixDQUFDLENBQUM7UUFDdkQsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDdEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/scan-and-nuke/get-stats.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/utils/hwgw-server-info.js\",\"url\":\"blob:https://danielyxie.github.io/571c6448-9516-48cd-acf4-fa67ccdb45fe\",\"moduleSequenceNumber\":111},{\"filename\":\"/utils/server-info.js\",\"url\":\"blob:https://danielyxie.github.io/8a83d325-39d4-4857-b417-9daa4948e9c9\",\"moduleSequenceNumber\":75},{\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"blob:https://danielyxie.github.io/9ed26c5b-327d-4912-8072-b76297f20765\",\"moduleSequenceNumber\":104},{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/26b3e681-3c35-4025-8cfd-33fa41f0103d\",\"moduleSequenceNumber\":73},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/7dfa65cd-a2ac-4c56-8335-8e77356a4504\",\"moduleSequenceNumber\":72},{\"filename\":\"/scan-and-nuke/get-stats.js\",\"url\":\"blob:https://danielyxie.github.io/9f2c227f-218d-4b70-a1f2-00d12853560a\",\"moduleSequenceNumber\":141}],\"dependents\":[],\"ramUsage\":8.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVER_WEAKEN_V2_SCRIPT_NAME } from 'const/scripts';\\nimport { XP_FARMER_SERVER_PREFIX } from 'const/servers';\\nimport { loadTargetInfo, loadTargetNames } from 'utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    //const servers = ns.args;\\n    const targets = await loadTargetNames(ns);\\n    const targetInfo = (await loadTargetInfo(ns));\\n    // const ordinati = targetInfo\\n    //   .filter((el) => el.cheesyScoreTest > 0)\\n    //   .sort(function (a, b) {\\n    //     return b.cheesyScoreTest - a.cheesyScoreTest;\\n    //   })\\n    //   .map((el) => el.name);\\n    const ordinati = [/*'joesguns', 'foodnstuff',*/ 'n00dles'];\\n    while (true) {\\n        const servers = ns.getPurchasedServers().filter((el) => el != 'home' && el != XP_FARMER_SERVER_PREFIX);\\n        let i = 0;\\n        for (let server of servers) {\\n            checkAndStartBeginnerSingoloTarget(ns, server, ordinati[i]);\\n            i++;\\n            if (i >= ordinati.length)\\n                i = 0;\\n        }\\n        checkAndStartBeginnerHackHome(ns, ordinati[0]);\\n        checkAutoWeak(ns, targets);\\n        await ns.sleep(5000);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAutoWeak(ns, servers) {\\n    for (let server of servers) {\\n        checkAndStartAutoWeak(ns, server);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartAutoWeak(ns, server) {\\n    const scriptRam = ns.getScriptRam(SERVER_WEAKEN_V2_SCRIPT_NAME);\\n    const serverRam = ns.getServerMaxRam(server);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    if (threads > 0) {\\n        if (!ns.isRunning(SERVER_WEAKEN_V2_SCRIPT_NAME, server, server, threads)) {\\n            ns.scp(SERVER_WEAKEN_V2_SCRIPT_NAME, server);\\n            ns.exec(SERVER_WEAKEN_V2_SCRIPT_NAME, server, threads, server, threads);\\n        }\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartBeginnerSingoloTarget(ns, host, target) {\\n    const scriptRam = ns.getScriptRam('beginner-hack.js');\\n    const serverUsedRam = ns.getServerUsedRam(host);\\n    const serverRam = ns.getServerMaxRam(host);\\n    const threads = Math.floor((serverRam - serverUsedRam) / scriptRam);\\n    if (!isNaN(threads) && threads > 0) {\\n        ns.exec('beginner-hack.js', host, threads, target, threads);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartBeginnerHackHome(ns, target) {\\n    const scriptRam = ns.getScriptRam('beginner-hack.js');\\n    const serverUsedRam = ns.getServerUsedRam('home');\\n    const serverRam = ns.getServerMaxRam('home') - 4.5;\\n    const threads = Math.floor((serverRam - serverUsedRam) / scriptRam);\\n    if (!isNaN(threads) && threads > 0) {\\n        ns.exec('beginner-hack.js', 'home', threads, target, threads);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYW5hZ2Vycy9iZWdpbm5lci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV0RSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLDBCQUEwQjtJQUMxQixNQUFNLE9BQU8sR0FBYSxNQUFNLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwRCxNQUFNLFVBQVUsR0FBaUIsQ0FBQyxNQUFNLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBaUIsQ0FBQztJQUM1RSw4QkFBOEI7SUFDOUIsNENBQTRDO0lBQzVDLDRCQUE0QjtJQUM1QixvREFBb0Q7SUFDcEQsT0FBTztJQUNQLDJCQUEyQjtJQUMzQixNQUFNLFFBQVEsR0FBRyxDQUFDLDZCQUE2QixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNELE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksTUFBTSxJQUFJLEVBQUUsSUFBSSx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3ZHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLEtBQUssSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQzFCLGtDQUFrQyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFD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\",\"filename\":\"/managers/beginner-manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/598ee8c0-42b0-475a-8eaa-2c263541cc1a\",\"moduleSequenceNumber\":562},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/aa5919fe-3619-4629-b4df-871cf6bea502\",\"moduleSequenceNumber\":560},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/5b34346b-1e3a-49eb-90fe-df797134be8e\",\"moduleSequenceNumber\":566},{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/fb951ed3-37cf-43a3-aa4f-4d716f046a5e\",\"moduleSequenceNumber\":7743},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/9ccd8289-94e4-4708-80b4-0fa27a601152\",\"moduleSequenceNumber\":556},{\"filename\":\"/managers/beginner-manager.js\",\"url\":\"blob:https://danielyxie.github.io/ef20ee23-b084-47f8-b78f-72bcd1c24d0d\",\"moduleSequenceNumber\":7774}],\"dependents\":[],\"ramUsage\":6.05,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVER_GROW_SCRIPT_NAME, SERVER_HACK_SCRIPT_NAME, SERVER_WEAKEN_SCRIPT_NAME, SERVER_WEAKEN_V2_SCRIPT_NAME, } from 'const/scripts';\\nimport { XP_FARMER_SERVER_PREFIX } from 'const/servers';\\nimport { loadTargetInfo } from 'utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    //const servers = ns.args;\\n    const targetInfo = (await loadTargetInfo(ns));\\n    const ordinati = targetInfo\\n        .sort(function (a, b) {\\n        return b.score - a.score;\\n    })\\n        .map((el) => el.name);\\n    while (true) {\\n        //growRunningServer = checkGrowServer(ns, servers, growRunningServer);\\n        //checkWeakenServer(ns, servers);\\n        //checkServer(ns, servers, 'srv-1');\\n        //checkServer(ns, servers, 'srv-2');\\n        //checkServer(ns, servers, 'srv-3');\\n        //checkServer(ns, servers, 'srv-4');\\n        //checkServer(ns, servers, 'srv-5');\\n        //checkServer(ns, servers, 'srv-6');\\n        //checkServer(ns, servers, 'srv-7');\\n        //checkServer(ns, servers, 'srv-8');\\n        //checkServer(ns, servers, 'srv-9');\\n        //checkServer(ns, servers, 'srv-10');\\n        const servers = ns.getPurchasedServers().filter((el) => el != 'home' && el != XP_FARMER_SERVER_PREFIX);\\n        let i = 0;\\n        for (const server of servers) {\\n            checkServerSingoloTarget(ns, ordinati[i], server);\\n            i++;\\n            if (i >= ordinati.length)\\n                i = 0;\\n        }\\n        if (i >= ordinati.length)\\n            i = 0;\\n        checkAndStartBeginnerHackHome(ns, ordinati[i]);\\n        checkAutoWeak(ns, ordinati);\\n        await ns.sleep(5000);\\n    }\\n}\\nfunction startScriptHost(ns, host, target, script, otherArgs) {\\n    if (!host || !target)\\n        return;\\n    const scriptRam = ns.getScriptRam(script);\\n    const serverRam = ns.getServerMaxRam(host);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    const allArgs = [target, ...otherArgs, threads];\\n    ns.scp(script, host);\\n    ns.exec(script, host, threads, ...allArgs);\\n}\\n// START SERVER 1\\nfunction checkServerSingoloTarget(ns, target, server) {\\n    if (!target)\\n        return;\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    const serverSec = ns.getServerSecurityLevel(target);\\n    const secOk = serverSec <= securityThresh;\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.9;\\n    const securityThreshScript = securityThresh;\\n    //\\tif (ns.getServerUsedRam(host) > 0) {\\n    //\\t\\tif (serverSec < securityThreshScript) {\\n    //\\t\\t\\tcheckAndKillScriptHost(ns, host, server, SERVER_GROW_SCRIPT_NAME, [securityThreshScript])\\n    //\\t\\t} else\\n    //\\t\\t\\treturn;\\n    //\\t}\\n    const serverMoney = ns.getServerMoneyAvailable(target);\\n    if (!secOk) {\\n        startScriptHost(ns, server, target, SERVER_WEAKEN_SCRIPT_NAME, [securityThresh]);\\n    }\\n    else if (serverMoney < moneyThresh) {\\n        startScriptHost(ns, server, target, SERVER_GROW_SCRIPT_NAME, [moneyThresh, securityThreshScript]);\\n    }\\n    else {\\n        startScriptHost(ns, server, target, SERVER_HACK_SCRIPT_NAME, [securityThreshScript, moneyThresh]);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAutoWeak(ns, servers) {\\n    for (const server of servers) {\\n        checkAndStartAutoWeak(ns, server);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartAutoWeak(ns, server) {\\n    const scriptRam = ns.getScriptRam(SERVER_WEAKEN_V2_SCRIPT_NAME);\\n    const serverRam = ns.getServerMaxRam(server);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    if (threads > 0) {\\n        if (!ns.isRunning(SERVER_WEAKEN_V2_SCRIPT_NAME, server, server, threads)) {\\n            ns.scp(SERVER_WEAKEN_V2_SCRIPT_NAME, server);\\n            ns.exec(SERVER_WEAKEN_V2_SCRIPT_NAME, server, threads, server, threads);\\n        }\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartBeginnerHackHome(ns, target) {\\n    const scriptRam = ns.getScriptRam('beginner-hack.js');\\n    const serverUsedRam = ns.getServerUsedRam('home');\\n    const serverRam = ns.getServerMaxRam('home') - 20;\\n    const threads = Math.floor((serverRam - serverUsedRam) / scriptRam);\\n    if (!isNaN(threads) && threads > 0) {\\n        ns.exec('beginner-hack.js', 'home', threads, target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlLWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYW5hZ2Vycy9tYW5hZ2UtYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsdUJBQXVCLEVBQ3ZCLHlCQUF5QixFQUN6Qiw0QkFBNEIsR0FDN0IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVyRCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLDBCQUEwQjtJQUMxQixNQUFNLFVBQVUsR0FBaUIsQ0FBQyxNQUFNLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBaUIsQ0FBQztJQUM1RSxNQUFNLFFBQVEsR0FBRyxVQUFVO1NBQ3hCLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1FBQ2xCLE9BQU8sQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzNCLENBQUMsQ0FBQztTQUNELEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLE9BQU8sSUFBSSxFQUFFO1FBQ1gsc0VBQXNFO1FBQ3RFLGlDQUFpQztRQUNqQyxvQ0FBb0M7UUFDcEMsb0NBQW9DO1FBQ3BDLG9DQUFvQztRQUNwQyxvQ0FBb0M7UUFDcEMsb0NBQW9DO1FBQ3BDLG9DQUFvQztRQUNwQyxvQ0FBb0M7UUFDcEMsb0NBQW9DO1FBQ3BDLG9DQUFvQztRQUNwQyxxQ0FBcUM7UUFDckMsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxF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\",\"filename\":\"/managers/manage-all.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.45,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PREP_SERVER_GROW_SCRIPT, PREP_SERVER_HACK_SCRIPT, PREP_SERVER_WEAKEN_SCRIPT, SERVER_WEAKEN_V2_SCRIPT_NAME, } from 'const/scripts';\\nimport { XP_FARMER_SERVER_PREFIX } from 'const/servers';\\nimport * as calculators from 'utils/calculation-utils';\\nimport { ServerManager } from 'utils/server-manager';\\nimport { loadTargetInfo, loadTargetNames } from 'utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const debug = ns.args[0] ? true : false;\\n    //ns.disableLog(\\\"ALL\\\");\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMaxRam');\\n    ns.disableLog('getServerUsedRam');\\n    ns.disableLog('getServerSecurityLevel');\\n    ns.disableLog('getServerMinSecurityLevel');\\n    ns.disableLog('getServerMaxMoney');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('getHackingLevel');\\n    ns.disableLog('exec');\\n    if (debug)\\n        ns.tail();\\n    while (true) {\\n        const servers = ns.getPurchasedServers().filter((el) => el != XP_FARMER_SERVER_PREFIX);\\n        servers.unshift('home');\\n        const serverManager = new ServerManager(ns, servers);\\n        const allTargets = await loadTargetNames(ns);\\n        // if not debug mode start \\\"weakmyself\\\" process on each target\\n        if (!debug)\\n            checkAutoWeak(ns, allTargets);\\n        const targetInfo = (await loadTargetInfo(ns)).filter((el) => el.score > 0);\\n        const toPrep = targetInfo\\n            .filter((el) => !el.prepped)\\n            .sort(function (a, b) {\\n            return b.score - a.score;\\n        });\\n        let prepped = targetInfo.filter((el) => el.prepped);\\n        serverManager.aggiornaUtilizzo(true);\\n        if (debug) {\\n            ns.print('servers: ', servers);\\n            ns.print('server manager: ', serverManager);\\n        }\\n        if (prepped.length > 0) {\\n            prepped = prepped\\n                .sort(function (a, b) {\\n                return b.score - a.score;\\n            })\\n                .filter((el) => serverManager.hackTargets.indexOf(el.name) < 0);\\n            for (let prep of prepped) {\\n                launchHack(ns, serverManager, prep, debug);\\n            }\\n        }\\n        if (serverManager.serverLiberi()) {\\n            const weakCost = ns.getScriptRam(PREP_SERVER_WEAKEN_SCRIPT);\\n            const growCost = ns.getScriptRam(PREP_SERVER_GROW_SCRIPT);\\n            for (let target of toPrep) {\\n                prepTarget(ns, target, serverManager, weakCost, growCost, debug);\\n                if (!serverManager.serverLiberi())\\n                    break;\\n            }\\n        }\\n        await ns.sleep(5000);\\n        if (debug)\\n            break;\\n    }\\n}\\n/**\\n *\\n * @param {NS} ns\\n * @param servers\\n * @param target\\n * @returns true if server list is still usable, false otherwise\\n */\\nfunction launchHack(ns, serverManager, target, debug = false) {\\n    const scriptRam = ns.getScriptRam(PREP_SERVER_HACK_SCRIPT);\\n    const hackThreadNeeded = calculators.calcolaThreadHack(ns, target, debug);\\n    serverManager.avviaScript(PREP_SERVER_HACK_SCRIPT, hackThreadNeeded, scriptRam, target.name, debug);\\n    return serverManager;\\n}\\n/** @param {NS} ns */\\nfunction prepTarget(ns, target, serverManager, weakCost, growCost, debug = false) {\\n    if (serverManager.weakTargets.indexOf(target.name) < 0) {\\n        const weakThreadNeeded = calculators.calcolaThreadWeak(ns, target, debug);\\n        serverManager.avviaScript(PREP_SERVER_WEAKEN_SCRIPT, weakThreadNeeded, weakCost, target.name, debug);\\n    }\\n    if (serverManager.growTargets.indexOf(target.name) < 0) {\\n        const growThreadNeeded = calculators.calcolaThreadGrow(ns, target, debug);\\n        const weakThreadCompensationNeeded = calculators.calcolaWeakThreadPerGrow(growThreadNeeded);\\n        serverManager.avviaScript(PREP_SERVER_GROW_SCRIPT, growThreadNeeded, growCost, target.name, debug);\\n        serverManager.avviaScript(PREP_SERVER_WEAKEN_SCRIPT, weakThreadCompensationNeeded, weakCost, target.name, debug);\\n    }\\n    return serverManager;\\n}\\n/** @param {NS} ns */\\nfunction checkAutoWeak(ns, servers) {\\n    for (let server of servers) {\\n        checkAndStartAutoWeak(ns, server);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartAutoWeak(ns, server) {\\n    const scriptRam = ns.getScriptRam(SERVER_WEAKEN_V2_SCRIPT_NAME);\\n    const serverRam = ns.getServerMaxRam(server);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    if (threads > 0) {\\n        if (!ns.isRunning(SERVER_WEAKEN_V2_SCRIPT_NAME, server, server, threads)) {\\n            ns.scp(SERVER_WEAKEN_V2_SCRIPT_NAME, server);\\n            ns.exec(SERVER_WEAKEN_V2_SCRIPT_NAME, server, threads, server, threads);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlclYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hbmFnZXJzL21hbmFnZXJWMi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLHVCQUF1QixFQUN2Qix5QkFBeUIsRUFDekIsNEJBQTRCLEdBQzdCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEtBQUssV0FBVyxNQUFNLHlCQUF5QixDQUFDO0FBRXZELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXRFLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3hDLHVCQUF1QjtJQUN2QixFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCLEVBQUUsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNqQyxFQUFFLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDbEMsRUFBRSxDQUFDLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3hDLEVBQUUsQ0FBQyxVQUFVLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUMzQyxFQUFFLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDbkMsRUFBRSxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ3pDLEVBQUUsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNqQyxFQUFFLENBQUMs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\",\"filename\":\"/managers/managerV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/062b5bfc-6c79-4f77-a705-50af5f7f8046\",\"moduleSequenceNumber\":300},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/0204d0a4-e148-4073-9baa-2cc49936f936\",\"moduleSequenceNumber\":299},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/f947bce4-ea79-4a5d-8781-56fe764b992b\",\"moduleSequenceNumber\":330},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/6c3749fa-2fcb-4a92-bb3c-1f0e182f2e1e\",\"moduleSequenceNumber\":299},{\"filename\":\"/utils/server-data.js\",\"url\":\"blob:https://danielyxie.github.io/470ca530-47cb-4428-b708-ec740251b6bf\",\"moduleSequenceNumber\":317},{\"filename\":\"/utils/server-manager.js\",\"url\":\"blob:https://danielyxie.github.io/7d10a5eb-0c23-4489-bfc1-0b6ba7d794fd\",\"moduleSequenceNumber\":316},{\"filename\":\"/utils/calculation-utils.js\",\"url\":\"blob:https://danielyxie.github.io/0d22a8bc-1ee9-4ff6-9ae8-75d0b5f345de\",\"moduleSequenceNumber\":314},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/f27c13f7-f7c4-430e-b335-450c205bd437\",\"moduleSequenceNumber\":299},{\"filename\":\"/managers/managerV2.js\",\"url\":\"blob:https://danielyxie.github.io/c75f2f17-ea88-4ea2-a9a5-de2a681b35ba\",\"moduleSequenceNumber\":15643}],\"dependents\":[],\"ramUsage\":11.45,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/04c2f9e0-5ebd-45a9-9619-3a83486d8a45\",\"moduleSequenceNumber\":368},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/d5a47241-813d-45da-acf8-d45f230f61e4\",\"moduleSequenceNumber\":370},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/b95b68f9-5ca0-4c5c-b432-06bb34fb0f9c\",\"moduleSequenceNumber\":659}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/6a8062fc-6731-4764-8982-59abf012f908\",\"moduleSequenceNumber\":368},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/4b72e99a-f994-4017-ba90-edb1a3b281fe\",\"moduleSequenceNumber\":370},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/ee1b3c35-15ae-4f0b-9405-47d692dcc00c\",\"moduleSequenceNumber\":660}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HwgwServerBatch } from 'hwgw/hwgw-server-batch';\\nexport class HwgwBatch {\\n    tempoHack;\\n    tempoWeak;\\n    tempoGrow;\\n    running = false;\\n    constructor(tempoHack, tempoWeak, tempoGrow) {\\n        this.tempoGrow = tempoGrow;\\n        this.tempoHack = tempoHack;\\n        this.tempoWeak = tempoWeak;\\n    }\\n    creaServerBatch(ns, server, target, calc, iteration = 0, scriptDelay = 20) {\\n        return new HwgwServerBatch(this.tempoHack, this.tempoWeak, this.tempoGrow, server, ns, target, calc, iteration, scriptDelay);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1iYXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctYmF0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBS3pELE1BQU0sT0FBTyxTQUFTO0lBQ3BCLFNBQVMsQ0FBUztJQUNsQixTQUFTLENBQVM7SUFDbEIsU0FBUyxDQUFTO0lBQ2xCLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFFaEIsWUFBWSxTQUFpQixFQUFFLFNBQWlCLEVBQUUsU0FBaUI7UUFDakUsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVELGVBQWUsQ0FDYixFQUFNLEVBQ04sTUFBa0IsRUFDbEIsTUFBc0IsRUFDdEIsSUFBcUIsRUFDckIsU0FBUyxHQUFHLENBQUMsRUFDYixXQUFXLEdBQUcsRUFBRTtRQUVoQixPQUFPLElBQUksZUFBZSxDQUN4QixJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFNBQVMsRUFDZCxNQUFNLEVBQ04sRUFBRSxFQUNGLE1BQU0sRUFDTixJQUFJLEVBQ0osU0FBUyxFQUNULFdBQVcsQ0FDWixDQUFDO0lBQ0osQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-batch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/9734ed9b-9b76-40c0-9acf-0fa1871fd0cc\",\"moduleSequenceNumber\":368},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/91406d0a-1b7c-4644-9144-923d2a27d3d8\",\"moduleSequenceNumber\":370},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/802bd20b-f08a-4fbe-9588-d97fbc9e0924\",\"moduleSequenceNumber\":658}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { EMPTY_PORT_DATA, HWGW_PORTS, HWGW_PREP_PORTS } from 'const/ports';\\nimport { SERVER_WEAKEN_V2_SCRIPT_NAME } from 'const/scripts';\\nimport { HwgwBatch } from 'hwgw/hwgw-batch';\\nimport { HwgwServerManager } from 'hwgw/hwgw-server-manager';\\nimport { WgwBatch } from 'hwgw/wgw-batch';\\nimport { HwgOpsCalulator } from 'utils/hwg-ops-calulator';\\nimport { HwgwServerInfo } from 'utils/hwgw-server-info';\\nimport { loadTargetInfo } from 'utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('getServerUsedRam');\\n    ns.disableLog('getServerMaxRam');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('getServerSecurityLevel');\\n    ns.disableLog('getServerMinSecurityLevel');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('getServerMaxMoney');\\n    ns.disableLog('getHackingLevel');\\n    ns.disableLog('exec');\\n    ns.disableLog('sleep');\\n    let batches = new Map();\\n    let preppin = [];\\n    for (const port of HWGW_PORTS) {\\n        ns.clearPort(port);\\n    }\\n    for (const port of HWGW_PREP_PORTS) {\\n        ns.clearPort(port);\\n    }\\n    while (true) {\\n        const serverManager = new HwgwServerManager(ns);\\n        preppin = checkPreppinPort(ns, preppin);\\n        checkBatchingPorts(ns, batches);\\n        const serverInfo = (await loadTargetInfo(ns)).map((el) => new HwgwServerInfo(ns, el));\\n        checkAutoWeak(ns, serverInfo.map((el) => el.name));\\n        // serverInfo = serverInfo\\n        //   .sort(function (a, b) {\\n        //     return b.hwgwScore - a.hwgwScore;\\n        //   })\\n        //   .slice(0, 2);\\n        const toPrep = serverInfo\\n            .filter((el) => !el.prepped && (!batches.has(el.name) || !batches.get(el.name)?.running))\\n            .sort(function (a, b) {\\n            return b.hwgwScore - a.hwgwScore;\\n        });\\n        const toBatch = serverInfo\\n            .filter((el) => el.prepped)\\n            .sort(function (a, b) {\\n            return b.hwgwScore - a.hwgwScore;\\n        });\\n        await prepServers(ns, toPrep, preppin, serverManager);\\n        batches = await batch(ns, toBatch, batches, serverManager);\\n        await ns.sleep(2000);\\n    }\\n}\\n// -----------------------------------------------------\\n// -------------- PORT CHECKING START ------------------\\n// -----------------------------------------------------\\nfunction checkBatchingPorts(ns, batches) {\\n    if (batches.size <= 0)\\n        return;\\n    for (const port of HWGW_PORTS) {\\n        let portValue = ns.readPort(port);\\n        while (portValue !== EMPTY_PORT_DATA) {\\n            const batch = batches.get(portValue);\\n            if (batch != undefined) {\\n                batch.running = false;\\n            }\\n            portValue = ns.readPort(port);\\n        }\\n    }\\n}\\nfunction checkPreppinPort(ns, preppin) {\\n    if (preppin.length <= 0)\\n        return preppin;\\n    for (const port of HWGW_PREP_PORTS) {\\n        let portValue = ns.readPort(port);\\n        while (portValue !== EMPTY_PORT_DATA) {\\n            preppin = preppin.filter((el) => el != portValue);\\n            portValue = ns.readPort(port);\\n        }\\n    }\\n    return preppin;\\n}\\n// -----------------------------------------------------\\n// -------------- PORT CHECKING END ------------------\\n// ------------------------------------------------------\\n// ---------------------------------------------------------\\n// -------------- BATCHING FUNCTION START ------------------\\n// ---------------------------------------------------------\\nasync function batch(ns, toBatch, batches, serverManager) {\\n    let portSeed = 1;\\n    for (const target of toBatch) {\\n        let batch = batches.get(target.name);\\n        if (batch == undefined || !batch.running) {\\n            const calc = new HwgOpsCalulator(ns, target);\\n            batch = creaBatch(calc);\\n            batch.running = await serverManager.avviaHwgwBatch(target, batch, calc, new Date().getTime(), portSeed);\\n            batches = batches.set(target.name, batch);\\n            if (portSeed > 4)\\n                portSeed = 1;\\n            else\\n                portSeed++;\\n            await ns.sleep(1);\\n        }\\n    }\\n    return batches;\\n}\\nfunction creaBatch(calc) {\\n    const weakTime = calc.calcolaWeakTime();\\n    const hackTime = calc.calcolaHackTime(weakTime);\\n    const growTime = calc.calcolaGrowTime(hackTime);\\n    return new HwgwBatch(hackTime, weakTime, growTime);\\n}\\n// -------------------------------------------------------\\n// -------------- BATCHING FUNCTION END ------------------\\n// -------------------------------------------------------\\n// --------------------------------------------------------\\n// -------------- PREPPIN FUNCTION START ------------------\\n// --------------------------------------------------------\\nasync function prepServers(ns, toPrep, preppin, serverMgr) {\\n    let portSeed = 1;\\n    let prepStarted = false;\\n    for (const daPreparare of toPrep) {\\n        if (preppin.includes(daPreparare.name))\\n            continue;\\n        serverMgr.aggiornaUtilizzo();\\n        if (!serverMgr.serverLiberi())\\n            return;\\n        const calc = new HwgOpsCalulator(ns, daPreparare);\\n        const weakTime = calc.calcolaWeakTime();\\n        const growTime = calc.calcolaGrowTime(calc.calcolaHackTime(weakTime));\\n        const batch = new WgwBatch(portSeed, weakTime, growTime);\\n        batch.calcolaWgwThreads(ns, daPreparare, calc);\\n        const ramNecessaria = batch.getNeededRam();\\n        if (!serverMgr.canRun(ramNecessaria)) {\\n            continue;\\n        }\\n        prepStarted = true;\\n        serverMgr.avviaWgwBatch(daPreparare.name, batch);\\n        preppin.push(daPreparare.name);\\n        if (portSeed > 4)\\n            portSeed = 1;\\n        else\\n            portSeed++;\\n    }\\n    // wait a moment to let the prep start and have correct ram info on batching\\n    if (prepStarted)\\n        await ns.sleep(500);\\n}\\n// ------------------------------------------------------\\n// -------------- PREPPIN FUNCTION END ------------------\\n// ------------------------------------------------------\\n// ---------------------------------------------------------\\n// -------------- AUTOWEAK FUNCTION START ------------------\\n// ---------------------------------------------------------\\nfunction checkAutoWeak(ns, servers) {\\n    for (const server of servers) {\\n        checkAndStartAutoWeak(ns, server);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartAutoWeak(ns, server) {\\n    const scriptRam = ns.getScriptRam(SERVER_WEAKEN_V2_SCRIPT_NAME);\\n    const serverRam = ns.getServerMaxRam(server);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    if (threads > 0) {\\n        if (!ns.isRunning(SERVER_WEAKEN_V2_SCRIPT_NAME, server, server, threads)) {\\n            ns.scp(SERVER_WEAKEN_V2_SCRIPT_NAME, server);\\n            ns.exec(SERVER_WEAKEN_V2_SCRIPT_NAME, server, threads, server, threads);\\n        }\\n    }\\n}\\n// -------------------------------------------------------\\n// -------------- AUTOWEAK FUNCTION END ------------------\\n// -------------------------------------------------------\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hbmFnZXJzL2h3Z3ctbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0UsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzFELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUV4RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFckQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNqQyxFQUFFLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDekMsRUFBRSxDQUFDLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3hDLEVBQUUsQ0FBQyxVQUFVLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUMzQyxFQUFFLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDekMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ25DLEVBQUUsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNqQyxFQUFFLENB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\",\"filename\":\"/managers/hwgw-manager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/920d95cd-ed26-4dc0-87da-1887b73116a5\",\"moduleSequenceNumber\":312},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/a2f9be16-2f49-41f4-abae-670b78abcada\",\"moduleSequenceNumber\":311},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/b47f6ae5-c9f1-44b1-8d52-549cd38792de\",\"moduleSequenceNumber\":342},{\"filename\":\"/utils/hwgw-server-info.js\",\"url\":\"blob:https://danielyxie.github.io/f50ebaea-c85e-4746-9ee1-de57775ea611\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"blob:https://danielyxie.github.io/5e0ad694-6746-426c-ab6e-87ff1f9b8cc9\",\"moduleSequenceNumber\":343},{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/66bdd3fe-a771-4d96-81ed-d0a6d8dfca60\",\"moduleSequenceNumber\":368},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:https://danielyxie.github.io/3408b361-ef32-4656-8113-26f6b463b8d8\",\"moduleSequenceNumber\":367},{\"filename\":\"/hwgw/wgw-batch.js\",\"url\":\"blob:https://danielyxie.github.io/918701a8-d85b-4b74-abc5-c1a23f988bc0\",\"moduleSequenceNumber\":356},{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/8cbc2dc5-1681-475b-8b80-93c7e117b7e6\",\"moduleSequenceNumber\":365},{\"filename\":\"/utils/server-data.js\",\"url\":\"blob:https://danielyxie.github.io/711e9697-7e86-4227-8b55-3aee491a3c00\",\"moduleSequenceNumber\":329},{\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"blob:https://danielyxie.github.io/6c0a8412-f662-46cf-83e6-4c9ab5cd49e0\",\"moduleSequenceNumber\":369},{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/a44a25f3-ad36-4403-b625-ffed8b14a5d0\",\"moduleSequenceNumber\":365},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/2000d999-66da-4f03-ae9c-826104c7d2ee\",\"moduleSequenceNumber\":366},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:https://danielyxie.github.io/268846c5-67cd-431c-b18a-e847114fb023\",\"moduleSequenceNumber\":367},{\"filename\":\"/hwgw/hwgw-server-manager.js\",\"url\":\"blob:https://danielyxie.github.io/f2cf707c-d25d-4af5-b5bb-976263246b31\",\"moduleSequenceNumber\":357},{\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"blob:https://danielyxie.github.io/60bf4b6a-1269-42e7-a115-2ff377b6fa0d\",\"moduleSequenceNumber\":369},{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/a6c2128c-68bd-4c64-9ac1-89a4ab0184ca\",\"moduleSequenceNumber\":368},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:https://danielyxie.github.io/68c165f3-1aa7-40e2-a9e3-fda1288c5765\",\"moduleSequenceNumber\":367},{\"filename\":\"/hwgw/hwgw-server-batch.js\",\"url\":\"blob:https://danielyxie.github.io/eace4e52-4b3e-4c67-98ea-31eb0913c055\",\"moduleSequenceNumber\":358},{\"filename\":\"/hwgw/hwgw-batch.js\",\"url\":\"blob:https://danielyxie.github.io/ee953b43-4d56-4f1d-aad2-04748705a57c\",\"moduleSequenceNumber\":339},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/a91215ec-3c1c-42db-978a-6c85fdd9045d\",\"moduleSequenceNumber\":366},{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/8020368d-ec7a-4122-9069-4b945fe68704\",\"moduleSequenceNumber\":368},{\"filename\":\"/managers/hwgw-manager.js\",\"url\":\"blob:https://danielyxie.github.io/d1cb2c7e-1ec8-4145-9851-a432a9776b4c\",\"moduleSequenceNumber\":619}],\"dependents\":[],\"ramUsage\":13.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ALL_SERVERS_FILENAME, SERVERS_DETAIL_FILENAME, SERVERS_FILENAME } from 'const/files';\\nimport { FileHandler } from 'files/filehandler';\\nexport async function loadTargetNames(ns) {\\n    return (await new FileHandler(ns, SERVERS_FILENAME).read());\\n}\\nexport async function loadTargetInfo(ns) {\\n    return await new FileHandler(ns, SERVERS_DETAIL_FILENAME).read();\\n}\\nexport async function loadAllTargets(ns) {\\n    return await new FileHandler(ns, ALL_SERVERS_FILENAME).read();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFyZ2V0LWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy90YXJnZXQtbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSx1QkFBdUIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5RixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHaEQsTUFBTSxDQUFDLEtBQUssVUFBVSxlQUFlLENBQUMsRUFBTTtJQUMxQyxPQUFPLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBYSxDQUFDO0FBQzFFLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGNBQWMsQ0FBQyxFQUFNO0lBQ3pDLE9BQU8sTUFBTSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsdUJBQXVCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuRSxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxjQUFjLENBQUMsRUFBTTtJQUN6QyxPQUFPLE1BQU0sSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLG9CQUFvQixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDaEUsQ0FBQyJ9\",\"filename\":\"/utils/target-loader.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgOpsCalulator {\\n    ns;\\n    target;\\n    targetServer;\\n    hasFormulas = false;\\n    constructor(ns, target) {\\n        this.ns = ns;\\n        this.target = target;\\n        this.targetServer = ns.getServer(this.target.name);\\n        this.hasFormulas = ns.fileExists('formulas.exe', 'home');\\n    }\\n    calcolaGrowThreads(startingMoney, cores = 1) {\\n        const threads = this.growtThreadsInternal(startingMoney, cores);\\n        return Math.max(1, Math.ceil(threads));\\n    }\\n    calcolaGrowTime(hackTime) {\\n        // NS Function calc, opted for hardcoded until i decide to rework the formulas management\\n        // let time: number;\\n        // if (this.hasFormulas) {\\n        //   time = this.ns.formulas.hacking.growTime(this.targetServer, this.ns.getPlayer());\\n        // } else {\\n        //   time = this.ns.getGrowTime(this.target.name);\\n        // }\\n        return Math.max(1, Math.ceil(hackTime * 3.2));\\n    }\\n    calcolaWeakThread(cores = 1) {\\n        const currentSec = this.target.currentSec;\\n        const secWeak = this.ns.weakenAnalyze(1, cores);\\n        const rate = (currentSec - this.target.minSecurity) / secWeak;\\n        return Math.max(1, Math.ceil(rate));\\n    }\\n    calcolaWeakTime() {\\n        let time;\\n        if (this.hasFormulas) {\\n            time = this.ns.formulas.hacking.weakenTime(this.targetServer, this.ns.getPlayer());\\n        }\\n        else {\\n            time = this.ns.getWeakenTime(this.target.name);\\n        }\\n        return Math.max(1, Math.ceil(time));\\n    }\\n    calcolaHackThread(percentage = 0.9) {\\n        const maxMoney = this.target.maxMoney;\\n        const moneyPerThread = (this.hasFormulas\\n            ? this.ns.formulas.hacking.hackPercent(this.targetServer, this.ns.getPlayer())\\n            : this.ns.hackAnalyze(this.target.name)) * maxMoney;\\n        const minWanted = maxMoney * percentage;\\n        const rate = minWanted / moneyPerThread;\\n        const threads = Math.max(1, Math.floor(rate));\\n        return threads;\\n    }\\n    calcolaHackTime(weakTime) {\\n        // NS Function calc, opted for hardcoded until i decide to rework the formulas management\\n        // let time;\\n        // if (this.hasFormulas) {\\n        //   time = this.ns.formulas.hacking.hackTime(this.targetServer, this.ns.getPlayer());\\n        // } else {\\n        //   time = this.ns.getHackTime(this.target.name);\\n        // }\\n        return Math.max(1, Math.ceil(weakTime / 4));\\n    }\\n    growtThreadsInternal(startingMoney, cores = 1) {\\n        if (this.hasFormulas) {\\n            if (startingMoney)\\n                this.targetServer.moneyAvailable = startingMoney;\\n            return this.ns.formulas.hacking.growThreads(this.targetServer, this.ns.getPlayer(), this.target.maxMoney, cores);\\n        }\\n        else {\\n            const currentMoney = startingMoney ? startingMoney : this.target.currentMoney;\\n            const rate = this.target.maxMoney / (currentMoney > 0 ? currentMoney : 1);\\n            return this.ns.growthAnalyze(this.target.name, rate, cores);\\n        }\\n    }\\n    // SPOSTARE\\n    calcolaHackPerc() {\\n        if (this.hasFormulas) {\\n            return this.ns.formulas.hacking.hackPercent(this.targetServer, this.ns.getPlayer());\\n        }\\n        else {\\n            return this.ns.hackAnalyze(this.target.name);\\n        }\\n    }\\n    calcolaHackXp() {\\n        if (this.hasFormulas) {\\n            return this.ns.formulas.hacking.hackExp(this.targetServer, this.ns.getPlayer());\\n        }\\n        else {\\n            return -1;\\n        }\\n    }\\n    calcolaHackChance() {\\n        if (this.hasFormulas) {\\n            return this.ns.formulas.hacking.hackChance(this.targetServer, this.ns.getPlayer());\\n        }\\n        else {\\n            return this.ns.hackAnalyzeChance(this.target.name);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdnLW9wcy1jYWx1bGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvaHdnLW9wcy1jYWx1bGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLGVBQWU7SUFDMUIsRUFBRSxDQUFLO0lBQ1AsTUFBTSxDQUFpQjtJQUN2QixZQUFZLENBQVM7SUFDckIsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUNwQixZQUFZLEVBQU0sRUFBRSxNQUFzQjtRQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELGtCQUFrQixDQUFDLGFBQWlDLEVBQUUsS0FBSyxHQUFHLENBQUM7UUFDN0QsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoRSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsZUFBZSxDQUFDLFFBQWdCO1FBQzlCLHlGQUF5RjtRQUN6RixvQkFBb0I7UUFDcEIsMEJBQTBCO1FBQzFCLHNGQUFzRjtRQUN0RixXQUFXO1FBQ1gsa0RBQWtEO1FBQ2xELElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJ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\",\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    for (let i = 0; i < 17; i++) {\\n        calcolaTempiBatch(ns, 25000, 35246, 28765, i);\\n    }\\n    // testHackCalc(ns);\\n}\\nfunction calcolaTempiBatch(ns, tempoHack, tempoWeak, tempoGrow, iteration = 0, scritpDelay = 100) {\\n    const sleepWeakHack = scritpDelay * iteration * 4;\\n    const sleepHack = tempoWeak - tempoHack - scritpDelay + sleepWeakHack;\\n    const endHack = sleepHack + tempoHack;\\n    const endWeakHack = tempoWeak + sleepWeakHack;\\n    const sleepGrow = endWeakHack - tempoGrow + scritpDelay;\\n    const endGrow = sleepGrow + tempoGrow;\\n    const sleepWeakGrow = endGrow - tempoWeak + scritpDelay;\\n    const endWeakGrow = sleepWeakGrow + tempoWeak;\\n    ns.print('iterazione ' + iteration + ' end hack: ', endHack);\\n    ns.print('iterazione ' + iteration + ' end endWeakHack: ', endWeakHack);\\n    ns.print('iterazione ' + iteration + ' end endGrow: ', endGrow);\\n    ns.print('iterazione ' + iteration + ' end endWeakGrow: ', endWeakGrow);\\n    const sleepGrow2 = Math.max(1, Math.ceil(tempoWeak - tempoGrow)) + scritpDelay;\\n    const endGrow2 = sleepGrow + tempoGrow;\\n    const sleepWeakGrow2 = Math.max(1, Math.ceil(endGrow - tempoWeak)) + scritpDelay;\\n    const endWeakGrow2 = sleepWeakGrow2 + tempoWeak;\\n    // ns.print('end endWeak: ', tempoWeak);\\n    // ns.print('end endGrow2: ', endGrow2);\\n    // ns.print('end endWeakGrow2: ', endWeakGrow2);\\n}\\nfunction testHackCalc(ns) {\\n    let server = ns.getServer('joesguns');\\n    const maxMoney = ns.getServer('joesguns').moneyMax;\\n    const moneyPerThread = 0.06 * maxMoney;\\n    const minWanted = maxMoney * 0.9;\\n    const rate = minWanted / moneyPerThread;\\n    const threads = Math.max(1, Math.floor(rate));\\n    let WEAKEN_PER_THREAD = ns.weakenAnalyze(1, 1);\\n    let HW_THREADS = ns.hackAnalyzeSecurity(1) / WEAKEN_PER_THREAD;\\n    let GW_THREADS = ns.growthAnalyzeSecurity(1, undefined, 1) / WEAKEN_PER_THREAD;\\n    let hackWeakThreads = Math.max(1, Math.ceil(HW_THREADS * threads));\\n    server.moneyAvailable = minWanted;\\n    let growThreads = ns.formulas.hacking.growThreads(server, ns.getPlayer(), server.moneyMax, 1);\\n    let growWeakThreads = Math.max(1, Math.ceil(GW_THREADS * growThreads));\\n    ns.print('max money: ', maxMoney);\\n    ns.print('hackthread ', threads);\\n    ns.print('hackWeakThreads ', hackWeakThreads);\\n    ns.print('growThreads ', growThreads);\\n    ns.print('growWeakThreads ', growWeakThreads);\\n    ns.print('GW_THREADS ', GW_THREADS);\\n    ns.print('HW_THREADS ', HW_THREADS);\\n    ns.print('WEAKEN_PER_THREAD ', WEAKEN_PER_THREAD);\\n    ns.print('ns.hackAnalyzeSecurity(1) ', ns.hackAnalyzeSecurity(1));\\n    ns.print(\\\"ns.growthAnalyzeSecurity(1, 'joesguns', 1) \\\", ns.growthAnalyzeSecurity(1, undefined, 1));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy90ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDM0IsaUJBQWlCLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQy9DO0lBQ0Qsb0JBQW9CO0FBQ3RCLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUN4QixFQUFNLEVBQ04sU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsWUFBb0IsQ0FBQyxFQUNyQixjQUFzQixHQUFHO0lBRXpCLE1BQU0sYUFBYSxHQUFHLFdBQVcsR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBRWxELE1BQU0sU0FBUyxHQUFHLFNBQVMsR0FBRyxTQUFTLEdBQUcsV0FBVyxHQUFHLGFBQWEsQ0FBQztJQUN0RSxNQUFNLE9BQU8sR0FBRyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBRXRDLE1BQU0sV0FBVyxHQUFHLFNBQVMsR0FBRyxhQUFhLENBQUM7SUFFOUMsTUFBTSxTQUFTLEdBQUcsV0FBVyxHQUFHLFNBQVMsR0FBRyxXQUFXLENBQUM7SUFDeEQsTUFBTSxPQUFPLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUV0QyxNQUFNLGFBQWEsR0FBRyxPQUFPLEdBQUcsU0FBUyxHQUFHLFdBQVcsQ0FBQztJQUN4RCxNQUFNLFdBQVcsR0FBRyxhQUFhLEdBQUcsU0FBUyxDQUFDO0lBRTlDLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLFNBQVMsR0FBRyxhQUFhLEVBQUUsT0FBTyxD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\",\"filename\":\"/tests/test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/tests/test.js\",\"url\":\"blob:https://danielyxie.github.io/0cc0d538-197a-4bb4-9157-586951fe425b\",\"moduleSequenceNumber\":92404}],\"dependents\":[],\"ramUsage\":7.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WG_COST } from 'const/hwgw';\\nimport { XP_FARM_SCRIPT_NAME } from 'const/scripts';\\nimport { FARM_SERVER_GB, XP_FARMER_SERVER_PREFIX } from 'const/servers';\\nimport { loadTargetInfo } from 'utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    const servers = ns.getPurchasedServers().filter((el) => el.startsWith(XP_FARMER_SERVER_PREFIX));\\n    const targets = (await loadTargetInfo(ns)).sort(function (a, b) {\\n        return b.farmScore - a.farmScore;\\n    });\\n    let i = 0;\\n    for (let farmer of servers) {\\n        ns.exec(XP_FARM_SCRIPT_NAME, farmer, Math.floor(FARM_SERVER_GB / WG_COST), targets[0].name);\\n        i++;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pc2MveHAtZmFybWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXJELHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7SUFDaEcsTUFBTSxPQUFPLEdBQUksQ0FBQyxNQUFNLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztRQUM5RSxPQUFPLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNILElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLEtBQUssSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzFCLEVBQUUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1RixDQUFDLEVBQUUsQ0FBQztLQUNMO0FBQ0gsQ0FBQyJ9\",\"filename\":\"/misc/xp-farmer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/80df8ef5-82de-4adf-aa28-50f377fdaee4\",\"moduleSequenceNumber\":329},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/82bbf8b2-f42b-4035-90fe-3c50335d54e9\",\"moduleSequenceNumber\":328},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/330d1e88-a7e4-4d59-b09e-a12f962a03ec\",\"moduleSequenceNumber\":359},{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/99a088cc-6f50-4cfb-b574-f81f43ec6ccb\",\"moduleSequenceNumber\":382},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/0ce47af0-4937-4a49-9df2-1e6739ba2476\",\"moduleSequenceNumber\":384},{\"filename\":\"/const/hwgw.js\",\"url\":\"blob:https://danielyxie.github.io/38afb146-ac53-4396-bb54-1d8eb043c688\",\"moduleSequenceNumber\":385},{\"filename\":\"/misc/xp-farmer.js\",\"url\":\"blob:https://danielyxie.github.io/92106fcf-901b-411d-a945-ac51477f6df7\",\"moduleSequenceNumber\":652}],\"dependents\":[],\"ramUsage\":5.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HwgwServerManager } from 'hwgw/hwgw-server-manager';\\nimport { WgwBatch } from 'hwgw/wgw-batch';\\nimport { HwgOpsCalulator } from 'utils/hwg-ops-calulator';\\nimport { HwgwServerInfo } from 'utils/hwgw-server-info';\\nimport { loadTargetInfo } from 'utils/target-loader';\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.enableLog('exec');\\n    // ns.tail();\\n    const toPrep = ns.args[0];\\n    const portSeed = ns.args[1] != undefined ? ns.args[1] : new Date().getTime();\\n    const target = new HwgwServerInfo(ns, (await loadTargetInfo(ns)).filter((el) => el.name == toPrep)[0]);\\n    const serverMgr = new HwgwServerManager(ns);\\n    serverMgr.aggiornaUtilizzo();\\n    if (!serverMgr.serverLiberi())\\n        return;\\n    const calc = new HwgOpsCalulator(ns, target);\\n    const weakTime = calc.calcolaWeakTime();\\n    const growTime = calc.calcolaGrowTime(calc.calcolaHackTime(weakTime));\\n    const batch = new WgwBatch(portSeed, weakTime, growTime);\\n    batch.calcolaWgwThreads(ns, target, calc);\\n    serverMgr.avviaWgwBatch(target.name, batch);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1wcmVwcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2h3Z3cvaHdndy1wcmVwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXhELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVyRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQixhQUFhO0lBQ2IsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUNwQyxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN6RixNQUFNLE1BQU0sR0FBbUIsSUFBSSxjQUFjLENBQy9DLEVBQUUsRUFDRCxDQUFDLE1BQU0sY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDbEYsQ0FBQztJQUNGLE1BQU0sU0FBUyxHQUFzQixJQUFJLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFO1FBQUUsT0FBTztJQUV0QyxNQUFNLElBQUksR0FBb0IsSUFBSSxlQUFlLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzlELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN4QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUV0RSxNQUFNLEtBQUssR0FBYSxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ25FLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/hwgw/hwgw-prepper.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/12a75a69-05c9-48e1-aaa0-d6c859208927\",\"moduleSequenceNumber\":42991},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/45087549-60c5-4318-a7af-bc00846124fb\",\"moduleSequenceNumber\":47398},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/c81a4c05-286b-4ec4-bca4-ba5820386f57\",\"moduleSequenceNumber\":47393},{\"filename\":\"/utils/hwgw-server-info.js\",\"url\":\"blob:https://danielyxie.github.io/930a8c5a-d56f-4bb7-a6f8-b748363c2e56\",\"moduleSequenceNumber\":71746},{\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"blob:https://danielyxie.github.io/f2ad5a71-b1ec-48f9-9e2c-254ec3f3796b\",\"moduleSequenceNumber\":71762},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/ac3b00db-4fc8-4dde-9883-766681e7587a\",\"moduleSequenceNumber\":47398},{\"filename\":\"/hwgw/wgw-batch.js\",\"url\":\"blob:https://danielyxie.github.io/b34327b1-a711-412c-a337-6951d6fb5009\",\"moduleSequenceNumber\":93898},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/1afb2806-950e-4580-9faf-1f909e1bbe66\",\"moduleSequenceNumber\":47398},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/8c6fae7e-3b2f-4e59-a034-71ee5caaac5c\",\"moduleSequenceNumber\":47398},{\"filename\":\"/utils/server-data.js\",\"url\":\"blob:https://danielyxie.github.io/506f1dd4-f60b-4fc3-a44f-bd20480ce1ce\",\"moduleSequenceNumber\":47381},{\"filename\":\"/hwgw/hwgw-server-manager.js\",\"url\":\"blob:https://danielyxie.github.io/6999706d-f6d2-4a01-bdd5-99d2e4d5c890\",\"moduleSequenceNumber\":102049},{\"filename\":\"/hwgw/hwgw-prepper.js\",\"url\":\"blob:https://danielyxie.github.io/ef1591de-eed6-4ea1-be2e-96fb661c9973\",\"moduleSequenceNumber\":102053}],\"dependents\":[],\"ramUsage\":13.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HWGW_MANAGER_NAME, LOG_MANAGER, SCAN_SCRIPT_NAME } from 'const/scripts';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.exec(SCAN_SCRIPT_NAME, 'home', 1);\\n    ns.exec(LOG_MANAGER, 'home', 1);\\n    ns.spawn(HWGW_MANAGER_NAME, 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnR1cC1od2d3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3N0YXJ0dXAtaHdndy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpGLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNoQyxFQUFFLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLENBQUMifQ==\",\"filename\":\"startup-hwgw.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/b6a0435f-55ee-4ebd-af11-26abd67293ed\",\"moduleSequenceNumber\":366},{\"filename\":\"startup-hwgw.js\",\"url\":\"blob:https://danielyxie.github.io/d194e460-fc76-4a6b-9b6a-ecba20ecf4be\",\"moduleSequenceNumber\":615}],\"dependents\":[],\"ramUsage\":4.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FARM_SERVER_GB, MAX_FARMER_SERVER_NUM, XP_FARMER_SERVER_PREFIX } from 'const/servers';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const purch = ns.getPurchasedServers().filter((el) => el.startsWith(XP_FARMER_SERVER_PREFIX));\\n    FARM_SERVER_GB;\\n    for (let server of purch) {\\n        const serverRam = ns.getServerMaxRam(server);\\n        if (serverRam != FARM_SERVER_GB) {\\n            //ns.tprint('dry run upgrade');\\n            ns.upgradePurchasedServer(server, FARM_SERVER_GB);\\n        }\\n    }\\n    for (let count = purch.length; count < MAX_FARMER_SERVER_NUM; count++) {\\n        //ns.tprint('dry run buy');\\n        ns.purchaseServer(XP_FARMER_SERVER_PREFIX + (count + 1), FARM_SERVER_GB);\\n    }\\n    ns.exec('/prep/prep-servers.js', 'home', 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFybS1zZXJ2ZXItYnV5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pc2MvZmFybS1zZXJ2ZXItYnV5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQUUscUJBQXFCLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0YscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztJQUM5RixjQUFjLENBQUM7SUFDZixLQUFLLElBQUksTUFBTSxJQUFJLEtBQUssRUFBRTtRQUN4QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLElBQUksU0FBUyxJQUFJLGNBQWMsRUFBRTtZQUMvQiwrQkFBK0I7WUFDL0IsRUFBRSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztTQUNuRDtLQUNGO0lBQ0QsS0FBSyxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssR0FBRyxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUNyRSwyQkFBMkI7UUFDM0IsRUFBRSxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQztLQUMxRTtJQUNELEVBQUUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlDLENBQUMifQ==\",\"filename\":\"/misc/farm-server-buy.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/4268cd75-6109-4677-83f2-ecaf6c9c971d\",\"moduleSequenceNumber\":1749},{\"filename\":\"/misc/farm-server-buy.js\",\"url\":\"blob:https://danielyxie.github.io/539e26a0-edfa-42ee-b08c-d4fbb9780923\",\"moduleSequenceNumber\":1756}],\"dependents\":[],\"ramUsage\":7.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"upgradePurchasedServer\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwServerInfo {\\n    name;\\n    minSecurity;\\n    maxMoney;\\n    currentSec = 100;\\n    currentMoney = 0;\\n    prepped = false;\\n    score = -1;\\n    hwgwScore = -1;\\n    constructor(ns, target) {\\n        this.name = target.name;\\n        this.minSecurity = target.minSecurity;\\n        this.maxMoney = target.maxMoney;\\n        this.score = target.score;\\n        this.hwgwScore = target.hwgwScore;\\n        this.ricalcolaVariabili(ns);\\n    }\\n    ricalcolaVariabili(ns) {\\n        this.currentSec = ns.getServerSecurityLevel(this.name);\\n        this.currentMoney = ns.getServerMoneyAvailable(this.name);\\n        this.prepped = this.currentSec == this.minSecurity && this.currentMoney == this.maxMoney;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1zZXJ2ZXItaW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9od2d3LXNlcnZlci1pbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLElBQUksQ0FBUztJQUNiLFdBQVcsQ0FBUztJQUNwQixRQUFRLENBQVM7SUFDakIsVUFBVSxHQUFXLEdBQUcsQ0FBQztJQUN6QixZQUFZLEdBQVcsQ0FBQyxDQUFDO0lBQ3pCLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDaEIsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ1gsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2YsWUFBWSxFQUFNLEVBQUUsTUFBa0I7UUFDcEMsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUNsQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELGtCQUFrQixDQUFDLEVBQU07UUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDM0YsQ0FBQztDQUNGIn0=\",\"filename\":\"/utils/hwgw-server-info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { BEGINNER_HACK_SCRIPT_NAME, BITNODE_MANAGER_NAME, SERVER_WEAKEN_V2_SCRIPT_NAME } from 'const/scripts';\\nimport { loadTargetInfo, loadTargetNames } from '/utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    const targets = await loadTargetNames(ns);\\n    checkAutoWeak(ns, targets);\\n    const myRam = ns.getScriptRam(BITNODE_MANAGER_NAME);\\n    const beginnerScriptRam = ns.getScriptRam(BEGINNER_HACK_SCRIPT_NAME);\\n    const currentHomeRam = ns.getServerMaxRam('home') - ns.getServerUsedRam('home') + myRam;\\n    const bestTarget = (await loadTargetInfo(ns)).sort(function (a, b) {\\n        return b.score - a.score;\\n    })[0];\\n    ns.print('currentRam', currentHomeRam);\\n    ns.print('script ram', beginnerScriptRam);\\n    const freeThreads = Math.floor(currentHomeRam / beginnerScriptRam);\\n    ns.spawn(BEGINNER_HACK_SCRIPT_NAME, freeThreads, 'n00dles');\\n}\\n/** @param {NS} ns */\\nfunction checkAutoWeak(ns, servers) {\\n    for (let server of servers) {\\n        checkAndStartAutoWeak(ns, server);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartAutoWeak(ns, server) {\\n    const scriptRam = ns.getScriptRam(SERVER_WEAKEN_V2_SCRIPT_NAME);\\n    const serverRam = ns.getServerMaxRam(server);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    if (threads > 0) {\\n        if (!ns.isRunning(SERVER_WEAKEN_V2_SCRIPT_NAME, server, server, threads)) {\\n            ns.scp(SERVER_WEAKEN_V2_SCRIPT_NAME, server);\\n            ns.exec(SERVER_WEAKEN_V2_SCRIPT_NAME, server, threads, server, threads);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml0bm9kZS1zdGFydC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hbmFnZXJzL2JpdG5vZGUtc3RhcnQtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsb0JBQW9CLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUcsT0FBTyxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV2RSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDVixNQUFNLE9BQU8sR0FBYSxNQUFNLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwRCxhQUFhLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNwRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUNyRSxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDeEYsTUFBTSxVQUFVLEdBQUksQ0FBQyxNQUFNLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztRQUNqRixPQUFPLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3ZDLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDMUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEdBQUcsaUJBQWlCLENBQUMsQ0FBQztJQUNuRSxFQUFFLENBQUMsS0FBSyxDQUFDLHlCQUF5QixFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRUQscUJBQXFCO0FBQ3JCLFNBQVMsYUFBYSxDQUFDLEVBQU0sRUFBRSxPQUFpQjtJQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUMxQixxQkFBcUIsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDbkM7QUFDSCxDQUFDO0FBQ0QscUJBQXFCO0FBQ3JCLFNBQVMscUJBQXFCLENBQUMsRUFBTSxFQUFFLE1BQWM7SUFDbkQsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQ2hFLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLENBQUM7SUFDbEQsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1FBQ2YsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsNEJBQTRCLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRTtZQUN4RSxFQUFFLENBQUMsR0FBRyxDQUFDLDRCQUE0QixFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzdDLEVBQUUsQ0FBQyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDekU7S0FDRjtBQUNILENBQUMifQ==\",\"filename\":\"/managers/bitnode-start-manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/4a61884b-6421-416a-8354-d21050a0c072\",\"moduleSequenceNumber\":54},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/06ae0424-613f-48bf-8aae-d3351b598903\",\"moduleSequenceNumber\":1737},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/82314350-ce45-4231-b298-ef16cb7c0560\",\"moduleSequenceNumber\":1739},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/7ce45b41-e085-4df9-90df-756dc698c608\",\"moduleSequenceNumber\":1737},{\"filename\":\"/managers/bitnode-start-manager.js\",\"url\":\"blob:https://danielyxie.github.io/ccd45dcf-a4ce-457d-8e88-0ef124d4e134\",\"moduleSequenceNumber\":2780}],\"dependents\":[],\"ramUsage\":5.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { BITNODE_MANAGER_NAME, SCAN_SCRIPT_NAME } from 'const/scripts';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.exec(SCAN_SCRIPT_NAME, 'home', 1);\\n    ns.spawn(BITNODE_MANAGER_NAME, 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFyZC1yZXNldC1zdGFydHVwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhcmQtcmVzZXQtc3RhcnR1cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkUscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckMsRUFBRSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNwQyxDQUFDIn0=\",\"filename\":\"hard-reset-startup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    ns.print('bitnodeN: ', ns.getPlayer().bitNodeN);\\n    ns.print('karma: ', ns.heart.break());\\n    ns.print('ppl killed: ', ns.getPlayer().numPeopleKilled);\\n    // ns.print('has corp: ', ns.corporation);\\n    // ns.print('corp: ', ns.corporation.getCorporation());\\n    // ns.print('corp warehouse: ', ns.corporation.getWarehouse('AllNatural I Swear ;)','Sector-12'));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGVzdHMvc3RhdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1YsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUN0QyxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDekQsMENBQTBDO0lBQzFDLHVEQUF1RDtJQUN2RCxrR0FBa0c7QUFDcEcsQ0FBQyJ9\",\"filename\":\"/tests/stats.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/tests/stats.js\",\"url\":\"blob:https://danielyxie.github.io/640a7246-f3b7-469e-a2c0-b31bfeab9f9a\",\"moduleSequenceNumber\":6333}],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    ns.print('bitnodeN: ', ns.getPlayer().bitNodeN);\\n    ns.print('karma: ', ns.heart.break());\\n    ns.print('ppl killed: ', ns.getPlayer().numPeopleKilled);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9taXNjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoRCxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDdEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzNELENBQUMifQ==\",\"filename\":\"/tests/misc.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVER_NAME_PREFIX, XP_FARMER_SERVER_PREFIX } from 'const/servers';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    for (let i = 10; i < 11; i++) {\\n        const xpNumber = i + 15;\\n        ns.renamePurchasedServer(SERVER_NAME_PREFIX + i, XP_FARMER_SERVER_PREFIX + xpNumber);\\n        // ns.renamePurchasedServer(XP_FARMER_SERVER_PREFIX + i, SERVER_NAME_PREFIX + xpNumber);\\n    }\\n    // ns.renamePurchasedServer(XP_FARMER_SERVER_PREFIX + \\\"-6\\\",XP_FARMER_SERVER_PREFIX + \\\"1\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFudWFsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9tYW51YWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1RSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFVixLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVCLE1BQU0sUUFBUSxHQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLGtCQUFrQixHQUFHLENBQUMsRUFBRSx1QkFBdUIsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUNyRix3RkFBd0Y7S0FDekY7SUFFRCwwRkFBMEY7QUFDNUYsQ0FBQyJ9\",\"filename\":\"/tests/manuale.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/d8e0bd79-9df1-4c45-a785-e2adaeccf43a\",\"moduleSequenceNumber\":3673},{\"filename\":\"/tests/manuale.js\",\"url\":\"blob:https://danielyxie.github.io/6f5e8573-b989-467e-a26d-e1dc227c6744\",\"moduleSequenceNumber\":3716}],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"renamePurchasedServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { BATCH_BUFFER, WG_COST } from 'const/hwgw';\\nimport { HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4 } from 'const/ports';\\nexport class WgwBatch {\\n    batchPort;\\n    growTime;\\n    weakTime;\\n    weakEndTime;\\n    growEndTime;\\n    weakGrowEndTime;\\n    weakThreads = 0;\\n    growThreads = 0;\\n    growWeakThreads = 0;\\n    constructor(portSeed, tempoWeak, tempoGrow, scriptDelay = 20) {\\n        if (portSeed % 4 == 0)\\n            this.batchPort = HWGW_PREP_PORT_4;\\n        if (portSeed % 3 == 0)\\n            this.batchPort = HWGW_PREP_PORT_3;\\n        if (portSeed % 2 == 0)\\n            this.batchPort = HWGW_PREP_PORT_2;\\n        else\\n            this.batchPort = HWGW_PREP_PORT_1;\\n        this.growTime = tempoGrow;\\n        this.weakTime = tempoWeak;\\n        const buffer = BATCH_BUFFER;\\n        this.weakEndTime = Date.now() + this.weakTime + scriptDelay + buffer;\\n        this.growEndTime = Date.now() + this.weakTime + scriptDelay * 2 + buffer;\\n        this.weakGrowEndTime = Date.now() + this.weakTime + scriptDelay * 3 + buffer;\\n    }\\n    calcolaWgwThreads(ns, target, calc) {\\n        // calcolo thread usando i core HOME\\n        let WEAKEN_PER_THREAD = ns.weakenAnalyze(1);\\n        let GW_THREADS = ns.growthAnalyzeSecurity(1) / WEAKEN_PER_THREAD;\\n        this.growThreads = calc.calcolaGrowThreads(undefined);\\n        this.weakThreads = Math.max(1, calc.calcolaWeakThread(1));\\n        this.growWeakThreads = Math.max(1, Math.ceil(GW_THREADS * this.growThreads));\\n    }\\n    getNeededRam() {\\n        return (this.growThreads + this.growWeakThreads + this.weakThreads) * WG_COST;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2d3LWJhdGNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2h3Z3cvd2d3LWJhdGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUlyRyxNQUFNLE9BQU8sUUFBUTtJQUNuQixTQUFTLENBQVM7SUFDbEIsUUFBUSxDQUFTO0lBQ2pCLFFBQVEsQ0FBUztJQUNqQixXQUFXLENBQVM7SUFDcEIsV0FBVyxDQUFTO0lBQ3BCLGVBQWUsQ0FBUztJQUN4QixXQUFXLEdBQVcsQ0FBQyxDQUFDO0lBQ3hCLFdBQVcsR0FBVyxDQUFDLENBQUM7SUFDeEIsZUFBZSxHQUFXLENBQUMsQ0FBQztJQUU1QixZQUFZLFFBQWdCLEVBQUUsU0FBaUIsRUFBRSxTQUFpQixFQUFFLFdBQVcsR0FBRyxFQUFFO1FBQ2xGLElBQUksUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6RCxJQUFJLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQztZQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUM7UUFDekQsSUFBSSxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDOztZQUNwRCxJQUFJLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDO1FBQ3ZDLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBRTFCLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsR0FBRyxNQUFNLENBQUM7UUFDckUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxXQUFXLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUN6RSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBQy9FLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxFQUFNLEVBQUUsTUFBc0IsRUFBRSxJQUFxQjtRQUNyRSxvQ0FBb0M7UUFDcEMsSUFBSSxpQkFBaUIsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVDLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxpQkFBaUIsQ0FBQztRQUNqRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxPQUFPLENBQUM7SUFDaEYsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/wgw-batch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WG_COST } from 'const/hwgw';\\nimport { HWGW_SERVER_GROW_SCRIPT, HWGW_SERVER_HACK_SCRIPT, HWGW_SERVER_WEAKEN_SCRIPT } from 'const/scripts';\\nimport { XP_FARMER_SERVER_PREFIX } from 'const/servers';\\nimport { HwgwWorkerProp } from 'hwgw/hwgw-worker-prop';\\nimport { ServerData } from 'utils/server-data';\\nexport class HwgwServerManager {\\n    ns;\\n    servers = [];\\n    homeServer;\\n    constructor(ns) {\\n        this.ns = ns;\\n        const serverNames = ns\\n            .getPurchasedServers()\\n            .filter((el) => el !== 'home' && !el.startsWith(XP_FARMER_SERVER_PREFIX));\\n        this.homeServer = new ServerData(ns, 'home');\\n        this.homeServer.aggiornaServer();\\n        for (const server of serverNames) {\\n            if (server === 'home')\\n                continue;\\n            const serverData = new ServerData(ns, server);\\n            serverData.aggiornaServer();\\n            this.servers.push(serverData);\\n        }\\n    }\\n    async avviaHwgwBatch(target, batch, calc, randomArg, portSeed) {\\n        const serverBatches = [];\\n        this.aggiornaUtilizzo();\\n        let iteration = 0;\\n        let serverBatch = batch.creaServerBatch(this.ns, this.homeServer, target, calc, iteration);\\n        if (serverBatch.canRun) {\\n            serverBatches.push(serverBatch);\\n            iteration++;\\n        }\\n        for (const server of this.servers) {\\n            serverBatch = batch.creaServerBatch(this.ns, server, target, calc, iteration);\\n            if (serverBatch.canRun) {\\n                serverBatches.push(serverBatch);\\n                iteration++;\\n            }\\n        }\\n        for (let i = 0; i < serverBatches.length; i++) {\\n            const serverBatch = serverBatches[i];\\n            serverBatch.ricalcolaSleep();\\n            this.ns.exec(HWGW_SERVER_HACK_SCRIPT, serverBatch.server.name, serverBatch.hackThreads, ...serverBatch.getHackArgs(randomArg));\\n            this.ns.exec(HWGW_SERVER_WEAKEN_SCRIPT, serverBatch.server.name, serverBatch.hackWeakThreads, ...serverBatch.getHackWeakArgs(randomArg));\\n            this.ns.exec(HWGW_SERVER_GROW_SCRIPT, serverBatch.server.name, serverBatch.growThreads, ...serverBatch.getGrowArgs(randomArg));\\n            const growWeakArgs = i == serverBatches.length - 1\\n                ? serverBatch.getGrowWeakArgs(randomArg, portSeed)\\n                : serverBatch.getGrowWeakArgs(randomArg);\\n            this.ns.exec(HWGW_SERVER_WEAKEN_SCRIPT, serverBatch.server.name, serverBatch.growWeakThreads, ...growWeakArgs);\\n            await this.ns.sleep(1);\\n        }\\n        return true;\\n    }\\n    aggiornaUtilizzo() {\\n        this.servers.forEach((el) => {\\n            el.aggiornaServer();\\n        });\\n        this.homeServer.aggiornaServer();\\n    }\\n    serverLiberi() {\\n        return this.servers.find((el) => el.freeRam > 0) !== undefined || this.homeServer.freeRam > 0;\\n    }\\n    canRun(ramNecessaria) {\\n        this.aggiornaUtilizzo();\\n        let ramDisponibile = this.homeServer.freeRam;\\n        for (const server of this.servers) {\\n            ramDisponibile += server.freeRam;\\n        }\\n        return ramDisponibile > ramNecessaria;\\n    }\\n    // WGW Batching\\n    avviaWgwBatch(target, batch) {\\n        const growProp = new HwgwWorkerProp(target, batch.growTime, batch.growEndTime, 0, 'PREP');\\n        const weakProp = new HwgwWorkerProp(target, batch.weakTime, batch.weakEndTime, 0, 'PREP');\\n        weakProp.weakType = 1;\\n        const growWeakProp = new HwgwWorkerProp(target, batch.weakTime, batch.weakGrowEndTime, 0, 'PREP');\\n        growWeakProp.weakType = 2;\\n        growWeakProp.writePort = batch.batchPort;\\n        const weakArgs = [JSON.stringify(weakProp)];\\n        const growArgs = [JSON.stringify(growProp)];\\n        const growWeakArgs = [JSON.stringify(growWeakProp)];\\n        this.aggiornaUtilizzo();\\n        const weakThreads = batch.weakThreads;\\n        const growThreads = batch.growThreads;\\n        const growWeakThreads = batch.growWeakThreads;\\n        this.avviaWgwScript(HWGW_SERVER_WEAKEN_SCRIPT, weakThreads, WG_COST, ...weakArgs);\\n        this.avviaWgwScript(HWGW_SERVER_GROW_SCRIPT, growThreads, WG_COST, ...growArgs);\\n        this.avviaWgwScript(HWGW_SERVER_WEAKEN_SCRIPT, growWeakThreads, WG_COST, ...growWeakArgs);\\n    }\\n    avviaWgwScript(scriptName, threadNeeded, ramPerThread, ...args) {\\n        if (threadNeeded <= 0) {\\n            this.ns.print('thread necessari == 0... non dovrebbe succedere');\\n            return;\\n        }\\n        this.aggiornaUtilizzo();\\n        const allServers = this.servers.slice(0);\\n        allServers.unshift(this.homeServer);\\n        let availableServers = allServers.filter((el) => el.freeRam > 0 && el.freeRam > ramPerThread * threadNeeded);\\n        if (availableServers.length > 0) {\\n            this.ns.exec(scriptName, availableServers[0].name, threadNeeded, ...args);\\n            return;\\n        }\\n        availableServers = allServers.filter((el) => el.freeRam > 0 && el.freeRam > ramPerThread);\\n        for (const server of allServers) {\\n            const freeThreads = server.freeRam / ramPerThread;\\n            const threadToLaunch = Math.floor(freeThreads > threadNeeded ? threadNeeded : freeThreads);\\n            if (threadToLaunch <= 1)\\n                break;\\n            this.ns.exec(scriptName, server.name, threadToLaunch, ...args);\\n            server.aggiornaServer();\\n            threadNeeded -= threadToLaunch;\\n            if (threadNeeded <= 0) {\\n                break;\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1zZXJ2ZXItbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctc2VydmVyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsdUJBQXVCLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3hELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUl2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHL0MsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixFQUFFLENBQUs7SUFDUCxPQUFPLEdBQWlCLEVBQUUsQ0FBQztJQUMzQixVQUFVLENBQWE7SUFFdkIsWUFBWSxFQUFNO1FBQ2hCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsTUFBTSxXQUFXLEdBQUcsRUFBRTthQUNuQixtQkFBbUIsRUFBRTthQUNyQixNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksVUFBVSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ2pDLEtBQUssTUFBTSxNQUFNLElBQUksV0FBVyxFQUFFO1lBQ2hDLElBQUksTUFBTSxLQUFLLE1BQU07Z0JBQUUsU0FBUztZQUNoQyxNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDOUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyxjQUFjLENBQ2xCLE1BQXNCLEVBQ3RCLEtBQWdCLEVBQ2hCLElBQXFCLEVBQ3JCLFNBQWlCLEVBQ2pCLFFBQWdCO1FBRWhCLE1BQU0sYUFBYSxHQUFzQixFQUFFLENBQUM7UUFDNUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDeEIsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDM0YsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3RCLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDaEMsU0FBUyxFQUFFLENBQUM7U0FDYjtRQUNELEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNqQyxXQUFXLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQzlFLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRTtnQkFDdEIsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDaEMsU0FBUyxFQUFFLENBQUM7YUFDYjtTQUNGO1FBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0MsTUFBTSxXQUFXLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUM3QixJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FDVix1QkFBdUIsRUFDdkIsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQ3ZCLFdBQVcsQ0FBQyxXQUFXLEVBQ3ZCLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FDdEMsQ0FBQztZQUNGLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUNWLHlCQUF5QixFQUN6QixXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksRUFDdkIsV0FBVyxDQUFDLGVBQWUsRUFDM0IsR0FBRyxXQUFXLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUMxQyxDQUFDO1lBRUYsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQ1YsdUJBQXVCLEVBQ3ZCLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUN2QixXQUFXLENBQUMsV0FBVyxFQUN2QixHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQ3RDLENBQUM7WUFFRixNQUFNLFlBQVksR0FDaEIsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQztnQkFDM0IsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQztnQkFDbEQsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMseUJBQXlCLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLGVBQWUsRUFBRSxHQUFHLFlBQVksQ0FBQyxDQUFDO1lBQy9HLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDeEI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQzFCLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDaEcsQ0FBQztJQUVELE1BQU0sQ0FBQyxhQUFxQjtRQUMxQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QixJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztRQUM3QyxLQUFLLE1BQU0sTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDakMsY0FBYyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDbEM7UUFDRCxPQUFPLGNBQWMsR0FBRyxhQUFhLENBQUM7SUFDeEMsQ0FBQztJQUVELGVBQWU7SUFDZixhQUFhLENBQUMsTUFBYyxFQUFFLEtBQWU7UUFDM0MsTUFBTSxRQUFRLEdBQW1CLElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFHLE1BQU0sUUFBUSxHQUFtQixJQUFJLGNBQWMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxRyxRQUFRLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUN0QixNQUFNLFlBQVksR0FBbUIsSUFBSSxjQUFjLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbEgsWUFBWSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDMUIsWUFBWSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ3pDLE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sWUFBWSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7UUFDdEMsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztRQUN0QyxNQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDO1FBQzlDLElBQUksQ0FBQyxjQUFjLENBQUMseUJBQXlCLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxjQUFjLENBQUMsdUJBQXVCLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxjQUFjLENBQUMseUJBQXlCLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxHQUFHLFlBQVksQ0FBQyxDQUFDO0lBQzVGLENBQUM7SUFDRCxjQUFjLENBQ1osVUFBa0IsRUFDbEIsWUFBb0IsRUFDcEIsWUFBb0IsRUFDcEIsR0FBRyxJQUFtQztRQUV0QyxJQUFJLFlBQVksSUFBSSxDQUFDLEVBQUU7WUFDckIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsaURBQWlELENBQUMsQ0FBQztZQUNqRSxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwQyxJQUFJLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLEdBQUcsWUFBWSxHQUFHLFlBQVksQ0FBQyxDQUFDO1FBQzdHLElBQUksZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMvQixJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1lBQzFFLE9BQU87U0FDUjtRQUNELGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDLENBQUM7UUFDMUYsS0FBSyxNQUFNLE1BQU0sSUFBSSxVQUFVLEVBQUU7WUFDL0IsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUM7WUFDbEQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzNGLElBQUksY0FBYyxJQUFJLENBQUM7Z0JBQUUsTUFBTTtZQUMvQixJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztZQUMvRCxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDeEIsWUFBWSxJQUFJLGNBQWMsQ0FBQztZQUMvQixJQUFJLFlBQVksSUFBSSxDQUFDLEVBQUU7Z0JBQ3JCLE1BQU07YUFDUDtTQUNGO0lBQ0gsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-server-manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { BATCH_BUFFER, HACK_SEC_INCREASE, HWGW_MONEY_ITERATION_PERCENTAGE, HWGW_MONEY_MIN_PERCENTAGE, HWGW_MONEY_PERCENTAGE, H_COST, WG_COST, } from 'const/hwgw';\\nimport { HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4 } from 'const/ports';\\nimport { HwgwWorkerProp } from 'hwgw/hwgw-worker-prop';\\nexport class HwgwServerBatch {\\n    hackTime;\\n    growTime;\\n    weakTime;\\n    hackEndTime;\\n    weakHackEndTime;\\n    growEndTime;\\n    weakGrowEndTime;\\n    hackThreads = 0;\\n    hackWeakThreads = 0;\\n    growThreads = 0;\\n    growWeakThreads = 0;\\n    server;\\n    target;\\n    calc;\\n    scriptDelay;\\n    iteration;\\n    canRun = false;\\n    constructor(tempoHack, tempoWeak, tempoGrow, server, ns, target, calc, iteration = 0, scriptDelay = 20) {\\n        this.target = target;\\n        this.server = server;\\n        this.calc = calc;\\n        this.iteration = iteration;\\n        this.scriptDelay = scriptDelay;\\n        this.hackTime = tempoHack;\\n        this.growTime = tempoGrow;\\n        this.weakTime = tempoWeak;\\n        const buffer = BATCH_BUFFER + this.iteration * this.scriptDelay * 4;\\n        this.hackEndTime = Date.now() + this.weakTime + this.scriptDelay + buffer;\\n        this.weakHackEndTime = Date.now() + this.weakTime + this.scriptDelay * 2 + buffer;\\n        this.growEndTime = Date.now() + this.weakTime + this.scriptDelay * 3 + buffer;\\n        this.weakGrowEndTime = Date.now() + this.weakTime + this.scriptDelay * 4 + buffer;\\n        this.calcolaThreads(ns, calc, target);\\n        this.verificaServerCap(ns, calc, target);\\n    }\\n    getHackArgs(randomArg) {\\n        const prop = new HwgwWorkerProp(this.target.name, this.hackTime, this.hackEndTime, this.iteration, 'BATCH');\\n        return [JSON.stringify(prop), randomArg];\\n    }\\n    getHackWeakArgs(randomArg) {\\n        const prop = new HwgwWorkerProp(this.target.name, this.weakTime, this.weakHackEndTime, this.iteration, 'BATCH');\\n        prop.weakType = 1;\\n        return [JSON.stringify(prop), randomArg];\\n    }\\n    getGrowArgs(randomArg) {\\n        const prop = new HwgwWorkerProp(this.target.name, this.growTime, this.growEndTime, this.iteration, 'BATCH');\\n        return [JSON.stringify(prop), randomArg];\\n    }\\n    getGrowWeakArgs(randomArg, portSeed = 0) {\\n        const prop = new HwgwWorkerProp(this.target.name, this.weakTime, this.weakGrowEndTime, this.iteration, 'BATCH');\\n        prop.weakType = 2;\\n        if (portSeed > 0) {\\n            let port;\\n            if (portSeed % 4 == 0)\\n                port = HWGW_PORT_4;\\n            if (portSeed % 3 == 0)\\n                port = HWGW_PORT_3;\\n            if (portSeed % 2 == 0)\\n                port = HWGW_PORT_2;\\n            else\\n                port = HWGW_PORT_1;\\n            prop.writePort = port;\\n        }\\n        return [JSON.stringify(prop), randomArg];\\n    }\\n    ricalcolaSleep() {\\n        this.weakTime = this.calc.calcolaWeakTime();\\n        this.hackTime = this.calc.calcolaHackTime(this.weakTime);\\n        this.growTime = this.calc.calcolaGrowTime(this.hackTime);\\n        const buffer = BATCH_BUFFER + this.iteration * this.scriptDelay * 4;\\n        this.hackEndTime = Date.now() + this.weakTime + this.scriptDelay + buffer;\\n        this.weakHackEndTime = Date.now() + this.weakTime + this.scriptDelay * 2 + buffer;\\n        this.growEndTime = Date.now() + this.weakTime + this.scriptDelay * 3 + buffer;\\n        this.weakGrowEndTime = Date.now() + this.weakTime + this.scriptDelay * 4 + buffer;\\n    }\\n    calcolaThreads(ns, calc, target, percentage = HWGW_MONEY_PERCENTAGE) {\\n        const cores = this.server.cores;\\n        this.hackThreads = calc.calcolaHackThread(percentage);\\n        this.growThreads = calc.calcolaGrowThreads(target.maxMoney - target.maxMoney * percentage, cores);\\n        const WEAKEN_PER_THREAD = ns.weakenAnalyze(1, cores);\\n        const HW_THREADS = HACK_SEC_INCREASE / WEAKEN_PER_THREAD;\\n        const GW_THREADS = ns.growthAnalyzeSecurity(1, undefined, cores) / WEAKEN_PER_THREAD;\\n        this.hackWeakThreads = Math.max(1, Math.ceil(HW_THREADS * this.hackThreads));\\n        this.growWeakThreads = Math.max(1, Math.ceil(GW_THREADS * this.growThreads));\\n    }\\n    verificaServerCap(ns, calc, target) {\\n        let checkOrExit = false;\\n        let lowerPerc = HWGW_MONEY_PERCENTAGE - HWGW_MONEY_ITERATION_PERCENTAGE;\\n        this.server.aggiornaServer();\\n        while (!checkOrExit) {\\n            const ramNecessaria = (this.growWeakThreads + this.hackWeakThreads + this.growThreads) * WG_COST + this.hackThreads * H_COST;\\n            if (this.server.freeRam >= ramNecessaria) {\\n                this.canRun = true;\\n                checkOrExit = true;\\n            }\\n            else if (lowerPerc > HWGW_MONEY_MIN_PERCENTAGE) {\\n                this.calcolaThreads(ns, calc, target, lowerPerc);\\n                lowerPerc -= HWGW_MONEY_ITERATION_PERCENTAGE;\\n            }\\n            else {\\n                checkOrExit = true;\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1zZXJ2ZXItYmF0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaHdndy9od2d3LXNlcnZlci1iYXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsWUFBWSxFQUNaLGlCQUFpQixFQUNqQiwrQkFBK0IsRUFDL0IseUJBQXlCLEVBQ3pCLHFCQUFxQixFQUNyQixNQUFNLEVBQ04sT0FBTyxHQUNSLE1BQU0sWUFBWSxDQUFDO0FBQ3BCLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDakYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBS3ZELE1BQU0sT0FBTyxlQUFlO0lBQzFCLFFBQVEsQ0FBUztJQUNqQixRQUFRLENBQVM7SUFDakIsUUFBUSxDQUFTO0lBQ2pCLFdBQVcsQ0FBUztJQUNwQixlQUFlLENBQVM7SUFDeEIsV0FBVyxDQUFTO0lBQ3BCLGVBQWUsQ0FBUztJQUN4QixXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFDcEIsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLE1BQU0sQ0FBYTtJQUNuQixNQUFNLENBQWlCO0lBQ3ZCLElBQUksQ0FBa0I7SUFDdEIsV0FBVyxDQUFTO0lBQ3BCLFNBQVMsQ0FBUztJQUNsQixNQUFNLEdBQUcsS0FBSyxDQUFDO0lBRWYsWUFDRSxTQUFpQixFQUNqQixTQUFpQixFQUNqQixTQUFpQixFQUNqQixNQUFrQixFQUNsQixFQUFNLEVBQ04sTUFBc0IsRUFDdEIsSUFBcUIsRUFDckIsU0FBUyxHQUFHLENBQUMsRUFDYixXQUFXLEdBQUcsRUFBRTtRQUVoQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUUxQixNQUFNLE1BQU0sR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO1FBQzFFLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ2xGLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQzlFLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBRWxGLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsV0FBVyxDQUFDLFNBQWlCO1FBQzNCLE1BQU0s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\",\"filename\":\"/hwgw/hwgw-server-batch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HWGW_MONEY_ITERATION_PERCENTAGE, HWGW_MONEY_MIN_PERCENTAGE, HWGW_MONEY_PERCENTAGE, HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4, H_COST, WG_COST, } from 'const/files';\\nexport class WgwServerBatch {\\n    sleepWeakHack;\\n    sleepHack;\\n    sleepGrow;\\n    sleepWeakGrow;\\n    hackThreads = 0;\\n    hackWeakThreads = 0;\\n    growThreads = 0;\\n    growWeakThreads = 0;\\n    server;\\n    target;\\n    calc;\\n    canRun = false;\\n    constructor(tempoHack, tempoWeak, tempoGrow, server, ns, target, calc, iteration = 0, scriptDelay = 100) {\\n        this.target = target;\\n        this.server = server;\\n        this.calc = calc;\\n        this.sleepWeakHack = Math.max(0, Math.floor(scriptDelay * iteration * 4));\\n        this.sleepHack = Math.max(1, Math.floor(tempoWeak - tempoHack - scriptDelay + this.sleepWeakHack));\\n        const endWeakHack = tempoWeak + this.sleepWeakHack;\\n        this.sleepGrow = Math.max(1, Math.floor(endWeakHack - tempoGrow + scriptDelay));\\n        const endGrow = this.sleepGrow + tempoGrow;\\n        this.sleepWeakGrow = Math.max(1, Math.floor(endGrow - tempoWeak + scriptDelay));\\n        this.calcolaThreads(ns, calc, target);\\n        this.verificaServerCap(ns, calc, target);\\n    }\\n    getHackArgs(randomArg) {\\n        return [this.target.name, this.sleepHack, randomArg];\\n    }\\n    getHackWeakArgs(randomArg) {\\n        return [this.target.name, this.sleepWeakHack, randomArg];\\n    }\\n    getGrowArgs(randomArg) {\\n        return [this.target.name, this.sleepGrow, randomArg];\\n    }\\n    getGrowWeakArgs(randomArg, portSeed = undefined) {\\n        const growWeakArgs = [this.target.name, this.sleepWeakGrow];\\n        if (portSeed) {\\n            let port;\\n            if (portSeed % 4 == 0)\\n                port = HWGW_PORT_4;\\n            if (portSeed % 3 == 0)\\n                port = HWGW_PORT_3;\\n            if (portSeed % 2 == 0)\\n                port = HWGW_PORT_2;\\n            else\\n                port = HWGW_PORT_1;\\n            growWeakArgs.push(port);\\n        }\\n        growWeakArgs.push(randomArg);\\n        return growWeakArgs;\\n    }\\n    calcolaThreads(ns, calc, target, percentage = HWGW_MONEY_PERCENTAGE) {\\n        const cores = this.server.cores;\\n        this.hackThreads = calc.calcolaHackThread(percentage);\\n        let WEAKEN_PER_THREAD = ns.weakenAnalyze(1, cores);\\n        let HW_THREADS = ns.hackAnalyzeSecurity(1) / WEAKEN_PER_THREAD;\\n        let GW_THREADS = ns.growthAnalyzeSecurity(1, undefined, cores) / WEAKEN_PER_THREAD;\\n        this.hackWeakThreads = Math.max(1, Math.ceil(HW_THREADS * this.hackThreads));\\n        this.growThreads = calc.calcolaGrowThreads(target.maxMoney - target.maxMoney * percentage, cores);\\n        this.growWeakThreads = Math.max(1, Math.ceil(GW_THREADS * this.growThreads));\\n    }\\n    verificaServerCap(ns, calc, target) {\\n        let checkOrExit = false;\\n        let lowerPerc = HWGW_MONEY_PERCENTAGE - HWGW_MONEY_ITERATION_PERCENTAGE;\\n        this.server.aggiornaServer();\\n        while (!checkOrExit) {\\n            const ramNecessaria = (this.growWeakThreads + this.hackWeakThreads + this.growThreads) * WG_COST + this.hackThreads * H_COST;\\n            if (this.server.freeRam >= ramNecessaria) {\\n                this.canRun = true;\\n                checkOrExit = true;\\n            }\\n            else if (lowerPerc > HWGW_MONEY_MIN_PERCENTAGE) {\\n                this.calcolaThreads(ns, calc, target, lowerPerc);\\n                lowerPerc -= HWGW_MONEY_ITERATION_PERCENTAGE;\\n            }\\n            else {\\n                checkOrExit = true;\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2d3LXNlcnZlci1iYXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dndy1zZXJ2ZXItYmF0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNMLCtCQUErQixFQUMvQix5QkFBeUIsRUFDekIscUJBQXFCLEVBQ3JCLFdBQVcsRUFDWCxXQUFXLEVBQ1gsV0FBVyxFQUNYLFdBQVcsRUFDWCxNQUFNLEVBQ04sT0FBTyxHQUNSLE1BQU0sYUFBYSxDQUFDO0FBS3JCLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLGFBQWEsQ0FBUztJQUN0QixTQUFTLENBQVM7SUFDbEIsU0FBUyxDQUFTO0lBQ2xCLGFBQWEsQ0FBUztJQUN0QixXQUFXLEdBQVcsQ0FBQyxDQUFDO0lBQ3hCLGVBQWUsR0FBVyxDQUFDLENBQUM7SUFDNUIsV0FBVyxHQUFXLENBQUMsQ0FBQztJQUN4QixlQUFlLEdBQVcsQ0FBQyxDQUFDO0lBQzVCLE1BQU0sQ0FBYTtJQUNuQixNQUFNLENBQWlCO0lBQ3ZCLElBQUksQ0FBa0I7SUFDdEIsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUVmLFlBQ0UsU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsTUFBa0IsRUFDbEIsRUFBTSxFQUNOLE1BQXNCLEVBQ3RCLElBQXFCLEVBQ3JCLFNBQVMsR0FBRyxDQUFDLEVBQ2IsV0FBVyxHQUFHLEdBQUc7UUFFakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFFakIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsR0FBRyxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDbkcsTUFBTSxXQUFXLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDbkQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxTQUFTLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNoRixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsV0FBVyxDQUFDLFNBQWlCO1FBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxlQUFlLENBQUMsU0FBaUI7UUFDL0IsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELFdBQVcsQ0FBQyxTQUFpQjtRQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsZUFBZSxDQUFDLFNBQWlCLEVBQUUsV0FBK0IsU0FBUztRQUN6RSxNQUFNLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM1RCxJQUFJLFFBQVEsRUFBRTtZQUNaLElBQUksSUFBWSxDQUFDO1lBQ2pCLElBQUksUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDO2dCQUFFLElBQUksR0FBRyxXQUFXLENBQUM7WUFDMUMsSUFBSSxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQUUsSUFBSSxHQUFHLFdBQVcsQ0FBQztZQUMxQyxJQUFJLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQztnQkFBRSxJQUFJLEdBQUcsV0FBVyxDQUFDOztnQkFDckMsSUFBSSxHQUFHLFdBQVcsQ0FBQztZQUN4QixZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3pCO1FBQ0QsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QixPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRU8sY0FBYyxDQUNwQixFQUFNLEVBQ04sSUFBcUIsRUFDckIsTUFBc0IsRUFDdEIsYUFBcUIscUJBQXFCO1FBRTFDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RELElBQUksaUJBQWlCLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkQsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxHQUFHLGlCQUFpQixDQUFDO1FBQy9ELElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxHQUFHLGlCQUFpQixDQUFDO1FBQ25GLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxHQUFHLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsRyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxFQUFNLEVBQUUsSUFBcUIsRUFBRSxNQUFzQjtRQUM3RSxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDeEIsSUFBSSxTQUFTLEdBQUcscUJBQXFCLEdBQUcsK0JBQStCLENBQUM7UUFDeEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUM3QixPQUFPLENBQUMsV0FBVyxFQUFFO1lBQ25CLE1BQU0sYUFBYSxHQUNqQixDQUFDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO1lBQ3pHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksYUFBYSxFQUFFO2dCQUN4QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDbkIsV0FBVyxHQUFHLElBQUksQ0FBQzthQUNwQjtpQkFBTSxJQUFJLFNBQVMsR0FBRyx5QkFBeUIsRUFBRTtnQkFDaEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDakQsU0FBUyxJQUFJLCtCQUErQixDQUFDO2FBQzlDO2lCQUFNO2dCQUNMLFdBQVcsR0FBRyxJQUFJLENBQUM7YUFDcEI7U0FDRjtJQUNILENBQUM7Q0FDRiJ9\",\"filename\":\"/hwgw/wgw-server-batch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { XP_FARMER_SERVER_PREFIX } from 'const/servers';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = ns.getPurchasedServers().filter((el) => el.startsWith(XP_FARMER_SERVER_PREFIX));\\n    for (let server of servers) {\\n        ns.killall(server);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2lsbC1mYXJtLXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9raWxsLWZhcm0tc2NyaXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0lBQ2hHLEtBQUssSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzFCLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"kill-farm-script.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/servers.js\",\"url\":\"blob:https://danielyxie.github.io/a0b4c551-8705-4d37-818b-f957b9aad9e2\",\"moduleSequenceNumber\":24970},{\"filename\":\"kill-farm-script.js\",\"url\":\"blob:https://danielyxie.github.io/90eddde4-33ab-4644-bfbd-429a60e9824f\",\"moduleSequenceNumber\":25516}],\"dependents\":[],\"ramUsage\":4.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { loadTargetNames } from 'utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = ns.getPurchasedServers();\\n    servers.push(...(await loadTargetNames(ns)));\\n    for (const server of servers) {\\n        ns.killall(server);\\n    }\\n    ns.killall('home', true);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2lsbC1hbGwtc2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2tpbGwtYWxsLXNjcmlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdEQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDekMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzVCLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDcEI7SUFDRCxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMzQixDQUFDIn0=\",\"filename\":\"kill-all-script.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/02363766-2dfa-4234-9cef-3abc3ee920da\",\"moduleSequenceNumber\":312},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/0ddd4f71-2c9b-4c47-9892-c46176a38c79\",\"moduleSequenceNumber\":311},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/63a05c94-b401-4d80-8e7f-1748a1216247\",\"moduleSequenceNumber\":342},{\"filename\":\"kill-all-script.js\",\"url\":\"blob:https://danielyxie.github.io/630e7433-e63a-4b54-904f-94968b50d182\",\"moduleSequenceNumber\":34169}],\"dependents\":[],\"ramUsage\":4.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":34169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.killall('home', true);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2lsbC1ob21lLXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9raWxsLWhvbWUtc2NyaXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNCLENBQUMifQ==\",\"filename\":\"kill-home-script.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC1tYWluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcnAvY29ycC1tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkIsQ0FBQyJ9\",\"filename\":\"/corp/corp-main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    ns.clearLog();\\n    /*checked to work in 2.2.1 (c46cedd5) in BN 3\\n  \\n      Corporation rework is in progress, this script won't work when it happens, I'll add a script for it at some point\\n  \\n      Script created by Mughur, following step-by-step the tinkered and expanded guide: https://docs.google.com/document/d/1fg333UNXWmZ2wZ0CnNWqwqiFQxu_LCImXUsr3fHKVeU/edit#\\n      Run this script before creating the corporation, running the script after corp creation or doing anything to corp manually during it's runtime may cause unwanted behaviour\\n      The script is designed to work on all BNs with the exception of BN13 (stops working in later BN12s, not sure at which point).\\n      In order for it to work properly in nodes with valuation <=0.5, one or more of the steps has to be skipped or tinkered.\\n      Script is purposefully not optimized, as I do not want to give out too many tricks on how to build the main corp script.\\n      Corporations are OP, I think people should put the work in in order to fully utilize them, but feel free to get inspirations from this script.\\n  \\n      This script will take about 6 minutes to run, starts by creating a corporation and ends after starting the development of 1st tobacco product and spending available money on upgrades.\\n      */\\n    // enter wanted corporation, agriculture and tobacco division names\\n    const companyName = 'Money Printer';\\n    const agricultureName = 'AG';\\n    const tobaccoName = 'TB';\\n    //constants, do not touch\\n    const jobs = ['Operations', 'Engineer', 'Business', 'Management', 'Research & Development'];\\n    const boostMaterials = ['Hardware', 'Robots', 'AI Cores', 'Real Estate'];\\n    const levelUpgrades = [\\n        'Smart Factories',\\n        'Smart Storage',\\n        'FocusWires',\\n        'Neural Accelerators',\\n        'Speech Processor Implants',\\n        'Nuoptimal Nootropic Injector Implants',\\n        'Wilson Analytics',\\n    ];\\n    const cities = ['Aevum', 'Chongqing', 'New Tokyo', 'Ishima', 'Volhaven', 'Sector-12'];\\n    //tinker with these at some point\\n    //Hardware, Robots, AI Cores, Real Estate\\n    const materialPhases = [\\n        [125, 0, 75, 27000],\\n        [2675, 96, 2445, 119400],\\n        [6500, 630, 3750, 84000],\\n    ];\\n    let c = ns.corporation;\\n    //if you have to reset the game/script for some reason, change the stage[0] to the proper stage, then reset back to 0\\n    let stage = [0, 0]; //stage, step\\n    await checkStage(); //once here to start the corp\\n    //Basic corp script loop, works fine with or without bonus time\\n    while (true) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        //and to this part put things you want done exactly once per cycle\\n        await coffeeParty();\\n        await checkStage();\\n    }\\n    //Buying coffee and throwing parties to those offices that needs them\\n    async function coffeeParty() {\\n        for (const city of cities) {\\n            const office = c.getOffice(agricultureName, city);\\n            if (office.avgEne < 95)\\n                c.buyCoffee(agricultureName, city);\\n            if (office.avgHap < 95 || office.avgMor < 95)\\n                c.throwParty(agricultureName, city, 500_000);\\n        }\\n    }\\n    //Check which action should be done at this point and do it\\n    //Importantly none of these functions wait for a number of cycles on their own, rather they count cycles while letting the loop to work every cycle.\\n    async function checkStage() {\\n        switch (stage[0]) {\\n            case 0:\\n                ns.print('Initial purchases');\\n                await startstuff(); // stage 0\\n                break;\\n            case 1:\\n                if (stage[1] == 0)\\n                    ns.print('Waiting for the employers stats to rise');\\n                await waitForTheLazyFucksToGetTheirShitTogether(); // stage 1\\n                break;\\n            case 2:\\n                if (stage[1] == 0)\\n                    ns.print('Buying first production multiplier material batch');\\n                await purchaseMaterials(0); // stage 2\\n                break;\\n            case 3:\\n                if (stage[1] == 0)\\n                    ns.print('Accepting the first investor offer');\\n                await invest(1); // stage 3\\n                break;\\n            case 4:\\n                ns.print('Further upgrades');\\n                await upgradeStuff(); // stage 4\\n                break;\\n            case 5:\\n                if (stage[1] == 0)\\n                    ns.print('Waiting for the employers stats to rise for the second time');\\n                await waitForTheLazyFucksToGetTheirShitTogether(); // stage 5\\n                break;\\n            case 6:\\n                if (stage[1] == 0)\\n                    ns.print('Buying second production multiplier material batch');\\n                await purchaseMaterials(1); // stage 6\\n                break;\\n            case 7:\\n                if (stage[1] == 0)\\n                    ns.print('Reassign employees');\\n                await reAssignEmployees(); // stage 7\\n                break;\\n            case 8:\\n                if (stage[1] == 0)\\n                    ns.print('Accepting the second investor offer');\\n                await invest(2); // stage 8\\n                break;\\n            case 9:\\n                ns.print('Last Agriculture upgrades');\\n                await lastAGUpgrades(); // stage 9\\n                break;\\n            case 10:\\n                if (stage[1] == 0)\\n                    ns.print('Buying third production multiplier material batch');\\n                await purchaseMaterials(2); // stage 10\\n                break;\\n            case 11:\\n                if (stage[1] == 0)\\n                    ns.print('Expand to tobacco');\\n                await expandToTobacco(); // stage 11\\n                break;\\n            case 12:\\n                // enter the main corp script below or remove/comment out ns.spawn if you don't have one\\n                ns.spawn('corp.js');\\n        }\\n    }\\n    //Corp initialization. Creating the corp, expanding to agriculture and it's cities,\\n    // hiring and assinging in those cities and buying some upgrades\\n    async function startstuff() {\\n        try {\\n            c.createCorporation(companyName, false);\\n        }\\n        catch { }\\n        try {\\n            c.createCorporation(companyName, true);\\n        }\\n        catch { }\\n        c.expandIndustry('Agriculture', agricultureName);\\n        c.unlockUpgrade('Smart Supply');\\n        for (let city of cities) {\\n            if (city != cities[5]) {\\n                c.expandCity(agricultureName, city);\\n                c.purchaseWarehouse(agricultureName, city);\\n            }\\n            c.setSmartSupply(agricultureName, city, true);\\n            while (c.hireEmployee(agricultureName, city)) { } // this looks odd but it works\\n            for (let i = 0; i < 3; i++) {\\n                c.setAutoJobAssignment(agricultureName, city, jobs[i], 1);\\n            }\\n            c.sellMaterial(agricultureName, city, 'Plants', 'MAX', 'MP');\\n            c.sellMaterial(agricultureName, city, 'Food', 'MAX', 'MP');\\n        }\\n        c.hireAdVert(agricultureName);\\n        c.levelUpgrade(levelUpgrades[0]);\\n        c.levelUpgrade(levelUpgrades[2]);\\n        c.levelUpgrade(levelUpgrades[3]);\\n        c.levelUpgrade(levelUpgrades[4]);\\n        c.levelUpgrade(levelUpgrades[5]);\\n        c.levelUpgrade(levelUpgrades[0]);\\n        c.levelUpgrade(levelUpgrades[2]);\\n        c.levelUpgrade(levelUpgrades[3]);\\n        c.levelUpgrade(levelUpgrades[4]);\\n        c.levelUpgrade(levelUpgrades[5]);\\n        for (let i = 0; i < 2; i++) {\\n            for (let city of cities) {\\n                try {\\n                    c.upgradeWarehouse(agricultureName, city, 1);\\n                }\\n                catch { }\\n            }\\n        }\\n        stage[0] += 1;\\n    }\\n    //Purchase materials (or set purchase amounts to 0), the wanted amounts are saved in the materialPhases array\\n    async function purchaseMaterials(phase) {\\n        if (stage[1] == 0) {\\n            for (let city of cities) {\\n                for (let i = 0; i < 4; i++) {\\n                    c.buyMaterial(agricultureName, city, boostMaterials[i], materialPhases[phase][i] / 10);\\n                }\\n            }\\n            stage[1] += 1;\\n        }\\n        else {\\n            for (let city of cities) {\\n                for (let i = 0; i < 4; i++) {\\n                    c.buyMaterial(agricultureName, city, boostMaterials[i], 0);\\n                }\\n            }\\n            stage[0] += 1;\\n            stage[1] = 0;\\n        }\\n    }\\n    //Wait till the employee stats are high enough and then go to next stage.\\n    async function waitForTheLazyFucksToGetTheirShitTogether() {\\n        let avgs = [0, 0, 0];\\n        for (let city of cities) {\\n            avgs[0] += c.getOffice(agricultureName, city).avgMor;\\n            avgs[1] += c.getOffice(agricultureName, city).avgHap;\\n            avgs[2] += c.getOffice(agricultureName, city).avgEne;\\n        }\\n        ns.clearLog();\\n        ns.print('waiting for employee stats to rise');\\n        ns.print('   avg morale: ' + (avgs[0] / 6).toFixed(3) + '/97');\\n        ns.print('avg happiness: ' + (avgs[1] / 6).toFixed(3) + '/97');\\n        ns.print('   avg energy: ' + (avgs[2] / 6).toFixed(3) + '/97');\\n        stage[1]++;\\n        if (avgs[0] / 6 >= 97 && avgs[1] / 6 >= 97 && avgs[2] / 6 >= 97 && stage[1] > 0) {\\n            stage[0] += 1;\\n            stage[1] = 0;\\n        }\\n        if (Math.random() > 0.95)\\n            ns.openDevMenu();\\n    }\\n    //Reassing the employees so that nobody works in R&D\\n    async function reAssignEmployees() {\\n        for (let city of cities) {\\n            c.setAutoJobAssignment(agricultureName, city, jobs[4], 0);\\n            c.setAutoJobAssignment(agricultureName, city, jobs[0], 3);\\n            c.setAutoJobAssignment(agricultureName, city, jobs[1], 2);\\n            c.setAutoJobAssignment(agricultureName, city, jobs[2], 2);\\n            c.setAutoJobAssignment(agricultureName, city, jobs[3], 2);\\n        }\\n        stage[0]++;\\n        stage[1] = 0;\\n    }\\n    //Accept investor offers after 5 cycles\\n    async function invest(i) {\\n        if (stage[1] == 0) {\\n            ns.print('waiting for a bit, just in case the investors might give a bit more money');\\n        }\\n        // investor evaluation takes into account 5 cycles\\n        // and we want them to take into account the current high earning cycles,\\n        // not the old low earning cycles, so we'll wait for a bit.\\n        if (stage[1] <= 5) {\\n            ns.print('waiting cycles: ' +\\n                stage[1] +\\n                '/5. investors are currently offering: ' +\\n                ns.nFormat(c.getInvestmentOffer().funds, '0.00a'));\\n            stage[1] += 1;\\n        }\\n        else {\\n            ns.tprint('investment offer round ' + i + ': ' + ns.nFormat(c.getInvestmentOffer().funds, '0.00a'));\\n            c.acceptInvestmentOffer();\\n            stage[0] += 1;\\n            stage[1] = 0;\\n        }\\n    }\\n    //buy more upgrades, office space and warehouse space\\n    async function upgradeStuff() {\\n        try {\\n            c.levelUpgrade(levelUpgrades[1]);\\n        }\\n        catch { }\\n        try {\\n            c.levelUpgrade(levelUpgrades[1]);\\n        }\\n        catch { }\\n        for (let i = 0; i < 8; i++) {\\n            try {\\n                c.levelUpgrade(levelUpgrades[0]);\\n            }\\n            catch { }\\n            try {\\n                c.levelUpgrade(levelUpgrades[1]);\\n            }\\n            catch { }\\n        }\\n        for (let i = 0; i < 2; i++) {\\n            for (let city of cities) {\\n                try {\\n                    c.upgradeOfficeSize(agricultureName, city, 3);\\n                    while (c.hireEmployee(agricultureName, city)) { }\\n                    c.setAutoJobAssignment(agricultureName, city, jobs[0], 1);\\n                    c.setAutoJobAssignment(agricultureName, city, jobs[1], 1);\\n                    c.setAutoJobAssignment(agricultureName, city, jobs[2], 1);\\n                    c.setAutoJobAssignment(agricultureName, city, jobs[3], 1);\\n                    c.setAutoJobAssignment(agricultureName, city, jobs[4], 5);\\n                }\\n                catch { }\\n            }\\n        }\\n        for (let i = 0; i < 7; i++) {\\n            for (let city of cities) {\\n                try {\\n                    c.upgradeWarehouse(agricultureName, city, 1);\\n                }\\n                catch { }\\n            }\\n        }\\n        stage[0] += 1;\\n        stage[1] = 0;\\n    }\\n    //Buy last upgrades for Agriculture\\n    async function lastAGUpgrades() {\\n        for (let i = 0; i < 9; i++) {\\n            for (let city of cities) {\\n                try {\\n                    c.upgradeWarehouse(agricultureName, city, 1);\\n                }\\n                catch { }\\n            }\\n        }\\n        stage[0] += 1;\\n        stage[1] = 0;\\n    }\\n    //Expand to tobacco division and it's cities, set employee positions, start the first product's development and buy some more upgrades\\n    async function expandToTobacco() {\\n        try {\\n            c.expandIndustry('Tobacco', tobaccoName);\\n        }\\n        catch {\\n            ns.tprint(\\\"Couldn't expand.. no money\\\");\\n            ns.exit();\\n        }\\n        c.expandCity(tobaccoName, cities[0]);\\n        c.purchaseWarehouse(tobaccoName, cities[0]);\\n        try {\\n            for (let i = 0; i < 9; i++) {\\n                c.upgradeOfficeSize(tobaccoName, cities[0], 3);\\n                while (c.hireEmployee(tobaccoName, cities[0])) { }\\n                c.setAutoJobAssignment(tobaccoName, cities[0], jobs[0], Math.floor(c.getOffice(tobaccoName, cities[0]).employees / 3.5));\\n                c.setAutoJobAssignment(tobaccoName, cities[0], jobs[1], Math.floor(c.getOffice(tobaccoName, cities[0]).employees / 3.5));\\n                c.setAutoJobAssignment(tobaccoName, cities[0], jobs[2], Math.floor((0.5 * c.getOffice(tobaccoName, cities[0]).employees) / 3.5));\\n                c.setAutoJobAssignment(tobaccoName, cities[0], jobs[3], Math.ceil(c.getOffice(tobaccoName, cities[0]).employees / 3.5));\\n            }\\n        }\\n        catch { }\\n        for (let i = 0; i < 2; i++) {\\n            for (let city of cities) {\\n                if (city == cities[0])\\n                    continue;\\n                try {\\n                    c.expandCity(tobaccoName, city);\\n                    c.purchaseWarehouse(tobaccoName, city);\\n                }\\n                catch { }\\n                c.upgradeOfficeSize(tobaccoName, city, 3);\\n                while (c.hireEmployee(tobaccoName, city)) { }\\n                c.setAutoJobAssignment(tobaccoName, city, jobs[0], 1);\\n                c.setAutoJobAssignment(tobaccoName, city, jobs[1], 1);\\n                c.setAutoJobAssignment(tobaccoName, city, jobs[2], 1);\\n                c.setAutoJobAssignment(tobaccoName, city, jobs[3], 1);\\n                c.setAutoJobAssignment(tobaccoName, city, jobs[4], 5);\\n            }\\n        }\\n        c.makeProduct(tobaccoName, cities[0], 'Stick 1', 1e9, 1e9);\\n        try {\\n            for (let i = 2; i < 6; i++) {\\n                c.levelUpgrade('DreamSense');\\n            }\\n        }\\n        catch { }\\n        try {\\n            for (let i = 2; i < 6; i++) {\\n                while (c.getUpgradeLevel(levelUpgrades[i]) < 20) {\\n                    c.levelUpgrade(levelUpgrades[i]);\\n                }\\n            }\\n        }\\n        catch { }\\n        try {\\n            for (let i = 0; i < 10; i++) {\\n                c.levelUpgrade('Project Insight');\\n            }\\n        }\\n        catch { }\\n        stage[0] += 1;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weXBhc3RhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcnAvY29weXBhc3RhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2Q7Ozs7Ozs7Ozs7OztRQVlDO0lBRUQsbUVBQW1FO0lBQ25FLE1BQU0sV0FBVyxHQUFHLGVBQWUsQ0FBQztJQUNwQyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDN0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBRXpCLHlCQUF5QjtJQUN6QixNQUFNLElBQUksR0FBRyxDQUFDLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO0lBQzVGLE1BQU0sY0FBYyxHQUFHLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDekUsTUFBTSxhQUFhLEdBQUc7UUFDcEIsaUJBQWlCO1FBQ2pCLGVBQWU7UUFDZixZQUFZO1FBQ1oscUJBQXFCO1FBQ3JCLDJCQUEyQjtRQUMzQix1Q0FBdUM7UUFDdkMsa0JBQWtCO0tBQ25CLENBQUM7SUFDRixNQUFNLE1BQU0sR0FBaUMsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRXBILGlDQUFpQztJQUNqQyx5Q0FBeUM7SUFDekMsTUFBTSxjQUFjLEdBQUc7UUFDckIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUM7UUFDbkIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFF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QUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUMzRDtZQUNELENBQUMsQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzdELENBQUMsQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzVEO1FBRUQsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWpDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDMUIsS0FBSyxJQUFJLElBQUksSUFBSSxN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\",\"filename\":\"/corp/copypasta.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.createCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.unlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\n// free ram pre corp\\n// export const HOME_FREE_RAM_TO_KEEP = 8;\\n// free ram for corp script\\nexport const HOME_FREE_RAM_TO_KEEP = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 524288;\\nexport const SERVER_GB_WANTED = 524288;\\nexport const MAX_SERVER_NUM = 15;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 524288;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25zdC9zZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG1CQUFtQjtBQUNuQixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsYUFBYSxDQUFDO0FBQ3JELG9CQUFvQjtBQUNwQiwwQ0FBMEM7QUFDMUMsMkJBQTJCO0FBQzNCLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQztBQUMxQywyQkFBMkI7QUFDM0IsNEJBQTRCO0FBQzVCLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDOUIsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQztBQUNoQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUNqQyxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUNyQyxpREFBaUQifQ==\",\"filename\":\"/const/servers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\nexport const HWGW_WORKER_PROP = '/hwgw/hwgw-worker-prop.js';\\nexport const CONST_PORTS = '/const/ports.js';\\nexport const LOGGER = '/logs/logger.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n    HWGW_WORKER_PROP,\\n    CONST_PORTS,\\n    LOGGER,\\n];\\n// CORP SCRIPTS\\nexport const CORP_STARTUP = '/corp/corp-starter.js';\\nexport const CORP_AGRI_SETUP = '/corp/agri-setup.js';\\nexport const CORP_AGRI_MANTAINANCE = '/corp/agri-mantainance.js';\\nexport const CORP_TOBACCHI_STARTUP = '/corp/tob-setup.js';\\nexport const CORP_TOBACCHI_MIDGAME = '/corp/tob-midgame.js';\\nexport const CORP_MANTAINANCE = '/corp/tob-mantainance.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const LOG_MANAGER = '/logs/logmanager.js';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25zdC9zY3JpcHRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGVBQWU7QUFDZixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyx3Q0FBd0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsNkJBQTZCLENBQUM7QUFFM0Qsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyx5QkFBeUIsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsd0JBQXdCLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsK0JBQStCLENBQUM7QUFDckUsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsb0NBQW9DLENBQUM7QUFDekUsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsMkJBQTJCLENBQUM7QUFFN0QseUJBQXlCO0FBQ3pCLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQztBQUN4QyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxrQkFBa0IsQ0FBQztBQUM1RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxzQkFBc0IsQ0FBQztBQUM5RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxzQkFBc0IsQ0FBQztBQUM5RCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyx3QkFBd0IsQ0FBQztBQUNsRSxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRywwQkFBMEIsQ0FBQztBQUN2RSxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyx5QkFBeUIsQ0FBQztBQUM3RCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxlQUFlLENBQUM7QUFDekQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLGVBQWUsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxlQUFlLENBQUM7QUFDekQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLGVBQWUsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRywyQkFBMkIsQ0FBQztBQUM1RCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsaUJBQWlCLENBQUM7QUFDN0MsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRztJQUMzQix5QkFBeUI7SUFDekIsdUJBQXVCO0lBQ3ZCLHVCQUF1QjtJQUN2Qix1QkFBdUI7SUFDdkIsdUJBQXVCO0lBQ3ZCLHlCQUF5QjtJQUN6Qix5QkFBeUI7SUFDekIsbUJBQW1CO0lBQ25CLE1BQU07SUFDTixnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLE1BQU07Q0FDUCxDQUFDO0FBRUYsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyx1QkFBdUIsQ0FBQztBQUNwRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcscUJBQXFCLENBQUM7QUFDckQsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsMkJBQTJCLENBQUM7QUFDakUsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsb0JBQW9CLENBQUM7QUFDMUQsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsc0JBQXNCLENBQUM7QUFDNUQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsMEJBQTBCLENBQUM7QUFFM0QsZ0JBQWdCO0FBQ2hCLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLHVCQUF1QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxxQkFBcUIsQ0FBQyJ9\",\"filename\":\"/const/scripts.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\nexport const HACK_SEC_INCREASE = 0.002;\\nexport const BATCH_BUFFER = 100;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.99;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.01;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.001;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25zdC9od2d3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG1CQUFtQjtBQUNuQixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQzVCLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDMUIsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUM7QUFDaEMsMEJBQTBCO0FBQzFCLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQztBQUMxQywwREFBMEQ7QUFDMUQsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDO0FBQzlDLDBCQUEwQjtBQUMxQixNQUFNLENBQUMsTUFBTSwrQkFBK0IsR0FBRyxLQUFLLENBQUMifQ==\",\"filename\":\"/const/hwgw.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/d1838cf9-9c9c-43e1-9adb-f5b7792ce704\",\"moduleSequenceNumber\":134},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/27ad92db-5427-4292-9558-ba47624fb63a\",\"moduleSequenceNumber\":1910}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HWGW_LOG_FILE } from 'const/files';\\nimport { EMPTY_PORT_DATA, LOG_MANAGER_PORT } from 'const/ports';\\nimport { FileHandler } from 'files/filehandler';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const port = ns.getPortHandle(LOG_MANAGER_PORT);\\n    port.clear();\\n    ns.disableLog('ALL');\\n    ns.clearLog();\\n    ns.tail();\\n    ns.moveTail(200, 200); // Move it out of the way so it doesn't cover up the controller.\\n    const handler = new FileHandler(ns, HWGW_LOG_FILE);\\n    handler.newFile();\\n    while (true) {\\n        await port.nextWrite();\\n        do {\\n            const value = port.read();\\n            if (value !== EMPTY_PORT_DATA) {\\n                const log = JSON.parse(value);\\n                // handler.writeText(new Date(log.time).toISOString(), 'a');\\n                // handler.writeText(' ', 'a');\\n                // handler.writeText(log.logType, 'a');\\n                // handler.writeText(' ', 'a');\\n                // handler.writeText(log.log, 'a');\\n                // handler.writeText('\\\\n\\\\r', 'a');\\n                ns.print(log.logType + ' ' + log.log);\\n            }\\n        } while (!port.empty());\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dzL2xvZ21hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM1QyxPQUFPLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUdoRCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDaEQsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDZCxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDVixFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLGdFQUFnRTtJQUN2RixNQUFNLE9BQU8sR0FBZ0IsSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ2hFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNsQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3ZCLEdBQUc7WUFDRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFZLENBQUM7WUFDcEMsSUFBSSxLQUFLLEtBQUssZUFBZSxFQUFFO2dCQUM3QixNQUFNLEdBQUcsR0FBUSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBUSxDQUFDO2dCQUMxQyw0REFBNEQ7Z0JBQzVELCtCQUErQjtnQkFDL0IsdUNBQXVDO2dCQUN2QywrQkFBK0I7Z0JBQy9CLG1DQUFtQztnQkFDbkMsa0NBQWtDO2dCQUNsQyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN2QztTQUNGLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUU7S0FDekI7QUFDSCxDQUFDIn0=\",\"filename\":\"/logs/logmanager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/73aac924-9db5-48b9-b769-e8b84d21bd87\",\"moduleSequenceNumber\":312},{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/34e724dc-57ed-49fe-80af-6a2d1bf16210\",\"moduleSequenceNumber\":368},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/38f4f036-674c-42db-8344-c464e9f20057\",\"moduleSequenceNumber\":311},{\"filename\":\"/logs/logmanager.js\",\"url\":\"blob:https://danielyxie.github.io/d4675d58-a6ac-4f3e-8503-baccf859cfb3\",\"moduleSequenceNumber\":617}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CORP_NAME = 'Totally Legit Corporation';\\nexport const AGRI_DIV_NAME = 'Veggies';\\nexport const TOB_DIV_NAME = 'Totally Not Ganja';\\nexport const TOB_PROD1_NAME = 'Totally Not White Widow';\\nexport const TOB_PROD2_NAME = 'Totally Not NY Diesel';\\nexport const TOB_PROD3_NAME = 'Totally Not Cheese';\\nexport const TOB_PROD4_NAME = 'Totally Not Lemon Haze';\\nexport const TOB_PROD5_NAME = 'Totally Not Super Skunk';\\nexport const ROUND_1_MIN_AMOUNT = 21e10; //210b\\nexport const ROUND_2_MIN_AMOUNT = 5e12; //5t\\nexport const ROUND_3_MIN_AMOUNT = 8e14; //800t\\nexport const ROUND_4_MIN_AMOUNT = 5e17; //500q\\nexport const BN_VAL_MULTI = 1;\\nexport const VAL_MULTI_EQ = 0;\\nexport const EMP_STAT_CHECK_VALUE = 97;\\nexport const EMP_STATS_CHECK_TIMEOUT = 30000;\\nexport const PARTY_BUDGET = 5e5;\\nexport const ADV_OR_HIRE_FUNDS_CHECK_MULTIPLIER = 0.5;\\nexport const TOBACCHI_MIN_INVESTMENT_VALUE = 1e9;\\nexport const TOBACCHI_LAB_POINT_THRESHOLD = 1e4;\\nexport const TOBACCHI_MK_POINT_THRESHOLD = 15e4;\\nexport const TOBACCHI_RES_MIN_THRESHOLD = 1e5;\\n// setup\\\\adjustment chec state 0=never sold, 1=first setup, 2=cyclic check and adjustment, 3=complete\\nexport const TOB_PROD_CHECK_START = 0;\\nexport const TOB_PROD_CHECK_FIRST = 1;\\nexport const TOB_PROD_CHECK_CYCLE = 2;\\nexport const TOB_PROD_CHECK_END = 3;\\nexport const TOB_PROD_ADJUST_START = 0;\\nexport const TOB_PROD_ADJUST_INC = 1;\\nexport const TOB_PROD_ADJUST_LOW = 2;\\nexport const TOB_PROD_ADJUST_END = 3;\\n// prod setup state, 0=before bisection, 1=first bisection, 2=bisection loop, 3=complete\\nexport const TOB_PROD_SETUP_START = 0;\\nexport const TOB_PROD_SETUP_FIRST = 1;\\nexport const TOB_PROD_SETUP_LOOP = 2;\\nexport const TOB_PROD_SETUP_END = 3;\\nexport var UNLOCKS;\\n(function (UNLOCKS) {\\n    UNLOCKS[\\\"EXP\\\"] = \\\"Export\\\";\\n    UNLOCKS[\\\"SSU\\\"] = \\\"Smart Supply\\\";\\n    UNLOCKS[\\\"MDD\\\"] = \\\"Market Research - Demand\\\";\\n    UNLOCKS[\\\"MDC\\\"] = \\\"Market Data - Competition\\\";\\n    UNLOCKS[\\\"VEC\\\"] = \\\"VeChain\\\";\\n    UNLOCKS[\\\"SAD\\\"] = \\\"Shady Accounting\\\";\\n    UNLOCKS[\\\"GOV\\\"] = \\\"Government Partnership\\\";\\n})(UNLOCKS || (UNLOCKS = {}));\\nexport var CorpResearchName;\\n(function (CorpResearchName) {\\n    CorpResearchName[\\\"RES_LAB\\\"] = \\\"Hi-Tech R&D Laboratory\\\";\\n    CorpResearchName[\\\"AUTO_BREW\\\"] = \\\"AutoBrew\\\";\\n    CorpResearchName[\\\"AUTO_PARTY\\\"] = \\\"AutoPartyManager\\\";\\n    CorpResearchName[\\\"AUTO_DRUG\\\"] = \\\"Automatic Drug Administration\\\";\\n    CorpResearchName[\\\"CPH4\\\"] = \\\"CPH4 Injections\\\";\\n    CorpResearchName[\\\"DRONES\\\"] = \\\"Drones\\\";\\n    CorpResearchName[\\\"DRONES_ASSEMBLY\\\"] = \\\"Drones - Assembly\\\";\\n    CorpResearchName[\\\"DRONES_TRANS\\\"] = \\\"Drones - Transport\\\";\\n    CorpResearchName[\\\"GO_JUICE\\\"] = \\\"Go-Juice\\\";\\n    CorpResearchName[\\\"HR_BUDDY_REC\\\"] = \\\"HRBuddy-Recruitment\\\";\\n    CorpResearchName[\\\"HR_BUDDY_TR\\\"] = \\\"HRBuddy-Training\\\";\\n    CorpResearchName[\\\"MKT1\\\"] = \\\"Market-TA.I\\\";\\n    CorpResearchName[\\\"MKT2\\\"] = \\\"Market-TA.II\\\";\\n    CorpResearchName[\\\"OVERCLOCK\\\"] = \\\"Overclock\\\";\\n    CorpResearchName[\\\"SELF_CORR_ASS\\\"] = \\\"Self-Correcting Assemblers\\\";\\n    CorpResearchName[\\\"STI_MU\\\"] = \\\"Sti.mu\\\";\\n    CorpResearchName[\\\"UPG_CAP1\\\"] = \\\"uPgrade: Capacity.I\\\";\\n    CorpResearchName[\\\"UPG_CAP2\\\"] = \\\"uPgrade: Capacity.II\\\";\\n    CorpResearchName[\\\"UPG_DASH\\\"] = \\\"uPgrade: Dashboard\\\";\\n    CorpResearchName[\\\"UPG_FULC\\\"] = \\\"uPgrade: Fulcrum\\\";\\n    CorpResearchName[\\\"SUDO_ASSIST\\\"] = \\\"sudo.Assist\\\";\\n})(CorpResearchName || (CorpResearchName = {}));\\nexport const CORP_SETUP_UPGRADES = [\\\"Smart Factories\\\" /* UPGRADES.SFA */, \\\"FocusWires\\\" /* UPGRADES.FWI */, \\\"Neural Accelerators\\\" /* UPGRADES.NAC */, \\\"Nuoptimal Nootropic Injector Implants\\\" /* UPGRADES.NNI */, \\\"Neural Accelerators\\\" /* UPGRADES.NAC */];\\nexport const CORP_OP_UPGRADES = [\\n    \\\"Smart Factories\\\" /* UPGRADES.SFA */,\\n    \\\"Smart Storage\\\" /* UPGRADES.SST */,\\n    \\\"Speech Processor Implants\\\" /* UPGRADES.SPI */,\\n    \\\"Project Insight\\\" /* UPGRADES.PIN */,\\n    \\\"ABC SalesBots\\\" /* UPGRADES.ABC */,\\n    \\\"FocusWires\\\" /* UPGRADES.FWI */,\\n    \\\"Nuoptimal Nootropic Injector Implants\\\" /* UPGRADES.NNI */,\\n    \\\"Neural Accelerators\\\" /* UPGRADES.NAC */,\\n];\\nexport const CORP_OP_UPGRADES_LEVEL = 3450;\\nexport const CORP_OP_UPGRADES_UNLOCK_AT = 1e70;\\nexport class AgriMaterials {\\n    stage1 = new AgriMaterialStage(125, 0, 75, 27000);\\n    stage2 = new AgriMaterialStage(2800, 96, 2520, 146400);\\n    stage3 = new AgriMaterialStage(9300, 726, 6270, 230400);\\n}\\nexport class AgriMaterialStage {\\n    hardware;\\n    robot;\\n    aiCores;\\n    realEstate;\\n    constructor(hardware, robot, aiCores, realEstate) {\\n        this.hardware = hardware;\\n        this.robot = robot;\\n        this.aiCores = aiCores;\\n        this.realEstate = realEstate;\\n    }\\n}\\nexport const AGRI_MATERIAL = new AgriMaterials();\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25zdC9jb3JwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRywyQkFBMkIsQ0FBQztBQUNyRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxtQkFBbUIsQ0FBQztBQUNoRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcseUJBQXlCLENBQUM7QUFDeEQsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLHVCQUF1QixDQUFDO0FBQ3RELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxvQkFBb0IsQ0FBQztBQUNuRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsd0JBQXdCLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLHlCQUF5QixDQUFDO0FBRXhELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxDQUFDLE1BQU07QUFDL0MsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSTtBQUM1QyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsQ0FBQyxNQUFNO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxDQUFDLE1BQU07QUFFOUMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQztBQUM5QixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDO0FBRTlCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztBQUN2QyxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxLQUFLLENBQUM7QUFDN0MsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQztBQUNoQyxNQUFNLENBQUMsTUFBTSxrQ0FBa0MsR0FB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\",\"filename\":\"/const/corp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class AgriMaterials {\\n    stage1 = new AgriMaterialStage(125, 0, 75, 27000);\\n    stage2 = new AgriMaterialStage(2675, 96, 2445, 119400);\\n    stage3 = new AgriMaterialStage(6500, 630, 3750, 84000);\\n}\\nexport class AgriMaterialStage {\\n    hardware;\\n    robot;\\n    aiCores;\\n    realEstate;\\n    constructor(hardware, robot, aiCores, realEstate) {\\n        this.hardware = hardware;\\n        this.robot = robot;\\n        this.aiCores = aiCores;\\n        this.realEstate = realEstate;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdyaS1tYXRlcmlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29ycC9hZ3JpLW1hdGVyaWFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sYUFBYTtJQUN4QixNQUFNLEdBQXNCLElBQUksaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckUsTUFBTSxHQUFzQixJQUFJLGlCQUFpQixDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFFLE1BQU0sR0FBc0IsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztDQUMzRTtBQUVELE1BQU0sT0FBTyxpQkFBaUI7SUFDNUIsUUFBUSxDQUFTO0lBQ2pCLEtBQUssQ0FBUztJQUNkLE9BQU8sQ0FBUztJQUNoQixVQUFVLENBQVM7SUFDbkIsWUFBWSxRQUFnQixFQUFFLEtBQWEsRUFBRSxPQUFlLEVBQUUsVUFBa0I7UUFDOUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQztDQUNGIn0=\",\"filename\":\"/corp/agri-materials.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC1zZXR1cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JwL2NvcnAtc2V0dXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QixDQUFDIn0=\",\"filename\":\"/corp/corp-setup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAtc3RhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29ycC9zZXR1cC1zdGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIn0=\",\"filename\":\"/corp/setup-stage.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CorpSetupStage {\\n    mainStage;\\n    subStage;\\n    subStages;\\n    lastEmpStatsCheck = -1;\\n    constructor(mainStage, subStages) {\\n        this.mainStage = mainStage;\\n        this.subStages = subStages;\\n        this.subStage = subStages[0];\\n    }\\n    nextStage() {\\n        this.subStage = this.subStages[this.subStage.val + 1];\\n    }\\n}\\nexport class Stage {\\n    name;\\n    val;\\n    constructor(name, val) {\\n        this.name = name;\\n        this.val = val;\\n    }\\n}\\nexport const CORP_AGRI_SETUP_STAGE = new CorpSetupStage(new Stage('Agricolture Setup', 0), [\\n    new Stage('CreateDivision', 0),\\n    new Stage('BuySmartSupply', 1),\\n    new Stage('ExpandToCities', 2),\\n    new Stage('BuyAdvert', 3),\\n    new Stage('ExpandWarehouse', 4),\\n    new Stage('BuyUpgrades', 5),\\n    new Stage('BuyMaterials', 6),\\n    new Stage('WaitForEmployees', 7),\\n]);\\nexport const CORP_AGRI_MAN_STAGE = new CorpSetupStage(new Stage('Agricolture Mantainance', 1), [\\n    new Stage('1stInvestor', 0),\\n    new Stage('UpgradeEmployees', 1),\\n    new Stage('BuyUpgrades', 2),\\n    new Stage('ExpandWarehouse', 3),\\n    new Stage('BuyMaterials', 4),\\n    new Stage('WaitForEmployees', 5),\\n    new Stage('2ndInvestor&removeRnD', 6),\\n    new Stage('ExpandWarehouse2', 7),\\n    new Stage('BuyMaterials2', 8),\\n]);\\nexport const CORP_TOB_SETUP_STAGE = new CorpSetupStage(new Stage('Tobacchi Setup', 2), [\\n    new Stage('ExpandTobacchi', 0),\\n    new Stage('EsxpandCities', 1),\\n    new Stage('HireEmployees', 2),\\n    new Stage('StartFirstProduction', 3),\\n    new Stage('BuyUpgrades', 4),\\n    new Stage('CompleteFirstProductionAndStartSecond', 5),\\n    new Stage('WilsonAnalyticsAndAdvert', 6),\\n]);\\nexport const CORP_TOB_MIDGAME_STAGE = new CorpSetupStage(new Stage('Tobacchi Midgame', 3), [new Stage('CompleteScondProductionAndStartThird', 0)]);\\nexport const CORP_TOB_MANTAINANCE_STAGE = new CorpSetupStage(new Stage('Tobacchi Mantainance', 4), [new Stage('Mantainance', 0)]);\\nexport const CORP_STAGES = [CORP_AGRI_SETUP_STAGE, CORP_AGRI_MAN_STAGE, CORP_TOB_SETUP_STAGE, CORP_TOB_MIDGAME_STAGE, CORP_TOB_MANTAINANCE_STAGE];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhZ2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcnAvdXRpbHMvc3RhZ2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLFNBQVMsQ0FBUTtJQUNqQixRQUFRLENBQVE7SUFDaEIsU0FBUyxDQUFVO0lBQ25CLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3ZCLFlBQVksU0FBZ0IsRUFBRSxTQUFrQjtRQUM5QyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsU0FBUztRQUNQLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sS0FBSztJQUNoQixJQUFJLENBQVM7SUFDYixHQUFHLENBQVM7SUFDWixZQUFZLElBQVksRUFBRSxHQUFXO1FBQ25DLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUFDLElBQUksS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ3pGLElBQUksS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUM5QixJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDOUIsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDekIsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLElBQUksS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDM0IsSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztJQUM1QixJQUFJLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7Q0FDakMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxLQUFLLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxDQUFDLEVBQUU7SUFDN0YsSUFBSSxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUMzQixJQUFJLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7SUFDaEMsSUFBSSxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUMzQixJQUFJLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7SUFDL0IsSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztJQUM1QixJQUFJLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7SUFDaEMsSUFBSSxLQUFLLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLElBQUksS0FBSyxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztJQUNoQyxJQUFJLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0NBQzlCLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUFDLElBQUksS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ3JGLElBQUksS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUM5QixJQUFJLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUksS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7SUFDN0IsSUFBSSxLQUFLLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLElBQUksS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDM0IsSUFBSSxLQUFLLENBQUMsdUNBQXVDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELElBQUksS0FBSyxDQUFDLDBCQUEwQixFQUFFLENBQUMsQ0FBQztDQUN6QyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLHNDQUFzQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVuSixNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEksTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMscUJBQXFCLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsc0JBQXNCLEVBQUUsMEJBQTBCLENBQUMsQ0FBQyJ9\",\"filename\":\"/corp/utils/stages.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AGRI_DIV_NAME, AGRI_MATERIAL, UNLOCKS } from 'const/corp';\\nimport { checkAgroEmployees, checkAgroMaterials, checkAgroWarehouse, checkEmployeeStats, checkUpgrades, setSubstage, } from 'corp/utils/functions';\\nimport { CORP_AGRI_MAN_STAGE, CORP_AGRI_SETUP_STAGE } from 'corp/utils/stages';\\n// SETUP AGRI CHECK\\nexport function checkAgriSetupStage(ns, c, corp) {\\n    let currentStage = undefined;\\n    if (!corp.divisions.includes(AGRI_DIV_NAME)) {\\n        return CORP_AGRI_SETUP_STAGE;\\n    }\\n    else if (!c.hasUnlockUpgrade(UNLOCKS.SSU)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 1);\\n    }\\n    else if (c.getDivision(AGRI_DIV_NAME).cities.length < Object.keys(ns.enums.CityName).length) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 2);\\n    }\\n    else if (c.getDivision(AGRI_DIV_NAME).awareness + c.getDivision(AGRI_DIV_NAME).popularity < 0.1) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 3);\\n    }\\n    else if (!checkAgroWarehouse(ns, c, 2)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 4);\\n    }\\n    else if (!checkUpgrades(c, 2)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 5);\\n    }\\n    else if (!checkAgroMaterials(ns, c, AGRI_MATERIAL.stage1)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 6);\\n    }\\n    else if (!checkEmployeeStats(ns, c)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 7);\\n    }\\n    return currentStage;\\n}\\n// MANTAINANCE AGRI CHECK\\nexport function checkAgriManStage(ns, c) {\\n    let currentStage = undefined;\\n    if (c.getInvestmentOffer().round === 1) {\\n        return CORP_AGRI_MAN_STAGE;\\n    }\\n    else if (!checkAgroEmployees(ns, c, false)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 1);\\n    }\\n    else if (!checkUpgrades(c, 10, [\\\"Smart Factories\\\" /* UPGRADES.SFA */, \\\"Smart Storage\\\" /* UPGRADES.SST */])) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 2);\\n    }\\n    else if (!checkAgroWarehouse(ns, c, 9)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 3);\\n    }\\n    else if (!checkAgroMaterials(ns, c, AGRI_MATERIAL.stage2)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 4);\\n    }\\n    else if (!checkEmployeeStats(ns, c)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 5);\\n    }\\n    else if (c.getInvestmentOffer().round === 2) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 6);\\n    }\\n    else if (!checkAgroWarehouse(ns, c, 18)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 7);\\n    }\\n    else if (!checkAgroMaterials(ns, c, AGRI_MATERIAL.stage3)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 8);\\n    }\\n    return currentStage;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcnAvYWdyaS9jaGVja3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFZLE1BQU0sWUFBWSxDQUFDO0FBQzdFLE9BQU8sRUFDTCxrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsYUFBYSxFQUNiLFdBQVcsR0FDWixNQUFNLHNCQUFzQixDQUFDO0FBQzlCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxxQkFBcUIsRUFBa0IsTUFBTSxtQkFBbUIsQ0FBQztBQUUvRixtQkFBbUI7QUFDbkIsTUFBTSxVQUFVLG1CQUFtQixDQUFDLEVBQU0sRUFBRSxDQUFjLEVBQUUsSUFBcUI7SUFDL0UsSUFBSSxZQUFZLEdBQUcsU0FBUyxDQUFDO0lBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtRQUMzQyxPQUFPLHFCQUFxQixDQUFDO0tBQzlCO1NBQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDM0MsWUFBWSxHQUFHLFdBQVcsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN0RDtTQUFNLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQUU7UUFDN0YsWUFBWSxHQUFHLFdBQVcsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN0RDtTQUFNLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxD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\",\"filename\":\"/corp/agri/checks.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TOB_DIV_NAME, TOB_PROD1_NAME, TOB_PROD2_NAME } from 'const/corp';\\nimport { checkProductAtLeastDevelopment, checkTobEmployees, checkUpgrades, setSubstage } from 'corp/utils/functions';\\nimport { CORP_TOB_MANTAINANCE_STAGE, CORP_TOB_MIDGAME_STAGE, CORP_TOB_SETUP_STAGE, } from 'corp/utils/stages';\\n// SETUP TOB CHECK\\nexport function checkTobSetupStage(ns, c, corp) {\\n    let currentStage = undefined;\\n    if (!corp.divisions.includes(TOB_DIV_NAME)) {\\n        return CORP_TOB_SETUP_STAGE;\\n    }\\n    else if (c.getDivision(TOB_DIV_NAME).cities.length < Object.keys(ns.enums.CityName).length) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 1);\\n    }\\n    else if (checkTobEmployees(ns, c, 30)) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 2);\\n    }\\n    else if (c.getDivision(TOB_DIV_NAME).products.length === 0 &&\\n        !checkProductAtLeastDevelopment(c, TOB_DIV_NAME, TOB_PROD1_NAME)) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 3);\\n    }\\n    else if (!checkUpgrades(c, 20, [\\\"FocusWires\\\" /* UPGRADES.FWI */, \\\"Speech Processor Implants\\\" /* UPGRADES.SPI */, \\\"Neural Accelerators\\\" /* UPGRADES.NAC */, \\\"Nuoptimal Nootropic Injector Implants\\\" /* UPGRADES.NNI */]) &&\\n        !checkUpgrades(c, 30, [\\\"DreamSense\\\" /* UPGRADES.DSE */]) &&\\n        !checkUpgrades(c, 10, [\\\"Project Insight\\\" /* UPGRADES.PIN */])) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 4);\\n    }\\n    else if (!checkProductAtLeastDevelopment(c, TOB_DIV_NAME, TOB_PROD2_NAME)) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 5);\\n    }\\n    else if (!checkUpgrades(c, 10, [\\\"Wilson Analytics\\\" /* UPGRADES.WAN */])) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 6);\\n    }\\n    return currentStage;\\n}\\nexport function checkTobMidGameStage(ns, c) {\\n    if (c.getDivision(TOB_DIV_NAME).products.length < 3) {\\n        return CORP_TOB_MIDGAME_STAGE;\\n    }\\n    return undefined;\\n}\\n// MANTAINANCE TOBACCHI CHECK\\nexport function checkTobManStage(ns, c) {\\n    if (c.getDivision(TOB_DIV_NAME).products.length >= 3)\\n        return CORP_TOB_MANTAINANCE_STAGE;\\n    return undefined;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcnAvdG9iYWNjaGkvY2hlY2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBWSxNQUFNLFlBQVksQ0FBQztBQUNwRixPQUFPLEVBQUUsOEJBQThCLEVBQUUsaUJBQWlCLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3JILE9BQU8sRUFDTCwwQkFBMEIsRUFDMUIsc0JBQXNCLEVBQ3RCLG9CQUFvQixHQUVyQixNQUFNLG1CQUFtQixDQUFDO0FBRTNCLGtCQUFrQjtBQUNsQixNQUFNLFVBQVUsa0JBQWtCLENBQUMsRUFBTSxFQUFFLENBQWMsRUFBRSxJQUFxQjtJQUM5RSxJQUFJLFlBQVksR0FBRyxTQUFTLENBQUM7SUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFO1FBQzFDLE9BQU8sb0JBQW9CLENBQUM7S0FDN0I7U0FBTSxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQzVGLFlBQVksR0FBRyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDckQ7U0FBTSxJQUFJLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDdkMsWUFBWSxHQUFHLFdBQVcsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNyRDtTQUFNLElBQ0wsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUM7UUFDakQsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLEVBQUUsWUFBWSxFQUFFLGNBQWMsQ0FBQyxFQUNoRTtRQUNBLFlBQVksR0FBRyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDckQ7U0FBTSxJQUNMLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsdUxBQXdELENBQUM7UUFDL0UsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxpQ0FBYyxDQUFDO1FBQ3JDLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsc0NBQWMsQ0FBQyxFQUNyQztRQUNBLFlBQVksR0FBRyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDckQ7U0FBTSxJQUFJLENBQUMsOEJBQThCLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRSxjQUFjLENBQUMsRUFBRTtRQUMzRSxZQUFZLEdBQUcsV0FBVyxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3JEO1NBQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLHVDQUFjLENBQUMsRUFBRTtRQUNoRCxZQUFZLEdBQUcsV0FBVyxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3JEO0lBQ0QsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQUNELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxFQUFNLEVBQUUsQ0FBYztJQUN6RCxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDbkQsT0FBTyxzQkFBc0IsQ0FBQztLQUMvQjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFDRCw2QkFBNkI7QUFDN0IsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEVBQU0sRUFBRSxDQUFjO0lBQ3JELElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUM7UUFBRSxPQUFPLDBCQUEwQixDQUFDO0lBQ3hGLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMifQ==\",\"filename\":\"/corp/tobacchi/checks.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AGRI_DIV_NAME, CORP_SETUP_UPGRADES, EMP_STATS_CHECK_TIMEOUT, EMP_STAT_CHECK_VALUE, PARTY_BUDGET, TOB_DIV_NAME, } from 'const/corp';\\nimport { checkAgriManStage, checkAgriSetupStage } from 'corp/agri/checks';\\nimport { checkTobManStage, checkTobMidGameStage, checkTobSetupStage } from 'corp/tobacchi/checks';\\nimport { CORP_TOB_SETUP_STAGE } from 'corp/utils/stages';\\nexport function checkAndUpdateStage(ns, c, corp, currentStage = undefined) {\\n    const lastEmpCheck = currentStage ? currentStage.lastEmpStatsCheck : -1;\\n    currentStage = checkAgriSetupStage(ns, c, corp);\\n    if (currentStage === undefined) {\\n        currentStage = checkAgriManStage(ns, c);\\n    }\\n    if (currentStage === undefined)\\n        currentStage = CORP_TOB_SETUP_STAGE;\\n    currentStage = checkTobSetupStage(ns, c, corp);\\n    if (currentStage === undefined) {\\n        currentStage = checkTobMidGameStage(ns, c);\\n    }\\n    if (currentStage === undefined) {\\n        currentStage = checkTobManStage(ns, c);\\n    }\\n    // No valid stage found, this shouldn't ever happen, throw error\\n    if (currentStage === undefined) {\\n        throw new Error(\\\"No valid stage found, this shouldn't ever happen\\\");\\n    }\\n    if (lastEmpCheck > -1)\\n        currentStage.lastEmpStatsCheck = lastEmpCheck;\\n    return currentStage;\\n}\\nexport function checkUpgrades(c, level, upgrades = CORP_SETUP_UPGRADES) {\\n    for (const upgr of upgrades) {\\n        if (c.getUpgradeLevel(upgr) < level) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\nexport function checkAgroWarehouse(ns, c, level) {\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        if (c.getWarehouse(AGRI_DIV_NAME, city).level < level) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\nexport function checkAgroMaterials(ns, c, stage) {\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"AI Cores\\\" /* MATERIALS.AIC */).qty < stage.aiCores) {\\n            return false;\\n        }\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Hardware\\\" /* MATERIALS.HDW */).qty < stage.hardware) {\\n            return false;\\n        }\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Real Estate\\\" /* MATERIALS.RES */).qty < stage.realEstate) {\\n            return false;\\n        }\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Robots\\\" /* MATERIALS.ROB */).qty < stage.robot) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\nexport function checkAgroEmployees(ns, c, moveToRnD = false) {\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        const office = c.getOffice(AGRI_DIV_NAME, city);\\n        if (office.size < 9)\\n            return false;\\n        else if (office.employeeJobs['Research & Development'] > 0 && moveToRnD)\\n            return false;\\n    }\\n    return true;\\n}\\nexport function checkTobEmployees(ns, c, devCityEmp) {\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        const office = c.getOffice(TOB_DIV_NAME, city);\\n        if (city === ns.enums.CityName.Aevum && office.size < devCityEmp)\\n            return false;\\n        if (city !== ns.enums.CityName.Aevum && office.size < (devCityEmp > 60 ? devCityEmp - 60 : 9))\\n            return false;\\n    }\\n    return true;\\n}\\nexport function checkEmployeeStats(ns, c) {\\n    let avgMor = 0;\\n    let avgHap = 0;\\n    let avgEne = 0;\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        avgMor += c.getOffice(AGRI_DIV_NAME, city).avgMor;\\n        avgHap += c.getOffice(AGRI_DIV_NAME, city).avgHap;\\n        avgEne += c.getOffice(AGRI_DIV_NAME, city).avgEne;\\n    }\\n    avgMor /= 6;\\n    avgHap /= 6;\\n    avgEne /= 6;\\n    ns.clearLog();\\n    ns.print('waiting for employee stats to rise');\\n    ns.print('   avg morale: ' + avgMor.toFixed(3) + '/97');\\n    ns.print('avg happiness: ' + avgHap.toFixed(3) + '/97');\\n    ns.print('   avg energy: ' + avgEne.toFixed(3) + '/97');\\n    if (avgMor >= EMP_STAT_CHECK_VALUE && avgHap / 6 >= EMP_STAT_CHECK_VALUE && avgEne >= EMP_STAT_CHECK_VALUE) {\\n        return true;\\n    }\\n    return false;\\n}\\nexport function checkProductAtLeastDevelopment(c, division, name) {\\n    try {\\n        const prod = c.getProduct(division, name);\\n        return prod !== undefined;\\n    }\\n    catch (e) {\\n        return false;\\n    }\\n}\\nexport function checkAndSpeedEmpStats(ns, c, stage) {\\n    if (Date.now() - stage.lastEmpStatsCheck > 60 * 5 * 1000 && !checkEmployeeStats(ns, c)) {\\n        speedEmployeeStats(ns, c, stage);\\n    }\\n}\\nexport function setSubstage(stage, substageIndex) {\\n    stage.subStage = stage.subStages[substageIndex];\\n    return stage;\\n}\\nexport function purchaseAgroMaterials(ns, c, stage) {\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        let material = c.getMaterial(AGRI_DIV_NAME, city, \\\"AI Cores\\\" /* MATERIALS.AIC */);\\n        if (material.qty < stage.aiCores) {\\n            const toBuy = stage.aiCores - material.qty;\\n            c.bulkPurchase(AGRI_DIV_NAME, city, \\\"AI Cores\\\" /* MATERIALS.AIC */, toBuy);\\n        }\\n        material = c.getMaterial(AGRI_DIV_NAME, city, \\\"Hardware\\\" /* MATERIALS.HDW */);\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Hardware\\\" /* MATERIALS.HDW */).qty < stage.hardware) {\\n            const toBuy = stage.aiCores - material.qty;\\n            c.bulkPurchase(AGRI_DIV_NAME, city, \\\"Hardware\\\" /* MATERIALS.HDW */, toBuy);\\n        }\\n        material = c.getMaterial(AGRI_DIV_NAME, city, \\\"Real Estate\\\" /* MATERIALS.RES */);\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Real Estate\\\" /* MATERIALS.RES */).qty < stage.realEstate) {\\n            const toBuy = stage.aiCores - material.qty;\\n            c.bulkPurchase(AGRI_DIV_NAME, city, \\\"Real Estate\\\" /* MATERIALS.RES */, toBuy);\\n        }\\n        material = c.getMaterial(AGRI_DIV_NAME, city, \\\"Robots\\\" /* MATERIALS.ROB */);\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Robots\\\" /* MATERIALS.ROB */).qty < stage.robot) {\\n            const toBuy = stage.aiCores - material.qty;\\n            c.bulkPurchase(AGRI_DIV_NAME, city, \\\"Robots\\\" /* MATERIALS.ROB */, toBuy);\\n        }\\n    }\\n}\\nexport function speedEmployeeStats(ns, c, stage) {\\n    if (stage.lastEmpStatsCheck === -1) {\\n        stage.lastEmpStatsCheck = Date.now();\\n    }\\n    else if (Date.now() - stage.lastEmpStatsCheck > EMP_STATS_CHECK_TIMEOUT) {\\n        for (const city of Object.values(ns.enums.CityName)) {\\n            c.buyCoffee(AGRI_DIV_NAME, city);\\n            c.throwParty(AGRI_DIV_NAME, city, PARTY_BUDGET);\\n        }\\n        stage.lastEmpStatsCheck = -1;\\n    }\\n}\\nexport function manageInvestors(c, minValue, round) {\\n    const offer = c.getInvestmentOffer();\\n    if (offer && offer.round === round && offer.funds > minValue)\\n        return c.acceptInvestmentOffer();\\n    return false;\\n}\\nexport function manageAevumEmployees(ns, c, size) {\\n    while (c.hireEmployee(TOB_DIV_NAME, ns.enums.CityName.Aevum)) { }\\n    const baseline = Math.floor(size / 7);\\n    const business = Math.floor(baseline / 2);\\n    let remaining = business + baseline * 3;\\n    let ops = baseline;\\n    let eng = baseline;\\n    let man = baseline;\\n    let step = 0;\\n    while (remaining > 0) {\\n        switch (step) {\\n            case 0: {\\n                eng++;\\n                break;\\n            }\\n            case 1: {\\n                man++;\\n                break;\\n            }\\n            case 2: {\\n                ops++;\\n                break;\\n            }\\n        }\\n        remaining--;\\n        step = step == 2 ? 0 : step++;\\n    }\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Operations\\\" /* JOBS.OPS */, ops);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Engineer\\\" /* JOBS.ENG */, eng);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Business\\\" /* JOBS.BUS */, business);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Management\\\" /* JOBS.MAN */, man);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcnAvdXRpbHMvZnVuY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxhQUFhLEVBRWIsbUJBQW1CLEVBQ25CLHVCQUF1QixFQUN2QixvQkFBb0IsRUFHcEIsWUFBWSxFQUNaLFlBQVksR0FDYixNQUFNLFlBQVksQ0FBQztBQUNwQixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsb0JBQW9CLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRyxPQUFPLEVBQUUsb0JBQW9CLEVBQWtCLE1BQU0sbUJBQW1CLENBQUM7QUFFekUsTUFBTSxVQUFVLG1CQUFtQixDQUNqQyxFQUFNLEVBQ04sQ0FBYyxFQUNkLElBQXFCLEVBQ3JCLGVBQTJDLFNBQVM7SUFFcEQsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2hELElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtRQUM5QixZQUFZLEdBQUcsaUJBQWlCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3pDO0lBQ0QsSUFBSSxZQUFZLEtBQUssU0FBUztRQUFFLFlBQVksR0FBRyxvQkFBb0IsQ0FBQztJQUNwRSxZQUFZLEdBQUcsa0JBQWtCLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQyxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7UUFDOUIsWUFBWSxHQUFHLG9CQUFvQixDQUFDLEVBQUUsRUFBRSxDQUFDLENB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\",\"filename\":\"/corp/utils/functions.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.bulkPurchase\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CORP_AGRI_MANTAINANCE, CORP_AGRI_SETUP, CORP_MANTAINANCE, CORP_TOBACCHI_MIDGAME, CORP_TOBACCHI_STARTUP, } from 'const/scripts';\\nimport { checkAndUpdateStage } from 'corp/corp-functions';\\n// currentyl crashes the game :(\\n// Starter function, based on the current corp status will spawn related script\\n// Stage script will (should) respawn this until mantainance one\\n// Corp management based on Mughur guide https://docs.google.com/document/d/1eqQ_KTnk3VkW1XLHjM2fAQbCNY05CTCE85mJFjeFDE8\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.enableLog('spawn');\\n    ns.tail();\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.spawn(CORP_AGRI_SETUP, 1);\\n        return;\\n    }\\n    else {\\n        const currentStage = checkAndUpdateStage(ns);\\n        switch (currentStage.mainStage.val) {\\n            case 0: {\\n                ns.spawn(CORP_AGRI_SETUP, 1);\\n                break;\\n            }\\n            case 1: {\\n                ns.spawn(CORP_AGRI_MANTAINANCE, 1);\\n                break;\\n            }\\n            case 2: {\\n                ns.spawn(CORP_TOBACCHI_STARTUP, 1);\\n                break;\\n            }\\n            case 3: {\\n                ns.spawn(CORP_TOBACCHI_MIDGAME, 1);\\n                break;\\n            }\\n            case 4: {\\n                ns.spawn(CORP_MANTAINANCE, 1);\\n                break;\\n            }\\n            default: {\\n                ns.print('ERROR No stage found!');\\n                ns.tail();\\n                break;\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC1zdGFydGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcnAvY29ycC1zdGFydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsZUFBZSxFQUNmLGdCQUFnQixFQUNoQixxQkFBcUIsRUFDckIscUJBQXFCLEdBQ3RCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRzFELGdDQUFnQztBQUNoQywrRUFBK0U7QUFDL0UsZ0VBQWdFO0FBQ2hFLHdIQUF3SDtBQUV4SCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1YsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQztJQUN6QixJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFO1FBQ3ZCLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdCLE9BQU87S0FDUjtTQUFNO1FBQ0wsTUFBTSxZQUFZLEdBQW1CLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdELFFBQVEsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDbEMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDTixFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDN0IsTUFBTTthQUNQO1lBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDTixFQUFFLENBQUMsS0FBSyxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNuQyxNQUFNO2FBQ1A7WUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNOLEVBQUUsQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLE1BQU07YUFDUDtZQUNELEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ04sRUFBRSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDbkMsTUFBTTthQUNQO1lBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDTixFQUFFLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixNQUFNO2FBQ1A7WUFDRCxPQUFPLENBQUMsQ0FBQztnQkFDUCxFQUFFLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7Z0JBQ2xDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDVixNQUFNO2FBQ1A7U0FDRjtLQUNGO0FBQ0gsQ0FBQyJ9\",\"filename\":\"/corp/corp-starter.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:https://danielyxie.github.io/f41d1376-a848-4fbd-b908-f4bff0c10ece\",\"moduleSequenceNumber\":363},{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/5d6a193e-1794-4a14-aca4-1aa8231ed5fb\",\"moduleSequenceNumber\":348},{\"filename\":\"/corp/corp-functions.js\",\"url\":\"blob:https://danielyxie.github.io/4c8ef390-d5b1-46e4-a8d1-42175744a35c\",\"moduleSequenceNumber\":364},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/b2630ada-b982-44fd-b5dd-2a250cfca368\",\"moduleSequenceNumber\":342},{\"filename\":\"/corp/corp-starter.js\",\"url\":\"blob:https://danielyxie.github.io/5bc606e9-6015-49ea-836e-bf94e1b6002d\",\"moduleSequenceNumber\":567}],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AGRI_DIV_NAME, AGRI_MATERIAL, ROUND_1_MIN_AMOUNT, ROUND_2_MIN_AMOUNT } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { checkAndUpdateStage, manageInvestors, purchaseAgroMaterials, speedEmployeeStats } from 'corp/utils/functions';\\nimport { CORP_AGRI_MAN_STAGE } from 'corp/utils/stages';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(ns, c);\\n    }\\n}\\nasync function runStage(ns, c) {\\n    const corp = c.getCorporation();\\n    try {\\n        let currentStage = checkAndUpdateStage(ns, c, corp);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== 0) {\\n            error = true;\\n            ns.print('WARN stage not agri prep, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_AGRI_MAN_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.clearLog();\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    manageStage(ns, c, currentStage);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, c, corp, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            await ns.sleep(500);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Agri startup complete, moving into mantainance.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nfunction manageStage(ns, c, currentStage) {\\n    switch (currentStage.subStage.val) {\\n        case 0: {\\n            manageInvestors(c, ROUND_1_MIN_AMOUNT, 1);\\n            break;\\n        }\\n        case 1: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                const office = c.getOffice(AGRI_DIV_NAME, city);\\n                if (office.size < 9) {\\n                    const toAdd = 9 - office.size;\\n                    c.upgradeOfficeSize(AGRI_DIV_NAME, city, toAdd);\\n                    while (c.hireEmployee(AGRI_DIV_NAME, city)) { }\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 1);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 1);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 1);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Management\\\" /* JOBS.MAN */, 2);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */, 1);\\n                }\\n            }\\n            break;\\n        }\\n        case 2: {\\n            for (const upgr of [\\\"Smart Storage\\\" /* UPGRADES.SST */, \\\"Smart Factories\\\" /* UPGRADES.SFA */]) {\\n                while (c.getUpgradeLevel(upgr) < 10) {\\n                    c.levelUpgrade(upgr);\\n                }\\n            }\\n            break;\\n        }\\n        case 3: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                while (c.getWarehouse(AGRI_DIV_NAME, city).level < 9) {\\n                    c.upgradeWarehouse(AGRI_DIV_NAME, city);\\n                }\\n            }\\n            break;\\n        }\\n        case 4: {\\n            purchaseAgroMaterials(ns, c, AGRI_MATERIAL.stage2);\\n            break;\\n        }\\n        case 5: {\\n            speedEmployeeStats(ns, c, currentStage);\\n            break;\\n        }\\n        case 6: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */, 0);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 3);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 2);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 2);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Management\\\" /* JOBS.MAN */, 2);\\n            }\\n            manageInvestors(c, ROUND_2_MIN_AMOUNT, 1);\\n            break;\\n        }\\n        case 7: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                while (c.getWarehouse(AGRI_DIV_NAME, city).level < 18) {\\n                    c.upgradeWarehouse(AGRI_DIV_NAME, city);\\n                }\\n            }\\n            break;\\n        }\\n        case 8: {\\n            purchaseAgroMaterials(ns, c, AGRI_MATERIAL.stage3);\\n            break;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFudGFpbmFuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29ycC9hZ3JpL21hbnRhaW5hbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFRLGtCQUFrQixFQUFFLGtCQUFrQixFQUFZLE1BQU0sWUFBWSxDQUFDO0FBQ2xILE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLGVBQWUsRUFBRSxxQkFBcUIsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZILE9BQU8sRUFBRSxtQkFBbUIsRUFBa0IsTUFBTSxtQkFBbUIsQ0FBQztBQUV4RSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLE1BQU0sQ0FBQyxHQUFnQixFQUFFLENBQUMsV0FBVyxDQUFDO0lBQ3RDLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7UUFDdkIsRUFBRSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1FBQ3ZFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNCO1NBQU07UUFDTCxNQUFNLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDdkI7QUFDSCxDQUFDO0FBRUQsS0FBSyxVQUFVLFFBQVEsQ0FBQyxFQUFNLEVBQUUsQ0FBYztJQUM1QyxNQUFNLElBQUksR0FBb0IsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ2pELElBQUk7UUFDRixJQUFJLFlBQVksR0FBbUIsbUJBQW1CLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwRSxJQUFJLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDMUIsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUM5QixLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2IsRUFBRSxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1lBQ25DLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNYO2FBQU0sSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUU7WUFDM0MsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNiLEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0VBQWdFLENBQUMsQ0FBQztZQUMzRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDWDtRQUNELE1BQU0sZ0JBQWdCLEdBQUcsbUJBQW1CLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztRQUMzRCxPQUFPLFlBQVksS0FBSyxTQUFTLElBQUksWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEtBQUssZ0JBQWdCLEVBQUU7WUFDcEYsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2QsRUFBRSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsRUFBRSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUN0RyxRQUFRLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO2dCQUNsQyxLQUFLLGdCQUFnQixDQUFDLENBQUM7b0JBQ3JCLFdBQVcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO29CQUNqQyxNQUFNO2lCQUNQO2dCQUNELHdEQUF3RDtnQkFDeEQsT0FBTyxDQUFDLENBQUM7b0JBQ1AsYUFBYSxHQUFHLElBQUksQ0FBQztvQkFDckIsTUFBTTtpQkFDUDthQUNGO1lBQ0QsSUFBSSxhQUFhO2dCQUFFLE1BQU07WUFDekIsWUFBWSxHQUFHLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQzlELEVBQUUsQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUUsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7WUFDcEcsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLEVBQUUsQ0FBQyxLQUFLLENBQUMseURBQXlELENBQUMsQ0FBQztZQUNwRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDWDtRQUNELEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0QixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDWDtBQUNILENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxFQUFNLEVBQUUsQ0FBYyxFQUFFLFlBQTRCO0lBQ3ZFLFFBQVEsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUU7UUFDakMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNOLGVBQWUsQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUMsTUFBTTtTQUNQO1FBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNOLEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNuRCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDaEQsSUFBSSxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtvQkFDbkIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7b0JBQzlCLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO29CQUNoRCxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUU7b0JBQzlDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsSUFBSSwrQkFBWSxDQUFDLENBQUMsQ0FBQztvQkFDekQsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxJQUFJLDZCQUFZLENBQUMsQ0FBQyxDQUFDO29CQUN6RCxDQUFDLENBQUMsb0JBQW9CLENBQUMsYUFBYSxFQUFFLElBQUksNkJBQVksQ0FBQyxDQUFDLENBQUM7b0JBQ3pELENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsSUFBSSwrQkFBWSxDQUFDLENBQUMsQ0FBQztvQkFDekQsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxJQUFJLDJDQUFZLENBQUMsQ0FBQyxDQUFDO2lCQUMxRDthQUNGO1lBQ0QsTUFBTTtTQUNQO1FBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNOLEtBQUssTUFBTSxJQUFJLElBQUksMEVBQTRCLEVBQUU7Z0JBQy9DLE9BQU8sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUU7b0JBQ25DLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3RCO2FBQ0Y7WUFDRCxNQUFNO1NBQ1A7UUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ04sS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ25ELE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRTtvQkFDcEQsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDekM7YUFDRjtZQUNELE1BQU07U0FDUDtRQUNELEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDTixxQkFBcUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuRCxNQUFNO1NBQ1A7UUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ04sa0JBQWtCLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUN4QyxNQUFNO1NBQ1A7UUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ04sS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ25ELENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsSUFBSSwyQ0FBWSxDQUFDLENBQUMsQ0FBQztnQkFDekQsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxJQUFJLCtCQUFZLENBQUMsQ0FBQyxDQUFDO2dCQUN6RCxDQUFDLENBQUMsb0JBQW9CLENBQUMsYUFBYSxFQUFFLElBQUksNkJBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQ3pELENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsSUFBSSw2QkFBWSxDQUFDLENBQUMsQ0FBQztnQkFDekQsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxJQUFJLCtCQUFZLENBQUMsQ0FBQyxDQUFDO2FBQzFEO1lBQ0QsZUFBZSxDQUFDLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxQyxNQUFNO1NBQ1A7UUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ04sS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ25ELE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRTtvQkFDckQsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDekM7YUFDRjtZQUNELE1BQU07U0FDUDtRQUNELEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDTixxQkFBcUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuRCxNQUFNO1NBQ1A7S0FDRjtBQUNILENBQUMifQ==\",\"filename\":\"/corp/agri/mantainance.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.bulkPurchase\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AGRI_DIV_NAME, AGRI_MATERIAL, CORP_NAME, CORP_SETUP_UPGRADES, UNLOCKS } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { checkAndUpdateStage, purchaseAgroMaterials, speedEmployeeStats } from 'corp/utils/functions';\\nimport { CORP_AGRI_SETUP_STAGE } from 'corp/utils/stages';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        const created = c.createCorporation(CORP_NAME, false);\\n        if (!created)\\n            c.createCorporation(CORP_NAME, true);\\n    }\\n    const corp = c.getCorporation();\\n    try {\\n        let currentStage = checkAndUpdateStage(ns, c, corp);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== 0) {\\n            error = true;\\n            ns.print('WARN stage not agri prep, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_AGRI_SETUP_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.clearLog();\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    manageStage(ns, c, currentStage);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, c, corp, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            await ns.sleep(500);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Agri startup complete, moving into mantainance.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nfunction manageStage(ns, c, currentStage) {\\n    switch (currentStage.subStage.val) {\\n        case 0: {\\n            c.expandIndustry('Agriculture', AGRI_DIV_NAME);\\n            break;\\n        }\\n        case 1: {\\n            c.unlockUpgrade(UNLOCKS.SSU);\\n            break;\\n        }\\n        case 2: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                if (!c.getDivision(AGRI_DIV_NAME).cities.includes(city)) {\\n                    c.expandCity(AGRI_DIV_NAME, city);\\n                    c.purchaseWarehouse(AGRI_DIV_NAME, city);\\n                }\\n                c.setSmartSupply(AGRI_DIV_NAME, city, true);\\n                while (c.hireEmployee(AGRI_DIV_NAME, city)) { }\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 1);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 1);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 1);\\n                c.sellMaterial(AGRI_DIV_NAME, city, 'Plants', 'MAX', 'MP');\\n                c.sellMaterial(AGRI_DIV_NAME, city, 'Food', 'MAX', 'MP');\\n            }\\n            break;\\n        }\\n        case 3: {\\n            c.hireAdVert(AGRI_DIV_NAME);\\n            break;\\n        }\\n        case 4: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                while (c.getWarehouse(AGRI_DIV_NAME, city).level < 2) {\\n                    c.upgradeWarehouse(AGRI_DIV_NAME, city);\\n                }\\n            }\\n            break;\\n        }\\n        case 5: {\\n            for (const upgr of CORP_SETUP_UPGRADES) {\\n                while (c.getUpgradeLevel(upgr) < 2) {\\n                    c.levelUpgrade(upgr);\\n                }\\n            }\\n            break;\\n        }\\n        case 6: {\\n            purchaseAgroMaterials(ns, c, AGRI_MATERIAL.stage1);\\n            break;\\n        }\\n        case 7: {\\n            speedEmployeeStats(ns, c, currentStage);\\n            break;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29ycC9hZ3JpL3NldHVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBUSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUscUJBQXFCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RyxPQUFPLEVBQUUscUJBQXFCLEVBQWtCLE1BQU0sbUJBQW1CLENBQUM7QUFFMUUscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixNQUFNLENBQUMsR0FBZ0IsRUFBRSxDQUFDLFdBQVcsQ0FBQztJQUN0QyxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFO1FBQ3ZCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLE9BQU87WUFBRSxDQUFDLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3BEO0lBQ0QsTUFBTSxJQUFJLEdBQW9CLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNqRCxJQUFJO1FBQ0YsSUFBSSxZQUFZLEdBQW1CLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEUsSUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQixJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7WUFD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\",\"filename\":\"/corp/agri/setup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.createCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.unlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.bulkPurchase\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TOB_DIV_NAME, TOB_PROD_ADJUST_END, TOB_PROD_ADJUST_INC, TOB_PROD_ADJUST_LOW, TOB_PROD_ADJUST_START, TOB_PROD_CHECK_CYCLE, TOB_PROD_CHECK_END, TOB_PROD_CHECK_FIRST, TOB_PROD_CHECK_START, TOB_PROD_SETUP_END, TOB_PROD_SETUP_FIRST, TOB_PROD_SETUP_LOOP, TOB_PROD_SETUP_START, } from 'const/corp';\\nexport async function manageProductSell(ns, c, p) {\\n    // setup\\\\adjustment state 0=never sold, 1=first setup, 2=cyclic check and adjustment, 3=complete\\n    let state = prodNotSelling(p) ? TOB_PROD_CHECK_START : TOB_PROD_CHECK_CYCLE;\\n    while (state < 3) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        //and to this part put things you want done exactly once per cycle\\n        p = c.getProduct(TOB_DIV_NAME, p.name);\\n        switch (state) {\\n            case TOB_PROD_CHECK_START: {\\n                c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, p.name, 'MAX', 'MP*1', true);\\n                state = TOB_PROD_CHECK_FIRST;\\n                break;\\n            }\\n            case TOB_PROD_CHECK_FIRST: {\\n                await setupProdRate(ns, c, p);\\n                state = TOB_PROD_CHECK_END;\\n                break;\\n            }\\n            case TOB_PROD_CHECK_CYCLE: {\\n                await checkAndAdjustProdRate(ns, c, p);\\n                state = TOB_PROD_CHECK_END;\\n                break;\\n            }\\n        }\\n    }\\n}\\nasync function setupProdRate(ns, c, p) {\\n    // setup state, 0=before bisection, 1=first bisection, 2=bisection loop, 3=complete\\n    // honestly i don't really like.. will refactor.. maybe\\n    let state = TOB_PROD_SETUP_START;\\n    let x_min = 1;\\n    let x_max = 1;\\n    let x_avg = 1;\\n    while (state < TOB_PROD_SETUP_END) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        //and to this part put things you want done exactly once per cycle\\n        p = c.getProduct(TOB_DIV_NAME, p.name);\\n        const x = Number.parseInt(p.sCost.slice(3));\\n        const prod = p.cityData.Aevum[1];\\n        const sell = p.cityData.Aevum[2];\\n        const rate = prod - sell;\\n        switch (state) {\\n            case TOB_PROD_SETUP_START: {\\n                if (rate <= 0) {\\n                    setProductValueSafe(ns, c, p, x * 2);\\n                }\\n                else {\\n                    state = TOB_PROD_SETUP_FIRST;\\n                }\\n                break;\\n            }\\n            case TOB_PROD_SETUP_FIRST: {\\n                x_min = x / 2;\\n                x_max = x;\\n                x_avg = (x_min + x_max) / 2;\\n                setProductValueSafe(ns, c, p, x_avg);\\n                state = TOB_PROD_SETUP_LOOP;\\n                break;\\n            }\\n            case TOB_PROD_SETUP_LOOP: {\\n                if (prod >= sell)\\n                    x_min = x_avg;\\n                else\\n                    x_max = x_avg;\\n                x_avg = (x_min + x_max) / 2;\\n                if (x_max - x_min > 0.5 && x_avg > 1) {\\n                    setProductValueSafe(ns, c, p, x_avg);\\n                }\\n                else {\\n                    setProductValueSafe(ns, c, p, Math.floor(x_avg));\\n                    state = TOB_PROD_SETUP_END;\\n                }\\n                break;\\n            }\\n        }\\n    }\\n}\\nasync function checkAndAdjustProdRate(ns, c, p) {\\n    // adjust state, 0=start, 1=incr, 2=lower, 3=end\\n    let state = TOB_PROD_ADJUST_START;\\n    let previousState = -1;\\n    while (state < TOB_PROD_ADJUST_END) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        p = c.getProduct(TOB_DIV_NAME, p.name);\\n        const x = Number.parseInt(p.sCost.slice(3));\\n        const prod = p.cityData.Aevum[1];\\n        const sell = p.cityData.Aevum[2];\\n        const rate = prod - sell;\\n        if (rate < 0 && rate > -0.3) {\\n            // rate is ok, no need to adjust\\n            break;\\n        }\\n        //and to this part put things you want done exactly once per cycle\\n        previousState = state;\\n        if (rate > 0)\\n            state = TOB_PROD_ADJUST_LOW;\\n        else if (previousState !== TOB_PROD_ADJUST_LOW)\\n            state = TOB_PROD_ADJUST_INC;\\n        else\\n            state = TOB_PROD_ADJUST_END;\\n        switch (state) {\\n            case TOB_PROD_ADJUST_START: {\\n                break;\\n            }\\n            case TOB_PROD_ADJUST_INC: {\\n                setProductValueSafe(ns, c, p, x + 1);\\n                break;\\n            }\\n            case TOB_PROD_ADJUST_LOW: {\\n                setProductValueSafe(ns, c, p, x - 1);\\n                break;\\n            }\\n        }\\n    }\\n    return;\\n}\\nfunction setProductValueSafe(ns, c, p, value) {\\n    value = Math.max(1, value);\\n    c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, p.name, 'MAX', `MP*${value}`, true);\\n}\\nexport function prodNotSelling(p) {\\n    return (p.sCost === undefined ||\\n        (typeof p.sCost === 'string' && !p.sCost.startsWith('MP*')) ||\\n        p.sCost === 0 ||\\n        p.cityData.Aevum[1] <= 0);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1mdW5jdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29ycC90b2JhY2NoaS9wcm9kdWN0LWZ1bmN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsWUFBWSxFQUNaLG1CQUFtQixFQUNuQixtQkFBbUIsRUFDbkIsbUJBQW1CLEVBQ25CLHFCQUFxQixFQUNyQixvQkFBb0IsRUFDcEIsa0JBQWtCLEVBQ2xCLG9CQUFvQixFQUNwQixvQkFBb0IsRUFDcEIsa0JBQWtCLEVBQ2xCLG9CQUFvQixFQUNwQixtQkFBbUIsRUFDbkIsb0JBQW9CLEdBQ3JCLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsaUJBQWlCLENBQUMsRUFBTSxFQUFFLENBQWMsRUFBRSxDQUFVO0lBQ3hFLGdHQUFnRztJQUNoRyxJQUFJLEtBQUssR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQztJQUM1RSxPQUFPLEtBQUssR0FBRyxDQUFDLEVBQUU7UUFDaEIsT0FBTyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM1QyxnRUFBZ0U7WUFDaEUscUVBQXFFO1lBQ3JFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQjtRQUVELE9BQU8sQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDNUMsZUFBZTtZQUNmLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQjtRQUNELGtFQUFrRTtRQUNsRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLFFBQVEsS0FBSyxFQUFFO1lBQ2IsS0FB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\",\"filename\":\"/corp/tobacchi/product-functions.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CorpResearchName, ROUND_3_MIN_AMOUNT, ROUND_4_MIN_AMOUNT, TOBACCHI_LAB_POINT_THRESHOLD, TOBACCHI_MK_POINT_THRESHOLD, TOB_DIV_NAME, } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { manageProductSell, prodNotSelling as prodNotSetup } from 'corp/tobacchi/product-functions';\\nimport { checkAndUpdateStage, manageAevumEmployees, manageInvestors } from 'corp/utils/functions';\\nimport { CORP_TOB_MANTAINANCE_STAGE } from 'corp/utils/stages';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(c, ns);\\n    }\\n}\\nasync function runStage(c, ns) {\\n    const corp = c.getCorporation();\\n    try {\\n        let currentStage = checkAndUpdateStage(ns, c, corp);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== 2) {\\n            error = true;\\n            ns.print('WARN stage not tobacchi mantainance, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_TOB_MANTAINANCE_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.clearLog();\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            //and to this part put things you want done exactly once per cycle\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, c);\\n                    break;\\n                }\\n                // this should not be possible..\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete) {\\n                ns.print('ERROR Tobacchi mantainance complete, should not be possible.');\\n                ns.tail();\\n                break;\\n            }\\n            currentStage = checkAndUpdateStage(ns, c, corp, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n        }\\n        if (!error) {\\n            ns.print('ERROR Tobacchi mantainance complete, should not be possible.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n        throw e;\\n    }\\n}\\nasync function manageStage(ns, c) {\\n    ns.print('temp, ', c);\\n    while (c.getCorporation().state !== 'EXPORT') {\\n        //when you make your main script, put things you want to be done\\n        //potentially multiple times every cycle, like buying upgrades, here.\\n        await ns.sleep(0);\\n    }\\n    while (c.getCorporation().state === 'EXPORT') {\\n        //same as above\\n        await ns.sleep(0);\\n    }\\n    manageMoney(ns, c);\\n    checkReasearch(ns, c);\\n    checkWilson(c);\\n    adsOrEmployees(ns, c);\\n    upgradeOtherCities(ns, c);\\n    if (hasNoConfiguredProducts(c)) {\\n        checkProducts(ns, c);\\n    }\\n    else {\\n        startDevelop(ns, c);\\n    }\\n}\\nfunction manageMoney(ns, c) {\\n    if (!c.getCorporation().public) {\\n        try {\\n            manageInvestors(c, ROUND_3_MIN_AMOUNT, 3);\\n            if (manageInvestors(c, ROUND_4_MIN_AMOUNT, 4)) {\\n                ns.print('SUCCESS Time to go public');\\n                ns.tail();\\n            }\\n        }\\n        catch (e) {\\n            ns.print('ERROR investment offer: ', e);\\n            ns.tail();\\n        }\\n    }\\n}\\nfunction checkReasearch(ns, c) {\\n    const division = c.getDivision(TOB_DIV_NAME);\\n    if (!c.hasResearched(TOB_DIV_NAME, CorpResearchName.RES_LAB) && division.research > TOBACCHI_LAB_POINT_THRESHOLD) {\\n        c.research(TOB_DIV_NAME, CorpResearchName.RES_LAB);\\n    }\\n    if (!c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT2) &&\\n        !c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT1) &&\\n        division.research > TOBACCHI_MK_POINT_THRESHOLD) {\\n        c.research(TOB_DIV_NAME, CorpResearchName.MKT1);\\n        c.research(TOB_DIV_NAME, CorpResearchName.MKT2);\\n        for (const prod of c.getDivision(TOB_DIV_NAME).products) {\\n            enableMkTa(ns, c, prod);\\n        }\\n    }\\n}\\nfunction hasNoConfiguredProducts(c) {\\n    const products = c.getDivision(TOB_DIV_NAME).products;\\n    return products.some((product) => prodNotSetup(c.getProduct(TOB_DIV_NAME, product)));\\n}\\nfunction startDevelop(ns, c) {\\n    const products = c.getDivision(TOB_DIV_NAME).products;\\n    const prods = [];\\n    for (const product of products) {\\n        prods.push(c.getProduct(TOB_DIV_NAME, product));\\n    }\\n    const prodToUpdate = prods.sort((a, b) => b.rat - a.rat)[0];\\n    const prodName = prodToUpdate.name;\\n    c.discontinueProduct(TOB_DIV_NAME, prodName);\\n    const investment = Math.floor(c.getCorporation().funds / 3);\\n    c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, prodName, investment, investment);\\n}\\nasync function checkProducts(ns, c) {\\n    const productNames = c.getDivision(TOB_DIV_NAME).products;\\n    if (c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT2) && c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT1)) {\\n        for (const product of productNames) {\\n            if (prodNotSetup(c.getProduct(TOB_DIV_NAME, product))) {\\n                c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, product, 'MAX', 'MP', true);\\n                enableMkTa(ns, c, product);\\n            }\\n        }\\n    }\\n    else {\\n        const products = productNames\\n            .map((product) => c.getProduct(TOB_DIV_NAME, product))\\n            .filter((el) => el.developmentProgress >= 100);\\n        const all = [];\\n        for (const prod of products) {\\n            if (!prodNotSetup(prod)) {\\n                all.unshift(prod);\\n            }\\n            else {\\n                all.push(prod);\\n            }\\n        }\\n        await Promise.all(all.map(async (el) => {\\n            manageProductSell(ns, c, el);\\n        }));\\n    }\\n}\\nfunction checkWilson(c) {\\n    if (c.getCorporation().funds > c.getUpgradeLevelCost(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */))\\n        c.levelUpgrade(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */);\\n}\\nfunction adsOrEmployees(ns, c) {\\n    const funds = c.getCorporation().funds;\\n    const advCost = c.getHireAdVertCost(TOB_DIV_NAME);\\n    const employeeCost = c.getOfficeSizeUpgradeCost(TOB_DIV_NAME, ns.enums.CityName.Aevum, 15);\\n    const aevumSize = c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).size;\\n    if (advCost > employeeCost || aevumSize >= 300) {\\n        if (funds > advCost && advCost < funds / 3)\\n            c.hireAdVert(TOB_DIV_NAME);\\n    }\\n    else {\\n        if (funds > employeeCost && employeeCost < funds / 3) {\\n            c.upgradeOfficeSize(TOB_DIV_NAME, ns.enums.CityName.Aevum, 15);\\n            manageAevumEmployees(ns, c, aevumSize + 15);\\n        }\\n    }\\n}\\nfunction upgradeOtherCities(ns, c) {\\n    const funds = c.getCorporation().funds;\\n    const aevumSize = c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).size;\\n    for (const city of Object.values(ns.enums.CityName).filter((el) => el !== ns.enums.CityName.Aevum)) {\\n        const citySize = c.getOffice(TOB_DIV_NAME, city).size;\\n        if (citySize < aevumSize - 60) {\\n            const toAdd = aevumSize - citySize - 60;\\n            const upgradeCost = c.getOfficeSizeUpgradeCost(TOB_DIV_NAME, city, toAdd);\\n            if (upgradeCost < funds / 3) {\\n                c.upgradeOfficeSize(TOB_DIV_NAME, city, toAdd);\\n                while (c.hireEmployee(TOB_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */)) { }\\n            }\\n        }\\n    }\\n}\\nfunction enableMkTa(ns, c, prodName) {\\n    if (c.getProduct(TOB_DIV_NAME, prodName).developmentProgress >= 100 &&\\n        prodNotSetup(c.getProduct(TOB_DIV_NAME, prodName))) {\\n        c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, prodName, 'MAX', 'MP', true);\\n    }\\n    c.setProductMarketTA1(TOB_DIV_NAME, prodName, true);\\n    c.setProductMarketTA2(TOB_DIV_NAME, prodName, true);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFudGFpbmFuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29ycC90b2JhY2NoaS9tYW50YWluYW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBRWhCLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsNEJBQTRCLEVBQzVCLDJCQUEyQixFQUMzQixZQUFZLEdBRWIsTUFBTSxZQUFZLENBQUM7QUFDcEIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxJQUFJLFlBQVksRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBRSxlQUFlLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRyxPQUFPLEVBQUUsMEJBQTBCLEVBQWtCLE1BQU0sbUJBQW1CLENBQUM7QUFFL0UscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixNQUFNLENBQUMsR0FBZ0IsRUFBRSxDQUFDLFdBQVcsQ0FBQztJQUN0QyxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFO1FBQ3ZCLEVBQUUsQ0FBQyxLQUFLLENBQUMsNERBQTRELENBQUMsQ0FBQztRQUN2RSxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztLQUMzQjtTQUFNO1FBQ0wsTUFBTSxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZCO0FBQ0gsQ0FBQztBQUVELEtBQUssVUFBVSxRQUFRLENBQUMsQ0FBYyxFQUFFLEVBQU07SUFDNUMsTUFBTSxJQUFJLEdBQW9CLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNqRCxJQUFJO1FB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\",\"filename\":\"/corp/tobacchi/mantainance.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasResearched\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.research\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.discontinueProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevelCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getHireAdVertCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOfficeSizeUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TOBACCHI_MIN_INVESTMENT_VALUE, TOB_DIV_NAME, TOB_PROD2_NAME, TOB_PROD3_NAME } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { manageProductSell } from 'corp/tobacchi/product-functions';\\nimport { checkAndUpdateStage, manageAevumEmployees } from 'corp/utils/functions';\\nimport { CORP_TOB_MIDGAME_STAGE } from 'corp/utils/stages';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(c, ns);\\n    }\\n}\\nasync function runStage(c, ns) {\\n    const corp = c.getCorporation();\\n    try {\\n        let currentStage = checkAndUpdateStage(ns, c, corp);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== 2) {\\n            error = true;\\n            ns.print('WARN stage not tobacchi midgame, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_TOB_MIDGAME_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.clearLog();\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, c);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, c, corp, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            await ns.sleep(500);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Tobacchi midgame complete, moving into mantainance.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nasync function manageStage(ns, c) {\\n    hireIntoAevum(ns, c);\\n    const prod2 = c.getProduct(TOB_DIV_NAME, TOB_PROD2_NAME);\\n    if (prod2.developmentProgress >= 100) {\\n        try {\\n            const prod3 = c.getProduct(TOB_DIV_NAME, TOB_PROD3_NAME);\\n            if (prod3.developmentProgress >= 100) {\\n                await manageProductSell(ns, c, prod3);\\n            }\\n        }\\n        catch (e) {\\n            if (c.getCorporation().funds > 1e9 * 2)\\n                c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD3_NAME, TOBACCHI_MIN_INVESTMENT_VALUE, TOBACCHI_MIN_INVESTMENT_VALUE);\\n        }\\n        await manageProductSell(ns, c, prod2);\\n    }\\n}\\nfunction hireIntoAevum(ns, c) {\\n    const toAdd = 60 - c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).employees;\\n    if (toAdd > 0) {\\n        c.upgradeOfficeSize(TOB_DIV_NAME, ns.enums.CityName.Aevum, toAdd);\\n        manageAevumEmployees(ns, c, 60);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZ2FtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JwL3RvYmFjY2hpL21pZGdhbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLDZCQUE2QixFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDcEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakYsT0FBTyxFQUFFLHNCQUFzQixFQUFrQixNQUFNLG1CQUFtQixDQUFDO0FBRTNFLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsTUFBTSxDQUFDLEdBQWdCLEVBQUUsQ0FBQyxXQUFXLENBQUM7SUFDdEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsRUFBRTtRQUN2QixFQUFFLENBQUMsS0FBSyxDQUFDLDREQUE0RCxDQUFDLENBQUM7UUFDdkUsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDM0I7U0FBTTtRQUNMLE1BQU0sUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUN2QjtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsUUFBUSxDQUFDLENBQWMsRUFBRSxFQUFNO0lBQzVDLE1BQU0sSUFBSSxHQUFvQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDakQsSUFBSTtRQUNGLElBQUksWUFBWSxHQUFtQixtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BFLElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO1lBQzlCLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDYixFQUFFLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7WUFDbkMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ1g7YUFBTSxJQUFJLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRTtZQUMzQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2IsRUFBRSxDQUFDLEtBQUssQ0FBQyx1RUFBdUUsQ0FBQyxDQUFDO1lBQ2xGLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNYO1FBQ0QsTUFBTSxnQkFBZ0IsR0FBRyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO1FBQzlELE9BQU8sWUFBWSxLQUFLLFNBQVMsSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSyxnQkFBZ0IsRUFBRTtZQUNwRixFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDZCxFQUFFLENBQUMsS0FBSyxDQUFDLDJCQUEyQixFQUFFLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ3RHLFFBQVEsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2xDLEtBQUssZ0JBQWdCLENBQUMsQ0FBQztvQkFDckIsTUFBTSxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUN6QixNQUFNO2lCQUNQO2dCQUNELHdEQUF3RDtnQkFDeEQsT0FBTyxDQUFDLENBQUM7b0JBQ1AsYUFBYSxHQUFHLElBQUksQ0FBQztvQkFDckIsTUFBTTtpQkFDUDthQUNGO1lBQ0QsSUFBSSxhQUFhO2dCQUFFLE1BQU07WUFDekIsWUFBWSxHQUFHLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQzlELEVBQUUsQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUUsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7WUFDcEcsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLEVBQUUsQ0FBQyxLQUFLLENBQUMsNkRBQTZELENBQUMsQ0FBQztZQUN4RSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDWDtRQUNELEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0QixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDWDtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsV0FBVyxDQUFDLEVBQU0sRUFBRSxDQUFjO0lBQy9DLGFBQWEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDekQsSUFBSSxLQUFLLENBQUMsbUJBQW1CLElBQUksR0FBRyxFQUFFO1FBQ3BDLElBQUk7WUFDRixNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsQ0FBQztZQUN6RCxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsSUFBSSxHQUFHLEVBQUU7Z0JBQ3BDLE1BQU0saUJBQWlCLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUN2QztTQUNGO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLENBQUM7Z0JBQ3BDLENBQUMsQ0FBQyxXQUFXLENBQ1gsWUFBWSxFQUNaLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFDdkIsY0FBYyxFQUNkLDZCQUE2QixFQUM3Qiw2QkFBNkIsQ0FDOUIsQ0FBQztTQUNMO1FBQ0QsTUFBTSxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3ZDO0FBQ0gsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLEVBQU0sRUFBRSxDQUFjO0lBQzNDLE1BQU0sS0FBSyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDaEYsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1FBQ2IsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEUsb0JBQW9CLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUNqQztBQUNILENBQUMifQ==\",\"filename\":\"/corp/tobacchi/midgame.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TOBACCHI_MIN_INVESTMENT_VALUE, TOB_DIV_NAME, TOB_PROD1_NAME, TOB_PROD2_NAME, } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { manageProductSell } from 'corp/tobacchi/product-functions';\\nimport { checkAndSpeedEmpStats, checkAndUpdateStage } from 'corp/utils/functions';\\nimport { CORP_TOB_SETUP_STAGE } from 'corp/utils/stages';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(c, ns);\\n    }\\n}\\nasync function runStage(c, ns) {\\n    const corp = c.getCorporation();\\n    try {\\n        let currentStage = checkAndUpdateStage(ns, c, corp);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== 2) {\\n            error = true;\\n            ns.print('WARN stage not tobacchi prep, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_TOB_SETUP_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.clearLog();\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, c, currentStage);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, c, corp, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            await ns.sleep(500);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Tobacchi startup complete, moving into midgame.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nasync function manageStage(ns, c, currentStage) {\\n    switch (currentStage.subStage.val) {\\n        case 0: {\\n            c.expandIndustry('Tobacco', TOB_DIV_NAME);\\n            break;\\n        }\\n        case 1: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                if (!c.getDivision(TOB_DIV_NAME).cities.includes(city)) {\\n                    c.expandCity(TOB_DIV_NAME, city);\\n                    c.purchaseWarehouse(TOB_DIV_NAME, city);\\n                }\\n                c.setSmartSupply(TOB_DIV_NAME, city, true);\\n            }\\n            break;\\n        }\\n        case 2: {\\n            hireIntoAevum(ns, c);\\n            hireIntoOthers(ns, c);\\n            currentStage.lastEmpStatsCheck = Date.now();\\n            break;\\n        }\\n        case 3: {\\n            c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD1_NAME, TOBACCHI_MIN_INVESTMENT_VALUE, TOBACCHI_MIN_INVESTMENT_VALUE);\\n            checkAndSpeedEmpStats(ns, c, currentStage);\\n            break;\\n        }\\n        case 4: {\\n            for (const upgr of [\\\"FocusWires\\\" /* UPGRADES.FWI */, \\\"Speech Processor Implants\\\" /* UPGRADES.SPI */, \\\"Neural Accelerators\\\" /* UPGRADES.NAC */, \\\"Nuoptimal Nootropic Injector Implants\\\" /* UPGRADES.NNI */]) {\\n                while (c.getUpgradeLevel(upgr) < 20) {\\n                    c.levelUpgrade(upgr);\\n                }\\n            }\\n            while (c.getUpgradeLevel(\\\"DreamSense\\\" /* UPGRADES.DSE */) < 30) {\\n                c.levelUpgrade(\\\"DreamSense\\\" /* UPGRADES.DSE */);\\n            }\\n            while (c.getUpgradeLevel(\\\"Project Insight\\\" /* UPGRADES.PIN */) < 10) {\\n                c.levelUpgrade(\\\"Project Insight\\\" /* UPGRADES.PIN */);\\n            }\\n            break;\\n        }\\n        case 5: {\\n            const prod1 = c.getProduct(TOB_DIV_NAME, TOB_PROD1_NAME);\\n            if (prod1.developmentProgress >= 100) {\\n                try {\\n                    c.getProduct(TOB_DIV_NAME, TOB_PROD2_NAME);\\n                }\\n                catch (e) {\\n                    if (c.getCorporation().funds > 1e9 * 3)\\n                        c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD2_NAME, TOBACCHI_MIN_INVESTMENT_VALUE, TOBACCHI_MIN_INVESTMENT_VALUE);\\n                }\\n                await manageProductSell(ns, c, prod1);\\n            }\\n            break;\\n        }\\n        case 6: {\\n            while (c.getUpgradeLevel(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */) < 10) {\\n                c.levelUpgrade(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */);\\n            }\\n            while (c.getCorporation().funds > 4e9) {\\n                c.hireAdVert(TOB_DIV_NAME);\\n            }\\n            break;\\n        }\\n    }\\n}\\nfunction hireIntoAevum(ns, c) {\\n    const toAdd = 30 - c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).employees;\\n    if (toAdd > 0)\\n        c.upgradeOfficeSize(TOB_DIV_NAME, ns.enums.CityName.Aevum, toAdd);\\n    while (c.hireEmployee(TOB_DIV_NAME, ns.enums.CityName.Aevum)) { }\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Operations\\\" /* JOBS.OPS */, 8);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Engineer\\\" /* JOBS.ENG */, 9);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Business\\\" /* JOBS.BUS */, 5);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Management\\\" /* JOBS.MAN */, 8);\\n}\\nfunction hireIntoOthers(ns, c) {\\n    for (const city of Object.values(ns.enums.CityName).filter((el) => el !== ns.enums.CityName.Aevum)) {\\n        const toAdd = 9 - c.getOffice(TOB_DIV_NAME, city).employees;\\n        if (toAdd > 0)\\n            c.upgradeOfficeSize(TOB_DIV_NAME, city, toAdd);\\n        while (c.hireEmployee(TOB_DIV_NAME, city)) { }\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Management\\\" /* JOBS.MAN */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */, 5);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29ycC90b2JhY2NoaS9zZXR1cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBRUwsNkJBQTZCLEVBQzdCLFlBQVksRUFDWixjQUFjLEVBQ2QsY0FBYyxHQUVmLE1BQU0sWUFBWSxDQUFDO0FBQ3BCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDcEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEYsT0FBTyxFQUFFLG9CQUFvQixFQUFrQixNQUFNLG1CQUFtQixDQUFDO0FBRXpFLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsTUFBTSxDQUFDLEdBQWdCLEVBQUUsQ0FBQyxXQUFXLENBQUM7SUFDdEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsRUFBRTtRQUN2QixFQUFFLENBQUMsS0FBSyxDQUFDLDREQUE0RCxDQUFDLENBQUM7UUFDdkUsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDM0I7U0FBTTtRQUNMLE1BQU0sUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUN2QjtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsUUFBUSxDQUFDLENBQWMsRUFBRSxFQUFNO0lBQzVDLE1BQU0sSUFBSSxHQUFvQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDakQsSUFBSTtRQUNGLElBQUksWUFBWSxHQUFtQixtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BFLElB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\",\"filename\":\"/corp/tobacchi/setup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CorpSetupStage {\\n    mainStage;\\n    subStage;\\n    subStages;\\n    lastEmpStatsCheck = -1;\\n    constructor(mainStage, subStages) {\\n        this.mainStage = mainStage;\\n        this.subStages = subStages;\\n        this.subStage = subStages[0];\\n    }\\n    nextStage() {\\n        this.subStage = this.subStages[this.subStage.val + 1];\\n    }\\n}\\nexport class Stage {\\n    name;\\n    val;\\n    constructor(name, val) {\\n        this.name = name;\\n        this.val = val;\\n    }\\n}\\nexport const CORP_AGRI_SETUP_STAGE = new CorpSetupStage(new Stage('Agricolture Setup', 0), [\\n    new Stage('CreateDivision', 0),\\n    new Stage('BuySmartSupply', 1),\\n    new Stage('ExpandToCities', 2),\\n    new Stage('BuyAdvert', 3),\\n    new Stage('ExpandWarehouse', 4),\\n    new Stage('BuyUpgrades', 5),\\n    new Stage('BuyMaterials', 6),\\n    new Stage('WaitForEmployees', 7),\\n]);\\nexport const CORP_AGRI_MAN_STAGE = new CorpSetupStage(new Stage('Agricolture Mantainance', 1), [\\n    new Stage('1stInvestor', 0),\\n    new Stage('UpgradeEmployees', 1),\\n    new Stage('BuyUpgrades', 2),\\n    new Stage('ExpandWarehouse', 3),\\n    new Stage('BuyMaterials', 4),\\n    new Stage('WaitAndRemoveR&D', 5),\\n    new Stage('2ndInvestor&waitEmployees', 6),\\n    new Stage('ExpandWarehouse2', 7),\\n    new Stage('BuyMaterials2', 8),\\n]);\\nexport const CORP_TOB_SETUP_STAGE = new CorpSetupStage(new Stage('Tobacchi Setup', 2), [\\n    new Stage('ExpandTobacchi', 0),\\n    new Stage('EsxpandCities', 1),\\n    new Stage('HireEmployees', 2),\\n    new Stage('StartFirstProduction', 3),\\n    new Stage('BuyUpgrades', 4),\\n    new Stage('CompleteFirstProductionAndStartSecond', 5),\\n    new Stage('WilsonAnalyticsAndAdvert', 6),\\n]);\\nexport const CORP_TOB_MIDGAME_STAGE = new CorpSetupStage(new Stage('Tobacchi Midgame', 3), [\\n    new Stage('CompleteScondProductionAndStartThird', 0),\\n]);\\nexport const CORP_TOB_MANTAINANCE_STAGE = new CorpSetupStage(new Stage('Tobacchi Mantainance', 4), [\\n    new Stage('Mantainance', 0),\\n]);\\nexport const CORP_STAGES = [\\n    CORP_AGRI_SETUP_STAGE,\\n    CORP_AGRI_MAN_STAGE,\\n    CORP_TOB_SETUP_STAGE,\\n    CORP_TOB_MIDGAME_STAGE,\\n    CORP_TOB_MANTAINANCE_STAGE,\\n];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC1zdGFnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29ycC9jb3JwLXN0YWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sY0FBYztJQUN6QixTQUFTLENBQVE7SUFDakIsUUFBUSxDQUFRO0lBQ2hCLFNBQVMsQ0FBVTtJQUNuQixpQkFBaUIsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN2QixZQUFZLFNBQWdCLEVBQUUsU0FBa0I7UUFDOUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELFNBQVM7UUFDUCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLEtBQUs7SUFDaEIsSUFBSSxDQUFTO0lBQ2IsR0FBRyxDQUFTO0lBQ1osWUFBWSxJQUFZLEVBQUUsR0FBVztRQUNuQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNqQixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsRUFBRTtJQUN6RixJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDOUIsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLElBQUksS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUM5QixJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ3pCLElBQUksS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztJQUMvQixJQUFJLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDNUIsSUFBSSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0NBQ2pDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLElBQUksY0FBYyxDQUFDLElBQUksS0FBSyxDQUFDLHlCQUF5QixFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQzdGLElBQUksS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDM0IsSUFBSSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLElBQUksS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDM0IsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDNUIsSUFBSSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLElBQUksS0FBSyxDQUFDLDJCQUEyQixFQUFFLENBQUMsQ0FBQztJQUN6QyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7SUFDaEMsSUFBSSxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztDQUM5QixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsRUFBRTtJQUNyRixJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDOUIsSUFBSSxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztJQUM3QixJQUFJLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUksS0FBSyxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQztJQUNwQyxJQUFJLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLElBQUksS0FBSyxDQUFDLHVDQUF1QyxFQUFFLENBQUMsQ0FBQztJQUNyRCxJQUFJLEtBQUssQ0FBQywwQkFBMEIsRUFBRSxDQUFDLENBQUM7Q0FDekMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLEVBQUU7SUFDekYsSUFBSSxLQUFLLENBQUMsc0NBQXNDLEVBQUUsQ0FBQyxDQUFDO0NBQ3JELENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLElBQUksY0FBYyxDQUFDLElBQUksS0FBSyxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ2pHLElBQUksS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7Q0FDNUIsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHO0lBQ3pCLHFCQUFxQjtJQUNyQixtQkFBbUI7SUFDbkIsb0JBQW9CO0lBQ3BCLHNCQUFzQjtJQUN0QiwwQkFBMEI7Q0FDM0IsQ0FBQyJ9\",\"filename\":\"/corp/corp-stages.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AGRI_DIV_NAME, AGRI_MATERIAL, BN_VAL_MULTI, CORP_SETUP_UPGRADES, EMP_STATS_CHECK_TIMEOUT, EMP_STAT_CHECK_VALUE, PARTY_BUDGET, TOB_DIV_NAME, TOB_PROD1_NAME, TOB_PROD2_NAME, UNLOCKS, VAL_MULTI_EQ, } from 'const/corp';\\nimport { CORP_AGRI_MAN_STAGE, CORP_AGRI_SETUP_STAGE, CORP_TOB_MANTAINANCE_STAGE, CORP_TOB_MIDGAME_STAGE, CORP_TOB_SETUP_STAGE, } from 'corp/corp-stages';\\nexport function checkAndUpdateStage(ns, currentStage = undefined) {\\n    const lastEmpCheck = currentStage ? currentStage.lastEmpStatsCheck : -1;\\n    currentStage = checkAgriSetupStage(ns);\\n    if (currentStage === undefined) {\\n        currentStage = checkAgriManStage(ns);\\n    }\\n    if (currentStage === undefined) {\\n        currentStage = checkTobSetupStage(ns);\\n    }\\n    if (currentStage === undefined) {\\n        currentStage = checkTobMidGameStage(ns);\\n    }\\n    if (currentStage === undefined) {\\n        currentStage = checkTobManStage(ns);\\n    }\\n    // No valid stage found, this shouldn't ever happen, throw error\\n    if (currentStage === undefined) {\\n        throw new Error(\\\"No valid stage found, this shouldn't ever happen\\\");\\n    }\\n    if (lastEmpCheck > -1)\\n        currentStage.lastEmpStatsCheck = lastEmpCheck;\\n    return currentStage;\\n}\\nexport function checkUpgrades(ns, level, upgrades = CORP_SETUP_UPGRADES) {\\n    const c = ns.corporation;\\n    for (const upgr of upgrades) {\\n        if (c.getUpgradeLevel(upgr) < level) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\nexport function checkAgroWarehouse(ns, size) {\\n    const c = ns.corporation;\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        if (c.getWarehouse(AGRI_DIV_NAME, city).size < size) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\nexport function checkAgroMaterials(ns, stage) {\\n    const c = ns.corporation;\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"AI Cores\\\" /* MATERIALS.AIC */).qty < stage.aiCores) {\\n            return false;\\n        }\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Hardware\\\" /* MATERIALS.HDW */).qty < stage.hardware) {\\n            return false;\\n        }\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Real Estate\\\" /* MATERIALS.RES */).qty < stage.realEstate) {\\n            return false;\\n        }\\n        if (c.getMaterial(AGRI_DIV_NAME, city, \\\"Robots\\\" /* MATERIALS.ROB */).qty < stage.robot) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\nexport function checkAgroEmployees(ns, moveToRnD = false) {\\n    const c = ns.corporation;\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        const office = c.getOffice(AGRI_DIV_NAME, city);\\n        if (office.size < 9)\\n            return false;\\n        else if (moveToRnD && office.employeeJobs['Research & Development'] > 0)\\n            return false;\\n    }\\n    return true;\\n}\\nexport function checkTobEmployees(ns, devCityEmp) {\\n    const c = ns.corporation;\\n    for (const city of Object.values(ns.enums.CityName)) {\\n        const office = c.getOffice(TOB_DIV_NAME, city);\\n        if (city === ns.enums.CityName.Aevum && office.size < devCityEmp)\\n            return false;\\n        if (city !== ns.enums.CityName.Aevum && office.size < (devCityEmp > 60 ? devCityEmp - 60 : 9))\\n            return false;\\n    }\\n    return true;\\n}\\nexport function checkAgriEmpNumSetup(ns) {\\n    const cities = Object.values(ns.enums.CityName);\\n    const c = ns.corporation;\\n    let emps = 0;\\n    for (const city of cities) {\\n        emps += c.getOffice(AGRI_DIV_NAME, city).employees;\\n    }\\n    return emps / cities.length === 3;\\n}\\nexport function checkEmployeeStats(ns, divisionName) {\\n    const c = ns.corporation;\\n    let avgMor = 0;\\n    let avgHap = 0;\\n    let avgEne = 0;\\n    const cities = Object.values(ns.enums.CityName);\\n    for (const city of cities) {\\n        avgMor += c.getOffice(divisionName, city).avgMor;\\n        avgHap += c.getOffice(divisionName, city).avgHap;\\n        avgEne += c.getOffice(divisionName, city).avgEne;\\n    }\\n    avgMor /= cities.length;\\n    avgHap /= cities.length;\\n    avgEne /= cities.length;\\n    if (avgMor >= EMP_STAT_CHECK_VALUE && avgHap >= EMP_STAT_CHECK_VALUE && avgEne >= EMP_STAT_CHECK_VALUE) {\\n        return true;\\n    }\\n    return false;\\n}\\nexport function checkProductAtLeastDevelopment(ns, division, name) {\\n    const c = ns.corporation;\\n    try {\\n        const prod = c.getProduct(division, name);\\n        return prod !== undefined;\\n    }\\n    catch (e) {\\n        return false;\\n    }\\n}\\nexport async function checkAndSpeedEmpStats(ns, stage) {\\n    const division = stage.mainStage.val <= CORP_AGRI_MAN_STAGE.mainStage.val ? AGRI_DIV_NAME : TOB_DIV_NAME;\\n    if ((stage.lastEmpStatsCheck === -1 || Date.now() - stage.lastEmpStatsCheck > EMP_STATS_CHECK_TIMEOUT) &&\\n        !checkEmployeeStats(ns, division)) {\\n        await speedEmployeeStats(ns, stage);\\n    }\\n}\\nexport function setSubstage(stage, substageIndex) {\\n    stage.subStage = stage.subStages[substageIndex];\\n    return stage;\\n}\\nexport async function purchaseAgroMaterials(ns, stage) {\\n    let buyComplete = checkAgroMaterials(ns, stage);\\n    const c = ns.corporation;\\n    const materialMap = [\\n        {\\n            material: \\\"AI Cores\\\" /* MATERIALS.AIC */,\\n            value: stage.aiCores,\\n        },\\n        {\\n            material: \\\"Hardware\\\" /* MATERIALS.HDW */,\\n            value: stage.hardware,\\n        },\\n        {\\n            material: \\\"Robots\\\" /* MATERIALS.ROB */,\\n            value: stage.robot,\\n        },\\n        {\\n            material: \\\"Real Estate\\\" /* MATERIALS.RES */,\\n            value: stage.realEstate,\\n        },\\n    ];\\n    while (!buyComplete) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        //and to this part put things you want done exactly once per cycle\\n        for (const city of Object.values(ns.enums.CityName)) {\\n            for (const mat of materialMap) {\\n                const material = c.getMaterial(AGRI_DIV_NAME, city, mat.material);\\n                if (material.qty < mat.value) {\\n                    const toBuy = mat.value - material.qty;\\n                    c.buyMaterial(AGRI_DIV_NAME, city, mat.material, toBuy / 10);\\n                }\\n                else {\\n                    c.buyMaterial(AGRI_DIV_NAME, city, mat.material, 0);\\n                }\\n            }\\n        }\\n        buyComplete = checkAgroMaterials(ns, stage);\\n    }\\n}\\nexport async function speedEmployeeStats(ns, stage) {\\n    const division = stage.mainStage.val <= CORP_AGRI_MAN_STAGE.mainStage.val ? AGRI_DIV_NAME : TOB_DIV_NAME;\\n    let empStatOk = checkEmployeeStats(ns, division);\\n    const c = ns.corporation;\\n    while (!empStatOk) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        if (stage.lastEmpStatsCheck === -1) {\\n            stage.lastEmpStatsCheck = Date.now();\\n        }\\n        else if (Date.now() - stage.lastEmpStatsCheck > EMP_STATS_CHECK_TIMEOUT) {\\n            ns.print('INFO More than ' + EMP_STATS_CHECK_TIMEOUT / 1000 + 's since last stat push, coffee&party time.');\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                if (c.getOffice(division, city).avgMor < EMP_STAT_CHECK_VALUE ||\\n                    c.getOffice(division, city).avgHap < EMP_STAT_CHECK_VALUE) {\\n                    c.throwParty(division, city, PARTY_BUDGET);\\n                }\\n                if (c.getOffice(division, city).avgEne < EMP_STAT_CHECK_VALUE) {\\n                    c.buyCoffee(division, city);\\n                }\\n            }\\n            stage.lastEmpStatsCheck = -1;\\n        }\\n        empStatOk = checkEmployeeStats(ns, division);\\n    }\\n}\\nexport function manageInvestors(ns, minValue, round) {\\n    const c = ns.corporation;\\n    const offer = c.getInvestmentOffer();\\n    const bnEvalued = minValue * (BN_VAL_MULTI + BN_VAL_MULTI * VAL_MULTI_EQ);\\n    ns.print('INFO Investment wanted round: ', round);\\n    ns.print('INFO Investment current round: ', offer.round);\\n    ns.print('INFO Investment wanted funds: ', ns.formatNumber(minValue));\\n    ns.print('INFO Investment BN coeff funds: ', ns.formatNumber(bnEvalued));\\n    ns.print('INFO Investment current funds: ', ns.formatNumber(offer.funds));\\n    if (offer && offer.round === round && offer.funds > bnEvalued)\\n        return c.acceptInvestmentOffer();\\n    return false;\\n}\\nexport function manageAevumEmployees(ns) {\\n    const c = ns.corporation;\\n    while (c.hireEmployee(TOB_DIV_NAME, ns.enums.CityName.Aevum)) { }\\n    const all = c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).employees;\\n    const baseline = Math.floor((all * 2) / 7);\\n    const bus = Math.floor(baseline / 2);\\n    let remaining = all - bus - baseline * 3;\\n    let ops = baseline;\\n    let eng = baseline;\\n    let man = baseline;\\n    let step = 0;\\n    while (remaining > 0) {\\n        switch (step) {\\n            case 0: {\\n                eng++;\\n                break;\\n            }\\n            case 1: {\\n                man++;\\n                break;\\n            }\\n            case 2: {\\n                ops++;\\n                break;\\n            }\\n        }\\n        remaining--;\\n        step++;\\n        if (step > 2)\\n            step = 0;\\n    }\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Operations\\\" /* JOBS.OPS */, 0);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Engineer\\\" /* JOBS.ENG */, 0);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Business\\\" /* JOBS.BUS */, 0);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Management\\\" /* JOBS.MAN */, 0);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Operations\\\" /* JOBS.OPS */, ops);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Engineer\\\" /* JOBS.ENG */, eng);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Business\\\" /* JOBS.BUS */, bus);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Management\\\" /* JOBS.MAN */, man);\\n}\\n// SETUP AGRI CHECK\\nexport function checkAgriSetupStage(ns) {\\n    ns.print('INFO check agri setup');\\n    const c = ns.corporation;\\n    const corp = c.getCorporation();\\n    let currentStage = undefined;\\n    if (!corp.divisions.includes(AGRI_DIV_NAME)) {\\n        return CORP_AGRI_SETUP_STAGE;\\n    }\\n    else if (!c.hasUnlockUpgrade(UNLOCKS.SSU)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 1);\\n    }\\n    else if (c.getDivision(AGRI_DIV_NAME).cities.length < Object.keys(ns.enums.CityName).length) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 2);\\n    }\\n    else if (c.getDivision(AGRI_DIV_NAME).awareness + c.getDivision(AGRI_DIV_NAME).popularity < 0.1) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 3);\\n    }\\n    else if (!checkAgroWarehouse(ns, 300)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 4);\\n    }\\n    else if (!checkUpgrades(ns, 2)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 5);\\n    }\\n    else if (!checkAgroMaterials(ns, AGRI_MATERIAL.stage1)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 6);\\n    }\\n    else if (checkAgriEmpNumSetup(ns) && !checkEmployeeStats(ns, AGRI_DIV_NAME)) {\\n        currentStage = setSubstage(CORP_AGRI_SETUP_STAGE, 7);\\n    }\\n    return currentStage;\\n}\\n// MANTAINANCE AGRI CHECK\\nexport function checkAgriManStage(ns) {\\n    const c = ns.corporation;\\n    let currentStage = undefined;\\n    if (c.getInvestmentOffer().round === 1) {\\n        return CORP_AGRI_MAN_STAGE;\\n    }\\n    else if (!checkAgroEmployees(ns, false)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 1);\\n    }\\n    else if (!checkUpgrades(ns, 10, [\\\"Smart Factories\\\" /* UPGRADES.SFA */, \\\"Smart Storage\\\" /* UPGRADES.SST */])) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 2);\\n    }\\n    else if (!checkAgroWarehouse(ns, 2000)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 3);\\n    }\\n    else if (!checkAgroMaterials(ns, AGRI_MATERIAL.stage2)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 4);\\n    }\\n    else if (!checkAgroEmployees(ns, true)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 5);\\n    }\\n    else if (c.getInvestmentOffer().round === 2) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 6);\\n    }\\n    else if (!checkAgroWarehouse(ns, 3800)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 7);\\n    }\\n    else if (!checkAgroMaterials(ns, AGRI_MATERIAL.stage3)) {\\n        currentStage = setSubstage(CORP_AGRI_MAN_STAGE, 8);\\n    }\\n    return currentStage;\\n}\\n// SETUP TOB CHECK\\nexport function checkTobSetupStage(ns) {\\n    const c = ns.corporation;\\n    const corp = c.getCorporation();\\n    let currentStage = undefined;\\n    if (!corp.divisions.includes(TOB_DIV_NAME)) {\\n        return CORP_TOB_SETUP_STAGE;\\n    }\\n    else if (c.getDivision(TOB_DIV_NAME).cities.length < Object.keys(ns.enums.CityName).length) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 1);\\n    }\\n    else if (!checkTobEmployees(ns, 30)) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 2);\\n    }\\n    else if (c.getDivision(TOB_DIV_NAME).products.length === 0 &&\\n        !checkProductAtLeastDevelopment(ns, TOB_DIV_NAME, TOB_PROD1_NAME)) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 3);\\n    }\\n    else if (!checkUpgrades(ns, 20, [\\\"FocusWires\\\" /* UPGRADES.FWI */, \\\"Speech Processor Implants\\\" /* UPGRADES.SPI */, \\\"Neural Accelerators\\\" /* UPGRADES.NAC */, \\\"Nuoptimal Nootropic Injector Implants\\\" /* UPGRADES.NNI */]) &&\\n        !checkUpgrades(ns, 30, [\\\"DreamSense\\\" /* UPGRADES.DSE */]) &&\\n        !checkUpgrades(ns, 10, [\\\"Project Insight\\\" /* UPGRADES.PIN */])) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 4);\\n    }\\n    else if (!checkProductAtLeastDevelopment(ns, TOB_DIV_NAME, TOB_PROD2_NAME)) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 5);\\n    }\\n    else if (!checkUpgrades(ns, 10, [\\\"Wilson Analytics\\\" /* UPGRADES.WAN */])) {\\n        currentStage = setSubstage(CORP_TOB_SETUP_STAGE, 6);\\n    }\\n    return currentStage;\\n}\\nexport function checkTobMidGameStage(ns) {\\n    const c = ns.corporation;\\n    if (c.getDivision(TOB_DIV_NAME).products.length < 3) {\\n        return CORP_TOB_MIDGAME_STAGE;\\n    }\\n    return undefined;\\n}\\n// MANTAINANCE TOBACCHI CHECK\\nexport function checkTobManStage(ns) {\\n    const c = ns.corporation;\\n    if (c.getDivision(TOB_DIV_NAME).products.length >= 3)\\n        return CORP_TOB_MANTAINANCE_STAGE;\\n    return undefined;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC1mdW5jdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29ycC9jb3JwLWZ1bmN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsYUFBYSxFQUNiLGFBQWEsRUFFYixZQUFZLEVBQ1osbUJBQW1CLEVBQ25CLHVCQUF1QixFQUN2QixvQkFBb0IsRUFHcEIsWUFBWSxFQUNaLFlBQVksRUFDWixjQUFjLEVBQ2QsY0FBYyxFQUNkLE9BQU8sRUFFUCxZQUFZLEdBQ2IsTUFBTSxZQUFZLENBQUM7QUFDcEIsT0FBTyxFQUNMLG1CQUFtQixFQUNuQixxQkFBcUIsRUFDckIsMEJBQTBCLEVBQzFCLHNCQUFzQixFQUN0QixvQkFBb0IsR0FFckIsTUFBTSxrQkFBa0IsQ0FBQztBQUcxQixNQUFNLFVBQVUsbUJBQW1CLENBQUMsRUFBTSxFQUFFLGVBQTJDLFNBQVM7SUFDOUYsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QyxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7UUFDOUIsWUFBWSxHQUFHLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3RDO0lBQ0QsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO1FBQzlCLFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN2QztJQUNELElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtRQUM5QixZQUFZLEdBQUcsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDekM7SUFDRCxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7UUFDOUIsWUFBWSxHQUFHLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3JDO0lBQ0QsZ0VBQWdFO0lBQ2hFLElB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\",\"filename\":\"/corp/corp-functions.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AGRI_DIV_NAME, AGRI_MATERIAL, ROUND_1_MIN_AMOUNT, ROUND_2_MIN_AMOUNT } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { checkAndUpdateStage, manageInvestors, purchaseAgroMaterials, speedEmployeeStats } from 'corp/corp-functions';\\nimport { CORP_AGRI_MAN_STAGE } from 'corp/corp-stages';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.enableLog('spawn');\\n    ns.tail();\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(ns);\\n    }\\n}\\nasync function runStage(ns) {\\n    try {\\n        let currentStage = checkAndUpdateStage(ns);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== CORP_AGRI_MAN_STAGE.mainStage.val) {\\n            error = true;\\n            ns.print('WARN stage not agri prep, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_AGRI_MAN_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, currentStage);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            await ns.sleep(500);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Agri startup complete, moving into mantainance.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nasync function manageStage(ns, currentStage) {\\n    const c = ns.corporation;\\n    switch (currentStage.subStage.val) {\\n        case 0: {\\n            manageInvestors(ns, ROUND_1_MIN_AMOUNT, 1);\\n            break;\\n        }\\n        case 1: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                const office = c.getOffice(AGRI_DIV_NAME, city);\\n                if (office.size < 9) {\\n                    const toAdd = 9 - office.size;\\n                    c.upgradeOfficeSize(AGRI_DIV_NAME, city, toAdd);\\n                    while (c.hireEmployee(AGRI_DIV_NAME, city)) { }\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 2);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 2);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 2);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Management\\\" /* JOBS.MAN */, 2);\\n                    c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */, 1);\\n                }\\n            }\\n            break;\\n        }\\n        case 2: {\\n            for (const upgr of [\\\"Smart Storage\\\" /* UPGRADES.SST */, \\\"Smart Factories\\\" /* UPGRADES.SFA */]) {\\n                while (c.getUpgradeLevel(upgr) < 10) {\\n                    c.levelUpgrade(upgr);\\n                }\\n            }\\n            break;\\n        }\\n        case 3: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                while (c.getWarehouse(AGRI_DIV_NAME, city).size < 2000) {\\n                    c.upgradeWarehouse(AGRI_DIV_NAME, city);\\n                }\\n            }\\n            break;\\n        }\\n        case 4: {\\n            await purchaseAgroMaterials(ns, AGRI_MATERIAL.stage2);\\n            break;\\n        }\\n        case 5: {\\n            await ns.sleep(30 * 1000);\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */, 0);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 3);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 2);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 2);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Management\\\" /* JOBS.MAN */, 2);\\n            }\\n            break;\\n        }\\n        case 6: {\\n            if (c.getCorporation().funds > 1e9)\\n                await speedEmployeeStats(ns, currentStage);\\n            const invested = manageInvestors(ns, ROUND_2_MIN_AMOUNT, 2);\\n            if (invested)\\n                await speedEmployeeStats(ns, currentStage);\\n            break;\\n        }\\n        case 7: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                while (c.getWarehouse(AGRI_DIV_NAME, city).size < 3800) {\\n                    c.upgradeWarehouse(AGRI_DIV_NAME, city);\\n                }\\n            }\\n            break;\\n        }\\n        case 8: {\\n            await purchaseAgroMaterials(ns, AGRI_MATERIAL.stage3);\\n            break;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdyaS1tYW50YWluYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JwL2FncmktbWFudGFpbmFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQVEsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQVksTUFBTSxZQUFZLENBQUM7QUFDbEgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsZUFBZSxFQUFFLHFCQUFxQixFQUFFLGtCQUFrQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEgsT0FBTyxFQUFFLG1CQUFtQixFQUFrQixNQUFNLGtCQUFrQixDQUFDO0FBRXZFLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDVixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDO0lBQ3pCLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7UUFDdkIsRUFBRSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1FBQ3ZFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNCO1NBQU07UUFDTCxNQUFNLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsUUFBUSxDQUFDLEVBQU07SUFDNUIsSUFBSTtRQUNGLElBQUksWUFBWSxHQUFtQixtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzRCxJQUFJLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDMUIs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\",\"filename\":\"/corp/agri-mantainance.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:https://danielyxie.github.io/a0c8b540-ab73-47fb-8c77-6ce671a16d72\",\"moduleSequenceNumber\":610},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:https://danielyxie.github.io/373e9885-1cee-4a44-884f-3c83e92f300b\",\"moduleSequenceNumber\":610},{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/bfb86f43-4933-407d-81bd-64f39f9874f8\",\"moduleSequenceNumber\":604},{\"filename\":\"/corp/corp-functions.js\",\"url\":\"blob:https://danielyxie.github.io/e28e33d8-18c5-46d8-9f33-94e0cdb20e07\",\"moduleSequenceNumber\":612},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/bcee32da-9b1e-41c2-a406-c83e3640a74f\",\"moduleSequenceNumber\":570},{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/4e602450-168c-41ea-87ba-71d4b3aadd17\",\"moduleSequenceNumber\":604},{\"filename\":\"/corp/agri-mantainance.js\",\"url\":\"blob:https://danielyxie.github.io/98cd9148-4056-4ea1-8fa4-ca433e10ae4c\",\"moduleSequenceNumber\":717}],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AGRI_DIV_NAME, AGRI_MATERIAL, CORP_NAME, CORP_SETUP_UPGRADES, UNLOCKS } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { checkAndUpdateStage, purchaseAgroMaterials, speedEmployeeStats } from 'corp/corp-functions';\\nimport { CORP_AGRI_SETUP_STAGE } from 'corp/corp-stages';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.enableLog('spawn');\\n    ns.tail();\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        try {\\n            c.createCorporation(CORP_NAME, false);\\n        }\\n        catch (e) {\\n            c.createCorporation(CORP_NAME, true);\\n        }\\n    }\\n    try {\\n        let currentStage = checkAndUpdateStage(ns);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== CORP_AGRI_SETUP_STAGE.mainStage.val) {\\n            error = true;\\n            ns.print('WARN stage not agri prep, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_AGRI_SETUP_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, currentStage);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            await ns.sleep(500);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Agri startup complete, moving into mantainance.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nasync function manageStage(ns, currentStage) {\\n    const c = ns.corporation;\\n    switch (currentStage.subStage.val) {\\n        case 0: {\\n            c.expandIndustry('Agriculture', AGRI_DIV_NAME);\\n            break;\\n        }\\n        case 1: {\\n            c.unlockUpgrade(UNLOCKS.SSU);\\n            break;\\n        }\\n        case 2: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                if (!c.getDivision(AGRI_DIV_NAME).cities.includes(city)) {\\n                    c.expandCity(AGRI_DIV_NAME, city);\\n                    c.purchaseWarehouse(AGRI_DIV_NAME, city);\\n                }\\n                c.setSmartSupply(AGRI_DIV_NAME, city, true);\\n                while (c.hireEmployee(AGRI_DIV_NAME, city)) { }\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 1);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 1);\\n                c.setAutoJobAssignment(AGRI_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 1);\\n                c.sellMaterial(AGRI_DIV_NAME, city, 'Plants', 'MAX', 'MP');\\n                c.sellMaterial(AGRI_DIV_NAME, city, 'Food', 'MAX', 'MP');\\n            }\\n            break;\\n        }\\n        case 3: {\\n            c.hireAdVert(AGRI_DIV_NAME);\\n            break;\\n        }\\n        case 4: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                while (c.getWarehouse(AGRI_DIV_NAME, city).size < 300) {\\n                    c.upgradeWarehouse(AGRI_DIV_NAME, city);\\n                }\\n            }\\n            break;\\n        }\\n        case 5: {\\n            for (const upgr of CORP_SETUP_UPGRADES) {\\n                while (c.getUpgradeLevel(upgr) < 2) {\\n                    c.levelUpgrade(upgr);\\n                }\\n            }\\n            break;\\n        }\\n        case 6: {\\n            await purchaseAgroMaterials(ns, AGRI_MATERIAL.stage1);\\n            break;\\n        }\\n        case 7: {\\n            await speedEmployeeStats(ns, currentStage);\\n            break;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdyaS1zZXR1cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JwL2Fncmktc2V0dXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLG1CQUFtQixFQUFRLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6RyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxxQkFBcUIsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JHLE9BQU8sRUFBRSxxQkFBcUIsRUFBa0IsTUFBTSxrQkFBa0IsQ0FBQztBQUV6RSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1YsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQztJQUN6QixJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFO1FBQ3ZCLElBQUk7WUFDRixDQUFDLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3ZDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixDQUFDLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3RDO0tBQ0Y7SUFDRCxJQUFJO1FBQ0YsSUFBSSxZQUFZLEdBQW1CLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNELElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxZQUFZLEtBQUssU0FB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\",\"filename\":\"/corp/agri-setup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:https://danielyxie.github.io/fbf72740-2411-4f13-9c86-c898f34c790c\",\"moduleSequenceNumber\":596},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:https://danielyxie.github.io/5f393170-9ae2-4a29-ab7c-4a7216fcef22\",\"moduleSequenceNumber\":596},{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/ff491e74-1a2a-4c0b-a99e-ec00641a843c\",\"moduleSequenceNumber\":590},{\"filename\":\"/corp/corp-functions.js\",\"url\":\"blob:https://danielyxie.github.io/237f6d57-34ee-46cd-a199-d0060ef3a9b5\",\"moduleSequenceNumber\":598},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/7ee814f6-aa6a-4d9f-8d5b-d3ba0799b858\",\"moduleSequenceNumber\":556},{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/b4b360bd-b480-4f7d-aec5-734d2fd6682b\",\"moduleSequenceNumber\":590},{\"filename\":\"/corp/agri-setup.js\",\"url\":\"blob:https://danielyxie.github.io/16f1e964-4344-4849-9737-0a15b9db41d6\",\"moduleSequenceNumber\":84381}],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.createCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.unlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TOB_DIV_NAME, TOB_PROD_CHECK_CYCLE, TOB_PROD_CHECK_END, TOB_PROD_CHECK_FIRST, TOB_PROD_CHECK_START, TOB_PROD_SETUP_END, TOB_PROD_SETUP_FIRST, TOB_PROD_SETUP_LOOP, TOB_PROD_SETUP_START, } from 'const/corp';\\nexport async function manageProductSell(ns, c, p) {\\n    // setup\\\\adjustment state 0=never sold, 1=first setup, 2=cyclic check and adjustment, 3=complete\\n    let state = prodNotSelling(p) ? TOB_PROD_CHECK_START : TOB_PROD_CHECK_CYCLE;\\n    while (state < 3) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        //and to this part put things you want done exactly once per cycle\\n        p = c.getProduct(TOB_DIV_NAME, p.name);\\n        switch (state) {\\n            case TOB_PROD_CHECK_START: {\\n                c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, p.name, 'MAX', 'MP*1', true);\\n                state = TOB_PROD_CHECK_FIRST;\\n                break;\\n            }\\n            case TOB_PROD_CHECK_FIRST: {\\n                await setupProdRate(ns, c, p);\\n                state = TOB_PROD_CHECK_END;\\n                break;\\n            }\\n            case TOB_PROD_CHECK_CYCLE: {\\n                await checkAndAdjustProdRate(ns, c, p);\\n                state = TOB_PROD_CHECK_END;\\n                break;\\n            }\\n        }\\n    }\\n}\\nasync function setupProdRate(ns, c, p) {\\n    // setup state, 0=before bisection, 1=first bisection, 2=bisection loop, 3=complete\\n    // honestly i don't really like.. will refactor.. maybe\\n    let state = TOB_PROD_SETUP_START;\\n    let x_min = 1;\\n    let x_max = 1;\\n    let x_avg = 1;\\n    while (state < TOB_PROD_SETUP_END) {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        //and to this part put things you want done exactly once per cycle\\n        p = c.getProduct(TOB_DIV_NAME, p.name);\\n        const x = Number.parseInt(p.sCost.slice(3));\\n        const prod = p.cityData.Aevum[1];\\n        const sell = p.cityData.Aevum[2];\\n        const rate = prod - sell;\\n        switch (state) {\\n            case TOB_PROD_SETUP_START: {\\n                if (rate <= 0) {\\n                    setProductValueSafe(ns, c, p, x * 2);\\n                }\\n                else {\\n                    state = TOB_PROD_SETUP_FIRST;\\n                }\\n                break;\\n            }\\n            case TOB_PROD_SETUP_FIRST: {\\n                x_min = x / 2;\\n                x_max = x;\\n                x_avg = (x_min + x_max) / 2;\\n                setProductValueSafe(ns, c, p, x_avg);\\n                state = TOB_PROD_SETUP_LOOP;\\n                break;\\n            }\\n            case TOB_PROD_SETUP_LOOP: {\\n                if (prod >= sell)\\n                    x_min = x_avg;\\n                else\\n                    x_max = x_avg;\\n                x_avg = (x_min + x_max) / 2;\\n                if (x_max - x_min > 0.5 && x_avg > 1) {\\n                    setProductValueSafe(ns, c, p, x_avg);\\n                }\\n                else {\\n                    setProductValueSafe(ns, c, p, Math.floor(x_avg));\\n                    state = TOB_PROD_SETUP_END;\\n                }\\n                break;\\n            }\\n        }\\n    }\\n}\\nasync function checkAndAdjustProdRate(ns, c, p) {\\n    let state = 'start'; // Initial state\\n    let previousState = 'start'; // Previous State\\n    let consecutiveAction = 0; // Counter for consecutive actions\\n    let power = 1; // Power of 10 for multiplier adjustment\\n    let forceOne = false;\\n    let consecutiveIncrLower = 0;\\n    const consecutiveCycles = 3;\\n    while (state !== 'end') {\\n        while (c.getCorporation().state !== 'EXPORT') {\\n            //when you make your main script, put things you want to be done\\n            //potentially multiple times every cycle, like buying upgrades, here.\\n            await ns.sleep(0);\\n        }\\n        while (c.getCorporation().state === 'EXPORT') {\\n            //same as above\\n            await ns.sleep(0);\\n        }\\n        p = c.getProduct(TOB_DIV_NAME, p.name);\\n        let multiplier = Number.parseInt(p.sCost.slice(3));\\n        const prod = p.cityData.Aevum[1];\\n        const sell = p.cityData.Aevum[2];\\n        const rate = Math.round((prod - sell + Number.EPSILON) * 10000) / 10000;\\n        if (rate < 0 && rate >= -0.5) {\\n            // Rate is within the acceptable range, no adjustment needed\\n            state = 'end';\\n            break;\\n        }\\n        previousState = state;\\n        // Adjust the multiplier based on the rate and current state\\n        switch (state) {\\n            case 'start': {\\n                if (rate <= 0) {\\n                    // Rate is negative, increase multiplier by one\\n                    multiplier += 1;\\n                    state = 'increment';\\n                }\\n                else {\\n                    // Rate is positive, lower multiplier by one\\n                    multiplier -= 1;\\n                    state = 'lower';\\n                }\\n                consecutiveAction = 0;\\n                break;\\n            }\\n            case 'increment': {\\n                if (rate <= 0) {\\n                    // Price too low, raise the multiplier, if over 5 cycles increment power of 5\\n                    multiplier += power;\\n                    consecutiveAction += 1;\\n                    if (consecutiveAction >= consecutiveCycles) {\\n                        if (!forceOne)\\n                            power *= 10;\\n                        consecutiveAction = 0;\\n                    }\\n                }\\n                else {\\n                    // Price incremented too much, lower power of 5 (not lower than 1) and decrement\\n                    power = Math.max(1, power / 10);\\n                    multiplier -= power;\\n                    state = 'lower';\\n                    consecutiveAction = 0;\\n                }\\n                break;\\n            }\\n            case 'lower': {\\n                if (rate <= 0) {\\n                    // Gone too low, lower power of 5 and increment\\n                    power = Math.max(1, power / 10);\\n                    multiplier += power;\\n                    consecutiveAction = 0;\\n                    state = 'increment';\\n                }\\n                else {\\n                    // Still too high, lower multiplier, if over 5 cycles increment power of 5\\n                    multiplier -= power;\\n                    if (consecutiveAction >= consecutiveCycles) {\\n                        if (!forceOne)\\n                            power *= 10;\\n                        consecutiveAction = 0;\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        if ((state === 'increment' && previousState === 'lower') || (state === 'lower' && previousState === 'increment')) {\\n            consecutiveIncrLower++;\\n            if (consecutiveIncrLower > consecutiveCycles)\\n                forceOne = true;\\n            if (forceOne && state === 'increment' && rate < 0 && consecutiveIncrLower > consecutiveCycles * 2) {\\n                ns.print('WARN infinite increment,lower loop, lower multiplier by one just in case and force exit');\\n                multiplier -= 1;\\n                state = 'end';\\n            }\\n        }\\n        else {\\n            consecutiveIncrLower = 0;\\n        }\\n        if (forceOne)\\n            power = 1;\\n        // Set the new multiplier value\\n        setProductValueSafe(ns, c, p, multiplier);\\n    }\\n}\\nfunction setProductValueSafe(ns, c, p, value) {\\n    value = Math.max(1, Math.floor(value));\\n    c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, p.name, 'MAX', `MP*${value}`, true);\\n}\\nexport function prodNotSelling(p) {\\n    return (p.sCost === undefined ||\\n        (typeof p.sCost === 'string' && !p.sCost.startsWith('MP*')) ||\\n        p.sCost === 0 ||\\n        p.cityData.Aevum[1] <= 0);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1mdW5jdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29ycC9wcm9kdWN0LWZ1bmN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsWUFBWSxFQUtaLG9CQUFvQixFQUNwQixrQkFBa0IsRUFDbEIsb0JBQW9CLEVBQ3BCLG9CQUFvQixFQUNwQixrQkFBa0IsRUFDbEIsb0JBQW9CLEVBQ3BCLG1CQUFtQixFQUNuQixvQkFBb0IsR0FDckIsTUFBTSxZQUFZLENBQUM7QUFFcEIsTUFBTSxDQUFDLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxFQUFNLEVBQUUsQ0FBYyxFQUFFLENBQVU7SUFDeEUsZ0dBQWdHO0lBQ2hHLElBQUksS0FBSyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO0lBQzVFLE9BQU8sS0FBSyxHQUFHLENBQUMsRUFBRTtRQUNoQixPQUFPLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzVDLGdFQUFnRTtZQUNoRSxxRUFBcUU7WUFDckUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25CO1FBRUQsT0FBTyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM1QyxlQUFlO1lBQ2YsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25CO1FBQ0Qsa0VBQWtFO1FBQ2xFLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsUUFBUSxLQUFLLEVBQUU7WUFDYixLQUFLLG9CQUFvQixDQUFDLENBQUM7Z0JBQ3pCLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ2xGLEtBQUssR0FBRyxvQkFBb0IsQ0FBQztnQkFDN0IsTUFBTTthQUNQO1lBQ0QsS0FBSyxvQkFBb0IsQ0FBQyxDQUFDO2dCQUN6QixNQUFNLGFBQWEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixLQUFLLEdBQUcsa0JBQWtCLENBQUM7Z0JBQzNCLE1BQU07YUFDUDtZQUNELEtBQUssb0JBQW9CLENBQUMsQ0FBQztnQkFDekIsTUFBTSxzQkFBc0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxLQUFLLEdBQUcsa0JBQWtCLENBQUM7Z0JBQzNCLE1BQU07YUFDUDtTQUNGO0tBQ0Y7QUFDSCxDQUFDO0FBRUQsS0FBSyxVQUFVLGFBQWEsQ0FBQyxFQUFNLEVBQUUsQ0FBYyxFQUFFLENBQVU7SUFDN0QsbUZBQW1GO0lBQ25GLHVEQUF1RDtJQUN2RCxJQUFJLEtBQUssR0FBRyxvQkFBb0IsQ0FBQztJQUNqQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxPQUFPLEtBQUssR0FBRyxrQkFBa0IsRUFBRTtRQUNqQyxPQUFPLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzVDLGdFQUFnRTtZQUNoRSxxRUFBcUU7WUFDckUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25CO1FBRUQsT0FBTyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM1QyxlQUFlO1lBQ2YsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25CO1FBQ0Qsa0VBQWtFO1FBQ2xFLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBRSxDQUFDLENBQUMsS0FBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RCxNQUFNLElBQUksR0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxNQUFNLElBQUksR0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLFFBQVEsS0FBSyxFQUFFO1lBQ2IsS0FBSyxvQkFBb0IsQ0FBQyxDQUFDO2dCQUN6QixJQUFJLElBQUksSUFBSSxDQUFDLEVBQUU7b0JBQ2IsbUJBQW1CLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUN0QztxQkFBTTtvQkFDTCxLQUFLLEdBQUcsb0JBQW9CLENBQUM7aUJBQzlCO2dCQUNELE1BQU07YUFDUDtZQUNELEtBQUssb0JBQW9CLENBQUMsQ0FBQztnQkFDekIsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2QsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFDVixLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM1QixtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDckMsS0FBSyxHQUFHLG1CQUFtQixDQUFDO2dCQUM1QixNQUFNO2FBQ1A7WUFDRCxLQUFLLG1CQUFtQixDQUFDLENBQUM7Z0JBQ3hCLElBQUksSUFBSSxJQUFJLElBQUk7b0JBQUUsS0FBSyxHQUFHLEtBQUssQ0FBQzs7b0JBQzNCLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBQ25CLEtBQUssR0FBRyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzVCLElBQUksS0FBSyxHQUFHLEtBQUssR0FBRyxHQUFHLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtvQkFDcEMsbUJBQW1CLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQ3RDO3FCQUFNO29CQUNMLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDakQsS0FBSyxHQUFHLGtCQUFrQixDQUFDO2lCQUM1QjtnQkFDRCxNQUFNO2FBQ1A7U0FDRjtLQUNGO0FBQ0gsQ0FBQztBQUVELEtBQUssVUFBVSxzQkFBc0IsQ0FBQyxFQUFNLEVBQUUsQ0FBYyxFQUFFLENBQVU7SUFDdEUsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLENBQUMsZ0JBQWdCO0lBQ3JDLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxDQUFDLGlCQUFpQjtJQUM5QyxJQUFJLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxDQUFDLGtDQUFrQztJQUM3RCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyx3Q0FBd0M7SUFDdkQsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLElBQUksb0JBQW9CLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLE9BQU8sS0FBSyxLQUFLLEtBQUssRUFBRTtRQUN0QixPQUFPLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzVDLGdFQUFnRTtZQUNoRSxxRUFBcUU7WUFDckUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25CO1FBRUQsT0FBTyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM1QyxlQUFlO1lBQ2YsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25CO1FBQ0QsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFFLENBQUMsQ0FBQyxLQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sSUFBSSxHQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sSUFBSSxHQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7UUFFeEUsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUM1Qiw0REFBNEQ7WUFDNUQsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNkLE1BQU07U0FDUDtRQUNELGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDdEIsNERBQTREO1FBQzVELFFBQVEsS0FBSyxFQUFFO1lBQ2IsS0FBSyxPQUFPLENBQUMsQ0FBQztnQkFDWixJQUFJLElBQUksSUFBSSxDQUFDLEVBQUU7b0JBQ2IsK0NBQStDO29CQUMvQyxVQUFVLElBQUksQ0FBQyxDQUFDO29CQUNoQixLQUFLLEdBQUcsV0FBVyxDQUFDO2lCQUNyQjtxQkFBTTtvQkFDTCw0Q0FBNEM7b0JBQzVDLFVBQVUsSUFBSSxDQUFDLENBQUM7b0JBQ2hCLEtBQUssR0FBRyxPQUFPLENBQUM7aUJBQ2pCO2dCQUNELGlCQUFpQixHQUFHLENBQUMsQ0FBQztnQkFDdEIsTUFBTTthQUNQO1lBQ0QsS0FBSyxXQUFXLENBQUMsQ0FBQztnQkFDaEIsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO29CQUNiLDZFQUE2RTtvQkFDN0UsVUFBVSxJQUFJLEtBQUssQ0FBQztvQkFDcEIsaUJBQWlCLElBQUksQ0FBQyxDQUFDO29CQUN2QixJQUFJLGlCQUFpQixJQUFJLGlCQUFpQixFQUFFO3dCQUMxQyxJQUFJLENBQUMsUUFBUTs0QkFBRSxLQUFLLElBQUksRUFBRSxDQUFDO3dCQUMzQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7cUJBQ3ZCO2lCQUNGO3FCQUFNO29CQUNMLGdGQUFnRjtvQkFDaEYsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQztvQkFDaEMsVUFBVSxJQUFJLEtBQUssQ0FBQztvQkFDcEIsS0FBSyxHQUFHLE9BQU8sQ0FBQztvQkFDaEIsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO2lCQUN2QjtnQkFDRCxNQUFNO2FBQ1A7WUFDRCxLQUFLLE9BQU8sQ0FBQyxDQUFDO2dCQUNaLElBQUksSUFBSSxJQUFJLENBQUMsRUFBRTtvQkFDYiwrQ0FBK0M7b0JBQy9DLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7b0JBQ2hDLFVBQVUsSUFBSSxLQUFLLENBQUM7b0JBQ3BCLGlCQUFpQixHQUFHLENBQUMsQ0FBQztvQkFDdEIsS0FBSyxHQUFHLFdBQVcsQ0FBQztpQkFDckI7cUJBQU07b0JBQ0wsMEVBQTBFO29CQUMxRSxVQUFVLElBQUksS0FBSyxDQUFDO29CQUNwQixJQUFJLGlCQUFpQixJQUFJLGlCQUFpQixFQUFFO3dCQUMxQyxJQUFJLENBQUMsUUFBUTs0QkFBRSxLQUFLLElBQUksRUFBRSxDQUFDO3dCQUMzQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7cUJBQ3ZCO2lCQUNGO2dCQUNELE1BQU07YUFDUDtTQUNGO1FBRUQsSUFBSSxDQUFDLEtBQUssS0FBSyxXQUFXLElBQUksYUFBYSxLQUFLLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLE9BQU8sSUFBSSxhQUFhLEtBQUssV0FBVyxDQUFDLEVBQUU7WUFDaEgsb0JBQW9CLEVBQUUsQ0FBQztZQUN2QixJQUFJLG9CQUFvQixHQUFHLGlCQUFpQjtnQkFBRSxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQzlELElBQUksUUFBUSxJQUFJLEtBQUssS0FBSyxXQUFXLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxvQkFBb0IsR0FBRyxpQkFBaUIsR0FBRyxDQUFDLEVBQUU7Z0JBQ2pHLEVBQUUsQ0FBQyxLQUFLLENBQUMseUZBQXlGLENBQUMsQ0FBQztnQkFDcEcsVUFBVSxJQUFJLENBQUMsQ0FBQztnQkFDaEIsS0FBSyxHQUFHLEtBQUssQ0FBQzthQUNmO1NBQ0Y7YUFBTTtZQUNMLG9CQUFvQixHQUFHLENBQUMsQ0FBQztTQUMxQjtRQUVELElBQUksUUFBUTtZQUFFLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDeEIsK0JBQStCO1FBQy9CLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQzNDO0FBQ0gsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQUMsRUFBTSxFQUFFLENBQWMsRUFBRSxDQUFVLEVBQUUsS0FBYTtJQUM1RSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNGLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLENBQVU7SUFDdkMsT0FBTyxDQUNMLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUztRQUNyQixDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUM7UUFDYixDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ3pCLENBQUM7QUFDSixDQUFDIn0=\",\"filename\":\"/corp/product-functions.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ADV_OR_HIRE_FUNDS_CHECK_MULTIPLIER, CORP_OP_UPGRADES, CORP_OP_UPGRADES_LEVEL, CORP_OP_UPGRADES_UNLOCK_AT, CorpResearchName, ROUND_3_MIN_AMOUNT, ROUND_4_MIN_AMOUNT, TOBACCHI_LAB_POINT_THRESHOLD, TOBACCHI_MK_POINT_THRESHOLD, TOB_DIV_NAME, TOB_PROD4_NAME, TOB_PROD5_NAME, } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { checkAndUpdateStage, checkProductAtLeastDevelopment, manageAevumEmployees, manageInvestors, speedEmployeeStats, } from 'corp/corp-functions';\\nimport { CORP_TOB_MANTAINANCE_STAGE } from 'corp/corp-stages';\\nimport { manageProductSell, prodNotSelling } from 'corp/product-functions';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tail();\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(c, ns);\\n    }\\n}\\nasync function runStage(c, ns) {\\n    try {\\n        let currentStage = checkAndUpdateStage(ns);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== CORP_TOB_MANTAINANCE_STAGE.mainStage.val) {\\n            error = true;\\n            ns.print('WARN stage not tobacchi mantainance, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_TOB_MANTAINANCE_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.print('INFO: Cycle start');\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, c, currentStage);\\n                    break;\\n                }\\n                // this should not be possible..\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete) {\\n                ns.print('ERROR Tobacchi mantainance complete, should not be possible.');\\n                ns.tail();\\n                break;\\n            }\\n            currentStage = checkAndUpdateStage(ns, currentStage);\\n            ns.print('INFO: Cycle end');\\n        }\\n        if (!error) {\\n            ns.print('ERROR Tobacchi mantainance complete, should not be possible.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n        throw e;\\n    }\\n}\\nasync function manageStage(ns, c, stage) {\\n    while (c.getCorporation().state !== 'EXPORT') {\\n        //when you make your main script, put things you want to be done\\n        //potentially multiple times every cycle, like buying upgrades, here.\\n        await checkWilson(ns, c);\\n        await adsOrEmployees(ns, c);\\n        checkUpgrades(ns, c);\\n        await ns.sleep(0);\\n    }\\n    while (c.getCorporation().state === 'EXPORT') {\\n        //same as above\\n        await checkWilson(ns, c);\\n        await adsOrEmployees(ns, c);\\n        checkUpgrades(ns, c);\\n        await ns.sleep(0);\\n    }\\n    //and to this part put things you want done exactly once per cycle\\n    manageMoney(ns, c);\\n    ns.print('INFO Check reasearch');\\n    checkReasearch(ns, c);\\n    ns.print('INFO Check Wilson');\\n    await checkWilson(ns, c);\\n    ns.print('INFO Check Ads/Emps');\\n    await adsOrEmployees(ns, c);\\n    ns.print('INFO Upgrade other cities');\\n    upgradeOtherCities(ns, c);\\n    ns.print('INFO Check emp stats');\\n    await speedEmployeeStats(ns, stage);\\n    await checkAndstartDevelop(ns, c);\\n    ns.print('INFO Check products');\\n    await checkProducts(ns, c);\\n    checkUpgrades(ns, c);\\n}\\nfunction manageMoney(ns, c) {\\n    if (!c.getCorporation().public) {\\n        try {\\n            const round = c.getInvestmentOffer().round;\\n            if (round < 4)\\n                manageInvestors(ns, ROUND_3_MIN_AMOUNT, 3);\\n            if (round === 4 && manageInvestors(ns, ROUND_4_MIN_AMOUNT, 4)) {\\n                ns.print('SUCCESS Time to go public');\\n                ns.tail();\\n            }\\n        }\\n        catch (e) {\\n            ns.print('ERROR investment offer: ', e);\\n            ns.tail();\\n        }\\n    }\\n}\\nfunction checkReasearch(ns, c) {\\n    const division = c.getDivision(TOB_DIV_NAME);\\n    if (!c.hasResearched(TOB_DIV_NAME, CorpResearchName.RES_LAB) && division.research > TOBACCHI_LAB_POINT_THRESHOLD) {\\n        c.research(TOB_DIV_NAME, CorpResearchName.RES_LAB);\\n    }\\n    if (!c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT2) &&\\n        !c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT1) &&\\n        division.research > TOBACCHI_MK_POINT_THRESHOLD) {\\n        c.research(TOB_DIV_NAME, CorpResearchName.MKT1);\\n        c.research(TOB_DIV_NAME, CorpResearchName.MKT2);\\n        for (const prod of c.getDivision(TOB_DIV_NAME).products) {\\n            enableMkTa(ns, c, prod);\\n        }\\n    }\\n}\\nasync function checkAndstartDevelop(ns, c) {\\n    const products = c.getDivision(TOB_DIV_NAME).products;\\n    const prods = [];\\n    for (const product of products) {\\n        prods.push(c.getProduct(TOB_DIV_NAME, product));\\n    }\\n    let availableNumberOfProds = 3;\\n    if (c.hasResearched(TOB_DIV_NAME, CorpResearchName.UPG_CAP1)) {\\n        availableNumberOfProds++;\\n    }\\n    if (c.hasResearched(TOB_DIV_NAME, CorpResearchName.UPG_CAP2)) {\\n        availableNumberOfProds++;\\n    }\\n    const currentNumberOfProds = prods.length;\\n    if (currentNumberOfProds < availableNumberOfProds) {\\n        let investment = Math.floor(c.getCorporation().funds / 3);\\n        if (!checkProductAtLeastDevelopment(ns, TOB_DIV_NAME, TOB_PROD4_NAME))\\n            c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD4_NAME, investment, investment);\\n        investment = Math.floor(c.getCorporation().funds / 3);\\n        if (!checkProductAtLeastDevelopment(ns, TOB_DIV_NAME, TOB_PROD5_NAME))\\n            c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD5_NAME, investment, investment);\\n    }\\n    if (prods.map((el) => el.developmentProgress).filter((el) => el < 100).length <= 0) {\\n        ns.print('INFO start develop');\\n        let prodToUpdate = prods.sort((a, b) => a.rat - b.rat)[0];\\n        const prodName = prodToUpdate.name;\\n        while (prodToUpdate.cityData.Aevum[0] > 0) {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                c.limitProductProduction(TOB_DIV_NAME, city, prodName, 0);\\n            }\\n            await ns.sleep(5000);\\n            prodToUpdate = c.getProduct(TOB_DIV_NAME, prodName);\\n        }\\n        c.discontinueProduct(TOB_DIV_NAME, prodName);\\n        const investment = Math.floor(c.getCorporation().funds / 3);\\n        c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, prodName, investment, investment);\\n    }\\n}\\nasync function checkProducts(ns, c) {\\n    const productNames = c.getDivision(TOB_DIV_NAME).products;\\n    if (c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT2) && c.hasResearched(TOB_DIV_NAME, CorpResearchName.MKT1)) {\\n        for (const product of productNames) {\\n            if (prodNotSelling(c.getProduct(TOB_DIV_NAME, product))) {\\n                c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, product, 'MAX', 'MP', true);\\n                enableMkTa(ns, c, product);\\n            }\\n        }\\n    }\\n    else {\\n        const products = productNames\\n            .map((product) => c.getProduct(TOB_DIV_NAME, product))\\n            .filter((el) => el.developmentProgress >= 100)\\n            .sort((a, b) => b.rat - a.rat);\\n        // OLD\\n        const all = [];\\n        for (const prod of products) {\\n            if (prodNotSelling(prod)) {\\n                all.unshift(prod);\\n            }\\n            else {\\n                all.push(prod);\\n            }\\n        }\\n        for (const product of all) {\\n            ns.print('INFO cycle check ', product.name);\\n            await manageProductSell(ns, c, product);\\n        }\\n    }\\n}\\nasync function checkWilson(ns, c) {\\n    while (c.getCorporation().funds > c.getUpgradeLevelCost(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */)) {\\n        c.levelUpgrade(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */);\\n        await ns.sleep(10);\\n    }\\n}\\nasync function adsOrEmployees(ns, c) {\\n    let canBuy = true;\\n    let adsBought = 0;\\n    while (canBuy) {\\n        const funds = c.getCorporation().funds * ADV_OR_HIRE_FUNDS_CHECK_MULTIPLIER;\\n        const advCost = c.getHireAdVertCost(TOB_DIV_NAME);\\n        const employeeCost = c.getOfficeSizeUpgradeCost(TOB_DIV_NAME, ns.enums.CityName.Aevum, 15);\\n        const aevumSize = c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).size;\\n        if (advCost < employeeCost || aevumSize >= 300) {\\n            if (funds > advCost && adsBought < 50) {\\n                adsBought++;\\n                c.hireAdVert(TOB_DIV_NAME);\\n            }\\n            else {\\n                canBuy = false;\\n            }\\n        }\\n        else {\\n            if (funds > employeeCost) {\\n                c.upgradeOfficeSize(TOB_DIV_NAME, ns.enums.CityName.Aevum, 15);\\n                manageAevumEmployees(ns);\\n            }\\n            else {\\n                canBuy = false;\\n            }\\n        }\\n        await ns.sleep(10);\\n    }\\n}\\nfunction upgradeOtherCities(ns, c) {\\n    const funds = c.getCorporation().funds;\\n    const aevumSize = c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).size;\\n    for (const city of Object.values(ns.enums.CityName).filter((el) => el !== ns.enums.CityName.Aevum)) {\\n        const citySize = c.getOffice(TOB_DIV_NAME, city).size;\\n        if (citySize < aevumSize - 60) {\\n            const toAdd = aevumSize - citySize - 60;\\n            const upgradeCost = c.getOfficeSizeUpgradeCost(TOB_DIV_NAME, city, toAdd);\\n            if (upgradeCost < funds / 3) {\\n                c.upgradeOfficeSize(TOB_DIV_NAME, city, toAdd);\\n                while (c.hireEmployee(TOB_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */)) { }\\n            }\\n        }\\n    }\\n}\\nfunction enableMkTa(ns, c, prodName) {\\n    if (c.getProduct(TOB_DIV_NAME, prodName).developmentProgress >= 100 &&\\n        prodNotSelling(c.getProduct(TOB_DIV_NAME, prodName))) {\\n        c.sellProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, prodName, 'MAX', 'MP', true);\\n    }\\n    c.setProductMarketTA1(TOB_DIV_NAME, prodName, true);\\n    c.setProductMarketTA2(TOB_DIV_NAME, prodName, true);\\n}\\nfunction checkUpgrades(ns, c) {\\n    if (c.getCorporation().funds > CORP_OP_UPGRADES_UNLOCK_AT) {\\n        for (const upgr of CORP_OP_UPGRADES) {\\n            while (c.getUpgradeLevel(upgr) < CORP_OP_UPGRADES_LEVEL &&\\n                c.getUpgradeLevelCost(upgr) < c.getCorporation().funds) {\\n                c.levelUpgrade(upgr);\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9iLW1hbnRhaW5hbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcnAvdG9iLW1hbnRhaW5hbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxrQ0FBa0MsRUFDbEMsZ0JBQWdCLEVBQ2hCLHNCQUFzQixFQUN0QiwwQkFBMEIsRUFDMUIsZ0JBQWdCLEVBRWhCLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsNEJBQTRCLEVBQzVCLDJCQUEyQixFQUMzQixZQUFZLEVBQ1osY0FBYyxFQUNkLGNBQWMsR0FFZixNQUFNLFlBQVksQ0FBQztBQUNwQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsOEJBQThCLEVBQzlCLG9CQUFvQixFQUNwQixlQUFlLEVBQ2Ysa0JBQWtCLEdBQ25CLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLDBCQUEwQixFQUFrQixNQUFNLGtCQUFrQixDQUFDO0FBQzlFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUUzRSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLE1BQU0sQ0FBQyxHQUFnQixFQUFFLENBQUMsV0FBVyxDQUFDO0lBQ3RDLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7UUFDdkIsRUFBRSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1FBQ3ZFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNCO1NBQU07UUFDTCxNQUFNLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDdkI7QUFDSCxDQUFDO0FBRUQsS0FBSyxVQUFVLFFBQVEsQ0FBQyxDQUFjLEVBQUUsRUFBTTtJQUM1QyxJQUFJO1FBQ0YsSUFBSSxZQUFZLEdBQW1CLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNELElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO1lBQzlCLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDYixFQUFFLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7WUFDbkMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ1g7YUFBTSxJQUFJLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLDBCQUEwQixDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDbEYsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNiLEVBQUUsQ0FBQyxLQUFLLENBQUMsMkVBQTJFLENBQUMsQ0FBQztZQUN0RixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDWDtRQUNELE1BQU0sZ0JBQWdCLEdBQUcsMEJBQTBCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztRQUNsRSxPQUFPLFlBQVksS0FBSyxTQUFTLElBQUksWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEtBQUssZ0JBQWdCLEVBQUU7WUFDcEYsRUFBRSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQzlCLFFBQVEsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2xDLEtBQUssZ0JBQWdCLENBQUMsQ0FBQztvQkFDckIsTUFBTSxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztvQkFDdkMsTUFBTTtpQkFDUDtnQkFDRCxnQ0FBZ0M7Z0JBQ2hDLE9BQU8sQ0FBQyxDQUFDO29CQUNQLGFBQWEsR0FBRyxJQUFJLENBQUM7b0JBQ3JCLE1BQU07aUJBQ1A7YUFDRjtZQUNELElBQUksYUFBYSxFQUFFO2dCQUNqQixFQUFFLENBQUMsS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7Z0JBQ3pFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDVixNQUFNO2FBQ1A7WUFDRCxZQUFZLEdBQUcsbUJBQW1CLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ3JELEVBQUUsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUM3QjtRQUNELElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixFQUFFLENBQUMsS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7WUFDekUsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ1g7UUFDRCxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztLQUMzQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdEIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1YsTUFBTSxDQUFDLENBQUM7S0FDVDtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsV0FBVyxDQUFDLEVBQU0sRUFBRSxDQUFjLEVBQUUsS0FBcUI7SUFDdEUsT0FBTyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM1QyxnRUFBZ0U7UUFDaEUscUVBQXFFO1FBQ3JFLE1BQU0sV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6QixNQUFNLGNBQWMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsYUFBYSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNyQixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbkI7SUFFRCxPQUFPLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzVDLGVBQWU7UUFDZixNQUFNLFdBQVcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekIsTUFBTSxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVCLGFBQWEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckIsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ25CO0lBQ0Qsa0VBQWtFO0lBQ2xFLFdBQVcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkIsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ2pDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzlCLE1BQU0sV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QixFQUFFLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDaEMsTUFBTSxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVCLEVBQUUsQ0FBQyxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUN0QyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ2pDLE1BQU0sa0JBQWtCLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sb0JBQW9CLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUNoQyxNQUFNLGFBQWEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0IsYUFBYSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN2QixDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsRUFBTSxFQUFFLENBQWM7SUFDekMsSUFBSSxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxNQUFNLEVBQUU7UUFDOUIsSUFBSTtZQUNGLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLEtBQUssQ0FBQztZQUMzQyxJQUFJLEtBQUssR0FBRyxDQUFDO2dCQUFFLGVBQWUsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUQsSUFBSSxLQUFLLEtBQUssQ0FBQyxJQUFJLGVBQWUsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLEVBQUU7Z0JBQzdELEVBQUUsQ0FBQyxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztnQkFDdEMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ1g7U0FDRjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsRUFBRSxDQUFDLEtBQUssQ0FBQywwQkFBMEIsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN4QyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDWDtLQUNGO0FBQ0gsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLEVBQU0sRUFBRSxDQUFjO0lBQzVDLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDN0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxRQUFRLEdBQUcsNEJBQTRCLEVBQUU7UUFDaEgsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDcEQ7SUFDRCxJQUNFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO1FBQ3JELFFBQVEsQ0FBQyxRQUFRLEdBQUcsMkJBQTJCLEVBQy9DO1FBQ0EsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLFFBQVEsRUFBRTtZQUN2RCxVQUFVLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUN6QjtLQUNGO0FBQ0gsQ0FBQztBQUVELEtBQUssVUFBVSxvQkFBb0IsQ0FBQyxFQUFNLEVBQUUsQ0FBYztJQUN4RCxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUN0RCxNQUFNLEtBQUssR0FBYyxFQUFFLENBQUM7SUFDNUIsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7UUFDOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ2pEO0lBQ0QsSUFBSSxzQkFBc0IsR0FBRyxDQUFDLENBQUM7SUFDL0IsSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM1RCxzQkFBc0IsRUFBRSxDQUFDO0tBQzFCO0lBQ0QsSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM1RCxzQkFBc0IsRUFBRSxDQUFDO0tBQzFCO0lBQ0QsTUFBTSxvQkFBb0IsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzFDLElBQUksb0JBQW9CLEdBQUcsc0JBQXNCLEVBQUU7UUFDakQsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLGNBQWMsQ0FBQztZQUNuRSxDQUFDLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMvRixVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLGNBQWMsQ0FBQztZQUNuRSxDQUFDLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztLQUNoRztJQUNELElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtRQUNsRixFQUFFLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDL0IsSUFBSSxZQUFZLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUM7UUFDbkMsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDekMsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ25ELENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUMzRDtZQUNELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQixZQUFZLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDckQ7UUFDRCxDQUFDLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1RCxDQUFDLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztLQUN4RjtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsYUFBYSxDQUFDLEVBQU0sRUFBRSxDQUFjO0lBQ2pELE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQzFELElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDaEgsS0FBSyxNQUFNLE9BQU8sSUFBSSxZQUFZLEVBQUU7WUFDbEMsSUFBSSxjQUFjLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUMsRUFBRTtnQkFDdkQsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNqRixVQUFVLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQzthQUM1QjtTQUNGO0tBQ0Y7U0FBTTtRQUNMLE1BQU0sUUFBUSxHQUFHLFlBQVk7YUFDMUIsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQzthQUNyRCxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsSUFBSSxHQUFHLENBQUM7YUFDN0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakMsTUFBTTtRQUNOLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNmLEtBQUssTUFBTSxJQUFJLElBQUksUUFBUSxFQUFFO1lBQzNCLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN4QixHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ25CO2lCQUFNO2dCQUNMLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDaEI7U0FDRjtRQUNELEtBQUssTUFBTSxPQUFPLElBQUksR0FBRyxFQUFFO1lBQ3pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzVDLE1BQU0saUJBQWlCLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN6QztLQUNGO0FBQ0gsQ0FBQztBQUVELEtBQUssVUFBVSxXQUFXLENBQUMsRUFBTSxFQUFFLENBQWM7SUFDL0MsT0FBTyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxtQkFBbUIsdUNBQWMsRUFBRTtRQUNyRSxDQUFDLENBQUMsWUFBWSx1Q0FBYyxDQUFDO1FBQzdCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsY0FBYyxDQUFDLEVBQU0sRUFBRSxDQUFjO0lBQ2xELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztJQUNsQixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDbEIsT0FBTyxNQUFNLEVBQUU7UUFDYixNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxHQUFHLGtDQUFrQyxDQUFDO1FBQzVFLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNsRCxNQUFNLFlBQVksR0FBRyxDQUFDLENBQUMsd0JBQXdCLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMzRixNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDMUUsSUFBSSxPQUFPLEdBQUcsWUFBWSxJQUFJLFNBQVMsSUFBSSxHQUFHLEVBQUU7WUFDOUMsSUFBSSxLQUFLLEdBQUcsT0FBTyxJQUFJLFNBQVMsR0FBRyxFQUFFLEVBQUU7Z0JBQ3JDLFNBQVMsRUFBRSxDQUFDO2dCQUNaLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDNUI7aUJBQU07Z0JBQ0wsTUFBTSxHQUFHLEtBQUssQ0FBQzthQUNoQjtTQUNGO2FBQU07WUFDTCxJQUFJLEtBQUssR0FBRyxZQUFZLEVBQUU7Z0JBQ3hCLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUMvRCxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUMxQjtpQkFBTTtnQkFDTCxNQUFNLEdBQUcsS0FBSyxDQUFDO2FBQ2hCO1NBQ0Y7UUFDRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxFQUFNLEVBQUUsQ0FBYztJQUNoRCxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQ3ZDLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQztJQUMxRSxLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNsRyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFdEQsSUFBSSxRQUFRLEdBQUcsU0FBUyxHQUFHLEVBQUUsRUFBRTtZQUM3QixNQUFNLEtBQUssR0FBRyxTQUFTLEdBQUcsUUFBUSxHQUFHLEVBQUUsQ0FBQztZQUN4QyxNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUMsd0JBQXdCLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMxRSxJQUFJLFdBQVcsR0FBRyxLQUFLLEdBQUcsQ0FBQyxFQUFFO2dCQUMzQixDQUFDLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDL0MsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxJQUFJLDBDQUFXLEVBQUUsR0FBRTthQUN4RDtTQUNGO0tBQ0Y7QUFDSCxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsRUFBTSxFQUFFLENBQWMsRUFBRSxRQUFnQjtJQUMxRCxJQUNFLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDLG1CQUFtQixJQUFJLEdBQUc7UUFDL0QsY0FBYyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQ3BEO1FBQ0EsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ25GO0lBQ0QsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLEVBQU0sRUFBRSxDQUFjO0lBQzNDLElBQUksQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssR0FBRywwQkFBMEIsRUFBRTtRQUN6RCxLQUFLLE1BQU0sSUFBSSxJQUFJLGdCQUFnQixFQUFFO1lBQ25DLE9BQ0UsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxzQkFBc0I7Z0JBQ2hELENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxFQUN0RDtnQkFDQSxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3RCO1NBQ0Y7S0FDRjtBQUNILENBQUMifQ==\",\"filename\":\"/corp/tob-mantainance.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/89f038c4-a3c2-4fd4-930d-d6fb89a01e6d\",\"moduleSequenceNumber\":372},{\"filename\":\"/corp/product-functions.js\",\"url\":\"blob:https://danielyxie.github.io/730620fd-9667-498f-ae4d-d990f44d2109\",\"moduleSequenceNumber\":391},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:https://danielyxie.github.io/abbd620c-4aed-4a1a-a6de-ab2b690152ff\",\"moduleSequenceNumber\":387},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:https://danielyxie.github.io/bbdc5a7d-dbc2-4192-bf94-366b29f3f077\",\"moduleSequenceNumber\":387},{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/58b7c06a-2603-45ee-b871-8e0e9161d2e9\",\"moduleSequenceNumber\":372},{\"filename\":\"/corp/corp-functions.js\",\"url\":\"blob:https://danielyxie.github.io/4ed0c728-5945-4d97-bdbf-c1a0754db2dc\",\"moduleSequenceNumber\":388},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/318fe0e4-605e-485a-9bb8-411084a627bd\",\"moduleSequenceNumber\":366},{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/60401e9f-324e-4678-a49b-a8c5fe60f98d\",\"moduleSequenceNumber\":372},{\"filename\":\"/corp/tob-mantainance.js\",\"url\":\"blob:https://danielyxie.github.io/0de2896c-d685-4a96-8707-5913ab2931ba\",\"moduleSequenceNumber\":618}],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasResearched\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.research\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.limitProductProduction\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.discontinueProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevelCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getHireAdVertCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOfficeSizeUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TOBACCHI_MIN_INVESTMENT_VALUE, TOB_DIV_NAME, TOB_PROD1_NAME, TOB_PROD2_NAME, TOB_PROD3_NAME, } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { checkAndSpeedEmpStats, checkAndUpdateStage, manageAevumEmployees } from 'corp/corp-functions';\\nimport { CORP_TOB_MIDGAME_STAGE } from 'corp/corp-stages';\\nimport { manageProductSell } from 'corp/product-functions';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tail();\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(c, ns);\\n    }\\n}\\nasync function runStage(c, ns) {\\n    try {\\n        let currentStage = checkAndUpdateStage(ns);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== CORP_TOB_MIDGAME_STAGE.mainStage.val) {\\n            error = true;\\n            ns.print('WARN stage not tobacchi midgame, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_TOB_MIDGAME_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, c, currentStage);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Tobacchi midgame complete, moving into mantainance.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nasync function manageStage(ns, c, currentStage) {\\n    hireIntoAevum(ns, c);\\n    const prod2 = c.getProduct(TOB_DIV_NAME, TOB_PROD2_NAME);\\n    if (prod2.developmentProgress >= 100) {\\n        try {\\n            const prod3 = c.getProduct(TOB_DIV_NAME, TOB_PROD3_NAME);\\n            if (prod3.developmentProgress >= 100) {\\n                await manageProductSell(ns, c, prod3);\\n            }\\n        }\\n        catch (e) {\\n            if (c.getCorporation().funds > 1e9 * 2)\\n                c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD3_NAME, TOBACCHI_MIN_INVESTMENT_VALUE, TOBACCHI_MIN_INVESTMENT_VALUE);\\n        }\\n        await manageProductSell(ns, c, prod2);\\n    }\\n    else {\\n        await checkAndSpeedEmpStats(ns, currentStage);\\n        await manageProductSell(ns, c, c.getProduct(TOB_DIV_NAME, TOB_PROD1_NAME));\\n    }\\n}\\nfunction hireIntoAevum(ns, c) {\\n    const toAdd = 60 - c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).size;\\n    if (toAdd > 0) {\\n        c.upgradeOfficeSize(TOB_DIV_NAME, ns.enums.CityName.Aevum, toAdd);\\n        manageAevumEmployees(ns);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9iLW1pZGdhbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29ycC90b2ItbWlkZ2FtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsNkJBQTZCLEVBQzdCLFlBQVksRUFDWixjQUFjLEVBQ2QsY0FBYyxFQUNkLGNBQWMsR0FDZixNQUFNLFlBQVksQ0FBQztBQUNwQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxzQkFBc0IsRUFBa0IsTUFBTSxrQkFBa0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUUzRCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLE1BQU0sQ0FBQyxHQUFnQixFQUFFLENBQUMsV0FBVyxDQUFDO0lBQ3RDLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7UUFDdkIsRUFBRSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1FBQ3ZFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNCO1NBQU07UUFDTCxNQUFNLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDdkI7QUFDSCxDQUFDO0FBRUQsS0FBSyxVQUFVLFFBQVEsQ0FBQyxDQUFjLEVBQUUsRUFBTTtJQUM1QyxJQUFJO1FBQ0YsSUFBSSxZQUFZLEdBQW1CLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNELElBQUksYUFBYSxHQUFHLEtB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\",\"filename\":\"/corp/tob-midgame.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/28ff2058-84c9-402c-923f-5145174778a4\",\"moduleSequenceNumber\":604},{\"filename\":\"/corp/product-functions.js\",\"url\":\"blob:https://danielyxie.github.io/2c28d340-cc4c-4074-a808-6a3daaa072d0\",\"moduleSequenceNumber\":622},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:https://danielyxie.github.io/541da839-c5e0-44a7-a084-135624328fdc\",\"moduleSequenceNumber\":610},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:https://danielyxie.github.io/3c93400e-fa52-46bc-a290-b494b0fea4e4\",\"moduleSequenceNumber\":610},{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/94717beb-4e04-435a-97e4-8ee38bc69594\",\"moduleSequenceNumber\":604},{\"filename\":\"/corp/corp-functions.js\",\"url\":\"blob:https://danielyxie.github.io/c099d2da-fd2b-4918-836d-405b7e299d92\",\"moduleSequenceNumber\":612},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/164654f8-b571-451f-8961-c8ff0eb99024\",\"moduleSequenceNumber\":570},{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/22f39a49-95c2-4eb5-bcf0-019838603035\",\"moduleSequenceNumber\":604},{\"filename\":\"/corp/tob-midgame.js\",\"url\":\"blob:https://danielyxie.github.io/0af91cc6-f5f4-463e-84a0-ede5ee742ee7\",\"moduleSequenceNumber\":2765}],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { TOBACCHI_MIN_INVESTMENT_VALUE, TOB_DIV_NAME, TOB_PROD1_NAME, TOB_PROD2_NAME, } from 'const/corp';\\nimport { CORP_STARTUP } from 'const/scripts';\\nimport { checkAndSpeedEmpStats, checkAndUpdateStage } from 'corp/corp-functions';\\nimport { CORP_TOB_SETUP_STAGE } from 'corp/corp-stages';\\nimport { manageProductSell } from 'corp/product-functions';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tail();\\n    const c = ns.corporation;\\n    if (!c.hasCorporation()) {\\n        ns.print('ERROR no corporation, this script should not have started!');\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    else {\\n        await runStage(c, ns);\\n    }\\n}\\nasync function runStage(c, ns) {\\n    try {\\n        let currentStage = checkAndUpdateStage(ns);\\n        let setupComplete = false;\\n        let error = false;\\n        if (currentStage === undefined) {\\n            error = true;\\n            ns.print('ERROR undefined stage!');\\n            ns.tail();\\n        }\\n        else if (currentStage.mainStage.val !== CORP_TOB_SETUP_STAGE.mainStage.val) {\\n            error = true;\\n            ns.print('WARN stage not tobacchi prep, this script should not have started.');\\n            ns.tail();\\n        }\\n        const expectedStageVal = CORP_TOB_SETUP_STAGE.mainStage.val;\\n        while (currentStage !== undefined && currentStage.mainStage.val === expectedStageVal) {\\n            ns.print('INFO: Cycle start stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n            while (c.getCorporation().state !== 'EXPORT') {\\n                //when you make your main script, put things you want to be done\\n                //potentially multiple times every cycle, like buying upgrades, here.\\n                await ns.sleep(0);\\n            }\\n            while (c.getCorporation().state === 'EXPORT') {\\n                //same as above\\n                await ns.sleep(0);\\n            }\\n            //and to this part put things you want done exactly once per cycle\\n            switch (currentStage.mainStage.val) {\\n                case expectedStageVal: {\\n                    await manageStage(ns, c, currentStage);\\n                    break;\\n                }\\n                // this should not be needed.. better safe than sorry :D\\n                default: {\\n                    setupComplete = true;\\n                    break;\\n                }\\n            }\\n            if (setupComplete)\\n                break;\\n            currentStage = checkAndUpdateStage(ns, currentStage);\\n            ns.print('INFO: Cycle end stage: ', `${currentStage.mainStage.name}-${currentStage.subStage.name}`);\\n        }\\n        if (!error) {\\n            ns.print('SUCCESS Tobacchi startup complete, moving into midgame.');\\n            ns.tail();\\n        }\\n        ns.spawn(CORP_STARTUP, 1);\\n    }\\n    catch (e) {\\n        ns.print('ERROR ', e);\\n        ns.tail();\\n    }\\n}\\nasync function manageStage(ns, c, currentStage) {\\n    switch (currentStage.subStage.val) {\\n        case 0: {\\n            c.expandIndustry('Tobacco', TOB_DIV_NAME);\\n            break;\\n        }\\n        case 1: {\\n            for (const city of Object.values(ns.enums.CityName)) {\\n                if (!c.getDivision(TOB_DIV_NAME).cities.includes(city)) {\\n                    c.expandCity(TOB_DIV_NAME, city);\\n                    c.purchaseWarehouse(TOB_DIV_NAME, city);\\n                }\\n                c.setSmartSupply(TOB_DIV_NAME, city, true);\\n            }\\n            break;\\n        }\\n        case 2: {\\n            hireIntoAevum(ns, c);\\n            hireIntoOthers(ns, c);\\n            currentStage.lastEmpStatsCheck = Date.now();\\n            break;\\n        }\\n        case 3: {\\n            c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD1_NAME, TOBACCHI_MIN_INVESTMENT_VALUE, TOBACCHI_MIN_INVESTMENT_VALUE);\\n            await checkAndSpeedEmpStats(ns, currentStage);\\n            break;\\n        }\\n        case 4: {\\n            for (const upgr of [\\\"FocusWires\\\" /* UPGRADES.FWI */, \\\"Speech Processor Implants\\\" /* UPGRADES.SPI */, \\\"Neural Accelerators\\\" /* UPGRADES.NAC */, \\\"Nuoptimal Nootropic Injector Implants\\\" /* UPGRADES.NNI */]) {\\n                while (c.getUpgradeLevel(upgr) < 20) {\\n                    c.levelUpgrade(upgr);\\n                }\\n            }\\n            while (c.getUpgradeLevel(\\\"DreamSense\\\" /* UPGRADES.DSE */) < 30) {\\n                c.levelUpgrade(\\\"DreamSense\\\" /* UPGRADES.DSE */);\\n            }\\n            while (c.getUpgradeLevel(\\\"Project Insight\\\" /* UPGRADES.PIN */) < 10) {\\n                c.levelUpgrade(\\\"Project Insight\\\" /* UPGRADES.PIN */);\\n            }\\n            break;\\n        }\\n        case 5: {\\n            const prod1 = c.getProduct(TOB_DIV_NAME, TOB_PROD1_NAME);\\n            if (prod1.developmentProgress >= 100) {\\n                try {\\n                    c.getProduct(TOB_DIV_NAME, TOB_PROD2_NAME);\\n                }\\n                catch (e) {\\n                    if (c.getCorporation().funds > 1e9 * 3)\\n                        c.makeProduct(TOB_DIV_NAME, ns.enums.CityName.Aevum, TOB_PROD2_NAME, TOBACCHI_MIN_INVESTMENT_VALUE, TOBACCHI_MIN_INVESTMENT_VALUE);\\n                }\\n                await manageProductSell(ns, c, prod1);\\n            }\\n            else {\\n                await checkAndSpeedEmpStats(ns, currentStage);\\n            }\\n            break;\\n        }\\n        case 6: {\\n            while (c.getUpgradeLevel(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */) < 10) {\\n                c.levelUpgrade(\\\"Wilson Analytics\\\" /* UPGRADES.WAN */);\\n            }\\n            let funds = c.getCorporation().funds;\\n            while (funds > 4e9 && c.getHireAdVertCost(TOB_DIV_NAME) < funds) {\\n                c.hireAdVert(TOB_DIV_NAME);\\n                await ns.sleep(50);\\n                funds = c.getCorporation().funds;\\n            }\\n            await manageProductSell(ns, c, c.getProduct(TOB_DIV_NAME, TOB_PROD1_NAME));\\n            break;\\n        }\\n    }\\n}\\nfunction hireIntoAevum(ns, c) {\\n    const toAdd = 30 - c.getOffice(TOB_DIV_NAME, ns.enums.CityName.Aevum).size;\\n    if (toAdd > 0)\\n        c.upgradeOfficeSize(TOB_DIV_NAME, ns.enums.CityName.Aevum, toAdd);\\n    while (c.hireEmployee(TOB_DIV_NAME, ns.enums.CityName.Aevum)) { }\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Operations\\\" /* JOBS.OPS */, 8);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Engineer\\\" /* JOBS.ENG */, 9);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Business\\\" /* JOBS.BUS */, 5);\\n    c.setAutoJobAssignment(TOB_DIV_NAME, ns.enums.CityName.Aevum, \\\"Management\\\" /* JOBS.MAN */, 8);\\n}\\nfunction hireIntoOthers(ns, c) {\\n    for (const city of Object.values(ns.enums.CityName).filter((el) => el !== ns.enums.CityName.Aevum)) {\\n        const toAdd = 9 - c.getOffice(TOB_DIV_NAME, city).size;\\n        if (toAdd > 0)\\n            c.upgradeOfficeSize(TOB_DIV_NAME, city, toAdd);\\n        while (c.hireEmployee(TOB_DIV_NAME, city)) { }\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Business\\\" /* JOBS.BUS */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Engineer\\\" /* JOBS.ENG */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Management\\\" /* JOBS.MAN */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Operations\\\" /* JOBS.OPS */, 1);\\n        c.setAutoJobAssignment(TOB_DIV_NAME, city, \\\"Research & Development\\\" /* JOBS.RND */, 5);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9iLXNldHVwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcnAvdG9iLXNldHVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFFTCw2QkFBNkIsRUFDN0IsWUFBWSxFQUNaLGNBQWMsRUFDZCxjQUFjLEdBRWYsTUFBTSxZQUFZLENBQUM7QUFDcEIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRixPQUFPLEVBQUUsb0JBQW9CLEVBQWtCLE1BQU0sa0JBQWtCLENBQUM7QUFDeEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFM0QscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDVixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDO0lBQ3pCLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7UUFDdkIsRUFBRSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1FBQ3ZFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNCO1NBQU07UUFDTCxNQUFNLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDdkI7QUFDSCxDQUFDO0FBRUQsS0FBSyxVQUFVLFFBQVEsQ0FBQyxDQUFjLEVBQUUsRUFBTTtJQUM1QyxJQUFJO1FBQ0YsSUFBSSxZQUFZLEdBQW1CLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNELElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLEtBQUssR0FB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\",\"filename\":\"/corp/tob-setup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/777acae1-4ff1-49f8-82a2-9cb4f15d2186\",\"moduleSequenceNumber\":604},{\"filename\":\"/corp/product-functions.js\",\"url\":\"blob:https://danielyxie.github.io/93964296-ed38-412a-b907-53b1387b7561\",\"moduleSequenceNumber\":622},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:https://danielyxie.github.io/efa4ef6b-6715-4997-91c2-0f0ecc9320cf\",\"moduleSequenceNumber\":610},{\"filename\":\"/corp/corp-stages.js\",\"url\":\"blob:https://danielyxie.github.io/fcc34a1d-62e3-4e5e-9c46-6df0f0471931\",\"moduleSequenceNumber\":610},{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/850f056c-6690-4bfe-9a5b-5244a70cd6b7\",\"moduleSequenceNumber\":604},{\"filename\":\"/corp/corp-functions.js\",\"url\":\"blob:https://danielyxie.github.io/39c99b19-a379-4e2f-92b9-996284946e6a\",\"moduleSequenceNumber\":612},{\"filename\":\"/const/scripts.js\",\"url\":\"blob:https://danielyxie.github.io/56defd53-c0d5-4150-92a1-f6111eb86ffd\",\"moduleSequenceNumber\":570},{\"filename\":\"/const/corp.js\",\"url\":\"blob:https://danielyxie.github.io/6481c143-b331-452f-bb74-a515f764c1e4\",\"moduleSequenceNumber\":604},{\"filename\":\"/corp/tob-setup.js\",\"url\":\"blob:https://danielyxie.github.io/30a3f60c-4000-4046-87bf-28e5f6acfbee\",\"moduleSequenceNumber\":781}],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getHireAdVertCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.throwParty\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyCoffee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const scripts = ns.ls('home', 'corp/');\\n    ns.clearLog();\\n    ns.tail();\\n    ns.print(scripts);\\n    scripts.forEach((el) => ns.rm(el));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LWNsZWFudXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2NyaXB0LWNsZWFudXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2QsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1YsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsQixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckMsQ0FBQyJ9\",\"filename\":\"script-cleanup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { manageAevumEmployees } from 'corp/corp-functions';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    manageAevumEmployees(ns);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JwL3Rlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFM0QscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1Ysb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0IsQ0FBQyJ9\",\"filename\":\"/corp/test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setAutoJobAssignment\",\"cost\":1024},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"srv-1\",\"srv-2\",\"srv-3\",\"srv-4\",\"srv-5\",\"srv-6\",\"srv-7\",\"srv-8\",\"srv-9\",\"srv-10\",\"srv-11\",\"srv-12\",\"srv-13\",\"srv-14\",\"srv-15\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/servers.txt\",\"text\":\"[\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"iron-gym\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"omega-net\\\",\\\"netlink\\\",\\\"crush-fitness\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"alpha-ent\\\",\\\"galactic-cyber\\\",\\\"aerocorp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"taiyang-digital\\\",\\\"microdyne\\\",\\\"stormtech\\\",\\\"omnitek\\\",\\\"clarkinc\\\",\\\"powerhouse-fitness\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"defcomm\\\",\\\"solaris\\\",\\\"zeus-med\\\",\\\"infocomm\\\",\\\"nova-med\\\",\\\"applied-energetics\\\",\\\"zb-def\\\",\\\"titan-labs\\\",\\\"fulcrumtech\\\",\\\"helios\\\",\\\"vitalife\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"ecorp\\\",\\\"kuai-gong\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"fulcrumassets\\\",\\\"megacorp\\\",\\\"millenium-fitness\\\",\\\"rothman-uni\\\",\\\"zb-institute\\\",\\\"rho-construction\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"aevum-police\\\",\\\"computek\\\",\\\"nectar-net\\\",\\\"max-hardware\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/servers_detail.txt\",\"text\":\"[{\\\"name\\\":\\\"n00dles\\\",\\\"minSecurity\\\":1,\\\"maxMoney\\\":1750000,\\\"weakenTm\\\":1,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":1174.2444649514136,\\\"prepped\\\":true,\\\"minHackLevel\\\":1,\\\"currHackLevel\\\":125203,\\\"score\\\":219105250000000,\\\"hwgwScore\\\":219105250000000,\\\"farmScore\\\":1174244.4649514137},{\\\"name\\\":\\\"foodnstuff\\\",\\\"minSecurity\\\":3,\\\"maxMoney\\\":50000000,\\\"weakenTm\\\":1,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2134.9899362752976,\\\"prepped\\\":false,\\\"minHackLevel\\\":1,\\\"currHackLevel\\\":125203,\\\"score\\\":18780450000000000,\\\"hwgwScore\\\":18780450000000000,\\\"farmScore\\\":2134989.936275298},{\\\"name\\\":\\\"sigma-cosmetics\\\",\\\"minSecurity\\\":3,\\\"maxMoney\\\":57500000,\\\"weakenTm\\\":1,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2134.9899362752976,\\\"prepped\\\":false,\\\"minHackLevel\\\":5,\\\"currHackLevel\\\":125203,\\\"score\\\":4319503500000000.5,\\\"hwgwScore\\\":4319503500000000.5,\\\"farmScore\\\":2134989.936275298},{\\\"name\\\":\\\"joesguns\\\",\\\"minSecurity\\\":5,\\\"maxMoney\\\":62500000,\\\"weakenTm\\\":1,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2668.7374203441223,\\\"prepped\\\":false,\\\"minHackLevel\\\":10,\\\"currHackLevel\\\":125203,\\\"score\\\":3912593750000000,\\\"hwgwScore\\\":3912593750000000,\\\"farmScore\\\":2668737.420344122},{\\\"name\\\":\\\"hong-fang-tea\\\",\\\"minSecurity\\\":5,\\\"maxMoney\\\":75000000,\\\"weakenTm\\\":2,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2668.7374203441223,\\\"prepped\\\":true,\\\"minHackLevel\\\":30,\\\"currHackLevel\\\":125203,\\\"score\\\":782518750000000,\\\"hwgwScore\\\":782518750000000,\\\"farmScore\\\":1334368.710172061},{\\\"name\\\":\\\"harakiri-sushi\\\",\\\"minSecurity\\\":5,\\\"maxMoney\\\":100000000,\\\"weakenTm\\\":2,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2668.7374203441223,\\\"prepped\\\":true,\\\"minHackLevel\\\":40,\\\"currHackLevel\\\":125203,\\\"score\\\":782518750000000,\\\"hwgwScore\\\":782518750000000,\\\"farmScore\\\":1334368.710172061},{\\\"name\\\":\\\"iron-gym\\\",\\\"minSecurity\\\":10,\\\"maxMoney\\\":500000000,\\\"weakenTm\\\":5,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4269.979872550595,\\\"prepped\\\":false,\\\"minHackLevel\\\":100,\\\"currHackLevel\\\":125203,\\\"score\\\":1252030000000000,\\\"hwgwScore\\\":1252030000000000,\\\"farmScore\\\":853995.9745101191},{\\\"name\\\":\\\"zer0\\\",\\\"minSecurity\\\":8,\\\"maxMoney\\\":187500000,\\\"weakenTm\\\":4,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3736.2323884817706,\\\"prepped\\\":true,\\\"minHackLevel\\\":75,\\\"currHackLevel\\\":125203,\\\"score\\\":626015000000000,\\\"hwgwScore\\\":626015000000000,\\\"farmScore\\\":934058.0971204427},{\\\"name\\\":\\\"neo-net\\\",\\\"minSecurity\\\":8,\\\"maxMoney\\\":125000000,\\\"weakenTm\\\":3,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3736.2323884817706,\\\"prepped\\\":true,\\\"minHackLevel\\\":50,\\\"currHackLevel\\\":125203,\\\"score\\\":834686666666666.8,\\\"hwgwScore\\\":834686666666666.8,\\\"farmScore\\\":1245410.7961605901},{\\\"name\\\":\\\"silver-helix\\\",\\\"minSecurity\\\":10,\\\"maxMoney\\\":1125000000,\\\"weakenTm\\\":7,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4269.979872550595,\\\"prepped\\\":false,\\\"minHackLevel\\\":150,\\\"currHackLevel\\\":125203,\\\"score\\\":1341460714285714.2,\\\"hwgwScore\\\":1341460714285714.2,\\\"farmScore\\\":609997.124650085},{\\\"name\\\":\\\"phantasy\\\",\\\"minSecurity\\\":7,\\\"maxMoney\\\":600000000,\\\"weakenTm\\\":4,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3202.4849044129464,\\\"prepped\\\":false,\\\"minHackLevel\\\":100,\\\"currHackLevel\\\":125203,\\\"score\\\":1314631500000000,\\\"hwgwScore\\\":1314631500000000,\\\"farmScore\\\":800621.2261032365},{\\\"name\\\":\\\"omega-net\\\",\\\"minSecurity\\\":11,\\\"maxMoney\\\":1728841675,\\\"weakenTm\\\":10,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4696.977859805655,\\\"prepped\\\":false,\\\"minHackLevel\\\":189,\\\"currHackLevel\\\":125203,\\\"score\\\":1259797781262050.2,\\\"hwgwScore\\\":1259797781262050.2,\\\"farmScore\\\":469697.7859805655},{\\\"name\\\":\\\"netlink\\\",\\\"minSecurity\\\":22,\\\"maxMoney\\\":6875000000,\\\"weakenTm\\\":34,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":8112.961757846131,\\\"prepped\\\":false,\\\"minHackLevel\\\":379,\\\"currHackLevel\\\":125203,\\\"score\\\":1469575799317088.2,\\\"hwgwScore\\\":1469575799317088.2,\\\"farmScore\\\":238616.52228959207},{\\\"name\\\":\\\"crush-fitness\\\",\\\"minSecurity\\\":12,\\\"maxMoney\\\":1084562475,\\\"weakenTm\\\":14,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":4803.72735661942,\\\"prepped\\\":true,\\\"minHackLevel\\\":262,\\\"currHackLevel\\\":125203,\\\"score\\\":444243649588086.1,\\\"hwgwScore\\\":444243649588086.1,\\\"farmScore\\\":343123.38261567283},{\\\"name\\\":\\\"summit-uni\\\",\\\"minSecurity\\\":19,\\\"maxMoney\\\":8319989875,\\\"weakenTm\\\":37,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":7045.466789708483,\\\"prepped\\\":false,\\\"minHackLevel\\\":461,\\\"currHackLevel\\\":125203,\\\"score\\\":1160348604917211.5,\\\"hwgwScore\\\":1160348604917211.5,\\\"farmScore\\\":190418.02134347253},{\\\"name\\\":\\\"catalyst\\\",\\\"minSecurity\\\":23,\\\"maxMoney\\\":11346462775,\\\"weakenTm\\\":41,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":8326.46075147366,\\\"prepped\\\":false,\\\"minHackLevel\\\":434,\\\"currHackLevel\\\":125203,\\\"score\\\":1836240143465295.8,\\\"hwgwScore\\\":1836240143465295.8,\\\"farmScore\\\":203084.40857252828},{\\\"name\\\":\\\"alpha-ent\\\",\\\"minSecurity\\\":23,\\\"maxMoney\\\":15668045925,\\\"weakenTm\\\":51,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":8433.210248287425,\\\"prepped\\\":false,\\\"minHackLevel\\\":547,\\\"currHackLevel\\\":125203,\\\"score\\\":1617334700534065.5,\\\"hwgwScore\\\":1617334700534065.5,\\\"farmScore\\\":165357.0636919103},{\\\"name\\\":\\\"galactic-cyber\\\",\\\"minSecurity\\\":19,\\\"maxMoney\\\":20169561650,\\\"weakenTm\\\":67,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":7152.216286522246,\\\"prepped\\\":true,\\\"minHackLevel\\\":869,\\\"currHackLevel\\\":125203,\\\"score\\\":824081598647167.9,\\\"hwgwScore\\\":824081598647167.9,\\\"farmScore\\\":106749.49681376487},{\\\"name\\\":\\\"aerocorp\\\",\\\"minSecurity\\\":28,\\\"maxMoney\\\":28524174725,\\\"weakenTm\\\":98,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":10034.4527004939,\\\"prepped\\\":false,\\\"minHackLevel\\\":870,\\\"currHackLevel\\\":125203,\\\"score\\\":1172844744858514,\\\"hwgwScore\\\":1172844744858514,\\\"farmScore\\\":102392.3744948357},{\\\"name\\\":\\\"snap-fitness\\\",\\\"minSecurity\\\":18,\\\"maxMoney\\\":11250000000,\\\"weakenTm\\\":55,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":6938.7172928947175,\\\"prepped\\\":true,\\\"minHackLevel\\\":747,\\\"currHackLevel\\\":125203,\\\"score\\\":617101314348302.2,\\\"hwgwScore\\\":617101314348302.2,\\\"farmScore\\\":126158.49623444941},{\\\"name\\\":\\\"omnia\\\",\\\"minSecurity\\\":32,\\\"maxMoney\\\":23692112375,\\\"weakenTm\\\":118,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":11208.697165445312,\\\"prepped\\\":false,\\\"minHackLevel\\\":917,\\\"currHackLevel\\\":125203,\\\"score\\\":877237431029591.8,\\\"hwgwScore\\\":877237431029591.8,\\\"farmScore\\\":94988.95902919756},{\\\"name\\\":\\\"unitalife\\\",\\\"minSecurity\\\":24,\\\"maxMoney\\\":26766056700,\\\"weakenTm\\\":75,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":8753.45873872872,\\\"prepped\\\":false,\\\"minHackLevel\\\":777,\\\"currHackLevel\\\":125203,\\\"score\\\":1380155715628355.5,\\\"hwgwScore\\\":1380155715628355.5,\\\"farmScore\\\":116712.7831830496},{\\\"name\\\":\\\"univ-energy\\\",\\\"minSecurity\\\":28,\\\"maxMoney\\\":28862295225,\\\"weakenTm\\\":92,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":9927.703203680134,\\\"prepped\\\":false,\\\"minHackLevel\\\":819,\\\"currHackLevel\\\":125203,\\\"score\\\":1342863600540942,\\\"hwgwScore\\\":1342863600540942,\\\"farmScore\\\":107909.8174313058},{\\\"name\\\":\\\"taiyang-digital\\\",\\\"minSecurity\\\":26,\\\"maxMoney\\\":22124148875,\\\"weakenTm\\\":94,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":9393.95571961131,\\\"prepped\\\":true,\\\"minHackLevel\\\":895,\\\"currHackLevel\\\":125203,\\\"score\\\":856059135879142.4,\\\"hwgwScore\\\":856059135879142.4,\\\"farmScore\\\":99935.69914480115},{\\\"name\\\":\\\"microdyne\\\",\\\"minSecurity\\\":22,\\\"maxMoney\\\":15803166650,\\\"weakenTm\\\":75,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":8112.961757846131,\\\"prepped\\\":true,\\\"minHackLevel\\\":838,\\\"currHackLevel\\\":125203,\\\"score\\\":692590059343817.1,\\\"hwgwScore\\\":692590059343817.1,\\\"farmScore\\\":108172.82343794842},{\\\"name\\\":\\\"stormtech\\\",\\\"minSecurity\\\":27,\\\"maxMoney\\\":27664966025,\\\"weakenTm\\\":106,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":9820.953706866369,\\\"prepped\\\":false,\\\"minHackLevel\\\":977,\\\"currHackLevel\\\":125203,\\\"score\\\":903042544689732.1,\\\"hwgwScore\\\":903042544689732.1,\\\"farmScore\\\":92650.50666855065},{\\\"name\\\":\\\"omnitek\\\",\\\"minSecurity\\\":31,\\\"maxMoney\\\":430177509850,\\\"weakenTm\\\":120,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":10995.198171817783,\\\"prepped\\\":false,\\\"minHackLevel\\\":965,\\\"currHackLevel\\\":125203,\\\"score\\\":14418350239535718,\\\"hwgwScore\\\":14418350239535718,\\\"farmScore\\\":91626.65143181487},{\\\"name\\\":\\\"clarkinc\\\",\\\"minSecurity\\\":18,\\\"maxMoney\\\":575793843575,\\\"weakenTm\\\":71,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":6938.7172928947175,\\\"prepped\\\":false,\\\"minHackLevel\\\":974,\\\"currHackLevel\\\":125203,\\\"score\\\":18764498058654210,\\\"hwgwScore\\\":18764498058654210,\\\"farmScore\\\":97728.41257598194},{\\\"name\\\":\\\"powerhouse-fitness\\\",\\\"minSecurity\\\":20,\\\"maxMoney\\\":22500000000,\\\"weakenTm\\\":86,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":7472.464776963541,\\\"prepped\\\":true,\\\"minHackLevel\\\":1060,\\\"currHackLevel\\\":125203,\\\"score\\\":618049034664326.5,\\\"hwgwScore\\\":618049034664326.5,\\\"farmScore\\\":86889.12531352956},{\\\"name\\\":\\\"icarus\\\",\\\"minSecurity\\\":30,\\\"maxMoney\\\":24359332600,\\\"weakenTm\\\":106,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":10568.200184562724,\\\"prepped\\\":false,\\\"minHackLevel\\\":875,\\\"currHackLevel\\\":125203,\\\"score\\\":986478119520582.4,\\\"hwgwScore\\\":986478119520582.4,\\\"farmScore\\\":99700.00174115777},{\\\"name\\\":\\\"deltaone\\\",\\\"minSecurity\\\":26,\\\"maxMoney\\\":33046235250,\\\"weakenTm\\\":89,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":9287.206222797544,\\\"prepped\\\":false,\\\"minHackLevel\\\":850,\\\"currHackLevel\\\":125203,\\\"score\\\":1422005057397878.5,\\\"hwgwScore\\\":1422005057397878.5,\\\"farmScore\\\":104350.63171682633},{\\\"name\\\":\\\"defcomm\\\",\\\"minSecurity\\\":32,\\\"maxMoney\\\":20013353175,\\\"weakenTm\\\":128,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":11315.446662259077,\\\"prepped\\\":true,\\\"minHackLevel\\\":996,\\\"currHackLevel\\\":125203,\\\"score\\\":628948759430101.6,\\\"hwgwScore\\\":628948759430101.6,\\\"farmScore\\\":88401.92704889904},{\\\"name\\\":\\\"solaris\\\",\\\"minSecurity\\\":25,\\\"maxMoney\\\":17811316675,\\\"weakenTm\\\":77,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":8966.95773235625,\\\"prepped\\\":false,\\\"minHackLevel\\\":762,\\\"currHackLevel\\\":125203,\\\"score\\\":950178222747735.5,\\\"hwgwScore\\\":950178222747735.5,\\\"farmScore\\\":116453.99652410715},{\\\"name\\\":\\\"zeus-med\\\",\\\"minSecurity\\\":24,\\\"maxMoney\\\":37090155275,\\\"weakenTm\\\":79,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":8646.709241914956,\\\"prepped\\\":false,\\\"minHackLevel\\\":812,\\\"currHackLevel\\\":125203,\\\"score\\\":1737406763445466.8,\\\"hwgwScore\\\":1737406763445466.8,\\\"farmScore\\\":109452.01572044248},{\\\"name\\\":\\\"infocomm\\\",\\\"minSecurity\\\":23,\\\"maxMoney\\\":21990398075,\\\"weakenTm\\\":82,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":8539.95974510119,\\\"prepped\\\":true,\\\"minHackLevel\\\":888,\\\"currHackLevel\\\":125203,\\\"score\\\":869658696361200.4,\\\"hwgwScore\\\":869658696361200.4,\\\"farmScore\\\":104145.85055001451},{\\\"name\\\":\\\"nova-med\\\",\\\"minSecurity\\\":26,\\\"maxMoney\\\":30574474350,\\\"weakenTm\\\":88,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":9287.206222797544,\\\"prepped\\\":false,\\\"minHackLevel\\\":841,\\\"currHackLevel\\\":125203,\\\"score\\\":1344833176320388.5,\\\"hwgwScore\\\":1344833176320388.5,\\\"farmScore\\\":105536.4343499721},{\\\"name\\\":\\\"applied-energetics\\\",\\\"minSecurity\\\":20,\\\"maxMoney\\\":17623398075,\\\"weakenTm\\\":69,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":7579.2142737773065,\\\"prepped\\\":true,\\\"minHackLevel\\\":848,\\\"currHackLevel\\\":125203,\\\"score\\\":754205055094416.5,\\\"hwgwScore\\\":754205055094416.5,\\\"farmScore\\\":109843.68512720733},{\\\"name\\\":\\\"zb-def\\\",\\\"minSecurity\\\":20,\\\"maxMoney\\\":24563697775,\\\"weakenTm\\\":65,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":7579.2142737773065,\\\"prepped\\\":false,\\\"minHackLevel\\\":799,\\\"currHackLevel\\\":125203,\\\"score\\\":1184345297977597,\\\"hwgwScore\\\":1184345297977597,\\\"farmScore\\\":116603.29651965086},{\\\"name\\\":\\\"titan-labs\\\",\\\"minSecurity\\\":25,\\\"maxMoney\\\":20541719350,\\\"weakenTm\\\":85,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":9073.707229170015,\\\"prepped\\\":false,\\\"minHackLevel\\\":833,\\\"currHackLevel\\\":125203,\\\"score\\\":908087312964497.5,\\\"hwgwScore\\\":908087312964497.5,\\\"farmScore\\\":106749.49681376488},{\\\"name\\\":\\\"fulcrumtech\\\",\\\"minSecurity\\\":28,\\\"maxMoney\\\":44430725100,\\\"weakenTm\\\":131,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":10034.4527004939,\\\"prepped\\\":false,\\\"minHackLevel\\\":1149,\\\"currHackLevel\\\":125203,\\\"score\\\":1034820069834827.4,\\\"hwgwScore\\\":1034820069834827.4,\\\"farmScore\\\":76598.8755762893},{\\\"name\\\":\\\"helios\\\",\\\"minSecurity\\\":29,\\\"maxMoney\\\":14279567175,\\\"weakenTm\\\":101,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":10461.450687748958,\\\"prepped\\\":true,\\\"minHackLevel\\\":864,\\\"currHackLevel\\\":125203,\\\"score\\\":594145292690390.4,\\\"hwgwScore\\\":594145292690390.4,\\\"farmScore\\\":103578.71968068276},{\\\"name\\\":\\\"vitalife\\\",\\\"minSecurity\\\":27,\\\"maxMoney\\\":17993609975,\\\"weakenTm\\\":97,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":9820.953706866369,\\\"prepped\\\":true,\\\"minHackLevel\\\":896,\\\"currHackLevel\\\":125203,\\\"score\\\":699869484557920.4,\\\"hwgwScore\\\":699869484557920.4,\\\"farmScore\\\":101246.94543161204},{\\\"name\\\":\\\"4sigma\\\",\\\"minSecurity\\\":23,\\\"maxMoney\\\":603832992625,\\\"weakenTm\\\":115,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":8539.95974510119,\\\"prepped\\\":false,\\\"minHackLevel\\\":1241,\\\"currHackLevel\\\":125203,\\\"score\\\":12183997127417868,\\\"hwgwScore\\\":12183997127417868,\\\"farmScore\\\":74260.51952261904},{\\\"name\\\":\\\"nwo\\\",\\\"minSecurity\\\":33,\\\"maxMoney\\\":763137248250,\\\"weakenTm\\\":172,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":11635.695152700373,\\\"prepped\\\":false,\\\"minHackLevel\\\":1299,\\\"currHackLevel\\\":125203,\\\"score\\\":14112167702603422,\\\"hwgwScore\\\":14112167702603422,\\\"farmScore\\\":67649.39042267659},{\\\"name\\\":\\\"ecorp\\\",\\\"minSecurity\\\":33,\\\"maxMoney\\\":1300210213425,\\\"weakenTm\\\":176,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":11635.695152700373,\\\"prepped\\\":false,\\\"minHackLevel\\\":1332,\\\"currHackLevel\\\":125203,\\\"score\\\":22915289886183880,\\\"hwgwScore\\\":22915289886183880,\\\"farmScore\\\":66111.90427670667},{\\\"name\\\":\\\"kuai-gong\\\",\\\"minSecurity\\\":32,\\\"maxMoney\\\":569382320300,\\\"weakenTm\\\":139,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":11315.446662259077,\\\"prepped\\\":false,\\\"minHackLevel\\\":1083,\\\"currHackLevel\\\":125203,\\\"score\\\":15153935502585202,\\\"hwgwScore\\\":15153935502585202,\\\"farmScore\\\":81406.09109538904},{\\\"name\\\":\\\"b-and-a\\\",\\\"minSecurity\\\":29,\\\"maxMoney\\\":666285816000,\\\"weakenTm\\\":133,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":10354.701190935193,\\\"prepped\\\":false,\\\"minHackLevel\\\":1145,\\\"currHackLevel\\\":125203,\\\"score\\\":15886059083946494,\\\"hwgwScore\\\":15886059083946494,\\\"farmScore\\\":77854.89617244506},{\\\"name\\\":\\\"blade\\\",\\\"minSecurity\\\":32,\\\"maxMoney\\\":997115844250,\\\"weakenTm\\\":143,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":11422.19615907284,\\\"prepped\\\":false,\\\"minHackLevel\\\":1113,\\\"currHackLevel\\\":125203,\\\"score\\\":25100312527247900,\\\"hwgwScore\\\":25100312527247900,\\\"farmScore\\\":79875.497615894},{\\\"name\\\":\\\"fulcrumassets\\\",\\\"minSecurity\\\":33,\\\"maxMoney\\\":25000000,\\\"weakenTm\\\":204,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":11635.695152700373,\\\"prepped\\\":true,\\\"minHackLevel\\\":1545,\\\"currHackLevel\\\":125203,\\\"score\\\":327725347420.5216,\\\"hwgwScore\\\":327725347420.5216,\\\"farmScore\\\":57037.72133676654},{\\\"name\\\":\\\"megacorp\\\",\\\"minSecurity\\\":33,\\\"maxMoney\\\":1421592016150,\\\"weakenTm\\\":146,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":11635.695152700373,\\\"prepped\\\":false,\\\"minHackLevel\\\":1102,\\\"currHackLevel\\\":125203,\\\"score\\\":36506416176907110,\\\"hwgwScore\\\":36506416176907110,\\\"farmScore\\\":79696.54214178339},{\\\"name\\\":\\\"millenium-fitness\\\",\\\"minSecurity\\\":18,\\\"maxMoney\\\":6250000000,\\\"weakenTm\\\":37,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":6831.967796080952,\\\"prepped\\\":true,\\\"minHackLevel\\\":503,\\\"currHackLevel\\\":125203,\\\"score\\\":756828622857450,\\\"hwgwScore\\\":756828622857450,\\\"farmScore\\\":184647.77827245818},{\\\"name\\\":\\\"rothman-uni\\\",\\\"minSecurity\\\":15,\\\"maxMoney\\\":4958798350,\\\"weakenTm\\\":24,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":5977.971821570833,\\\"prepped\\\":false,\\\"minHackLevel\\\":378,\\\"currHackLevel\\\":125203,\\\"score\\\":1026548329720651.5,\\\"hwgwScore\\\":1026548329720651.5,\\\"farmScore\\\":249082.15923211802},{\\\"name\\\":\\\"zb-institute\\\",\\\"minSecurity\\\":26,\\\"maxMoney\\\":22481670250,\\\"weakenTm\\\":80,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":9393.95571961131,\\\"prepped\\\":false,\\\"minHackLevel\\\":758,\\\"currHackLevel\\\":125203,\\\"score\\\":1206861585885216,\\\"hwgwScore\\\":1206861585885216,\\\"farmScore\\\":117424.44649514137},{\\\"name\\\":\\\"rho-construction\\\",\\\"minSecurity\\\":15,\\\"maxMoney\\\":14540540725,\\\"weakenTm\\\":32,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":5871.222324757068,\\\"prepped\\\":false,\\\"minHackLevel\\\":516,\\\"currHackLevel\\\":125203,\\\"score\\\":1653814789600449.8,\\\"hwgwScore\\\":1653814789600449.8,\\\"farmScore\\\":183475.6976486584},{\\\"name\\\":\\\"johnson-ortho\\\",\\\"minSecurity\\\":17,\\\"maxMoney\\\":2077885375,\\\"weakenTm\\\":19,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":6404.969808825893,\\\"prepped\\\":false,\\\"minHackLevel\\\":269,\\\"currHackLevel\\\":125203,\\\"score\\\":865325220955610.4,\\\"hwgwScore\\\":865325220955610.4,\\\"farmScore\\\":337103.6741487312},{\\\"name\\\":\\\"the-hub\\\",\\\"minSecurity\\\":15,\\\"maxMoney\\\":4944205825,\\\"weakenTm\\\":20,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":5871.222324757068,\\\"prepped\\\":false,\\\"minHackLevel\\\":308,\\\"currHackLevel\\\":125203,\\\"score\\\":1507376790359111.2,\\\"hwgwScore\\\":1507376790359111.2,\\\"farmScore\\\":293561.1162378534},{\\\"name\\\":\\\"syscore\\\",\\\"minSecurity\\\":22,\\\"maxMoney\\\":10437235375,\\\"weakenTm\\\":52,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":8112.961757846131,\\\"prepped\\\":false,\\\"minHackLevel\\\":575,\\\"currHackLevel\\\":125203,\\\"score\\\":961505350315543.6,\\\"hwgwScore\\\":961505350315543.6,\\\"farmScore\\\":156018.49534319484},{\\\"name\\\":\\\"lexo-corp\\\",\\\"minSecurity\\\":26,\\\"maxMoney\\\":19803928925,\\\"weakenTm\\\":76,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":9287.206222797544,\\\"prepped\\\":false,\\\"minHackLevel\\\":724,\\\"currHackLevel\\\":125203,\\\"score\\\":1171621367823425.2,\\\"hwgwScore\\\":1171621367823425.2,\\\"farmScore\\\":122200.08187891505},{\\\"name\\\":\\\"global-pharm\\\",\\\"minSecurity\\\":28,\\\"maxMoney\\\":39540461150,\\\"weakenTm\\\":85,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":10034.4527004939,\\\"prepped\\\":false,\\\"minHackLevel\\\":751,\\\"currHackLevel\\\":125203,\\\"score\\\":2171479000645047.2,\\\"hwgwScore\\\":2171479000645047.2,\\\"farmScore\\\":118052.38471169292},{\\\"name\\\":\\\"aevum-police\\\",\\\"minSecurity\\\":24,\\\"maxMoney\\\":5163766050,\\\"weakenTm\\\":43,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":8860.208235542485,\\\"prepped\\\":true,\\\"minHackLevel\\\":440,\\\"currHackLevel\\\":125203,\\\"score\\\":820108669037822.5,\\\"hwgwScore\\\":820108669037822.5,\\\"farmScore\\\":206051.3543149415},{\\\"name\\\":\\\"computek\\\",\\\"minSecurity\\\":18,\\\"maxMoney\\\":5507687600,\\\"weakenTm\\\":30,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":6938.7172928947175,\\\"prepped\\\":false,\\\"minHackLevel\\\":400,\\\"currHackLevel\\\":125203,\\\"score\\\":1034368515874200,\\\"hwgwScore\\\":1034368515874200,\\\"farmScore\\\":231290.57642982394},{\\\"name\\\":\\\"nectar-net\\\",\\\"minSecurity\\\":7,\\\"maxMoney\\\":68750000,\\\"weakenTm\\\":2,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":3202.4849044129464,\\\"prepped\\\":false,\\\"minHackLevel\\\":20,\\\"currHackLevel\\\":125203,\\\"score\\\":1506348593749999.8,\\\"hwgwScore\\\":1506348593749999.8,\\\"farmScore\\\":1601242.452206473},{\\\"name\\\":\\\"max-hardware\\\",\\\"minSecurity\\\":5,\\\"maxMoney\\\":250000000,\\\"weakenTm\\\":3,\\\"hackValue\\\":1,\\\"hackChance\\\":1,\\\"hackXp\\\":2668.7374203441223,\\\"prepped\\\":true,\\\"minHackLevel\\\":80,\\\"currHackLevel\\\":125203,\\\"score\\\":652098958333333.4,\\\"hwgwScore\\\":652098958333333.4,\\\"farmScore\\\":889579.1401147074}]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/all_servers.txt\",\"text\":\"[\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"iron-gym\\\",\\\"darkweb\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"omega-net\\\",\\\"netlink\\\",\\\"crush-fitness\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"alpha-ent\\\",\\\"galactic-cyber\\\",\\\"aerocorp\\\",\\\"snap-fitness\\\",\\\"omnia\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"taiyang-digital\\\",\\\"microdyne\\\",\\\"run4theh111z\\\",\\\"stormtech\\\",\\\"omnitek\\\",\\\"clarkinc\\\",\\\"powerhouse-fitness\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"defcomm\\\",\\\"solaris\\\",\\\"zeus-med\\\",\\\"infocomm\\\",\\\"nova-med\\\",\\\"applied-energetics\\\",\\\"zb-def\\\",\\\"titan-labs\\\",\\\"fulcrumtech\\\",\\\"helios\\\",\\\"vitalife\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"ecorp\\\",\\\"kuai-gong\\\",\\\".\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"fulcrumassets\\\",\\\"The-Cave\\\",\\\"w0r1d_d43m0n\\\",\\\"megacorp\\\",\\\"millenium-fitness\\\",\\\"rothman-uni\\\",\\\"zb-institute\\\",\\\"rho-construction\\\",\\\"johnson-ortho\\\",\\\"avmnite-02h\\\",\\\"the-hub\\\",\\\"syscore\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"aevum-police\\\",\\\"computek\\\",\\\"nectar-net\\\",\\\"max-hardware\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/files/servers.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/logs/hwgw_log.txt\",\"text\":\"\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-830180-KuaiGongInternational.cct\",\"type\":\"Total Ways to Sum\",\"data\":49,\"reward\":{\"name\":\"KuaiGong International\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"63.1.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":1300210213425,\"moneyMax\":1300210213425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1332,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"7.7.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":1421592016150,\"moneyMax\":1421592016150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1102,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-587356.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,1,0,0,1,0,0,1],[0,0,0,0,1,1,0,1,0,1],[0,0,0,0,0,0,0,0,1,0],[0,0,1,0,0,0,0,0,0,1],[0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0,0],[0,1,1,1,0,1,0,0,0,0],[1,0,0,0,0,1,0,0,0,0],[1,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"84.9.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":666285816000,\"moneyMax\":666285816000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1145,\"serverGrowth\":78}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"8.2.0.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/3e12e7b2-463f-4771-bcf3-2b1caf246d07\",\"moduleSequenceNumber\":647}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":32,\"minDifficulty\":32,\"moneyAvailable\":997115844250,\"moneyMax\":997115844250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1113,\"serverGrowth\":85}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-211905-IcarusMicrosystems.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[5,8],[6,9,1],[2,5,9,3],[6,1,9,8,1],[9,3,1,6,2,4],[1,5,3,2,3,6,8]],\"reward\":{\"name\":\"Icarus Microsystems\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"18.4.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":763137248250,\"moneyMax\":763137248250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1299,\"serverGrowth\":65}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"16.9.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":575793843575,\"moneyMax\":575793843575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":974,\"serverGrowth\":73}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-334696-TianDiHui.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"kkMMrsdxrsdxCpO7xrdxkA3owI3owI3owI3C40aFnLUuC40a6nLUuC4W6UuC4W6UueQ333333ZcK\",\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"32.8.3.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/2c704ef6-500d-4f41-a017-ce83f45dae13\",\"moduleSequenceNumber\":640}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":430177509850,\"moneyMax\":430177509850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":965,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"63.6.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":603832992625,\"moneyMax\":603832992625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1241,\"serverGrowth\":97}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-999331.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[167,70,126,8,10,25,6,177,180,144,196,86,108,21,53,146,55,63,115,95,138,11,96,31,110,62,64,124,67,49,60,195,80,110,196,15,155,159,17,12,56,148,30],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"66.2.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":32,\"minDifficulty\":32,\"moneyAvailable\":569382320300,\"moneyMax\":569382320300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1083,\"serverGrowth\":90}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-340280.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[198,74,1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"95.1.2.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/596e093a-0662-4499-ace7-648bd065eb9b\",\"moduleSequenceNumber\":644}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":44430725100,\"moneyMax\":44430725100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1149,\"serverGrowth\":85}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-698844.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":123868991,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"76.6.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":768405.5167346079,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1545,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"55.4.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":27664966025,\"moneyMax\":27664966025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":977,\"serverGrowth\":91}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"7.3.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":32,\"minDifficulty\":32,\"moneyAvailable\":20013353175,\"moneyMax\":20013353175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":996,\"serverGrowth\":51}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"35.5.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":21990398075,\"moneyMax\":21990398075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":888,\"serverGrowth\":41}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"13.3.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/d07d6b28-bdcc-462d-826b-6dfdc617f298\",\"moduleSequenceNumber\":645}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":9048.503591140685,\"moneyMax\":14279567175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":864,\"serverGrowth\":80}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"77.4.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/808dbbe3-97d2-43d1-b962-47cc200f90b3\",\"moduleSequenceNumber\":646}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":17993609975,\"moneyMax\":17993609975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":896,\"serverGrowth\":72}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-291236.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"47.8.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":24359332600,\"moneyMax\":24359332600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":875,\"serverGrowth\":95}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"29.5.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/bf145bd6-9d23-463f-a7d6-60c129e36fee\",\"moduleSequenceNumber\":638}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":28862295225,\"moneyMax\":28862295225,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-491313-IcarusMicrosystems.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[147,103,46,186,105,123,189,134,3,148,46,87,137,66,2,6,81,153,55,181,182,140,199,109,18,32,169,29,71],\"reward\":{\"name\":\"Icarus Microsystems\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-856163-KuaiGongInternational.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9HxcU8N3LC016759AwbUHo2tZ01s321z455n55je611x826zUj7fY598FExpzxz622\",\"reward\":{\"name\":\"KuaiGong International\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"79.8.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/baee5a51-fbb0-43b6-af63-8a67b9e23542\",\"moduleSequenceNumber\":643}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":20541719350,\"moneyMax\":20541719350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":833,\"serverGrowth\":75}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-181437.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[74,[4,6,8,9,15,17,18,20,27,28,31,32]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-386824.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,2],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"8.5.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/72d692f4-2591-44d7-bde1-73fd58b0d7f7\",\"moduleSequenceNumber\":639}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":15803166650,\"moneyMax\":15803166650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":838,\"serverGrowth\":88}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-88163.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[111,164,71,102,174,163,13,66,115,62,60,108,87,99,41,127,105,10,53,185,152,127,136,26,133,37,24,184,73,17,149,179,125,7,67,24,145,95,133,176,28,122,125,23]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-186949.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0110100110101110\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"5.3.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":22124148875,\"moneyMax\":22124148875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":895,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-111031.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,0,8,3,0,10,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"52.1.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":20169561650,\"moneyMax\":20169561650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":87}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"50.5.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":28524174725,\"moneyMax\":28524174725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":870,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"28.5.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/2201415a-ce9a-436b-a6ca-50cc0128fd8f\",\"moduleSequenceNumber\":636}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":32,\"minDifficulty\":32,\"moneyAvailable\":23692112375,\"moneyMax\":23692112375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":917,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"45.3.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":24563697775,\"moneyMax\":24563697775,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":799,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-484347.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"11000000111100000000010100111010\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-996679-KuaiGongInternational.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,2,6],\"reward\":{\"name\":\"KuaiGong International\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"18.1.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":17623398075,\"moneyMax\":17623398075,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":848,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-810729-TheSyndicate.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"3220793\",14],\"reward\":{\"name\":\"The Syndicate\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"96.6.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/3708bb8a-8758-44f2-ac5d-6465dd331eb8\",\"moduleSequenceNumber\":642}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":17811316675,\"moneyMax\":17811316675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":762,\"serverGrowth\":76}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-156630.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[190,[1,2,6,7,9,12,14,16,18,19,26]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-313243-TheCovenant.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,3,4,4,3,6,4,5,3,1,3,0,0,1,5,2,3,2,2,4,4,2,6,2],\"reward\":{\"name\":\"The Covenant\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"55.0.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":33046235250,\"moneyMax\":33046235250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":52}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-718306-BladeIndustries.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,1,0],[1,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0],[0,0,1,1,0,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0]],\"reward\":{\"name\":\"Blade Industries\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"87.4.3.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/92820496-2511-4358-96b5-637ae61b80de\",\"moduleSequenceNumber\":654}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":39540461150,\"moneyMax\":39540461150,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":751,\"serverGrowth\":80}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"35.5.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":30574474350,\"moneyMax\":30574474350,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":72}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"41.3.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":37090155275,\"moneyMax\":37090155275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":72}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"20.7.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/005f7838-c682-4193-a095-265b4fa2d789\",\"moduleSequenceNumber\":637}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":26766056700,\"moneyMax\":26766056700,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":777,\"serverGrowth\":74}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"10.5.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/269fb1af-5c42-4fd7-a7ce-7092b132749e\",\"moduleSequenceNumber\":653}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":19803928925,\"moneyMax\":19803928925,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":724,\"serverGrowth\":57}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"45.0.0.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/34da9f36-e8b3-4090-a318-cb213599377b\",\"moduleSequenceNumber\":651}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":14540540725,\"moneyMax\":14540540725,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":516,\"serverGrowth\":46}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"81.3.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/1e4684ea-594e-4c99-b8e1-3e4f2446cb41\",\"moduleSequenceNumber\":635}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":15668045925,\"moneyMax\":15668045925,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":547,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"73.4.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/dab4bbd3-5975-41d5-84fc-cb53cf4ddaab\",\"moduleSequenceNumber\":655}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":5163766050,\"moneyMax\":5163766050,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":440,\"serverGrowth\":48}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"20.6.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/ff677e99-b751-4346-aca7-dc12c46140e0\",\"moduleSequenceNumber\":649}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":4958798350,\"moneyMax\":4958798350,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":378,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"83.8.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/ba1ccc08-cdd3-4529-8b62-b2eb33be7df3\",\"moduleSequenceNumber\":650}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":22481670250,\"moneyMax\":22481670250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":758,\"serverGrowth\":79}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"41.6.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/62c8842d-391d-4bea-965f-399ec5650ee4\",\"moduleSequenceNumber\":633}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":8319989875,\"moneyMax\":8319989875,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":461,\"serverGrowth\":45}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-146466.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"22819767238\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-685867.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[106,155,150,103,161,88,145,182,11,10,25,151,42,156,84,57,128,44,69,75,4,80,103,177,83,127,130,24,13,77,166],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"0.4.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":10437235375,\"moneyMax\":10437235375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":575,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"91.1.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/ca6cb3e6-1c91-482d-a649-00124c07952d\",\"moduleSequenceNumber\":634}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":11346462775,\"moneyMax\":11346462775,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":434,\"serverGrowth\":55}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"14.3.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/698a8a19-6991-469e-bbbb-dd3a9d8f8b78\",\"moduleSequenceNumber\":652}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":4944205825,\"moneyMax\":4944205825,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":308,\"serverGrowth\":48}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-926352.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[84,191,3,128,98,152,121,68,119,159,200,5,165,137,128,1,28,180,72,19,187,76,46,30,174,109,128,106,48],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"22.1.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":5507687600,\"moneyMax\":5507687600,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":400,\"serverGrowth\":56}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"55.8.9.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/ff14470e-4f6b-4616-b6c8-35e321b6881a\",\"moduleSequenceNumber\":632}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":6875000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":379,\"serverGrowth\":67}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"8.9.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":2077885375,\"moneyMax\":2077885375,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":269,\"serverGrowth\":60}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-656605-FoodNStuff.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[153,[1,2,3,5,6,7,8,9,10,12]],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-253529-FoodNStuff.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"6906960286\",47],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"82.1.2.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/32770b0e-259e-4218-b649-3f92c6fe82d7\",\"moduleSequenceNumber\":620}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-46063.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"POPUPPASTECACHEDEBUGLOGIC\",\"TOOLBAR\"],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"76.9.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/3197352d-d211-4015-9e72-99baea2a0307\",\"moduleSequenceNumber\":621}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-982659.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0010101100100001100111011111011001101111111101010000110100001000\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"32.9.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/803b0ae5-b717-422a-aae3-59bcf2deda5a\",\"moduleSequenceNumber\":622}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"60.1.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/958ae9fa-40d0-47b5-a2ed-8c938e0f664e\",\"moduleSequenceNumber\":623}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-898031-FoodNStuff.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()()(()))(a(\",\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"35.7.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/6f7be44f-a623-44e0-aca3-ec1aafab0483\",\"moduleSequenceNumber\":627}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-367297-BladeIndustries.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":22578,\"reward\":{\"name\":\"Blade Industries\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"81.3.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/4c3b6ded-8eac-40e1-aacb-c2ff4a820a70\",\"moduleSequenceNumber\":656}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"87.2.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/6e05834b-716a-4320-9b40-cbfb289a9a90\",\"moduleSequenceNumber\":628}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-541173-Sector12.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,8,-2,-8,10,-9,-2,6,-6,-4,-2,7,4,-10,10,5,0,-3,4,-2,4,-6,6,2,-1,0,4,0,10],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"42.3.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/6fc4a62a-3ef6-4d8e-b31b-6474ff70a506\",\"moduleSequenceNumber\":629}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"86.8.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/177c8530-2a5a-4dde-af53-6827fd112706\",\"moduleSequenceNumber\":624}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"96.7.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/56a1ed7f-6ee9-4cfe-aee7-3f389cf673ee\",\"moduleSequenceNumber\":625}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-208526.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[32,188,124,37,133,164,12,115,152,24,196,62,67,78,97,27,23,193,83,179,148,79,68,96,185,185,108,98,163,138,3,149,171,114,100,10,105,15,78,33],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"17.4.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/62ee6c8c-13ca-471a-b565-e88c522dcb73\",\"moduleSequenceNumber\":630}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"58.9.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/7c5dc9c8-1488-408c-a7cf-fdc4690267f8\",\"moduleSequenceNumber\":657}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"89.4.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/3c66aa14-c254-4da4-9b80-dbced915c401\",\"moduleSequenceNumber\":631}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":34,\"hackDifficulty\":11,\"minDifficulty\":11,\"moneyAvailable\":1728841675,\"moneyMax\":1728841675,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":189,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"5.6.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":12,\"minDifficulty\":12,\"moneyAvailable\":1084562475,\"moneyMax\":1084562475,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":262,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"34.9.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/eb08982b-209f-4b93-a33d-a67fd899b49f\",\"moduleSequenceNumber\":626}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-70951.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[6,[[0,4],[4,5],[1,5],[2,3],[1,3],[0,2]]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"74.6.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/44445d1a-57b6-4d73-80cd-dfb59ba71dc7\",\"moduleSequenceNumber\":648}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":6250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":503,\"serverGrowth\":26}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"4.0.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/cfe44f9e-c495-40e4-a5c3-aa5d9b2a1b0b\",\"moduleSequenceNumber\":641}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":22500000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1060,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"26.5.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":11250000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":747,\"serverGrowth\":57}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"81.1.6.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":522,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-635882-FoodNStuff.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[13,14,39,16,42,50,45,27,13,4,39,29,16,28,23],[21,6,14,25,39,32,38,36,7,6,30,37,17,3,24],[39,11,12,2,19,16,11,1,22,3,34,13,33,20,25],[2,12,22,41,15,25,48,40,20,39,22,43,28,39,15],[2,41,50,41,30,16,41,3,29,34,27,1,21,11,47],[29,12,11,11,13,50,27,48,15,38,33,40,48,27,49],[5,32,21,36,31,2,48,10,9,48,19,42,13,7,11],[20,49,25,46,5,48,43,19,1,7,21,14,23,19,29],[8,45,15,29,34,5,40,18,40,28,27,37,9,47,30],[17,45,36,19,31,14,38,21,4,31,45,17,42,15,39],[4,1,11,32,10,13,15,16,42,45,15,12,14,14,48]],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"64.8.7.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":360,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"99.7.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":202,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"57.3.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":533,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-698295-IcarusMicrosystems.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":9109045,\"reward\":{\"name\":\"Icarus Microsystems\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"27.5.0.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":54,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"16.1.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\",\"w0r1d_d43m0n\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":true,\"ip\":\"97.3.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":6000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-941100.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":69540988,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-537818-Illuminati.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[100,[4,5,7,8,9,11,12,17,19,20]],\"reward\":{\"name\":\"Illuminati\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"86.2.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-1\",\"httpPortOpen\":false,\"ip\":\"18.5.1.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/b5cd06a0-1dff-4fa3-b17d-69f7bfc08f48\",\"moduleSequenceNumber\":445},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/f07e58d7-211a-45c9-96be-76f6b028c8bb\",\"moduleSequenceNumber\":446},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/09f5d7fd-8b69-4416-8b3b-118971f6d5c8\",\"moduleSequenceNumber\":661}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/146d9106-a8cd-412b-8381-5ab28b76f8b4\",\"moduleSequenceNumber\":445},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/dd8f46d1-798b-49d9-b154-0839595b8fd2\",\"moduleSequenceNumber\":446},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/b220f5c6-640c-4441-a183-a4a90ed479c4\",\"moduleSequenceNumber\":663}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/638a860f-f447-4592-b3e7-78470809a8a3\",\"moduleSequenceNumber\":445},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/d8377a2b-41aa-4d1d-a613-7587e97066d4\",\"moduleSequenceNumber\":446},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/68014895-303f-4cfb-9e5b-d79178278076\",\"moduleSequenceNumber\":662}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-2\",\"httpPortOpen\":false,\"ip\":\"3.2.7.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/c7c41316-b9a8-4eed-bca5-b90c4c719502\",\"moduleSequenceNumber\":457},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/748ab3dc-9f63-4d00-bc85-4be2b2d599d1\",\"moduleSequenceNumber\":458},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/cd3f40cb-5124-4142-a375-43723d40ba60\",\"moduleSequenceNumber\":664}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/1996264c-1abc-4650-b0b1-a3c52f329086\",\"moduleSequenceNumber\":457},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/95a34803-f5f9-483d-aabc-4014272fee24\",\"moduleSequenceNumber\":458},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/f3c0f0dc-970a-44a3-bd0e-7db2ebb7dc8a\",\"moduleSequenceNumber\":666}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/7e037e07-d049-4782-aeee-d6e0c996b9fc\",\"moduleSequenceNumber\":457},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/f45a47c1-736e-475f-aabe-bdcc1743a15e\",\"moduleSequenceNumber\":458},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/eab8f3ba-5ca2-4669-88c3-aafae9ab68dd\",\"moduleSequenceNumber\":665}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-3\",\"httpPortOpen\":false,\"ip\":\"66.3.7.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/68a2e85a-84ee-4e7f-a6b2-ab56c2abab63\",\"moduleSequenceNumber\":469},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/ecb11a8f-66df-4202-beb0-1b56e4ab042d\",\"moduleSequenceNumber\":470},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/bd6978dc-927d-4307-887f-35d77cb18498\",\"moduleSequenceNumber\":667}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/cd644219-dc0b-49a3-8283-437c552474fb\",\"moduleSequenceNumber\":469},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/cff564aa-d530-4526-b7cd-47971e278f11\",\"moduleSequenceNumber\":470},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/beba5ef9-635a-4809-84cd-ce28cec20252\",\"moduleSequenceNumber\":669}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/67e06b78-dad1-471c-958a-ef782db1b3ee\",\"moduleSequenceNumber\":469},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/f6e1dd1d-fbd7-44fa-86f5-e2ccf90d7c51\",\"moduleSequenceNumber\":470},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/e6792f03-57a1-4db6-a010-01d955efccda\",\"moduleSequenceNumber\":668}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-4\",\"httpPortOpen\":false,\"ip\":\"4.0.5.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/d43fb37c-b63a-4c16-8c8b-9c0dbb8cbda8\",\"moduleSequenceNumber\":481},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/55b07c38-c561-4482-924c-ae17f117c0b2\",\"moduleSequenceNumber\":482},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/06bc042c-3b97-4e6a-a3d0-6abaec179e54\",\"moduleSequenceNumber\":670}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/ea0fecf0-6a28-4382-bdb1-e443435d0e3d\",\"moduleSequenceNumber\":481},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/d1c73e11-9600-4eb4-8b32-ff13998e5ebb\",\"moduleSequenceNumber\":482},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/356727e1-da40-43d9-b52c-a350fbd790c4\",\"moduleSequenceNumber\":672}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/9c4096a2-02d8-4810-82c3-34fc338e1b92\",\"moduleSequenceNumber\":481},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/00d9366d-4260-4a02-97ca-79532f0f31c4\",\"moduleSequenceNumber\":482},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/a78ac8be-0425-4e9d-a1c2-57fbc9443de6\",\"moduleSequenceNumber\":671}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-5\",\"httpPortOpen\":false,\"ip\":\"46.3.3.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/b103ad93-a2f4-465f-b8b6-4452c081703c\",\"moduleSequenceNumber\":493},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/2e0d5d19-4cdf-4efb-9a21-0e9d99558c40\",\"moduleSequenceNumber\":494},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/462e597c-75b2-4091-82eb-f42c35db7340\",\"moduleSequenceNumber\":673}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/b7f96e2a-457d-46f7-af4d-a84868d32521\",\"moduleSequenceNumber\":493},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/494ad94a-d600-4148-b220-7d1ef0d9e9db\",\"moduleSequenceNumber\":494},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/edbc86ef-5c38-431d-9832-31bb2fdfbbfa\",\"moduleSequenceNumber\":675}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/c6509ad2-0b3b-4a77-9f6c-e07a1b255bb0\",\"moduleSequenceNumber\":493},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/a704832a-672f-41fc-b562-cbd10329177e\",\"moduleSequenceNumber\":494},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/dc31d6cd-47a9-4b45-89ae-34f813c36d70\",\"moduleSequenceNumber\":674}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-6\",\"httpPortOpen\":false,\"ip\":\"69.8.4.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/205ad65a-89f6-426b-b509-195edb64c4d5\",\"moduleSequenceNumber\":505},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/f19c956b-82a0-42fd-91af-d1a1b0fad549\",\"moduleSequenceNumber\":506},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/c891f4ef-b32b-4821-bfcc-213ca8ebd961\",\"moduleSequenceNumber\":676}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/f2303342-6a8e-4135-bf15-178f0fd732ef\",\"moduleSequenceNumber\":505},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/9f2b54f1-a883-4edc-b211-1112d1956642\",\"moduleSequenceNumber\":506},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/e5ae4ac8-cc11-42da-96c3-97fa9e1aa682\",\"moduleSequenceNumber\":678}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/a8b6b375-6831-4207-90f5-089183e97205\",\"moduleSequenceNumber\":505},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/fd88bd19-46d2-40fe-abc4-e2f33e7360a7\",\"moduleSequenceNumber\":506},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/71076f63-6c82-4386-9c35-c7215584fcac\",\"moduleSequenceNumber\":677}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-7\",\"httpPortOpen\":false,\"ip\":\"24.3.0.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/33a84595-22dc-4c13-ac5d-807d6ab0cfb6\",\"moduleSequenceNumber\":517},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/0b8c44f2-fbcb-40c0-89d3-b711f3e4e038\",\"moduleSequenceNumber\":518},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/dda26512-f9c9-4c22-9203-e2a52d89a798\",\"moduleSequenceNumber\":679}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/c3c9ac72-489b-4d85-a907-e0cdf446519f\",\"moduleSequenceNumber\":517},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/80a25a2c-de74-4675-a1b0-8fff4d06914d\",\"moduleSequenceNumber\":518},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/131ce483-3d39-4af1-aa1e-30a5bd7ff054\",\"moduleSequenceNumber\":681}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/9b00fbd6-1187-47f9-9ee7-d05cc4221aec\",\"moduleSequenceNumber\":517},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/ad9af781-e620-4d1b-b963-6d8b1f3ab600\",\"moduleSequenceNumber\":518},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/78a82686-916a-44e6-a74c-bc85da2af403\",\"moduleSequenceNumber\":680}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-8\",\"httpPortOpen\":false,\"ip\":\"76.8.2.3\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/080e61d1-782e-45d1-997c-72fa54699a1a\",\"moduleSequenceNumber\":529},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/15d2199e-c591-47e4-a1fa-caacfad03632\",\"moduleSequenceNumber\":530},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/ae839b51-dbde-4615-a194-59a57ada2e17\",\"moduleSequenceNumber\":682}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/e0291b0c-c7a8-43d4-b199-e5ee4936d486\",\"moduleSequenceNumber\":529},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/29d899e1-e3a8-446b-8930-0e6e5c721eb1\",\"moduleSequenceNumber\":530},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/6c9c23e8-a4f4-41c1-ae0a-b7b3f184a354\",\"moduleSequenceNumber\":684}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/37ceff75-a8f1-42d3-a600-451faceeda3b\",\"moduleSequenceNumber\":529},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/8832a506-84d9-46cf-8dc6-079fe7d979fe\",\"moduleSequenceNumber\":530},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/1366ca44-6b00-4147-b640-1ba8555d6d8d\",\"moduleSequenceNumber\":683}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-9\",\"httpPortOpen\":false,\"ip\":\"97.4.7.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/c81edf5d-1687-4b39-91c1-1fd95539cca5\",\"moduleSequenceNumber\":541},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/66c54e01-8b7f-48aa-b7be-62a1d87a406e\",\"moduleSequenceNumber\":542},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/b2c29bf8-b4f8-4b6f-8a4a-80301b73d37d\",\"moduleSequenceNumber\":685}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/a869a790-1701-4e8c-895a-7ccfb0b30b37\",\"moduleSequenceNumber\":541},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/5d5cb727-ea90-417c-9eb6-04e5a343b175\",\"moduleSequenceNumber\":542},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/6e8b52f2-a16e-4256-a67a-6c9670a56d12\",\"moduleSequenceNumber\":687}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/0192fd97-e8e5-43ae-aec7-1c7b7fa5b5dd\",\"moduleSequenceNumber\":541},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/929e1ab1-bf75-4dac-b312-a8fd6b3372f9\",\"moduleSequenceNumber\":542},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/211e65e6-fc14-4837-add3-86ff1eba158c\",\"moduleSequenceNumber\":686}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-10\",\"httpPortOpen\":false,\"ip\":\"1.5.0.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/4d08f9d8-ded4-4149-9f68-8504fab9a6ef\",\"moduleSequenceNumber\":553},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/894784b9-85bb-425b-ab99-0535607e8850\",\"moduleSequenceNumber\":554},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/793ec874-dbb2-4318-a43b-b0bb536b8387\",\"moduleSequenceNumber\":688}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/252a72fa-22e6-4e9e-87c4-88042d7eda25\",\"moduleSequenceNumber\":553},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/196b7d89-19bc-4e40-a71a-40d70e8fde17\",\"moduleSequenceNumber\":554},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/2dad8623-1dfa-4943-b9ff-92c809076dd3\",\"moduleSequenceNumber\":690}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/9aafefa7-e7d1-44e4-a995-841bd989e376\",\"moduleSequenceNumber\":553},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/9f71d82e-64be-4b93-9d7f-1c9b175c358c\",\"moduleSequenceNumber\":554},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/31e2fe97-23df-4db7-98ee-f5b9f6e01254\",\"moduleSequenceNumber\":689}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-11\",\"httpPortOpen\":false,\"ip\":\"62.3.1.9\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/71548d7c-829f-4f69-bc80-5e56b4fe6cf7\",\"moduleSequenceNumber\":565},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/d2f4507b-8051-4061-b7b4-56cf102a3b60\",\"moduleSequenceNumber\":566},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/68a7040a-c5de-4adc-9879-9699706832d1\",\"moduleSequenceNumber\":691}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/b7241388-dfda-4709-a286-df98182976e2\",\"moduleSequenceNumber\":565},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/27b2ba4c-d756-4a7c-8acc-46f16b5397df\",\"moduleSequenceNumber\":566},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/28ab4cf1-cdd0-4297-be9f-e6430fa5acda\",\"moduleSequenceNumber\":693}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/cef8ad06-f6fb-465f-9f99-f3b32e1f2759\",\"moduleSequenceNumber\":565},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/e0379c56-3a59-4be2-b8f1-eabd866abf2d\",\"moduleSequenceNumber\":566},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/08dc5806-0699-4561-895b-3597f7f48d1e\",\"moduleSequenceNumber\":692}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-12\",\"httpPortOpen\":false,\"ip\":\"30.6.0.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/57000e2c-a069-46cc-866a-8a07106c7651\",\"moduleSequenceNumber\":577},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/f5c0fbd3-4dda-41e0-9711-810929af8e95\",\"moduleSequenceNumber\":578},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/f26b13f0-df3e-4288-b650-45220d99807e\",\"moduleSequenceNumber\":694}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/63028b6f-3f10-4e6f-afe7-a54f83334933\",\"moduleSequenceNumber\":577},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/2df04191-76bf-4d78-8145-b36b7752c958\",\"moduleSequenceNumber\":578},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/47d95c45-8bbb-4a00-8e08-cbb4673053f5\",\"moduleSequenceNumber\":696}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/7ff16a65-d600-42ac-bb8d-64530e97ce91\",\"moduleSequenceNumber\":577},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/7a9f8084-8d61-44b9-872e-be090a1aad09\",\"moduleSequenceNumber\":578},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/8baa6978-a90e-4a0f-bcaf-9d7f85c3bbe4\",\"moduleSequenceNumber\":695}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-13\",\"httpPortOpen\":false,\"ip\":\"46.5.5.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/01fa8ddd-ddd6-4c07-aeb6-181b880bf55b\",\"moduleSequenceNumber\":589},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/e90066b2-dace-4bdc-8832-e346e263e079\",\"moduleSequenceNumber\":590},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/712f9453-61e0-4e1a-bd27-dc1875b51b8d\",\"moduleSequenceNumber\":697}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/b6f13613-586a-45f3-97fd-ad0fe98ab2ee\",\"moduleSequenceNumber\":589},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/17d44598-1c74-4c05-948d-182bc0cb7a09\",\"moduleSequenceNumber\":590},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/91977034-3604-4d5f-bfd2-27ca4525a527\",\"moduleSequenceNumber\":699}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/a5f5b804-821a-4916-87ad-524b8ccd511e\",\"moduleSequenceNumber\":589},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/c1889b60-5e90-451c-81f6-6a6c01078d57\",\"moduleSequenceNumber\":590},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/908dc439-ea85-43c5-9aba-32583a5d0393\",\"moduleSequenceNumber\":698}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-14\",\"httpPortOpen\":false,\"ip\":\"52.0.8.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/834136ad-5cce-44ba-8e41-246fdd0fa309\",\"moduleSequenceNumber\":601},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/9263aabe-4571-4fcb-91e1-970706cc7b95\",\"moduleSequenceNumber\":602},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/bde0ee05-789d-40d2-b0fd-586a9120707f\",\"moduleSequenceNumber\":700}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/868386a4-01c1-4f8e-8d79-38e91d931d9d\",\"moduleSequenceNumber\":601},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/dcb7db19-8233-439d-bbe7-93590aeaf70e\",\"moduleSequenceNumber\":602},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/0138ddd7-3b10-4d08-a733-9f70f5e01c3a\",\"moduleSequenceNumber\":702}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/d1ffd212-8e9e-420d-8589-8cd77b5e954c\",\"moduleSequenceNumber\":601},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/994037ca-b887-4261-8479-b33083a8621c\",\"moduleSequenceNumber\":602},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/4b5f8f3e-13c6-422f-82fc-eccb7466a701\",\"moduleSequenceNumber\":701}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-15\",\"httpPortOpen\":false,\"ip\":\"73.9.3.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { warn, info } from '/logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.hack(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: hack finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/882cd058-94df-4009-857c-d949fd82701b\",\"moduleSequenceNumber\":613},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/357f9131-0aee-4b2d-a878-d33a31650ed0\",\"moduleSequenceNumber\":614},{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/3f270468-a9a8-49a1-87f4-47811b4a6af0\",\"moduleSequenceNumber\":703}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.grow(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: grow finished at ${end.toString().slice(-6)}/${Math.round(prop.scriptEstimatedEnd)\\n        .toString()\\n        .slice(-6)}`);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxjQUFjLENBQUMsS0FBSyxlQUFlLENBQUMsQ0FBQztLQUM1RjtJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQ0YsRUFBRSxFQUNGLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FDdkcsSUFBSSxDQUFDLGtCQUFrQixDQUN4QjtTQUNFLFFBQVEsRUFBRTtTQUNWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUMifQ==\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/959e50d9-868c-4873-af62-794119196e0a\",\"moduleSequenceNumber\":613},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/def183aa-7e98-4d0a-896f-e13a65606ab3\",\"moduleSequenceNumber\":614},{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/5bedb4cc-7839-4d20-a493-1907485ca9c5\",\"moduleSequenceNumber\":705}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { info, warn } from 'logs/logger';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const prop = JSON.parse(ns.args[0]);\\n    const sleep = prop.scriptEstimatedEnd - prop.scriptExecTime - Date.now();\\n    if (sleep >= 0) {\\n        await ns.weaken(prop.target, { additionalMsec: sleep });\\n    }\\n    else {\\n        warn(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} was ${-sleep} ms too late.`);\\n    }\\n    const end = Date.now();\\n    info(ns, `${prop.type} ${prop.target}-${prop.iteration}: weak-${prop.weakType} finished at ${end\\n        .toString()\\n        .slice(-6)}/${Math.round(prop.scriptEstimatedEnd).toString().slice(-6)}`);\\n    if (prop.writePort > -1)\\n        ns.tryWritePort(prop.writePort, prop.target);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxJQUFJLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBbUIsQ0FBQztJQUNoRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekUsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxVQUFVLElBQUksQ0FBQyxRQUFRLFFBQVEsQ0FBQyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksQ0FDRixFQUFFLEVBQ0YsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsVUFBVSxJQUFJLENBQUMsUUFBUSxnQkFBZ0IsR0FBRztTQUNwRixRQUFRLEVBQUU7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/const/ports.js\",\"url\":\"blob:https://danielyxie.github.io/be84b550-0c9b-4a70-88c7-227744de90e9\",\"moduleSequenceNumber\":613},{\"filename\":\"/logs/logger.js\",\"url\":\"blob:https://danielyxie.github.io/f5158ebd-8586-4fcf-ad31-a517fbb4b65f\",\"moduleSequenceNumber\":614},{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/293e18ed-f7ff-4970-86f8-1ac176dfbf12\",\"moduleSequenceNumber\":704}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\nexport const HWGW_LOG_FILE = '/logs/hwgw_log.txt';\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyJ9\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwWorkerProp {\\n    target;\\n    scriptExecTime;\\n    scriptEstimatedEnd;\\n    iteration;\\n    writePort = -1;\\n    weakType;\\n    type;\\n    constructor(target, scriptExecTime, scriptEstimatedEnd, iteration, type) {\\n        this.target = target;\\n        this.scriptEstimatedEnd = scriptEstimatedEnd;\\n        this.scriptExecTime = scriptExecTime;\\n        this.iteration = iteration;\\n        this.type = type;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy13b3JrZXItcHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctd29ya2VyLXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFTO0lBQ2YsY0FBYyxDQUFTO0lBQ3ZCLGtCQUFrQixDQUFTO0lBQzNCLFNBQVMsQ0FBUztJQUNsQixTQUFTLEdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFvQjtJQUM1QixJQUFJLENBQW1CO0lBQ3ZCLFlBQ0UsTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLGtCQUEwQixFQUMxQixTQUFpQixFQUNqQixJQUFzQjtRQUV0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-worker-prop.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// PORTS CONSTANTS\\nexport const LOG_MANAGER_PORT = 1;\\nexport const HWGW_PORT_1 = 100;\\nexport const HWGW_PORT_2 = 101;\\nexport const HWGW_PORT_3 = 102;\\nexport const HWGW_PORT_4 = 103;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyJ9\",\"filename\":\"/const/ports.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LOG_MANAGER_PORT } from 'const/ports';\\nexport class Log {\\n    time;\\n    log;\\n    logType;\\n    constructor(time, logType, log) {\\n        this.log = log;\\n        this.time = time;\\n        this.logType = logType;\\n    }\\n}\\nexport function trace(ns, data) {\\n    const log = new Log(Date.now(), 'TRACE', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function info(ns, data) {\\n    const log = new Log(Date.now(), 'INFO', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function warn(ns, data) {\\n    const log = new Log(Date.now(), 'WARN', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\nexport function error(ns, data) {\\n    const log = new Log(Date.now(), 'ERROR', data);\\n    ns.writePort(LOG_MANAGER_PORT, JSON.stringify(log));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ3MvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxNQUFNLE9BQU8sR0FBRztJQUNkLElBQUksQ0FBUztJQUNiLEdBQUcsQ0FBUztJQUNaLE9BQU8sQ0FBc0M7SUFDN0MsWUFBWSxJQUFZLEVBQUUsT0FBNEMsRUFBRSxHQUFXO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRCxNQUFNLFVBQVUsSUFBSSxDQUFDLEVBQU0sRUFBRSxJQUFZO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU0sVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFNLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMifQ==\",\"filename\":\"/logs/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":168.2112,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":216.0856,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":201.4418,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":187.5083,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":406.9178,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":232.1268,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":4942805.608073334,\"favor\":200.0002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":215.0677,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1072637.3964665688,\"favor\":0.012,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":245.3781,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":127.2319,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":5500993.357460762,\"favor\":0.012,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":19.7818,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.012,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":1233.7736,\"isBanned\":false,\"isMember\":true,\"name\":\"Illuminati\",\"playerReputation\":2689585001666.7886}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":3326.7545,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":1060670323558.0923}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":1233.7735,\"isBanned\":false,\"isMember\":true,\"name\":\"The Covenant\",\"playerReputation\":1.0000000027075037e+21}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":675.1759,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":1572744490488.583}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":885.0141,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":1999032460630.8408}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":1117.5009,\"isBanned\":false,\"isMember\":true,\"name\":\"Blade Industries\",\"playerReputation\":2471331241581.503}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":885.0155,\"isBanned\":false,\"isMember\":true,\"name\":\"NWO\",\"playerReputation\":1999035304741.9392}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":885.0179,\"isBanned\":false,\"isMember\":true,\"name\":\"Clarke Incorporated\",\"playerReputation\":1999038441821.4553}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":307.8498,\"isBanned\":false,\"isMember\":true,\"name\":\"Four Sigma\",\"playerReputation\":826517881684.2507}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":1233.7732,\"isBanned\":false,\"isMember\":true,\"name\":\"KuaiGong International\",\"playerReputation\":2707536987924.146}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":883.9428,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":883.9428,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":918.9456,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":884.2437,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":883.9428,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":883.9428,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":883.9428,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":885.3179,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":1999666555246.2725}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":883.9428,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":1350.0498,\"isBanned\":false,\"isMember\":true,\"name\":\"Speakers for the Dead\",\"playerReputation\":2942078982464.1006}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":1233.7731,\"isBanned\":false,\"isMember\":true,\"name\":\"The Dark Army\",\"playerReputation\":2707014914590.063}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":1233.7736,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":2707343798709.595}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":2861.6475,\"isBanned\":false,\"isMember\":true,\"name\":\"Silhouette\",\"playerReputation\":6012103063546.744}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":885.053,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":1998448486138.5637}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":885.326,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":1999662590259.476}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":884.9428,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":137312919568.05832}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":885.0486,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":1998577677243.752}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":918.9456,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":36082.81114576147,\"lastPrice\":36035.197566099814,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":false,\"otlkMag\":17.866672702983593,\"otlkMagForecast\":30.245134294805656,\"cap\":405859855,\"spreadPerc\":0.2,\"shareTxForMovement\":85487,\"shareTxUntilMovement\":85487,\"totalShares\":125300000,\"maxShares\":25100000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":25268.070344590724,\"lastPrice\":25301.45723744851,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":false,\"otlkMag\":18.009705634625202,\"otlkMagForecast\":30.690248468446175,\"cap\":92692290,\"spreadPerc\":0.2,\"shareTxForMovement\":58432,\"shareTxUntilMovement\":58432,\"totalShares\":98900000,\"maxShares\":19800000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":34722.15241789601,\"lastPrice\":34808.17487381261,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":12.41268133717561,\"otlkMagForecast\":37.638313351248215,\"cap\":234118894,\"spreadPerc\":0.4,\"shareTxForMovement\":61961,\"shareTxUntilMovement\":61961,\"totalShares\":67000000,\"maxShares\":13400000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":31664.74937997695,\"lastPrice\":31588.577116869375,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":11.691514595251373,\"otlkMagForecast\":61.258342859908474,\"cap\":423861439,\"spreadPerc\":0.2,\"shareTxForMovement\":74831,\"shareTxUntilMovement\":74831,\"totalShares\":64600000,\"maxShares\":12900000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":36867.25793070419,\"lastPrice\":36952.50565852776,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":9.769945017458008,\"otlkMagForecast\":37.706243882465586,\"cap\":754599399,\"spreadPerc\":0.3,\"shareTxForMovement\":67679,\"shareTxUntilMovement\":67679,\"totalShares\":55700000,\"maxShares\":11100000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":84902.00198091514,\"lastPrice\":84594.61932381942,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.1,\"b\":false,\"otlkMag\":14.827573193843214,\"otlkMagForecast\":34.294367478302924,\"cap\":178040996,\"spreadPerc\":0.4,\"shareTxForMovement\":62989,\"shareTxUntilMovement\":62989,\"totalShares\":26500000,\"maxShares\":5300000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":35741.493084816015,\"lastPrice\":35832.40218329718,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":35.06618475207799,\"otlkMagForecast\":19.06007418815583,\"cap\":219396277,\"spreadPerc\":0.4,\"shareTxForMovement\":30097,\"shareTxUntilMovement\":30097,\"totalShares\":69700000,\"maxShares\":13900000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":27416.466344941142,\"lastPrice\":27304.625139694763,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":true,\"otlkMag\":14.810341513545687,\"otlkMagForecast\":63.878136876824236,\"cap\":64109498,\"spreadPerc\":0.8,\"shareTxForMovement\":52273,\"shareTxUntilMovement\":52273,\"totalShares\":67300000,\"maxShares\":13500000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":19758.06031625081,\"lastPrice\":19810.92592781383,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":false,\"otlkMag\":5.844526907976221,\"otlkMagForecast\":43.58048287390931,\"cap\":344610948,\"spreadPerc\":0.5,\"shareTxForMovement\":100824,\"shareTxUntilMovement\":100824,\"totalShares\":55700000,\"maxShares\":11100000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":14475.961926784175,\"lastPrice\":14507.999983785778,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":14.148489241577401,\"otlkMagForecast\":62.36551982513548,\"cap\":129448309,\"spreadPerc\":0.5,\"shareTxForMovement\":83573,\"shareTxUntilMovement\":83573,\"totalShares\":103800000,\"maxShares\":20800000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":22042.04521245403,\"lastPrice\":22084.27547848409,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":8.45269420128464,\"otlkMagForecast\":58.63901664277208,\"cap\":257341542,\"spreadPerc\":0.4,\"shareTxForMovement\":42235,\"shareTxUntilMovement\":42235,\"totalShares\":49200000,\"maxShares\":9800000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":7917.236974593201,\"lastPrice\":7935.80543636006,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":6.507995109914213,\"otlkMagForecast\":55.67862673486759,\"cap\":318478728,\"spreadPerc\":1,\"shareTxForMovement\":57127,\"shareTxUntilMovement\":57127,\"totalShares\":78000000,\"maxShares\":15600000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":31491.377524434272,\"lastPrice\":31428.050190038546,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":7.383991536457718,\"otlkMagForecast\":57.36666259706911,\"cap\":176239367,\"spreadPerc\":0.7,\"shareTxForMovement\":95996,\"shareTxUntilMovement\":95996,\"totalShares\":37600000,\"maxShares\":7500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":17283.111899169304,\"lastPrice\":17315.653636279992,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":10.414844969509641,\"otlkMagForecast\":39.77826647213874,\"cap\":306974859,\"spreadPerc\":0.3,\"shareTxForMovement\":93501,\"shareTxUntilMovement\":93501,\"totalShares\":42700000,\"maxShares\":8500000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":7544.638427416466,\"lastPrice\":7528.473854375757,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":5.681210689345015,\"otlkMagForecast\":44.705067247052526,\"cap\":261792262,\"spreadPerc\":0.9,\"shareTxForMovement\":107221,\"shareTxUntilMovement\":107221,\"totalShares\":57700000,\"maxShares\":11500000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":8208.757613769543,\"lastPrice\":8226.925155634632,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":5.272049859474315,\"otlkMagForecast\":44.38906567168307,\"cap\":141910742,\"spreadPerc\":0.8,\"shareTxForMovement\":85303,\"shareTxUntilMovement\":85303,\"totalShares\":73700000,\"maxShares\":14700000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":21891.907638362118,\"lastPrice\":21944.697485223107,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":9.504218198601988,\"otlkMagForecast\":42.117891567925746,\"cap\":364028733,\"spreadPerc\":0.5,\"shareTxForMovement\":73655,\"shareTxUntilMovement\":73655,\"totalShares\":34400000,\"maxShares\":6900000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":14821.816658660144,\"lastPrice\":14791.52322345864,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":11.414268791694026,\"otlkMagForecast\":39.02218586176816,\"cap\":50832891,\"spreadPerc\":0.9,\"shareTxForMovement\":51109,\"shareTxUntilMovement\":51109,\"totalShares\":29300000,\"maxShares\":5900000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":12098.065923947823,\"lastPrice\":12129.636824690533,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":6.330820127642175,\"otlkMagForecast\":45.97314900332544,\"cap\":394209180,\"spreadPerc\":0.4,\"shareTxForMovement\":101767,\"shareTxUntilMovement\":101767,\"totalShares\":32800000,\"maxShares\":6600000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":9304.765408072779,\"lastPrice\":9227.64746271691,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.53,\"b\":true,\"otlkMag\":3.6933094357770715,\"otlkMagForecast\":44.82974671478206,\"cap\":48900512,\"spreadPerc\":0.8,\"shareTxForMovement\":46160,\"shareTxUntilMovement\":46160,\"totalShares\":57500000,\"maxShares\":11500000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":3212.5996325685383,\"lastPrice\":3225.864733329203,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":false,\"otlkMag\":5.533368730373109,\"otlkMagForecast\":45.3006694211931,\"cap\":60437294,\"spreadPerc\":1,\"shareTxForMovement\":50367,\"shareTxUntilMovement\":50367,\"totalShares\":53000000,\"maxShares\":10600000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":5986.182778781637,\"lastPrice\":5972.766613729375,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":5.919003770711625,\"otlkMagForecast\":52.3756720475604,\"cap\":147155649,\"spreadPerc\":0.3,\"shareTxForMovement\":102445,\"shareTxUntilMovement\":102445,\"totalShares\":30400000,\"maxShares\":6100000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":1865.020207726358,\"lastPrice\":1852.9621679159995,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.97,\"b\":true,\"otlkMag\":9.833327286770498,\"otlkMagForecast\":61.44760668397301,\"cap\":68465033,\"spreadPerc\":0.6,\"shareTxForMovement\":67801,\"shareTxUntilMovement\":67801,\"totalShares\":32300000,\"maxShares\":6500000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":4149.338313109646,\"lastPrice\":4128.201644638903,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.55,\"b\":true,\"otlkMag\":6.522093133684296,\"otlkMagForecast\":56.87505089642695,\"cap\":28340403,\"spreadPerc\":1,\"shareTxForMovement\":69973,\"shareTxUntilMovement\":69973,\"totalShares\":31800000,\"maxShares\":6400000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1679.058378794543,\"lastPrice\":1674.081431705785,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.9,\"b\":true,\"otlkMag\":2.878351386100775,\"otlkMagForecast\":55.15036893725706,\"cap\":58743026,\"spreadPerc\":0.7,\"shareTxForMovement\":81215,\"shareTxUntilMovement\":81215,\"totalShares\":49500000,\"maxShares\":9900000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":8242.233271175543,\"lastPrice\":8305.942844125833,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.34,\"b\":false,\"otlkMag\":6.580603178703139,\"otlkMagForecast\":44.89833649412774,\"cap\":95646320,\"spreadPerc\":1.7,\"shareTxForMovement\":24721,\"shareTxUntilMovement\":24721,\"totalShares\":12400000,\"maxShares\":2500000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":5911.16766445401,\"lastPrice\":5890.5421368310535,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":false,\"otlkMag\":2.4079862975769015,\"otlkMagForecast\":46.9180539464848,\"cap\":48963906,\"spreadPerc\":0.8,\"shareTxForMovement\":42881,\"shareTxUntilMovement\":42881,\"totalShares\":7600000,\"maxShares\":1500000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":5866.719615213183,\"lastPrice\":5851.2569947832035,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":1.3074444643443393,\"otlkMagForecast\":47.14854411584398,\"cap\":97253594,\"spreadPerc\":0.8,\"shareTxForMovement\":73778,\"shareTxUntilMovement\":73778,\"totalShares\":10600000,\"maxShares\":2100000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":10285.366630243918,\"lastPrice\":10369.285700798167,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.47,\"b\":true,\"otlkMag\":2.680606954446605,\"otlkMagForecast\":56.11925182307885,\"cap\":4547307,\"spreadPerc\":0.6,\"shareTxForMovement\":30814,\"shareTxUntilMovement\":30814,\"totalShares\":8600000,\"maxShares\":1700000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":468.6622236313845,\"lastPrice\":472.85762170519376,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.71,\"b\":true,\"otlkMag\":0.9341598043176776,\"otlkMagForecast\":48.59152986838794,\"cap\":12518187,\"spreadPerc\":1.3,\"shareTxForMovement\":37545,\"shareTxUntilMovement\":37545,\"totalShares\":63500000,\"maxShares\":12700000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":840.09872745024,\"lastPrice\":844.7330977564014,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.67,\"b\":false,\"otlkMag\":7.7251779054657845,\"otlkMagForecast\":41.468523236862055,\"cap\":4488203,\"spreadPerc\":1,\"shareTxForMovement\":26981,\"shareTxUntilMovement\":26981,\"totalShares\":208800000,\"maxShares\":41800000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":22268.57302737924,\"lastPrice\":22210.612602109282,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":9.282727679907225,\"otlkMagForecast\":41.06396846348562,\"cap\":21962313,\"spreadPerc\":0.8,\"shareTxForMovement\":200759,\"shareTxUntilMovement\":200759,\"totalShares\":23800000,\"maxShares\":4800000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":10030.148093373453,\"lastPrice\":10053.009364324334,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":9.724467564267608,\"otlkMagForecast\":60.90662738882128,\"cap\":334793622,\"spreadPerc\":0.7,\"shareTxForMovement\":97502,\"shareTxUntilMovement\":97502,\"totalShares\":23800000,\"maxShares\":4800000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":378109,\"lastUpdate\":1685043644088,\"ticksUntilCycle\":7}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"dd-MM-yyyy hh:mm:ss\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":25,\"MaxLogCapacity\":50,\"MaxPortCapacity\":65,\"MaxTerminalCapacity\":200,\"RemoteFileApiPort\":52466,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-22,\"y\":20,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"one-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":true,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"30","AllGangsSave":"","LastExportBonus":"1685043644270","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"storedCycles\":0}}"}}