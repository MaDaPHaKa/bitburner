{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":23,\"max\":23},\"skills\":{\"hacking\":262,\"strength\":131,\"defense\":131,\"dexterity\":131,\"agility\":131,\"charisma\":200,\"intelligence\":0},\"exp\":{\"hacking\":1320726.7716702367,\"strength\":11576.713973884149,\"defense\":11576.713973884149,\"dexterity\":11576.713973884149,\"agility\":11576.713973884149,\"charisma\":62920.88769199244,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.305729060096215,\"hacking_speed\":1.305729060096215,\"hacking_money\":1.305729060096215,\"hacking_grow\":1.305729060096215,\"hacking\":1.305729060096215,\"strength\":1.305729060096215,\"defense\":1.305729060096215,\"dexterity\":1.305729060096215,\"agility\":1.305729060096215,\"charisma\":1.305729060096215,\"hacking_exp\":1.305729060096215,\"strength_exp\":1.305729060096215,\"defense_exp\":1.305729060096215,\"dexterity_exp\":1.305729060096215,\"agility_exp\":1.305729060096215,\"charisma_exp\":1.305729060096215,\"company_rep\":1.305729060096215,\"faction_rep\":1.305729060096215,\"crime_money\":1.305729060096215,\"crime_success\":1.305729060096215,\"hacknet_node_money\":1.305729060096215,\"hacknet_node_purchase_cost\":0.7058125825369086,\"hacknet_node_ram_cost\":0.7058125825369086,\"hacknet_node_core_cost\":0.7058125825369086,\"hacknet_node_level_cost\":0.7058125825369086,\"work_money\":1.305729060096215,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":2}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":3,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Sto Cazzo Inc.\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"sciResearch\":87.95713041006374,\"researched\":{},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"products\":{},\"awareness\":3.0300000000000002,\"popularity\":0.9959000000000027,\"startingCost\":40000000000,\"prodMult\":52.520344838191775,\"state\":\"PURCHASE\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":92.74577760692875,\"avgMor\":100,\"avgInt\":74.8,\"avgCha\":74,\"totalExp\":705.3590000000022,\"avgCre\":79.6,\"avgEff\":68.5,\"totalEmployees\":9,\"totalSalary\":10132.377000000006,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":251.40525800305386,\"Engineer\":276.75324580277965,\"Business\":152.00162169974766,\"Management\":308.48842920456644,\"Research & Development\":1548.6623992252005,\"Training\":0,\"Unassigned\":0,\"total\":2537.310953935348},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0},\"loc\":\"Aevum\",\"size\":9}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":98.1557451756439,\"avgHap\":95.74333777700463,\"avgMor\":100,\"avgInt\":81.4,\"avgCha\":70.7,\"totalExp\":764.3320000000022,\"avgCre\":72.8,\"avgEff\":82.1,\"totalEmployees\":9,\"totalSalary\":10581.996000000008,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":276.4987670539129,\"Engineer\":312.0738780611283,\"Business\":156.35510537114828,\"Management\":320.5028322274018,\"Research & Development\":1649.6854798197198,\"Training\":0,\"Unassigned\":0,\"total\":2715.1160625333114},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0},\"loc\":\"Chongqing\",\"size\":9}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":100,\"avgHap\":100,\"avgMor\":97.01303144345546,\"avgInt\":69,\"avgCha\":76.9,\"totalExp\":720.4400000000023,\"avgCre\":76.3,\"avgEff\":73,\"totalEmployees\":9,\"totalSalary\":10131.720000000007,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":264.2022716499063,\"Engineer\":290.74934874312225,\"Business\":160.48326830405054,\"Management\":333.9585217790086,\"Research & Development\":1569.6665370648238,\"Training\":0,\"Unassigned\":0,\"total\":2619.0599475409117},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0},\"loc\":\"Sector-12\",\"size\":9}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":99.59445470112031,\"avgHap\":100,\"avgMor\":100,\"avgInt\":82.1,\"avgCha\":77.5,\"totalExp\":584.3095000000021,\"avgCre\":73.9,\"avgEff\":73.9,\"totalEmployees\":9,\"totalSalary\":10052.728500000007,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":265.2750864704323,\"Engineer\":292.69308020300883,\"Business\":164.2010178190952,\"Management\":329.39399640701356,\"Research & Development\":1656.9460819112162,\"Training\":0,\"Unassigned\":0,\"total\":2708.509262810766},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0},\"loc\":\"New Tokyo\",\"size\":9}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":98.66715173100927,\"avgHap\":97.84175362593909,\"avgMor\":93.47563813155212,\"avgInt\":74.4,\"avgCha\":74.8,\"totalExp\":685.288500000002,\"avgCre\":76.5,\"avgEff\":77.1,\"totalEmployees\":9,\"totalSalary\":10231.465500000006,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":250.05930275134702,\"Engineer\":275.22122653128935,\"Business\":147.5804285747096,\"Management\":305.71884407333766,\"Research & Development\":1502.0068931526798,\"Training\":0,\"Unassigned\":0,\"total\":2480.5866950833633},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0},\"loc\":\"Ishima\",\"size\":9}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"avgEne\":96.14426057623169,\"avgHap\":97.44233970208556,\"avgMor\":100,\"avgInt\":76.8,\"avgCha\":67.4,\"totalExp\":642.2735000000021,\"avgCre\":83.1,\"avgEff\":71.9,\"totalEmployees\":9,\"totalSalary\":10005.220500000005,\"autoCoffee\":false,\"autoParty\":false,\"coffeePending\":false,\"partyMult\":1,\"employeeProd\":{\"Operations\":253.78175037602472,\"Engineer\":275.03504858509683,\"Business\":143.7373509080083,\"Management\":293.66916836370945,\"Research & Development\":1584.1747569388901,\"Training\":0,\"Unassigned\":0,\"total\":2550.3980751717295},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":5,\"Training\":0,\"Unassigned\":0},\"loc\":\"Volhaven\",\"size\":9}}},\"numAdVerts\":1,\"type\":\"Agriculture\",\"name\":\"AllNatural I Swear ;)\",\"lastCycleRevenue\":3139450.79063009,\"lastCycleExpenses\":689450.0060011845,\"thisCycleRevenue\":0,\"thisCycleExpenses\":6905783.212193915,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":169.43405253513458,\"smartSupplyEnabled\":true,\"smartSupplyStore\":64.78017511711526,\"loc\":\"Aevum\",\"size\":2000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":323.90087558557633,\"qlt\":0,\"dmd\":76.02724385602555,\"dmdR\":[65,85],\"cmp\":49.42440595769783,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":32.39008755855763,\"sll\":0,\"prd\":-32.353791044507695,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1511.7772012678486,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":323.90087558557633,\"qlt\":0,\"dmd\":88.58961947552592,\"dmdR\":[80,99],\"cmp\":77.01237632592844,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":32.39008755855763,\"sll\":0,\"prd\":-32.353791044507695,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2019.8387975836802,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":12.24207266828691,\"dmd\":83.14294791876468,\"dmdR\":[70,90],\"cmp\":55.347885020622954,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":64.70758208901539,\"prd\":64.70758208901539,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5055.147712151341,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":692.9577163641565,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":12.24207266828691,\"dmd\":63.0217438186235,\"dmdR\":[20,90],\"cmp\":52.56774534926481,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":64.70758208901539,\"prd\":64.70758208901539,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2886.586210824501,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":564.6365983083609,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":125,\"qlt\":0,\"dmd\":83.60509146509087,\"dmdR\":[80,90],\"cmp\":80.88905228501689,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7887.10058701322,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":95.33708415757252,\"dmdR\":[80,99],\"cmp\":93.38070100786547,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75701.66109937242,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":75,\"qlt\":0,\"dmd\":87.58168922334231,\"dmdR\":[80,99],\"cmp\":87.79498520289573,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15180.387856443265,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":27000,\"qlt\":0,\"dmd\":49.31699843871329,\"dmdR\":[5,99],\"cmp\":60.79641025817848,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":76237.62679069511,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":169.95050701499403,\"smartSupplyEnabled\":true,\"smartSupplyStore\":66.50169004998011,\"loc\":\"Chongqing\",\"size\":2000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":332.50845024990053,\"qlt\":0,\"dmd\":73.46984617300333,\"dmdR\":[65,85],\"cmp\":50.57961301345777,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":33.250845024990056,\"sll\":0,\"prd\":-33.20285903062132,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1496.8157853292275,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":332.50845024990053,\"qlt\":0,\"dmd\":91.03228521477766,\"dmdR\":[80,99],\"cmp\":79.40946007732009,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":33.250845024990056,\"sll\":0,\"prd\":-33.20285903062132,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1989.5728925045646,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":12.635439308805546,\"dmd\":71.85468068375692,\"dmdR\":[70,90],\"cmp\":57.113160714299305,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":66.40571806124264,\"prd\":66.40571806124264,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4905.577448861163,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":608.2274282317385,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":12.635439308805546,\"dmd\":76.74311805641034,\"dmdR\":[20,90],\"cmp\":54.130987484719235,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":66.40571806124264,\"prd\":66.40571806124264,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3046.1599662761373,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":695.8620968214923,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":125,\"qlt\":0,\"dmd\":82.89772246080663,\"dmdR\":[80,90],\"cmp\":79.5792734621111,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7760.8787993981905,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":92.15166979277973,\"dmdR\":[80,99],\"cmp\":88.81583319843843,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75072.35982947127,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":75,\"qlt\":0,\"dmd\":82.84846482754419,\"dmdR\":[80,99],\"cmp\":84.79384063429725,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14154.884157690156,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":27000,\"qlt\":0,\"dmd\":42.2836367293089,\"dmdR\":[5,99],\"cmp\":48.22419931879661,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":78231.70517804398,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":169.87454176307935,\"smartSupplyEnabled\":true,\"smartSupplyStore\":66.24847254359786,\"loc\":\"Sector-12\",\"size\":2000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":331.2423627179893,\"qlt\":0,\"dmd\":73.34219257012752,\"dmdR\":[65,85],\"cmp\":51.045896446021096,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":33.12423627179893,\"sll\":0,\"prd\":-33.100163609086636,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1491.608644712538,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":331.2423627179893,\"qlt\":0,\"dmd\":86.12189130120454,\"dmdR\":[80,99],\"cmp\":79.83338914912723,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":33.12423627179893,\"sll\":0,\"prd\":-33.100163609086636,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1973.2694972317402,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":12.41463386925521,\"dmd\":70.91015950365123,\"dmdR\":[70,90],\"cmp\":55.42174419121719,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":66.20032721817327,\"prd\":66.20032721817327,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4919.19441040221,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":611.5174902879212,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":12.41463386925521,\"dmd\":66.04117975373545,\"dmdR\":[20,90],\"cmp\":47.35358461384624,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":66.20032721817327,\"prd\":66.20032721817327,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3092.1729577597825,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":677.3747886808674,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":125,\"qlt\":0,\"dmd\":83.9683474968123,\"dmdR\":[80,90],\"cmp\":76.67542981612712,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8124.097564782271,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":90.0874880523878,\"dmdR\":[80,99],\"cmp\":97.13266235587898,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":73251.30058683775,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":75,\"qlt\":0,\"dmd\":81.89403200887173,\"dmdR\":[80,99],\"cmp\":88.83133578875119,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14456.595784709221,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":27000,\"qlt\":0,\"dmd\":54.17167660059808,\"dmdR\":[5,99],\"cmp\":53.61930257591159,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":84339.30628342893,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":169.85293067039532,\"smartSupplyEnabled\":true,\"smartSupplyStore\":66.17643556798437,\"loc\":\"New Tokyo\",\"size\":2000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":330.88217783992184,\"qlt\":0,\"dmd\":75.46933359968709,\"dmdR\":[65,85],\"cmp\":50.526435353250434,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":33.088217783992185,\"sll\":0,\"prd\":-33.06429104598291,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1491.0922577030367,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":330.88217783992184,\"qlt\":0,\"dmd\":92.24191849040652,\"dmdR\":[80,99],\"cmp\":81.0087698172084,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":33.088217783992185,\"sll\":0,\"prd\":-33.06429104598291,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2005.1530114424747,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":12.444829150488937,\"dmd\":78.12816487590197,\"dmdR\":[70,90],\"cmp\":54.12492109401639,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":66.12858209196582,\"prd\":66.12858209196582,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5272.719670416207,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":703.8129433860511,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":12.444829150488937,\"dmd\":67.03365470591125,\"dmdR\":[20,90],\"cmp\":49.252701711685305,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":66.12858209196582,\"prd\":66.12858209196582,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2976.044383395032,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":664.4513354232506,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":125,\"qlt\":0,\"dmd\":81.39152776413293,\"dmdR\":[80,90],\"cmp\":76.75114942329961,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7880.678700370511,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":91.64575253444681,\"dmdR\":[80,99],\"cmp\":94.52657706948679,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":71642.94085664424,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":75,\"qlt\":0,\"dmd\":93.86111119400009,\"dmdR\":[80,99],\"cmp\":96.51544909974808,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14133.997254299942,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":27000,\"qlt\":0,\"dmd\":51.00769816792995,\"dmdR\":[5,99],\"cmp\":46.63095710736342,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":79271.56617310787,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":169.35760546171213,\"smartSupplyEnabled\":true,\"smartSupplyStore\":64.52535153904041,\"loc\":\"Ishima\",\"size\":2000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":322.62675769520206,\"qlt\":0,\"dmd\":73.70893511559132,\"dmdR\":[65,85],\"cmp\":50.23129228439349,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":32.26267576952021,\"sll\":0,\"prd\":-32.192775877475995,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1493.637523683525,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":322.62675769520206,\"qlt\":0,\"dmd\":91.62545422380263,\"dmdR\":[80,99],\"cmp\":81.93975388199367,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":32.26267576952021,\"sll\":0,\"prd\":-32.192775877475995,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1977.0293077595284,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":12.247782730668389,\"dmd\":89.89784606869941,\"dmdR\":[70,90],\"cmp\":63.013288043785266,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":64.38555175495199,\"prd\":64.38555175495199,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4969.914388512101,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":629.4023136520793,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":12.247782730668389,\"dmd\":71.64019145940654,\"dmdR\":[20,90],\"cmp\":55.31131863447465,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":64.38555175495199,\"prd\":64.38555175495199,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2934.6971484263854,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":608.7714705452032,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":125,\"qlt\":0,\"dmd\":86.23341331257943,\"dmdR\":[80,90],\"cmp\":82.16276568499335,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8004.585043214908,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":94.32838187996256,\"dmdR\":[80,99],\"cmp\":97.30263769486278,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74402.7887326694,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":75,\"qlt\":0,\"dmd\":89.03550461185525,\"dmdR\":[80,99],\"cmp\":97.0044003769349,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14208.585423172479,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":27000,\"qlt\":0,\"dmd\":53.05185513306294,\"dmdR\":[5,99],\"cmp\":48.303226636880375,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":77469.65710382139,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":169.30783210426233,\"smartSupplyEnabled\":true,\"smartSupplyStore\":64.35944034754108,\"loc\":\"Volhaven\",\"size\":2000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"qty\":321.7972017377054,\"qlt\":0,\"dmd\":73.98377143334518,\"dmdR\":[65,85],\"cmp\":49.594270629475,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":32.17972017377054,\"sll\":0,\"prd\":-32.133264142630125,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1497.3991246898495,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Water\"}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"qty\":321.7972017377054,\"qlt\":0,\"dmd\":91.56158548809285,\"dmdR\":[80,99],\"cmp\":81.63934101567112,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":32.17972017377054,\"sll\":0,\"prd\":-32.133264142630125,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1974.386304493309,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Energy\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":12.260191158541465,\"dmd\":79.36220388760363,\"dmdR\":[70,90],\"cmp\":80.67032226335135,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":64.26652828526025,\"prd\":64.26652828526025,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4898.246034307176,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":278.1758034577602,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":12.260191158541465,\"dmd\":74.05226696122362,\"dmdR\":[20,90],\"cmp\":48.759284201414715,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":64.26652828526025,\"prd\":64.26652828526025,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3117.604787870371,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":703.1865444074303,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"qty\":125,\"qlt\":0,\"dmd\":89.07149514882373,\"dmdR\":[80,90],\"cmp\":77.27660924117134,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8017.889001636159,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"qty\":0,\"qlt\":0,\"dmd\":85.07813939803249,\"dmdR\":[80,99],\"cmp\":85.76325992447568,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74174.1151952947,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"qty\":75,\"qlt\":0,\"dmd\":98.40294116576976,\"dmdR\":[80,99],\"cmp\":86.77220995671829,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15327.93335473223,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"qty\":27000,\"qlt\":0,\"dmd\":39.61862613074469,\"dmdR\":[5,99],\"cmp\":63.35891765592158,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75047.53153759154,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0,\"name\":\"Real Estate\"}}},\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AI Cores\":true,\"Real Estate\":true}}}},\"makesProducts\":false,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMats\":[\"Plants\",\"Food\"]}}],\"funds\":53559939263.93215,\"revenue\":3139450.79063009,\"expenses\":689450.0060011845,\"fundingRound\":1,\"public\":false,\"totalShares\":1500000000,\"numShares\":900000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendRate\":0,\"dividendTax\":0.15,\"issuedShares\":0,\"sharePrice\":0.038024303591505604,\"storedCycles\":0,\"cycleValuation\":879554000000,\"valuationsList\":[873718000000,875560000000,876975000000,878844000000,879554000000],\"valuation\":876930200000,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":2}},\"unlockUpgrades\":[0,1,0,0,0,0,0,1,1],\"upgrades\":[10,10,0,0,2,2,2,2,0,0],\"upgradeMultipliers\":[1.3,2,1,1,1.2,1.2,1.2,1.2,1,1]}},\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Sector-12\",\"Tian Di Hui\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":20,\"moneyGainRatePerSecond\":12.459390044640768,\"onlineTimeSeconds\":232752.20000085366,\"ram\":8,\"totalMoneyGenerated\":2896313.2095664307,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":20,\"moneyGainRatePerSecond\":12.459390044640768,\"onlineTimeSeconds\":230594.20000085354,\"ram\":8,\"totalMoneyGenerated\":2872963.8524760026,\"name\":\"hacknet-node-1\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{\"Joe's Guns\":\"Employee\",\"Carmichael Security\":\"Software Consultant\",\"National Security Agency\":\"Software Engineering Intern\"},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":18671723.329177227,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":11095345.628918184,\"hacknet\":5769277.061998662,\"hacknet_expenses\":-450621.8639050075,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":18670682.32917723,\"work\":25056681.502122317,\"servers\":-22000000,\"other\":-800000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":11095345.628918184,\"hacknet\":5769277.061998662,\"hacknet_expenses\":-450621.8639050075,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":18670682.32917723,\"work\":25056681.502122317,\"servers\":-22000000,\"other\":-800000,\"augmentations\":0}},\"playtimeSinceLastAug\":322108600,\"playtimeSinceLastBitnode\":322108600,\"purchasedServers\":[\"srv-1\",\"srv-2\",\"srv-3\",\"srv-4\",\"srv-5\",\"srv-6\",\"srv-7\",\"srv-8\",\"srv-9\",\"srv-10\",\"srv-11\",\"srv-12\",\"srv-13\",\"srv-14\",\"srv-15\",\"srv-16\",\"srv-17\",\"srv-18\",\"srv-19\",\"srv-20\",\"srv-21\",\"srv-22\",\"srv-23\",\"srv-24\",\"srv-25\"],\"scriptProdSinceLastAug\":6974117,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":2,\"n\":12}],\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1680935638091},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1680935758091},{\"ID\":\"FROZE\",\"unlockedOn\":1680942143690},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1680950846262},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1680965522092},{\"ID\":\"WORKOUT\",\"unlockedOn\":1680971462079},{\"ID\":\"TOR\",\"unlockedOn\":1680973022082},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1681022277906},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1681024917915},{\"ID\":\"TRAVEL\",\"unlockedOn\":1681026177914},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1681027137905},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1681027197905},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1681057981282},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1681149292392},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1681157823985},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1681165143971},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1681241119121},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1681313453401},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1681319093406},{\"ID\":\"NITESEC\",\"unlockedOn\":1681414366741},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1681482482790},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1681497442767},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1681547463960},{\"ID\":\"DONATION\",\"unlockedOn\":1681583940595},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1681592065302},{\"ID\":\"SF1.1\",\"unlockedOn\":1681636847839},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1682029996642},{\"ID\":\"FAST_BN\",\"unlockedOn\":1682189839395},{\"ID\":\"SF12.1\",\"unlockedOn\":1682671134645},{\"ID\":\"CORPORATION\",\"unlockedOn\":1683360752965}],\"terminalCommandHistory\":[\"clear\",\"run misc/buy-and-upgrade-servers.js\",\"run misc/gestione-server.js\",\"run misc/buy-and-upgrade-servers.js\",\"run misc/gestione-server.js\",\"run misc/farm-server-buy.js\",\"run misc/xp-farmer.js\",\"run misc/farm-server-buy.js\",\"run misc/xp-farmer.js\",\"run misc/farm-server-buy.js\",\"run misc/xp-farmer.js\",\"scan-analyze 10\",\"clear\",\"home\",\"clear\",\"scan-analyze 10\",\"backdoor\",\"run beginner-startup.js\",\"clear\",\"run managers/beginner-manager.js\",\"clear\",\"run beginner-startup.js\",\"run misc/gestione-server.js\",\"run misc/buy-and-upgrade-servers.js\",\"run beginner-startup.js\",\"clear\",\"run misc/buy-and-upgrade-servers.js\",\"run beginner-startup.js\",\"run misc/buy-and-upgrade-servers.js\",\"run misc/gestione-server.js\",\"run misc/buy-and-upgrade-servers.js\",\"run beginner-startup.js\",\"run misc/buy-and-upgrade-servers.js\",\"run beginner-startup.js\",\"run kill-servers-script.js\",\"run beginner-startup.js\",\"run misc/buy-and-upgrade-servers.js\",\"run beginner-startup.js\",\"run misc/gestione-server.js\",\"run beginner-startup.js\",\"run kill-all-script.js\",\"clear\",\"run startupV2.js\",\"clear\",\"run kill-all-script.js\",\"run startupV2.js\",\"clear\",\"ls\",\"cat corporation-management-handbook.lit\",\"clear\"],\"lastUpdate\":1683363450115,\"lastSave\":1683363447814,\"totalPlaytime\":2428416200,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":284389,\"factionWorkType\":\"hacking\",\"factionName\":\"Sector-12\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"ba2e25a8340bf\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"20.2.3.7\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"AutoLink.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const secThresh = ns.args[1];\\n    const moneyThresh = ns.args[2];\\n    const numberOfThread = ns.args[3];\\n    let securityLevel = ns.getServerSecurityLevel(target);\\n    let serverMoney = ns.getServerMoneyAvailable(target);\\n    let moneyOk = serverMoney > moneyThresh;\\n    let secOk = securityLevel < secThresh;\\n    while (moneyOk && secOk) {\\n        await ns.hack(target, { threads: numberOfThread });\\n        securityLevel = ns.getServerSecurityLevel(target);\\n        serverMoney = ns.getServerMoneyAvailable(target);\\n        moneyOk = serverMoney > moneyThresh;\\n        secOk = securityLevel < secThresh;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby9zZXJ2ZXItaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQ3BDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUN6QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLElBQUksYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0RCxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckQsSUFBSSxPQUFPLEdBQUcsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUN4QyxJQUFJLEtBQUssR0FBRyxhQUFhLEdBQUcsU0FBUyxDQUFDO0lBQ3RDLE9BQU8sT0FBTyxJQUFJLEtBQUssRUFBRTtRQUN2QixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7UUFDbkQsYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsRCxXQUFXLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELE9BQU8sR0FBRyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQ3BDLEtBQUssR0FBRyxhQUFhLEdBQUcsU0FBUyxDQUFDO0tBQ25DO0FBQ0gsQ0FBQyJ9\",\"filename\":\"/mono/server-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyThresh = ns.args[1];\\n    const secThresh = ns.args[2];\\n    const numberOfThread = ns.args[3];\\n    let serverMoney = ns.getServerMoneyAvailable(target);\\n    let serverSec = ns.getServerSecurityLevel(target);\\n    while (serverMoney < moneyThresh && serverSec < secThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        await ns.grow(target, { threads: numberOfThread });\\n        serverMoney = ns.getServerMoneyAvailable(target);\\n        serverSec = ns.getServerSecurityLevel(target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLWdyb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby9zZXJ2ZXItZ3Jvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQ3BDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDekMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUN2QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyRCxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEQsT0FBTyxXQUFXLEdBQUcsV0FBVyxJQUFJLFNBQVMsR0FBRyxTQUFTLEVBQUU7UUFDekQsNERBQTREO1FBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNuRCxXQUFXLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELFNBQVMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDL0M7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-grow.js\",\"url\":\"blob:file:///96fbf436-cf5c-4bef-9bdb-c9d0791369c7\",\"moduleSequenceNumber\":17761}],\"dependents\":[],\"ramUsage\":1.95,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const secThresh = ns.args[1];\\n    const numberOfThread = ns.args[2];\\n    let serverSec = ns.getServerSecurityLevel(target);\\n    while (serverSec > secThresh) {\\n        await ns.weaken(target, { threads: numberOfThread });\\n        serverSec = ns.getServerSecurityLevel(target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb25vL3NlcnZlci13ZWFrZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUNwQyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQ3ZDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDNUMsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xELE9BQU8sU0FBUyxHQUFHLFNBQVMsRUFBRTtRQUM1QixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7UUFDckQsU0FBUyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUMvQztBQUNILENBQUMifQ==\",\"filename\":\"/mono/server-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weaken.js\",\"url\":\"blob:file:///efb1849a-17b8-4a72-afaf-241ef6ae3a46\",\"moduleSequenceNumber\":19355}],\"dependents\":[],\"ramUsage\":1.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 1048576\\nexport const MAX_RAM = 1048576;\\nexport const SERVER_GB = 32;\\nexport const SERVER_GB_WANTED = 32;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class FileHandler {\\n    #file;\\n    #ns;\\n    constructor(ns, file) {\\n        this.#ns = ns;\\n        this.#file = file;\\n    }\\n    async newFile() {\\n        await this.#ns.write(this.#file, '', 'w');\\n    }\\n    async write(data, mode = 'a') {\\n        await this.#ns.write(this.#file, JSON.stringify(data), mode);\\n    }\\n    async read() {\\n        let dataString = await this.#ns.read(this.#file);\\n        if (dataString.length > 1) {\\n            return JSON.parse(dataString);\\n        }\\n        else {\\n            return [];\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmlsZXMvZmlsZWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLFdBQVc7SUFDdEIsS0FBSyxDQUFNO0lBQ1gsR0FBRyxDQUFLO0lBRVIsWUFBWSxFQUFNLEVBQUUsSUFBUztRQUMzQixJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTztRQUNYLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBUyxFQUFFLE9BQThCLEdBQUc7UUFDdEQsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJO1FBQ1IsSUFBSSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakQsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN6QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDL0I7YUFBTTtZQUNMLE9BQU8sRUFBRSxDQUFDO1NBQ1g7SUFDSCxDQUFDO0NBQ0YifQ==\",\"filename\":\"/files/filehandler.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FARM_SERVER_GB, MAX_FARMER_SERVER_NUM, MAX_RAM, MAX_SERVER_NUM, SERVER_GB_WANTED, SERVER_NAME_PREFIX, XP_FARMER_SERVER_PREFIX, } from 'const/files';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const purch = ns.getPurchasedServers().filter((el) => el.startsWith(SERVER_NAME_PREFIX));\\n    const farm = ns.getPurchasedServers().filter((el) => el.startsWith(XP_FARMER_SERVER_PREFIX));\\n    let totalCost = 0;\\n    let farmingCost = 0;\\n    let serverCost = 0;\\n    for (let server of purch) {\\n        if (server == 'home')\\n            continue;\\n        const serverRam = ns.getServerMaxRam(server);\\n        const cost = ns.getPurchasedServerUpgradeCost(server, SERVER_GB_WANTED);\\n        if (cost > 0) {\\n            serverCost += cost;\\n            totalCost += cost;\\n        }\\n    }\\n    for (let count = purch.length; count < MAX_SERVER_NUM; count++) {\\n        const cost = ns.getPurchasedServerCost(SERVER_GB_WANTED);\\n        if (cost > 0) {\\n            serverCost += cost;\\n            totalCost += cost;\\n        }\\n    }\\n    for (let server of farm) {\\n        if (server == 'home')\\n            continue;\\n        const serverRam = ns.getServerMaxRam(server);\\n        const cost = ns.getPurchasedServerUpgradeCost(server, FARM_SERVER_GB);\\n        if (cost > 0) {\\n            farmingCost += cost;\\n            totalCost += cost;\\n        }\\n    }\\n    for (let count = farm.length; count < MAX_FARMER_SERVER_NUM; count++) {\\n        const cost = ns.getPurchasedServerCost(FARM_SERVER_GB);\\n        if (cost > 0) {\\n            farmingCost += cost;\\n            totalCost += cost;\\n        }\\n    }\\n    ns.tprint('massima ram: ', ns.getPurchasedServerMaxRam());\\n    ns.tprint('costo per arrivare a ' + MAX_SERVER_NUM + ' server da ' + SERVER_GB_WANTED + ' : ', ns.formatNumber(serverCost, 3));\\n    ns.tprint('costo per arrivare a ' + MAX_FARMER_SERVER_NUM + ' xp farm server da ' + FARM_SERVER_GB + ' : ', ns.formatNumber(farmingCost, 3));\\n    ns.tprint('costo totale: ', ns.formatNumber(totalCost, 3));\\n    ns.tprint('costo server: ', ns.formatNumber(ns.getPurchasedServerCost(SERVER_GB_WANTED), 3));\\n    ns.tprint('costo server farm: ', ns.formatNumber(ns.getPurchasedServerCost(FARM_SERVER_GB), 3));\\n    ns.tprint('costo server a massima ram: ', ns.formatNumber(ns.getPurchasedServerCost(MAX_RAM), 3));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VzdGlvbmUtc2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pc2MvZ2VzdGlvbmUtc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxjQUFjLEVBQ2QscUJBQXFCLEVBQ3JCLE9BQU8sRUFDUCxjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLGtCQUFrQixFQUNsQix1QkFBdUIsR0FDeEIsTUFBTSxhQUFhLENBQUM7QUFFckIscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztJQUN6RixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0lBQzdGLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNsQixJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDcEIsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRW5CLEtBQUssSUFBSSxNQUFNLElBQUksS0FBSyxFQUFFO1FBQ3hCLElBQUksTUFBTSxJQUFJLE1BQU07WUFBRSxTQUFTO1FBQy9CLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3hFLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRTtZQUNaLFVBQVUsSUFBSSxJQUFJLENBQUM7WUFDbkIsU0FB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\",\"filename\":\"/misc/gestione-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/1f29648c-2caa-427c-9537-acca994bc170\",\"moduleSequenceNumber\":20910},{\"filename\":\"/misc/gestione-server.js\",\"url\":\"blob:https://danielyxie.github.io/df16a0c1-90d5-40bc-812d-f2f51119c900\",\"moduleSequenceNumber\":20967}],\"dependents\":[],\"ramUsage\":4.3,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerUpgradeCost\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ServerInfo {\\n    name = '';\\n    minSecurity = -1;\\n    maxMoney = -1;\\n    growTm = Infinity;\\n    weakenTm = Infinity;\\n    hackTm = Infinity;\\n    hackValue = 0;\\n    hackChance = 0;\\n    hackXp = 0;\\n    prepped = false;\\n    minHackLevel = 10000;\\n    currHackLevel = 0;\\n    score = -1;\\n    hwgwScore = -1;\\n    farmScore = -1;\\n    constructor() { }\\n    calcolaScore() {\\n        const hackLevelFactor = this.minHackLevel > this.currHackLevel * 0.65 ? 0.4 : 1;\\n        const upper = this.maxMoney * this.hackValue * this.currHackLevel;\\n        const lower = (Math.max(this.hackTm, this.weakenTm, this.growTm) / 1000 / this.minSecurity) * this.minHackLevel;\\n        this.score = (upper / lower) * hackLevelFactor;\\n        if (isNaN(this.score)) {\\n            this.score = -1;\\n        }\\n        if (this.hackChance > 0.8) {\\n            this.hwgwScore = this.score;\\n        }\\n        if (this.hackXp > 0) {\\n            this.farmScore = this.hackXp / (this.weakenTm / 1000);\\n        }\\n        else if (this.name == 'joesguns') {\\n            this.farmScore = 0;\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLWluZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvc2VydmVyLWluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLFVBQVU7SUFDckIsSUFBSSxHQUFXLEVBQUUsQ0FBQztJQUNsQixXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDakIsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2QsTUFBTSxHQUFHLFFBQVEsQ0FBQztJQUNsQixRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQ3BCLE1BQU0sR0FBRyxRQUFRLENBQUM7SUFDbEIsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFDZixNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUNoQixZQUFZLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFDbEIsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ1gsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2YsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2YsZ0JBQWUsQ0FBQztJQUVoQixZQUFZO1FBQ1YsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFaEYsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDbEUsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ2hILElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsZUFBZSxDQUFDO1FBQy9DLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO1FBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsRUFBRTtZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDN0I7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDdkQ7YUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksVUFBVSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztDQUNGIn0=\",\"filename\":\"/utils/server-info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const augmentations = [\\n        // TIANDAN\\n        // new Augmentation('Wired Reflexes', 2500000, 'tiandan'),\\n        // new Augmentation('Speech Enhancement', 12500000, 'tiandan'),\\n        // new Augmentation('ADR-V1 Pheromone Gene', 17500000, 'tiandan'),\\n        // new Augmentation('Nuoptimal Nootropic Injector Implant', 20000000, 'tiandan'),\\n        // new Augmentation('Social Negotiation Assistant (S.N.A)', 30000000, 'tiandan'),\\n        // new Augmentation('Speech Processor Implant', 50000000, 'tiandan'),\\n        // new Augmentation('Nanofiber Weave', 125000000, 'tiandan'),\\n        // new Augmentation('Neuroreceptor Management Implant', 550000000, 'tiandan'),\\n        // SEC12\\n        // new Augmentation('Augmented Targeting I', 15000000, 'sec12'),\\n        // new Augmentation('Augmented Targeting II', 42500000, 'sec12'),\\n        // new Augmentation('Speech Processor Implant', 50000000, 'sec12'),\\n        // new Augmentation('CashRoot Starter Kit', 125000000, 'sec12'),\\n        new Augmentation('Neuralstimulator', 3000000000, 'sec12'),\\n        // CSEC\\n        // new Augmentation('Neurotrainer I', 4000000, 'csec'),\\n        // new Augmentation('Synaptic Enhancement Implant', 7500000, 'csec'),\\n        // new Augmentation('BitWire', 10000000, 'csec'),\\n        // new Augmentation('Cranial Signal Processors - Gen I', 70000000, 'csec'),\\n        // new Augmentation('Cranial Signal Processors - Gen II', 125000000, 'csec'),\\n        // NITESEC\\n        // new Augmentation('Neurotrainer II', 45000000, 'nitesec'),\\n        // new Augmentation('Artificial Synaptic Potentiation', 80000000, 'nitesec'),\\n        // new Augmentation('Cranial Signal Processors - Gen II', 125000000, 'nitesec'),\\n        // new Augmentation('CRTX42-AA Gene Modification', 225000000, 'nitesec'),\\n        // new Augmentation('Neural-Retention Enhancement', 250000000, 'nitesec'),\\n        // new Augmentation('Embedded Netburner Module', 250000000, 'nitesec'),\\n        // new Augmentation('DataJack', 450000000, 'nitesec'),\\n        // new Augmentation('Cranial Signal Processors - Gen III', 550000000, 'nitesec'),\\n        // new Augmentation('BitWire', 10000000, 'nitesec'),\\n        // new Augmentation('Cranial Signal Processors - Gen I', 70000000, 'nitesec'),\\n        // BLACK HAND\\n        new Augmentation('Artificial Synaptic Potentiation', 80000000, 'blackhand'),\\n        new Augmentation('Embedded Netburner Module', 250000000, 'blackhand'),\\n        new Augmentation('DataJack', 450000000, 'blackhand'),\\n        new Augmentation('Cranial Signal Processors - Gen III', 550000000, 'blackhand'),\\n        new Augmentation('The Black Hand', 550000000, 'blackhand'),\\n        new Augmentation('Cranial Signal Processors - Gen IV', 1100000000, 'blackhand'),\\n        new Augmentation('Enhanced Myelin Sheathing', 1375000000, 'blackhand'),\\n        new Augmentation('Embedded Netburner Module Core Implant', 2500000000, 'blackhand'),\\n        new Augmentation('Neuralstimulator', 3000000000, 'blackhand'),\\n    ];\\n    const singled = [];\\n    augmentations.forEach((el) => {\\n        const duplicate = singled.find((sin) => el.name == sin.name);\\n        if (duplicate) {\\n            duplicate.faction += '/' + el.faction;\\n        }\\n        else {\\n            singled.push(el);\\n        }\\n    });\\n    singled.sort(function (a, b) {\\n        return b.cost - a.cost;\\n    });\\n    ns.tprint('ordine acquisto: ', singled);\\n    const costoTotale = calcolaSpesa(singled);\\n    ns.tprint('costo totale: ', ns.formatNumber(costoTotale, 3));\\n}\\nfunction calcolaSpesa(augmentations = []) {\\n    if (augmentations.length <= 0)\\n        return 0;\\n    const comprato = augmentations.shift();\\n    if (comprato) {\\n        let costo = comprato.cost;\\n        augmentations.forEach((el) => {\\n            el.cost = el.cost * 2;\\n        });\\n        augmentations.sort(function (a, b) {\\n            return b.cost - a.cost;\\n        });\\n        costo += calcolaSpesa(augmentations);\\n        return costo;\\n    }\\n    return 0;\\n}\\nexport class Augmentation {\\n    name;\\n    cost;\\n    faction;\\n    constructor(name, cost, faction) {\\n        this.name = name;\\n        this.cost = cost;\\n        this.faction = faction;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudGF0aW9uLWNhbGN1bGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlzYy9hdWdtZW50YXRpb24tY2FsY3VsYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLGFBQWEsR0FBbUI7UUFDcEMsVUFBVTtRQUNWLDBEQUEwRDtRQUMxRCwrREFBK0Q7UUFDL0Qsa0VBQWtFO1FBQ2xFLGlGQUFpRjtRQUNqRixpRkFBaUY7UUFDakYscUVBQXFFO1FBQ3JFLDZEQUE2RDtRQUM3RCw4RUFBOEU7UUFFOUUsUUFBUTtRQUNSLGdFQUFnRTtRQUNoRSxpRUFBaUU7UUFDakUsbUVBQW1FO1FBQ25FLGdFQUFnRTtRQUNoRSxJQUFJLFlBQVksQ0FBQyxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDO1FBRXpELE9BQU87UUFDUCx1REFBdUQ7UUFDdkQscUVBQXFFO1FBQ3JFLGlEQUFpRDtRQUNqRCwyRUFBMkU7UUFDM0UsNkVBQTZFO1FBRTdFLFVBQVU7UUFDViw0REFBNEQ7UUFDNUQsNkVBQTZFO1FBQzdFLGdGQUFnRjtRQUNoRix5RUFBeUU7UUFDekUsMEVBQTBFO1FBQzFFLHVFQUF1RTtRQUN2RSxzREFBc0Q7UUFDdEQsaUZBQWlGO1FBQ2pGLG9EQUFvRDtRQUNwRCw4RUFBOEU7UUFFOUUsYUFBYTtRQUNiLElBQUksWUFBWSxDQUFDLGtDQUFrQyxFQUFFLFFBQVEsRUFBRSxXQUFXLENBQUM7UUFDM0UsSUFBSSxZQUFZLENBQUMsMkJBQTJCLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQztRQUNyRSxJQUFJLFlBQVksQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQztRQUNwRCxJQUFJLFlBQVksQ0FBQyxxQ0FBcUMsRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDO1FBQy9FLElBQUksWUFBWSxD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\",\"filename\":\"/misc/augmentation-calculator.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/misc/augmentation-calculator.js\",\"url\":\"blob:https://danielyxie.github.io/7e7184ec-cb9d-4001-b301-cb5be78119ab\",\"moduleSequenceNumber\":1630}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/weak.js\",\"url\":\"blob:https://danielyxie.github.io/ef33113a-3088-4bf7-91e5-58e241132dbc\",\"moduleSequenceNumber\":25534}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/56b7e669-9194-436b-8270-284cd7e7179d\",\"moduleSequenceNumber\":25531}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FILES_TO_COPY } from 'const/files';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = ns.getPurchasedServers();\\n    for (let server of servers) {\\n        ns.scp(FILES_TO_COPY, server);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlcC1zZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ByZXAvcHJlcC1zZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDNUMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDekMsS0FBSyxJQUFJLE1BQU0sSUFBSSxPQUFPLEVBQUU7UUFDMUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDL0I7QUFDSCxDQUFDIn0=\",\"filename\":\"/prep/prep-servers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/a94f7afa-45c6-4432-981e-dded011d6514\",\"moduleSequenceNumber\":247},{\"filename\":\"/prep/prep-servers.js\",\"url\":\"blob:https://danielyxie.github.io/30c68643-1703-41eb-a7bf-e12ed90f95e2\",\"moduleSequenceNumber\":488}],\"dependents\":[],\"ramUsage\":4.45,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MAX_SERVER_NUM, SERVER_GB, SERVER_NAME_PREFIX } from 'const/files';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const purch = ns.getPurchasedServers().filter((el) => el.startsWith(SERVER_NAME_PREFIX));\\n    for (let server of purch) {\\n        const serverRam = ns.getServerMaxRam(server);\\n        if (serverRam != SERVER_GB) {\\n            //ns.tprint('dry run upgrade');\\n            ns.upgradePurchasedServer(server, SERVER_GB);\\n        }\\n    }\\n    for (let count = purch.length; count < MAX_SERVER_NUM; count++) {\\n        //ns.tprint('dry run buy');\\n        ns.purchaseServer(SERVER_NAME_PREFIX + (count + 1), SERVER_GB);\\n    }\\n    ns.exec('/prep/prep-servers.js', 'home', 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5LWFuZC11cGdyYWRlLXNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlzYy9idXktYW5kLXVwZ3JhZGUtc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUU1RSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQ3pGLEtBQUssSUFBSSxNQUFNLElBQUksS0FBSyxFQUFFO1FBQ3hCLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsSUFBSSxTQUFTLElBQUksU0FBUyxFQUFFO1lBQzFCLCtCQUErQjtZQUMvQixFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQzlDO0tBQ0Y7SUFDRCxLQUFLLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFHLGNBQWMsRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUM5RCwyQkFBMkI7UUFDM0IsRUFBRSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztLQUNoRTtJQUNELEVBQUUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlDLENBQUMifQ==\",\"filename\":\"/misc/buy-and-upgrade-servers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/2ea8724b-e07a-41fb-8248-41d38779fd78\",\"moduleSequenceNumber\":247},{\"filename\":\"/misc/buy-and-upgrade-servers.js\",\"url\":\"blob:https://danielyxie.github.io/35aebb08-f722-4d34-8b20-fb9c6128e11d\",\"moduleSequenceNumber\":487}],\"dependents\":[],\"ramUsage\":7.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"upgradePurchasedServer\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { loadTargetNames } from \\\"./utils/target-loader\\\";\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = await loadTargetNames(ns);\\n    for (let server of servers) {\\n        ns.tprint(\\\"-------\\\");\\n        ns.tprint(\\\"server: \\\", server);\\n        ns.tprint(\\\"MinSec: \\\", ns.getServerMinSecurityLevel(server));\\n        ns.tprint(\\\"CurSec: \\\", ns.getServerSecurityLevel(server));\\n        ns.tprint(\\\"MaxMoney: \\\", ns.formatNumber(ns.getServerMaxMoney(server), 3));\\n        ns.tprint(\\\"CurMoney: \\\", ns.formatNumber(ns.getServerMoneyAvailable(server), 3));\\n        ns.tprint(\\\"MinHackLevel: \\\", ns.formatNumber(ns.getServerRequiredHackingLevel(server), 3));\\n        ns.tprint(\\\"-------\\\");\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2stc2VydmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jaGVjay1zZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV4RCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLE9BQU8sR0FBYSxNQUFNLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwRCxLQUFLLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUMxQixFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JCLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzlCLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzVELEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3pELEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUUsRUFBRSxDQUFDLE1BQU0sQ0FDUCxZQUFZLEVBQ1osRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ3ZELENBQUM7UUFDRixFQUFFLENBQUMsTUFBTSxDQUNQLGdCQUFnQixFQUNoQixFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDN0QsQ0FBQztRQUNGLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDdEI7QUFDSCxDQUFDIn0=\",\"filename\":\"check-servers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/47968955-6aca-41c8-ab08-14d79eb40653\",\"moduleSequenceNumber\":42991},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/b4153f0a-5e73-4089-aada-a4b4a3627165\",\"moduleSequenceNumber\":47398},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/640ed186-01da-4979-a827-e8a1b898363c\",\"moduleSequenceNumber\":47393},{\"filename\":\"check-servers.js\",\"url\":\"blob:https://danielyxie.github.io/017c1a0a-e68f-4428-b329-31a7dbc3029f\",\"moduleSequenceNumber\":90770}],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GET_INFO_NAME, MANAGE_ALL_NAME, SCAN_SCRIPT_NAME } from \\\"const/files\\\";\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.exec(SCAN_SCRIPT_NAME, \\\"home\\\", 1);\\n    ns.exec(GET_INFO_NAME, \\\"home\\\", 1);\\n    ns.spawn(MANAGE_ALL_NAME, 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnR1cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zdGFydHVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRS9FLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsQyxFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMvQixDQUFDIn0=\",\"filename\":\"startup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"startup.js\",\"url\":\"blob:https://danielyxie.github.io/65dc4a82-88be-40ac-8718-c267e5d63326\",\"moduleSequenceNumber\":12596}],\"dependents\":[],\"ramUsage\":4.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/11d3aa83-9cad-43a0-a6a9-a97a60d671a6\",\"moduleSequenceNumber\":622}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { BEGINNER_MANAGER_NAME, GET_INFO_NAME, SCAN_SCRIPT_NAME, } from \\\"const/files\\\";\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.exec(SCAN_SCRIPT_NAME, \\\"home\\\", 1);\\n    ns.exec(GET_INFO_NAME, \\\"home\\\", 1);\\n    ns.spawn(BEGINNER_MANAGER_NAME, 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItc3RhcnR1cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1zdGFydHVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsYUFBYSxFQUNiLGdCQUFnQixHQUNqQixNQUFNLGFBQWEsQ0FBQztBQUVyQixxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNyQyxDQUFDIn0=\",\"filename\":\"beginner-startup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/f3ad42f3-b75a-425a-8cc4-d7baca4bc543\",\"moduleSequenceNumber\":292},{\"filename\":\"beginner-startup.js\",\"url\":\"blob:https://danielyxie.github.io/2993065c-0815-48c2-802c-cb976759c99e\",\"moduleSequenceNumber\":577}],\"dependents\":[],\"ramUsage\":4.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVER_NAME_PREFIX } from './const/files';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = ns.getPurchasedServers().filter((el) => el.startsWith(SERVER_NAME_PREFIX));\\n    for (let server of servers) {\\n        ns.killall(server);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2lsbC1zZXJ2ZXJzLXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9raWxsLXNlcnZlcnMtc2NyaXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQzNGLEtBQUssSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzFCLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"kill-servers-script.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/f8fbea7c-7f88-4bea-9479-834398dd03b6\",\"moduleSequenceNumber\":148},{\"filename\":\"kill-servers-script.js\",\"url\":\"blob:https://danielyxie.github.io/8d12a5f3-0f2a-4139-adf9-21d2c7cf7def\",\"moduleSequenceNumber\":10000}],\"dependents\":[],\"ramUsage\":4.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function calcolaThreadGrow(ns, serverInfo, debug = false) {\\n    const currentMoney = ns.getServerMoneyAvailable(serverInfo.name);\\n    const rate = serverInfo.maxMoney / (currentMoney > 0 ? currentMoney : 1);\\n    const thr = ns.growthAnalyze(serverInfo.name, rate);\\n    if (debug) {\\n        ns.print('------ grow thread calc ------');\\n        ns.print('currentMoney: ', currentMoney);\\n        ns.print('grow rate: ', rate);\\n        ns.print('growthAna: ', thr);\\n        ns.print('-----------------------------');\\n    }\\n    return Math.ceil(thr);\\n}\\nexport function calcolaThreadWeak(ns, serverInfo, debug = false) {\\n    const currentSec = ns.getServerSecurityLevel(serverInfo.name);\\n    const secWeak = ns.weakenAnalyze(1);\\n    const rate = (currentSec - serverInfo.minSecurity) / secWeak;\\n    if (debug) {\\n        ns.print('------ weak thread calc ------');\\n        ns.print('currSec: ', currentSec);\\n        ns.print('minSec: ', serverInfo.minSecurity);\\n        ns.print('weakSec: ', secWeak);\\n        ns.print('secRate: ', rate);\\n        ns.print('-----------------------------');\\n    }\\n    return Math.ceil(rate);\\n}\\nexport function calcolaThreadHack(ns, serverInfo, debug = false) {\\n    const maxMoney = serverInfo.maxMoney;\\n    const moneyPerThread = ns.hackAnalyze(serverInfo.name) * maxMoney;\\n    const minWanted = maxMoney * 0.65;\\n    const rate = (maxMoney - minWanted) / moneyPerThread;\\n    const threads = Math.floor(rate);\\n    if (debug) {\\n        ns.print('------ hack thread calc ------');\\n        ns.print('moneyPerThread: ', moneyPerThread);\\n        ns.print('maxMoney: ', maxMoney);\\n        ns.print('minWanted: ', minWanted);\\n        ns.print('hack rate: ', rate);\\n        ns.print('growthAna: ', threads);\\n        ns.print('-----------------------------');\\n    }\\n    return threads;\\n}\\nexport function calcolaWeakThreadPerGrow(growThreads) {\\n    return Math.ceil((growThreads * 0.004) / 0.05);\\n}\\nexport function calcolaTempiBatch(tempoHack, tempoWeak, tempoGrow, batchStartDelay = 200, scritpDelay = 100, iteration = 0) {\\n    const sleepWeakHack = (batchStartDelay + scritpDelay * 2) * iteration;\\n    const sleepHack = tempoWeak - tempoHack - scritpDelay + sleepWeakHack;\\n    const endHack = sleepHack + tempoHack;\\n    const endWeakHack = tempoWeak + sleepWeakHack;\\n    const sleepGrow = endWeakHack - tempoGrow + scritpDelay;\\n    const endGrow = sleepGrow + tempoGrow;\\n    const sleepWeakGrow = endGrow - tempoWeak + scritpDelay;\\n    const endWeakGrow = sleepWeakGrow + tempoWeak;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsY3VsYXRpb24tdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvY2FsY3VsYXRpb24tdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQU0sRUFBRSxVQUFzQixFQUFFLEtBQUssR0FBRyxLQUFLO0lBQzdFLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakUsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLFFBQVEsR0FBRyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekUsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3BELElBQUksS0FBSyxFQUFFO1FBQ1QsRUFBRSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQzNDLEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDekMsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDN0IsRUFBRSxDQUFDLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0tBQzNDO0lBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsRUFBTSxFQUFFLFVBQXNCLEVBQUUsS0FBSyxHQUFHLEtBQUs7SUFDN0UsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5RCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sSUFBSSxHQUFHLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxPQUFPLENBQUM7SUFDN0QsSUFBSSxLQUFLLEVBQUU7UUFDVCxFQUFFLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDM0MsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDbEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzdDLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVCLEVBQUUsQ0FBQyxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztLQUMzQztJQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQU0sRUFBRSxVQUFzQixFQUFFLEtBQUssR0FBRyxLQUFLO0lBQzdFLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUM7SUFDckMsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQ2xFLE1BQU0sU0FBUyxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDbEMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLEdBQUcsY0FBYyxDQUFDO0lBQ3JELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsSUFBSSxLQUFLLEVBQUU7UUFDVCxFQUFFLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDM0MsRUFBRSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUM3QyxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNqQyxFQUFFLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNuQyxFQUFFLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5QixFQUFFLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNqQyxFQUFFLENBQUMsS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7S0FDM0M7SUFDRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQsTUFBTSxVQUFVLHdCQUF3QixDQUFDLFdBQW1CO0lBQzFELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUMvQixTQUFpQixFQUNqQixTQUFpQixFQUNqQixTQUFpQixFQUNqQixrQkFBMEIsR0FBRyxFQUM3QixjQUFzQixHQUFHLEVBQ3pCLFlBQW9CLENBQUM7SUFFckIsTUFBTSxhQUFhLEdBQUcsQ0FBQyxlQUFlLEdBQUcsV0FBVyxHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUV0RSxNQUFNLFNBQVMsR0FBRyxTQUFTLEdBQUcsU0FBUyxHQUFHLFdBQVcsR0FBRyxhQUFhLENBQUM7SUFDdEUsTUFBTSxPQUFPLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUV0QyxNQUFNLFdBQVcsR0FBRyxTQUFTLEdBQUcsYUFBYSxDQUFDO0lBRTlDLE1BQU0sU0FBUyxHQUFHLFdBQVcsR0FBRyxTQUFTLEdBQUcsV0FBVyxDQUFDO0lBQ3hELE1BQU0sT0FBTyxHQUFHLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFFdEMsTUFBTSxhQUFhLEdBQUcsT0FBTyxHQUFHLFNBQVMsR0FBRyxXQUFXLENBQUM7SUFDeEQsTUFBTSxXQUFXLEdBQUcsYUFBYSxHQUFHLFNBQVMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/utils/calculation-utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/hack.js\",\"url\":\"blob:https://danielyxie.github.io/10d24270-c89a-4b65-96b6-4cc3b9758191\",\"moduleSequenceNumber\":25533}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerData } from 'utils/server-data';\\nexport class ServerManager {\\n    ns;\\n    servers = [];\\n    hackTargets = [];\\n    growTargets = [];\\n    weakTargets = [];\\n    constructor(ns, serverNames) {\\n        this.ns = ns;\\n        for (let server of serverNames) {\\n            const serverData = new ServerData(ns, server);\\n            serverData.aggiornaServer();\\n            this.servers.push(serverData);\\n        }\\n    }\\n    avviaScript(scriptName, threadNeeded, ramPerThread, target, debug = false) {\\n        if (threadNeeded <= 0) {\\n            return;\\n        }\\n        this.aggiornaUtilizzo();\\n        const availableServers = this.servers.filter((el) => el.freeRam > 0 && el.freeRam > ramPerThread);\\n        for (let server of availableServers) {\\n            const freeThreads = server.freeRam / ramPerThread;\\n            let threadToLaunch = Math.floor(freeThreads > threadNeeded ? threadNeeded : freeThreads);\\n            if (threadToLaunch > 0 && threadToLaunch < 1)\\n                threadToLaunch = 1;\\n            if (threadToLaunch <= 0)\\n                break;\\n            this.ns.exec(scriptName, server.name, threadToLaunch, target, threadToLaunch);\\n            server.aggiornaServer();\\n            threadNeeded -= threadToLaunch;\\n            if (threadNeeded <= 0) {\\n                this.aggiornaTargetInterni(scriptName, target);\\n                break;\\n            }\\n        }\\n    }\\n    aggiornaUtilizzo(clearTargets = false) {\\n        if (clearTargets) {\\n            this.hackTargets = [];\\n            this.weakTargets = [];\\n            this.growTargets = [];\\n        }\\n        this.servers.forEach((el) => {\\n            el.aggiornaServer();\\n            let processes = this.ns.ps(el.name);\\n            for (let process of processes) {\\n                this.aggiornaTargetInterni(process.filename, process.args[0]);\\n            }\\n        });\\n    }\\n    serverLiberi() {\\n        return this.servers.find((el) => el.freeRam > 0) !== undefined;\\n    }\\n    aggiornaTargetInterni(scriptName, target) {\\n        if (scriptName.indexOf('hack') > 0) {\\n            if (this.hackTargets.indexOf(target) < 0)\\n                this.hackTargets.push(target);\\n        }\\n        if (scriptName.indexOf('grow') > 0) {\\n            if (this.growTargets.indexOf(target) < 0)\\n                this.growTargets.push(target);\\n        }\\n        if (scriptName.indexOf('weak') > 0) {\\n            if (this.weakTargets.indexOf(target) < 0)\\n                this.weakTargets.push(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvc2VydmVyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRS9DLE1BQU0sT0FBTyxhQUFhO0lBQ3hCLEVBQUUsQ0FBSztJQUNQLE9BQU8sR0FBaUIsRUFBRSxDQUFDO0lBQzNCLFdBQVcsR0FBYSxFQUFFLENBQUM7SUFDM0IsV0FBVyxHQUFhLEVBQUUsQ0FBQztJQUMzQixXQUFXLEdBQWEsRUFBRSxDQUFDO0lBRTNCLFlBQVksRUFBTSxFQUFFLFdBQXFCO1FBQ3ZDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsS0FBSyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7WUFDOUIsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzlDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFRCxXQUFXLENBQUMsVUFBa0IsRUFBRSxZQUFvQixFQUFFLFlBQW9CLEVBQUUsTUFBYyxFQUFFLEtBQUssR0FBRyxLQUFLO1FBQ3ZHLElBQUksWUFBWSxJQUFJLENBQUMsRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQyxDQUFDO1FBQ2xHLEtBQUssSUFBSSxNQUFNLElBQUksZ0JBQWdCLEVBQUU7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\",\"filename\":\"/utils/server-manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_FREE_RAM_TO_KEEP } from 'const/files';\\nexport class ServerData {\\n    ns;\\n    name;\\n    freeRam;\\n    maxRam;\\n    cores = 1;\\n    constructor(ns, name) {\\n        this.ns = ns;\\n        this.name = name;\\n        const nsServer = ns.getServer(name);\\n        this.maxRam = nsServer.maxRam;\\n        this.freeRam = this.maxRam - this.ns.getServerUsedRam(name);\\n        this.cores = nsServer.cpuCores;\\n    }\\n    calcolaThreadRunnabili(costoScript) {\\n        return this.freeRam > 0 ? Math.floor(this.freeRam / costoScript) : 0;\\n    }\\n    aggiornaServer() {\\n        this.maxRam = this.ns.getServerMaxRam(this.name);\\n        if (this.name == 'home')\\n            this.freeRam = this.maxRam - this.ns.getServerUsedRam(this.name) - HOME_FREE_RAM_TO_KEEP;\\n        else\\n            this.freeRam = this.maxRam - this.ns.getServerUsedRam(this.name);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvc2VydmVyLWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXBELE1BQU0sT0FBTyxVQUFVO0lBQ3JCLEVBQUUsQ0FBSztJQUNQLElBQUksQ0FBUztJQUNiLE9BQU8sQ0FBUztJQUNoQixNQUFNLENBQVM7SUFDZixLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBRVYsWUFBWSxFQUFNLEVBQUUsSUFBWTtRQUM5QixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLE1BQU0sUUFBUSxHQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUNqQyxDQUFDO0lBRUQsc0JBQXNCLENBQUMsV0FBbUI7UUFDeEMsT0FBTyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELGNBQWM7UUFDWixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksTUFBTTtZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxxQkFBcUIsQ0FBQzs7WUFDN0csSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hFLENBQUM7Q0FDRiJ9\",\"filename\":\"/utils/server-data.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GET_INFO_NAME, MANAGERV2_NAME, SCAN_SCRIPT_NAME } from \\\"const/files\\\";\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.exec(SCAN_SCRIPT_NAME, \\\"home\\\", 1);\\n    ns.exec(GET_INFO_NAME, \\\"home\\\", 1);\\n    ns.spawn(MANAGERV2_NAME, 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnR1cFYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3N0YXJ0dXBWMi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUU5RSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUIsQ0FBQyJ9\",\"filename\":\"startupV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/be7e8ece-e047-4282-a788-2347bee61f47\",\"moduleSequenceNumber\":292},{\"filename\":\"startupV2.js\",\"url\":\"blob:https://danielyxie.github.io/d0b9dcb2-91fa-45dc-8e0e-2f50539d0216\",\"moduleSequenceNumber\":581}],\"dependents\":[],\"ramUsage\":4.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVER_NAME_PREFIX } from 'const/files';\\nexport class ScanResult {\\n    ns;\\n    allServers = [];\\n    hackable = [];\\n    constructor(ns) {\\n        this.ns = ns;\\n        this.scanAndCheckNetwork();\\n    }\\n    scanAndCheckNetwork() {\\n        let device = 'home';\\n        this.scan(device);\\n    }\\n    scan(device, depth = 1, maxDepth = Infinity) {\\n        if (depth > maxDepth)\\n            return {};\\n        const scanTargets = this.ns.scan(device);\\n        const localTargets = [];\\n        scanTargets.forEach((newDevice) => {\\n            const alreadyThere = this.allServers.includes(newDevice);\\n            const canHack = this.nukeServer(this.ns, newDevice, this.ns.getHostname());\\n            const isMine = newDevice === 'home' || newDevice.startsWith(SERVER_NAME_PREFIX);\\n            const profitable = this.ns.getServerMaxMoney(newDevice) > 0;\\n            if (!alreadyThere && !isMine) {\\n                localTargets.push(newDevice);\\n                this.allServers.push(newDevice);\\n                if (canHack && profitable)\\n                    this.hackable.push(newDevice);\\n            }\\n        });\\n        for (let target of localTargets) {\\n            this.scan(target, depth + 1);\\n        }\\n        return;\\n    }\\n    nukeServer(ns, target, runningHost) {\\n        if (ns.hasRootAccess(target))\\n            return true;\\n        const reqHackLevel = ns.getServerRequiredHackingLevel(target);\\n        const myHackLevel = ns.getHackingLevel();\\n        if (reqHackLevel > myHackLevel)\\n            return false;\\n        const portRequired = ns.getServerNumPortsRequired(target);\\n        const cracks = [];\\n        if (ns.fileExists('brutessh.exe', runningHost)) {\\n            cracks.push(ns.brutessh);\\n        }\\n        if (ns.fileExists('ftpcrack.exe', runningHost)) {\\n            cracks.push(ns.ftpcrack);\\n        }\\n        if (ns.fileExists('httpworm.exe', runningHost)) {\\n            cracks.push(ns.httpworm);\\n        }\\n        if (ns.fileExists('relaysmtp.exe', runningHost)) {\\n            cracks.push(ns.relaysmtp);\\n        }\\n        if (ns.fileExists('sqlinject.exe', runningHost)) {\\n            cracks.push(ns.sqlinject);\\n        }\\n        if (portRequired > cracks.length) {\\n            ns.print('cannot crack ', target);\\n            return false;\\n        }\\n        for (let crack of cracks)\\n            crack(target);\\n        // Get root access to target server\\n        ns.print('cracked ', target);\\n        ns.nuke(target);\\n        return true;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbi1yZXN1bHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2Nhbi1hbmQtbnVrZS9zY2FuLXJlc3VsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFakQsTUFBTSxPQUFPLFVBQVU7SUFDckIsRUFBRSxDQUFLO0lBQ1AsVUFBVSxHQUFhLEVBQUUsQ0FBQztJQUMxQixRQUFRLEdBQWEsRUFBRSxDQUFDO0lBRXhCLFlBQVksRUFBTTtRQUNoQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxtQkFBbUI7UUFDakIsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVPLElBQUksQ0FBQyxNQUFjLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsUUFBUTtRQUN6RCxJQUFJLEtBQUssR0FBRyxRQUFRO1lBQUUsT0FBTyxFQUFFLENBQUM7UUFDaEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekMsTUFBTSxZQUFZLEdBQWEsRUFBRSxDQUFDO1FBQ2xDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUNoQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztZQUMzRSxNQUFNLE1BQU0sR0FBRyxTQUFT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\",\"filename\":\"/scan-and-nuke/scan-result.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ALL_SERVERS_FILENAME, SERVERS_FILENAME } from 'const/files';\\nimport { FileHandler } from 'files/filehandler';\\nimport { ScanResult } from 'scan-and-nuke/scan-result';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        ns.disableLog('ALL');\\n        ns.enableLog('sleep');\\n        const scanResult = new ScanResult(ns);\\n        await new FileHandler(ns, SERVERS_FILENAME).write(scanResult.hackable, 'w');\\n        await new FileHandler(ns, ALL_SERVERS_FILENAME).write(scanResult.allServers, 'w');\\n        await ns.sleep(60000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbi1hbmQtdXBkYXRlLWZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2Nhbi1hbmQtbnVrZS9zY2FuLWFuZC11cGRhdGUtZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDckUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV2RCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QixNQUFNLFVBQVUsR0FBZSxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsRCxNQUFNLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzVFLE1BQU0sSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLG9CQUFvQixDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEYsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3ZCO0FBQ0gsQ0FBQyJ9\",\"filename\":\"/scan-and-nuke/scan-and-update-file.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/b826b8e5-0231-4b35-b92f-566076d39989\",\"moduleSequenceNumber\":292},{\"filename\":\"/scan-and-nuke/scan-result.js\",\"url\":\"blob:https://danielyxie.github.io/1ccb22db-9995-47e2-a3de-cbb49888fd0d\",\"moduleSequenceNumber\":312},{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/8dbf4855-1965-43cd-b891-d5537a3453ae\",\"moduleSequenceNumber\":293},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/0fd29b52-7f36-4c74-ba0b-b9baf324af75\",\"moduleSequenceNumber\":292},{\"filename\":\"/scan-and-nuke/scan-and-update-file.js\",\"url\":\"blob:https://danielyxie.github.io/36ee263d-61a9-4eac-acfe-56ca4a3844d9\",\"moduleSequenceNumber\":578}],\"dependents\":[],\"ramUsage\":2.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVERS_DETAIL_FILENAME, SERVERS_FILENAME } from 'const/files';\\nimport { FileHandler } from 'files/filehandler';\\nimport { HwgOpsCalulator } from 'utils/hwg-ops-calulator';\\nimport { ServerInfo } from 'utils/server-info';\\nimport { HwgwServerInfo } from '/utils/hwgw-server-info';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        let handler = new FileHandler(ns, SERVERS_FILENAME);\\n        const servers = await handler.read();\\n        let serverInfo = [];\\n        for (let target of servers) {\\n            const minSecurity = ns.getServerMinSecurityLevel(target);\\n            const maxMoney = ns.getServerMaxMoney(target);\\n            const serverMoney = ns.getServerMoneyAvailable(target);\\n            const serverSecurity = ns.getServerSecurityLevel(target);\\n            const hackReq = ns.getServerRequiredHackingLevel(target);\\n            const infoObj = new ServerInfo();\\n            infoObj.name = target;\\n            infoObj.minSecurity = minSecurity;\\n            infoObj.maxMoney = maxMoney;\\n            infoObj.minHackLevel = hackReq;\\n            infoObj.currHackLevel = ns.getHackingLevel();\\n            const tempInfo = new HwgwServerInfo(ns, infoObj);\\n            const calc = new HwgOpsCalulator(ns, tempInfo);\\n            infoObj.hackXp = calc.calcolaHackXp();\\n            const growt = calc.calcolaGrowTime();\\n            const weakent = calc.calcolaWeakTime();\\n            const hackA = calc.calcolaHackPerc();\\n            const hackChance = calc.calcolaHackChance();\\n            const hackT = calc.calcolaHackTime();\\n            infoObj.growTm = growt;\\n            infoObj.weakenTm = weakent;\\n            infoObj.hackChance = hackChance;\\n            infoObj.hackValue = hackA;\\n            infoObj.hackTm = hackT;\\n            infoObj.prepped = serverSecurity == minSecurity && serverMoney == maxMoney;\\n            infoObj.calcolaScore();\\n            serverInfo = [...serverInfo, infoObj];\\n        }\\n        handler = new FileHandler(ns, SERVERS_DETAIL_FILENAME);\\n        await handler.write(serverInfo, 'w');\\n        await ns.sleep(1000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXN0YXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjYW4tYW5kLW51a2UvZ2V0LXN0YXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzFELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFekQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUNwRCxNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQyxJQUFJLFVBQVUsR0FBaUIsRUFBRSxDQUFDO1FBQ2xDLEtBQUssSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQzFCLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6RCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6RCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekQsTUFBTSxPQUFPLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUNqQyxPQUFPLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztZQUN0QixPQUFPLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztZQUNsQyxPQUFPLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztZQUM1QixPQUFPLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztZQUMvQixPQUFPLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUM3QyxNQUFNLFFBQVEsR0FBbUIsSUFBSSxjQUFjLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sSUFBSSxHQUFvQixJQUFJLGVBQWUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDaEUsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDdEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3JDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN2QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDckMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDNUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3JDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1lBQzNCLE9BQU8sQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1lBQ2hDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQzFCLE9BQU8sQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsY0FBYyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxDQUFDO1lBQzNFLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN2QixVQUFVLEdBQUcsQ0FBQyxHQUFHLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN2QztRQUNELE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQUN2RCxNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QjtBQUNILENBQUMifQ==\",\"filename\":\"/scan-and-nuke/get-stats.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/utils/hwgw-server-info.js\",\"url\":\"blob:https://danielyxie.github.io/9402470b-ded1-4498-8d73-b4a30155b7e0\",\"moduleSequenceNumber\":332},{\"filename\":\"/utils/server-info.js\",\"url\":\"blob:https://danielyxie.github.io/91eceebb-6024-43ea-aead-e2bdff9bb8ee\",\"moduleSequenceNumber\":295},{\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"blob:https://danielyxie.github.io/5e660999-42d4-4e04-a64e-d0c93f323689\",\"moduleSequenceNumber\":324},{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/55328777-ecf8-478b-ad64-4843394c29d5\",\"moduleSequenceNumber\":293},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/da556371-b9eb-4d32-ac10-43d72540aa2a\",\"moduleSequenceNumber\":292},{\"filename\":\"/scan-and-nuke/get-stats.js\",\"url\":\"blob:https://danielyxie.github.io/fac069d4-20e6-46a9-ae9c-29615f4ac251\",\"moduleSequenceNumber\":579}],\"dependents\":[],\"ramUsage\":7.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVER_WEAKEN_V2_SCRIPT_NAME, XP_FARMER_SERVER_PREFIX } from 'const/files';\\nimport { loadTargetInfo, loadTargetNames } from 'utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    //const servers = ns.args;\\n    const targets = await loadTargetNames(ns);\\n    const targetInfo = (await loadTargetInfo(ns));\\n    // const ordinati = targetInfo\\n    //   .filter((el) => el.cheesyScoreTest > 0)\\n    //   .sort(function (a, b) {\\n    //     return b.cheesyScoreTest - a.cheesyScoreTest;\\n    //   })\\n    //   .map((el) => el.name);\\n    const ordinati = [\\\"joesguns\\\", \\\"foodnstuff\\\", 'n00dles'];\\n    while (true) {\\n        const servers = ns.getPurchasedServers().filter((el) => el != 'home' && el != XP_FARMER_SERVER_PREFIX);\\n        let i = 0;\\n        for (let server of servers) {\\n            checkAndStartBeginnerSingoloTarget(ns, server, ordinati[i]);\\n            i++;\\n            if (i >= ordinati.length)\\n                i = 0;\\n        }\\n        checkAndStartBeginnerHackHome(ns, ordinati[0]);\\n        checkAutoWeak(ns, targets);\\n        await ns.sleep(5000);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAutoWeak(ns, servers) {\\n    for (let server of servers) {\\n        checkAndStartAutoWeak(ns, server);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartAutoWeak(ns, server) {\\n    const scriptRam = ns.getScriptRam(SERVER_WEAKEN_V2_SCRIPT_NAME);\\n    const serverRam = ns.getServerMaxRam(server);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    if (threads > 0) {\\n        if (!ns.isRunning(SERVER_WEAKEN_V2_SCRIPT_NAME, server, server, threads)) {\\n            ns.scp(SERVER_WEAKEN_V2_SCRIPT_NAME, server);\\n            ns.exec(SERVER_WEAKEN_V2_SCRIPT_NAME, server, threads, server, threads);\\n        }\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartBeginnerSingoloTarget(ns, host, target) {\\n    const scriptRam = ns.getScriptRam('beginner-hack.js');\\n    const serverUsedRam = ns.getServerUsedRam(host);\\n    const serverRam = ns.getServerMaxRam(host);\\n    const threads = Math.floor((serverRam - serverUsedRam) / scriptRam);\\n    if (!isNaN(threads) && threads > 0) {\\n        ns.exec('beginner-hack.js', host, threads, target, threads);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartBeginnerHackHome(ns, target) {\\n    const scriptRam = ns.getScriptRam('beginner-hack.js');\\n    const serverUsedRam = ns.getServerUsedRam('home');\\n    const serverRam = ns.getServerMaxRam('home') - 4.5;\\n    const threads = Math.floor((serverRam - serverUsedRam) / scriptRam);\\n    if (!isNaN(threads) && threads > 0) {\\n        ns.exec('beginner-hack.js', 'home', threads, target, threads);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYW5hZ2Vycy9iZWdpbm5lci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVwRixPQUFPLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXRFLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsMEJBQTBCO0lBQzFCLE1BQU0sT0FBTyxHQUFhLE1BQU0sZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sVUFBVSxHQUFpQixDQUFDLE1BQU0sY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFpQixDQUFDO0lBQzVFLDhCQUE4QjtJQUM5Qiw0Q0FBNEM7SUFDNUMsNEJBQTRCO0lBQzVCLG9EQUFvRDtJQUNwRCxPQUFPO0lBQ1AsMkJBQTJCO0lBQzNCLE1BQU0sUUFBUSxHQUFHLENBQUMsVUFBVSxFQUFFLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN2RCxPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLE1BQU0sSUFBSSxFQUFFLElBQUksdUJBQXVCLENBQUMsQ0FBQztRQUN2RyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixLQUFLLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUMxQixrQ0FBa0MsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVELENBQUMsRUFBRSxDQUFDO1lBQ0osSUFBSSxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU07Z0JBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNqQztRQUNELDZCQUE2QixDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQyxhQUFhLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QjtBQUNILENBQUM7QUFFRCxxQkFBcUI7QUFDckIsU0FBUyxhQUFhLENBQUMsRUFBTSxFQUFFLE9BQWlCO0lBQzlDLEtBQUssSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzFCLHFCQUFxQixDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUNuQztBQUNILENBQUM7QUFDRCxxQkFBcUI7QUFDckIsU0FBUyxxQkFBcUIsQ0FBQyxFQUFNLEVBQUUsTUFBYztJQUNuRCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFDaEUsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQztJQUNsRCxJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUU7UUFDZixJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyw0QkFBNEIsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxFQUFFO1lBQ3hFLEVBQUUsQ0FBQyxHQUFHLENBQUMsNEJBQTRCLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDN0MsRUFBRSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN6RTtLQUNGO0FBQ0gsQ0FBQztBQUVELHFCQUFxQjtBQUNyQixTQUFTLGtDQUFrQyxDQUFDLEVBQU0sRUFBRSxJQUFZLEVBQUUsTUFBYztJQUM5RSxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDdEQsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hELE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsR0FBRyxhQUFhLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztJQUNwRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUU7UUFDbEMsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUM3RDtBQUNILENBQUM7QUFFRCxxQkFBcUI7QUFDckIsU0FBUyw2QkFBNkIsQ0FBQyxFQUFNLEVBQUUsTUFBYztJQUMzRCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDdEQsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xELE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ25ELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLEdBQUcsYUFBYSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUM7SUFDcEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1FBQ2xDLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDL0Q7QUFDSCxDQUFDIn0=\",\"filename\":\"/managers/beginner-manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/30b20746-2800-413b-8022-0809b2c2707e\",\"moduleSequenceNumber\":293},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/ad679d5d-9d0c-450f-8b88-bf7b2e8f8555\",\"moduleSequenceNumber\":292},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/74350880-40e7-4722-a906-00afddee4047\",\"moduleSequenceNumber\":323},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/f305cb3e-a491-4a75-bb8a-1e84ef0e9df7\",\"moduleSequenceNumber\":292},{\"filename\":\"/managers/beginner-manager.js\",\"url\":\"blob:https://danielyxie.github.io/b19a0dc7-1628-481b-98eb-dc46651325ab\",\"moduleSequenceNumber\":582}],\"dependents\":[],\"ramUsage\":6.05,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVER_GROW_SCRIPT_NAME, SERVER_HACK_SCRIPT_NAME, SERVER_WEAKEN_SCRIPT_NAME, SERVER_WEAKEN_V2_SCRIPT_NAME, XP_FARMER_SERVER_PREFIX, } from 'const/files';\\nimport { loadTargetInfo, loadTargetNames } from 'utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    //const servers = ns.args;\\n    const servers = await loadTargetNames(ns);\\n    const targetInfo = (await loadTargetInfo(ns));\\n    const ordinati = targetInfo\\n        .sort(function (a, b) {\\n        return b.score - a.score;\\n    })\\n        .map((el) => el.name);\\n    while (true) {\\n        //growRunningServer = checkGrowServer(ns, servers, growRunningServer);\\n        //checkWeakenServer(ns, servers);\\n        //checkServer(ns, servers, 'srv-1');\\n        //checkServer(ns, servers, 'srv-2');\\n        //checkServer(ns, servers, 'srv-3');\\n        //checkServer(ns, servers, 'srv-4');\\n        //checkServer(ns, servers, 'srv-5');\\n        //checkServer(ns, servers, 'srv-6');\\n        //checkServer(ns, servers, 'srv-7');\\n        //checkServer(ns, servers, 'srv-8');\\n        //checkServer(ns, servers, 'srv-9');\\n        //checkServer(ns, servers, 'srv-10');\\n        const servers = ns.getPurchasedServers().filter((el) => el != 'home' && el != XP_FARMER_SERVER_PREFIX);\\n        let i = 0;\\n        for (let server of servers) {\\n            checkServerSingoloTarget(ns, ordinati[i], server);\\n            i++;\\n            if (i >= ordinati.length)\\n                i = 0;\\n        }\\n        if (i >= ordinati.length)\\n            i = 0;\\n        checkAndStartBeginnerHackHome(ns, ordinati[i]);\\n        checkAutoWeak(ns, ordinati);\\n        await ns.sleep(5000);\\n    }\\n}\\nfunction startScriptHost(ns, host, target, script, otherArgs) {\\n    if (!host || !target)\\n        return;\\n    const scriptRam = ns.getScriptRam(script);\\n    const serverRam = ns.getServerMaxRam(host);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    const allArgs = [target, ...otherArgs, threads];\\n    ns.scp(script, host);\\n    ns.exec(script, host, threads, ...allArgs);\\n}\\nfunction secuOk(ns, server) {\\n    const securityThresh = ns.getServerMinSecurityLevel(server) + 5;\\n    const serverSec = ns.getServerSecurityLevel(server);\\n    return serverSec < securityThresh;\\n}\\n// START SERVER 1\\nfunction checkServer(ns, servers, host) {\\n    for (let server of servers) {\\n        const securityThresh = ns.getServerMinSecurityLevel(server);\\n        const serverSec = ns.getServerSecurityLevel(server);\\n        const secOk = serverSec < securityThresh;\\n        const moneyThresh = ns.getServerMaxMoney(server);\\n        if (ns.getServerUsedRam(host) > 0) {\\n            if (!secOk) {\\n                checkAndKillScriptHost(ns, host, server, SERVER_GROW_SCRIPT_NAME, [moneyThresh]);\\n            }\\n            else\\n                continue;\\n        }\\n        const serverMoney = ns.getServerMoneyAvailable(server);\\n        if (!secOk) {\\n            startScriptHost(ns, host, server, SERVER_WEAKEN_SCRIPT_NAME, [securityThresh]);\\n        }\\n        else if (serverMoney < moneyThresh) {\\n            startScriptHost(ns, host, server, SERVER_GROW_SCRIPT_NAME, [moneyThresh]);\\n        }\\n        else {\\n            startScriptHost(ns, host, server, SERVER_HACK_SCRIPT_NAME, [securityThresh, moneyThresh]);\\n        }\\n    }\\n}\\nfunction checkServerSingoloTarget(ns, target, server) {\\n    if (!target)\\n        return;\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    const serverSec = ns.getServerSecurityLevel(target);\\n    const secOk = serverSec <= securityThresh;\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.9;\\n    const securityThreshScript = securityThresh;\\n    //\\tif (ns.getServerUsedRam(host) > 0) {\\n    //\\t\\tif (serverSec < securityThreshScript) {\\n    //\\t\\t\\tcheckAndKillScriptHost(ns, host, server, SERVER_GROW_SCRIPT_NAME, [securityThreshScript])\\n    //\\t\\t} else\\n    //\\t\\t\\treturn;\\n    //\\t}\\n    const serverMoney = ns.getServerMoneyAvailable(target);\\n    if (!secOk) {\\n        startScriptHost(ns, server, target, SERVER_WEAKEN_SCRIPT_NAME, [securityThresh]);\\n    }\\n    else if (serverMoney < moneyThresh) {\\n        startScriptHost(ns, server, target, SERVER_GROW_SCRIPT_NAME, [moneyThresh, securityThreshScript]);\\n    }\\n    else {\\n        startScriptHost(ns, server, target, SERVER_HACK_SCRIPT_NAME, [securityThreshScript, moneyThresh]);\\n    }\\n}\\nfunction checkAndKillScriptHost(ns, host, server, script, otherArgs) {\\n    const scriptRam = ns.getScriptRam(script);\\n    const serverRam = ns.getServerMaxRam(host);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    const allArgs = [server, ...otherArgs, threads];\\n    if (ns.isRunning(script, host, ...allArgs))\\n        ns.scriptKill(script, host);\\n}\\n/** @param {NS} ns */\\nfunction checkAutoWeak(ns, servers) {\\n    for (let server of servers) {\\n        checkAndStartAutoWeak(ns, server);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartAutoWeak(ns, server) {\\n    const scriptRam = ns.getScriptRam(SERVER_WEAKEN_V2_SCRIPT_NAME);\\n    const serverRam = ns.getServerMaxRam(server);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    if (threads > 0) {\\n        if (!ns.isRunning(SERVER_WEAKEN_V2_SCRIPT_NAME, server, server, threads)) {\\n            ns.scp(SERVER_WEAKEN_V2_SCRIPT_NAME, server);\\n            ns.exec(SERVER_WEAKEN_V2_SCRIPT_NAME, server, threads, server, threads);\\n        }\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartBeginnerHackHome(ns, target) {\\n    const scriptRam = ns.getScriptRam('beginner-hack.js');\\n    const serverUsedRam = ns.getServerUsedRam('home');\\n    const serverRam = ns.getServerMaxRam('home') - 20;\\n    const threads = Math.floor((serverRam - serverUsedRam) / scriptRam);\\n    if (!isNaN(threads) && threads > 0) {\\n        ns.exec('beginner-hack.js', 'home', threads, target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlLWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYW5hZ2Vycy9tYW5hZ2UtYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsdUJBQXVCLEVBQ3ZCLHlCQUF5QixFQUN6Qiw0QkFBNEIsRUFDNUIsdUJBQXVCLEdBQ3hCLE1BQU0sYUFBYSxDQUFDO0FBRXJCLE9BQU8sRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdEUscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQiwwQkFBMEI7SUFDMUIsTUFBTSxPQUFPLEdBQWEsTUFBTSxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEQsTUFBTSxVQUFVLEdBQWlCLENBQUMsTUFBTSxjQUFjLENBQUMsRUFBRSxDQUFDLENBQWlCLENBQUM7SUFDNUUsTUFBTSxRQUFRLEdBQUcsVUFBVTtTQUN4QixJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztRQUNsQixPQUFPLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMzQixDQUFDLENBQUM7U0FDRCxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixPQUFPLElBQUksRUFBRTtRQUNYLHNFQUFzRTtRQUN0RSxpQ0FBaUM7UUFDakMsb0NBQW9DO1FBQ3BDLG9DQUFvQztRQUNwQyxvQ0FBb0M7UUFDcEMsb0NBQW9DO1FBQ3BDLG9DQUFvQztRQUNwQyxvQ0FBb0M7UUFDcEMsb0NBQW9DO1FBQ3BDLG9DQUFvQztRQUNwQyxvQ0FBb0M7UUFDcEMscUNBQXFDO1FBQ3JDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIs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\",\"filename\":\"/managers/manage-all.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.45,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PREP_SERVER_GROW_SCRIPT, PREP_SERVER_HACK_SCRIPT, PREP_SERVER_WEAKEN_SCRIPT, SERVER_WEAKEN_V2_SCRIPT_NAME, XP_FARMER_SERVER_PREFIX, } from 'const/files';\\nimport * as calculators from 'utils/calculation-utils';\\nimport { ServerManager } from 'utils/server-manager';\\nimport { loadTargetInfo, loadTargetNames } from 'utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const debug = ns.args[0] ? true : false;\\n    //ns.disableLog(\\\"ALL\\\");\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMaxRam');\\n    ns.disableLog('getServerUsedRam');\\n    ns.disableLog('getServerSecurityLevel');\\n    ns.disableLog('getServerMinSecurityLevel');\\n    ns.disableLog('getServerMaxMoney');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('getHackingLevel');\\n    ns.disableLog('exec');\\n    if (debug)\\n        ns.tail();\\n    while (true) {\\n        const servers = ns.getPurchasedServers().filter((el) => el != XP_FARMER_SERVER_PREFIX);\\n        servers.unshift('home');\\n        const serverManager = new ServerManager(ns, servers);\\n        const allTargets = await loadTargetNames(ns);\\n        // if not debug mode start \\\"weakmyself\\\" process on each target\\n        if (!debug)\\n            checkAutoWeak(ns, allTargets);\\n        const targetInfo = (await loadTargetInfo(ns)).filter((el) => el.score > 0);\\n        const toPrep = targetInfo\\n            .filter((el) => !el.prepped)\\n            .sort(function (a, b) {\\n            return b.score - a.score;\\n        });\\n        let prepped = targetInfo.filter((el) => el.prepped);\\n        serverManager.aggiornaUtilizzo(true);\\n        if (debug) {\\n            ns.print('servers: ', servers);\\n            ns.print('server manager: ', serverManager);\\n        }\\n        if (prepped.length > 0) {\\n            prepped = prepped\\n                .sort(function (a, b) {\\n                return b.score - a.score;\\n            })\\n                .filter((el) => serverManager.hackTargets.indexOf(el.name) < 0);\\n            for (let prep of prepped) {\\n                launchHack(ns, serverManager, prep, debug);\\n            }\\n        }\\n        if (serverManager.serverLiberi()) {\\n            const weakCost = ns.getScriptRam(PREP_SERVER_WEAKEN_SCRIPT);\\n            const growCost = ns.getScriptRam(PREP_SERVER_GROW_SCRIPT);\\n            for (let target of toPrep) {\\n                prepTarget(ns, target, serverManager, weakCost, growCost, debug);\\n                if (!serverManager.serverLiberi())\\n                    break;\\n            }\\n        }\\n        await ns.sleep(5000);\\n        if (debug)\\n            break;\\n    }\\n}\\n/**\\n *\\n * @param {NS} ns\\n * @param servers\\n * @param target\\n * @returns true if server list is still usable, false otherwise\\n */\\nfunction launchHack(ns, serverManager, target, debug = false) {\\n    const scriptRam = ns.getScriptRam(PREP_SERVER_HACK_SCRIPT);\\n    const hackThreadNeeded = calculators.calcolaThreadHack(ns, target, debug);\\n    serverManager.avviaScript(PREP_SERVER_HACK_SCRIPT, hackThreadNeeded, scriptRam, target.name, debug);\\n    return serverManager;\\n}\\n/** @param {NS} ns */\\nfunction prepTarget(ns, target, serverManager, weakCost, growCost, debug = false) {\\n    if (serverManager.weakTargets.indexOf(target.name) < 0) {\\n        const weakThreadNeeded = calculators.calcolaThreadWeak(ns, target, debug);\\n        serverManager.avviaScript(PREP_SERVER_WEAKEN_SCRIPT, weakThreadNeeded, weakCost, target.name, debug);\\n    }\\n    if (serverManager.growTargets.indexOf(target.name) < 0) {\\n        const growThreadNeeded = calculators.calcolaThreadGrow(ns, target, debug);\\n        const weakThreadCompensationNeeded = calculators.calcolaWeakThreadPerGrow(growThreadNeeded);\\n        serverManager.avviaScript(PREP_SERVER_GROW_SCRIPT, growThreadNeeded, growCost, target.name, debug);\\n        serverManager.avviaScript(PREP_SERVER_WEAKEN_SCRIPT, weakThreadCompensationNeeded, weakCost, target.name, debug);\\n    }\\n    return serverManager;\\n}\\n/** @param {NS} ns */\\nfunction checkAutoWeak(ns, servers) {\\n    for (let server of servers) {\\n        checkAndStartAutoWeak(ns, server);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartAutoWeak(ns, server) {\\n    const scriptRam = ns.getScriptRam(SERVER_WEAKEN_V2_SCRIPT_NAME);\\n    const serverRam = ns.getServerMaxRam(server);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    if (threads > 0) {\\n        if (!ns.isRunning(SERVER_WEAKEN_V2_SCRIPT_NAME, server, server, threads)) {\\n            ns.scp(SERVER_WEAKEN_V2_SCRIPT_NAME, server);\\n            ns.exec(SERVER_WEAKEN_V2_SCRIPT_NAME, server, threads, server, threads);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlclYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hbmFnZXJzL21hbmFnZXJWMi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLHVCQUF1QixFQUN2Qix5QkFBeUIsRUFDekIsNEJBQTRCLEVBQzVCLHVCQUF1QixHQUN4QixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEtBQUssV0FBVyxNQUFNLHlCQUF5QixDQUFDO0FBRXZELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXRFLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3hDLHVCQUF1QjtJQUN2QixFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCLEVBQUUsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNqQyxFQUFFLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDbEMsRUFBRSxDQUFDLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3hDLEVBQUUsQ0FBQyxVQUFVLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUMzQyxFQUFFLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDbkMsRUFBRSxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ3pDLEVBQUUsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNqQyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RC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\",\"filename\":\"/managers/managerV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/c8903bd5-ad1a-4245-ab13-bc7bc2f48867\",\"moduleSequenceNumber\":293},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/e7d46999-8835-4f7d-b689-dd3141111892\",\"moduleSequenceNumber\":292},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/d22921f6-8ca9-451a-bc41-e73a035c5af8\",\"moduleSequenceNumber\":323},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/28c353d5-ee6a-4558-9c79-bb5bdcbf8964\",\"moduleSequenceNumber\":292},{\"filename\":\"/utils/server-data.js\",\"url\":\"blob:https://danielyxie.github.io/88e8b539-3e32-484f-91ba-95401ad966df\",\"moduleSequenceNumber\":310},{\"filename\":\"/utils/server-manager.js\",\"url\":\"blob:https://danielyxie.github.io/6893b285-0bef-486a-911d-ef526ad9f1ed\",\"moduleSequenceNumber\":309},{\"filename\":\"/utils/calculation-utils.js\",\"url\":\"blob:https://danielyxie.github.io/8561dde3-bd71-4499-8871-e69a3d2b5e07\",\"moduleSequenceNumber\":307},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/685bd587-9eb1-4c7c-b8ad-e67b55b2ca93\",\"moduleSequenceNumber\":292},{\"filename\":\"/managers/managerV2.js\",\"url\":\"blob:https://danielyxie.github.io/254c7309-13eb-4383-a304-9e95a8e87e62\",\"moduleSequenceNumber\":637}],\"dependents\":[],\"ramUsage\":11.45,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/hwgw/grow.js\",\"url\":\"blob:https://danielyxie.github.io/e93e2ea2-7cc3-4e13-99d7-ac96e3cddfa0\",\"moduleSequenceNumber\":1028}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/hwgw/hack.js\",\"url\":\"blob:https://danielyxie.github.io/d9098980-20e0-40e7-9b5e-988d19f409f4\",\"moduleSequenceNumber\":1088}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HwgwServerBatch } from 'hwgw/hwgw-server-batch';\\nexport class HwgwBatch {\\n    tempoHack;\\n    tempoWeak;\\n    tempoGrow;\\n    running = false;\\n    constructor(tempoHack, tempoWeak, tempoGrow) {\\n        this.tempoGrow = tempoGrow;\\n        this.tempoHack = tempoHack;\\n        this.tempoWeak = tempoWeak;\\n    }\\n    creaServerBatch(ns, server, target, calc, iteration = 0, scriptDelay = 100) {\\n        return new HwgwServerBatch(this.tempoHack, this.tempoWeak, this.tempoGrow, server, ns, target, calc, iteration, scriptDelay);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1iYXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctYmF0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBS3pELE1BQU0sT0FBTyxTQUFTO0lBQ3BCLFNBQVMsQ0FBUztJQUNsQixTQUFTLENBQVM7SUFDbEIsU0FBUyxDQUFTO0lBQ2xCLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFFaEIsWUFBWSxTQUFpQixFQUFFLFNBQWlCLEVBQUUsU0FBaUI7UUFDakUsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVELGVBQWUsQ0FDYixFQUFNLEVBQ04sTUFBa0IsRUFDbEIsTUFBc0IsRUFDdEIsSUFBcUIsRUFDckIsU0FBUyxHQUFHLENBQUMsRUFDYixXQUFXLEdBQUcsR0FBRztRQUVqQixPQUFPLElBQUksZUFBZSxDQUN4QixJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFNBQVMsRUFDZCxNQUFNLEVBQ04sRUFBRSxFQUNGLE1BQU0sRUFDTixJQUFJLEVBQ0osU0FBUyxFQUNULFdBQVcsQ0FDWixDQUFDO0lBQ0osQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/hwgw-batch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/hwgw/weak.js\",\"url\":\"blob:https://danielyxie.github.io/4b583bb4-067c-406a-9742-f6d5c3d2ad42\",\"moduleSequenceNumber\":1027}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { EMPTY_PORT_DATA, HWGW_PORTS, HWGW_PREP_PORTS, SERVER_WEAKEN_V2_SCRIPT_NAME, } from 'const/files';\\nimport { HwgwBatch } from 'hwgw/hwgw-batch';\\nimport { HwgwServerManager } from 'hwgw/hwgw-server-manager';\\nimport { HwgOpsCalulator } from 'utils/hwg-ops-calulator';\\nimport { HwgwServerInfo } from 'utils/hwgw-server-info';\\nimport { loadTargetInfo } from 'utils/target-loader';\\nimport { WgwBatch } from '/hwgw/wgw-batch';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('getServerUsedRam');\\n    ns.disableLog('getServerMaxRam');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('getServerSecurityLevel');\\n    ns.disableLog('getServerMinSecurityLevel');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('getServerMaxMoney');\\n    ns.disableLog('getHackingLevel');\\n    ns.disableLog('exec');\\n    ns.disableLog('sleep');\\n    let batches = new Map();\\n    let preppin = [];\\n    for (let port of HWGW_PORTS) {\\n        ns.clearPort(port);\\n    }\\n    for (let port of HWGW_PREP_PORTS) {\\n        ns.clearPort(port);\\n    }\\n    while (true) {\\n        const serverManager = new HwgwServerManager(ns);\\n        preppin = checkPreppinPort(ns, preppin);\\n        checkBatchingPorts(ns, batches);\\n        const serverInfo = (await loadTargetInfo(ns)).map((el) => new HwgwServerInfo(ns, el));\\n        // ns.print('lista full servers: ', serverInfo);\\n        // ns.print('preppin: ', preppin);\\n        checkAutoWeak(ns, serverInfo.map((el) => el.name));\\n        const toPrep = serverInfo.filter((el) => !el.prepped && (!batches.has(el.name) || !batches.get(el.name)?.running));\\n        const toBatch = serverInfo\\n            .filter((el) => el.prepped)\\n            .sort(function (a, b) {\\n            return b.hwgwScore - a.hwgwScore;\\n        });\\n        await prepServers(ns, toPrep, preppin, serverManager);\\n        batches = await batch(ns, toBatch, batches, serverManager);\\n        await ns.sleep(2000);\\n    }\\n}\\n// -----------------------------------------------------\\n// -------------- PORT CHECKING START ------------------\\n// -----------------------------------------------------\\nfunction checkBatchingPorts(ns, batches) {\\n    if (batches.size <= 0)\\n        return;\\n    for (let port of HWGW_PORTS) {\\n        let portValue = ns.readPort(port);\\n        while (portValue !== EMPTY_PORT_DATA) {\\n            const batch = batches.get(portValue);\\n            if (batch != undefined) {\\n                batch.running = false;\\n            }\\n            portValue = ns.readPort(port);\\n        }\\n    }\\n}\\nfunction checkPreppinPort(ns, preppin) {\\n    if (preppin.length <= 0)\\n        return preppin;\\n    for (let port of HWGW_PREP_PORTS) {\\n        let portValue = ns.readPort(port);\\n        while (portValue !== EMPTY_PORT_DATA) {\\n            preppin = preppin.filter((el) => el != portValue);\\n            portValue = ns.readPort(port);\\n        }\\n    }\\n    return preppin;\\n}\\n// -----------------------------------------------------\\n// -------------- PORT CHECKING END ------------------\\n// ------------------------------------------------------\\n// ---------------------------------------------------------\\n// -------------- BATCHING FUNCTION START ------------------\\n// ---------------------------------------------------------\\nasync function batch(ns, toBatch, batches, serverManager) {\\n    let portSeed = 1;\\n    for (let target of toBatch) {\\n        let batch = batches.get(target.name);\\n        if (batch == undefined || !batch.running) {\\n            const calc = new HwgOpsCalulator(ns, target);\\n            batch = creaBatch(calc);\\n            batch.running = await serverManager.avviaHwgwBatch(target, batch, calc, new Date().getTime(), portSeed);\\n            batches = batches.set(target.name, batch);\\n            portSeed++;\\n            await ns.sleep(1);\\n        }\\n    }\\n    return batches;\\n}\\nfunction creaBatch(calc) {\\n    const hackTime = calc.calcolaHackTime();\\n    const weakTime = calc.calcolaWeakTime();\\n    const growTime = calc.calcolaGrowTime();\\n    return new HwgwBatch(hackTime, weakTime, growTime);\\n}\\n// -------------------------------------------------------\\n// -------------- BATCHING FUNCTION END ------------------\\n// -------------------------------------------------------\\n// --------------------------------------------------------\\n// -------------- PREPPIN FUNCTION START ------------------\\n// --------------------------------------------------------\\nasync function prepServers(ns, toPrep, preppin, serverMgr) {\\n    let portSeed = 1;\\n    for (let daPreparare of toPrep) {\\n        if (preppin.includes(daPreparare.name))\\n            continue;\\n        serverMgr.aggiornaUtilizzo();\\n        if (!serverMgr.serverLiberi())\\n            return;\\n        const calc = new HwgOpsCalulator(ns, daPreparare);\\n        const weakTime = calc.calcolaWeakTime();\\n        const growTime = calc.calcolaGrowTime();\\n        const batch = new WgwBatch(portSeed, weakTime, growTime);\\n        batch.calcolaWgwThreads(ns, daPreparare, calc);\\n        const ramNecessaria = batch.getNeededRam();\\n        if (!serverMgr.canRun(ramNecessaria))\\n            return;\\n        serverMgr.avviaWgwBatch(daPreparare.name, batch);\\n        preppin.push(daPreparare.name);\\n        portSeed++;\\n    }\\n    if (toPrep.length > 0)\\n        await ns.sleep(1000);\\n}\\n// ------------------------------------------------------\\n// -------------- PREPPIN FUNCTION END ------------------\\n// ------------------------------------------------------\\n// ---------------------------------------------------------\\n// -------------- AUTOWEAK FUNCTION START ------------------\\n// ---------------------------------------------------------\\nfunction checkAutoWeak(ns, servers) {\\n    for (let server of servers) {\\n        checkAndStartAutoWeak(ns, server);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartAutoWeak(ns, server) {\\n    const scriptRam = ns.getScriptRam(SERVER_WEAKEN_V2_SCRIPT_NAME);\\n    const serverRam = ns.getServerMaxRam(server);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    if (threads > 0) {\\n        if (!ns.isRunning(SERVER_WEAKEN_V2_SCRIPT_NAME, server, server, threads)) {\\n            ns.scp(SERVER_WEAKEN_V2_SCRIPT_NAME, server);\\n            ns.exec(SERVER_WEAKEN_V2_SCRIPT_NAME, server, threads, server, threads);\\n        }\\n    }\\n}\\n// -------------------------------------------------------\\n// -------------- AUTOWEAK FUNCTION END ------------------\\n// -------------------------------------------------------\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hbmFnZXJzL2h3Z3ctbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsZUFBZSxFQUNmLFVBQVUsRUFDVixlQUFlLEVBRWYsNEJBQTRCLEdBQzdCLE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXhELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0MscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNqQyxFQUFFLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDekMsRUFBRSxDQUFDLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3hDLEVBQUUsQ0FBQyxVQUFVLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUMzQyxFQUFFLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDekMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ25DLEVBQUUsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNqQyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lB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\",\"filename\":\"/managers/hwgw-manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/d609e3da-d594-4d57-b220-06007b99c9ec\",\"moduleSequenceNumber\":961},{\"filename\":\"/hwgw/wgw-batch.js\",\"url\":\"blob:https://danielyxie.github.io/354e3c6c-3146-43c0-a8f8-d80a482170b5\",\"moduleSequenceNumber\":1007},{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/c7872c7f-65ac-487d-bdd4-6a4ee808d633\",\"moduleSequenceNumber\":962},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/0eb86d25-4338-4cce-a98b-eafcd977dc6e\",\"moduleSequenceNumber\":961},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/4840076a-022d-4f7a-8291-f8ec4621fdf1\",\"moduleSequenceNumber\":992},{\"filename\":\"/utils/hwgw-server-info.js\",\"url\":\"blob:https://danielyxie.github.io/8aa81f2f-8594-4fb7-b4eb-79a115b3c59f\",\"moduleSequenceNumber\":1001},{\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"blob:https://danielyxie.github.io/ec17ad89-ee53-4729-9331-0c9b64faeb68\",\"moduleSequenceNumber\":993},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/aa5cec06-15e4-42b7-8588-40413a142bb1\",\"moduleSequenceNumber\":961},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/fb7b6f0b-5e87-4831-9fc4-1d5d7196972c\",\"moduleSequenceNumber\":961},{\"filename\":\"/utils/server-data.js\",\"url\":\"blob:https://danielyxie.github.io/95977ece-eefb-44f6-bc94-63a14e89cfc2\",\"moduleSequenceNumber\":979},{\"filename\":\"/hwgw/hwgw-server-manager.js\",\"url\":\"blob:https://danielyxie.github.io/84490fcf-de8f-4992-ac8c-dba344d9d497\",\"moduleSequenceNumber\":1008},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/61a94567-d491-4ece-bd61-8e1d3b13f490\",\"moduleSequenceNumber\":961},{\"filename\":\"/hwgw/hwgw-server-batch.js\",\"url\":\"blob:https://danielyxie.github.io/bcea44fd-a1ee-4e2f-b95f-c4d08e81a600\",\"moduleSequenceNumber\":1009},{\"filename\":\"/hwgw/hwgw-batch.js\",\"url\":\"blob:https://danielyxie.github.io/aee947d7-dc51-4f27-83d4-4f1c97cd278f\",\"moduleSequenceNumber\":989},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/f1169b32-d24c-42e5-9564-c112321cb005\",\"moduleSequenceNumber\":961},{\"filename\":\"/managers/hwgw-manager.js\",\"url\":\"blob:https://danielyxie.github.io/85728b52-96c4-421c-a36e-f5dfc3ea86a1\",\"moduleSequenceNumber\":1017}],\"dependents\":[],\"ramUsage\":14,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ALL_SERVERS_FILENAME, SERVERS_DETAIL_FILENAME, SERVERS_FILENAME } from 'const/files';\\nimport { FileHandler } from 'files/filehandler';\\nexport async function loadTargetNames(ns) {\\n    return (await new FileHandler(ns, SERVERS_FILENAME).read());\\n}\\nexport async function loadTargetInfo(ns) {\\n    return await new FileHandler(ns, SERVERS_DETAIL_FILENAME).read();\\n}\\nexport async function loadAllTargets(ns) {\\n    return await new FileHandler(ns, ALL_SERVERS_FILENAME).read();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFyZ2V0LWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy90YXJnZXQtbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSx1QkFBdUIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5RixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHaEQsTUFBTSxDQUFDLEtBQUssVUFBVSxlQUFlLENBQUMsRUFBTTtJQUMxQyxPQUFPLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBYSxDQUFDO0FBQzFFLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGNBQWMsQ0FBQyxFQUFNO0lBQ3pDLE9BQU8sTUFBTSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsdUJBQXVCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuRSxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxjQUFjLENBQUMsRUFBTTtJQUN6QyxPQUFPLE1BQU0sSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLG9CQUFvQixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDaEUsQ0FBQyJ9\",\"filename\":\"/utils/target-loader.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgOpsCalulator {\\n    ns;\\n    target;\\n    targetServer;\\n    hasFormulas = false;\\n    constructor(ns, target) {\\n        this.ns = ns;\\n        this.target = target;\\n        this.targetServer = ns.getServer(this.target.name);\\n        this.hasFormulas = ns.fileExists('formulas.exe', 'home');\\n    }\\n    calcolaGrowThreads(startingMoney, cores = 1, debug = false) {\\n        const threads = this.growtThreadsInternal(startingMoney, cores, debug);\\n        return Math.max(1, Math.ceil(threads));\\n    }\\n    calcolaGrowTime(debug = false) {\\n        let time;\\n        if (this.hasFormulas) {\\n            time = this.ns.formulas.hacking.growTime(this.targetServer, this.ns.getPlayer());\\n        }\\n        else {\\n            time = this.ns.getGrowTime(this.target.name);\\n        }\\n        return Math.max(1, Math.ceil(time));\\n    }\\n    calcolaWeakThread(cores = 1) {\\n        const currentSec = this.target.currentSec;\\n        const secWeak = this.ns.weakenAnalyze(1, cores);\\n        const rate = (currentSec - this.target.minSecurity) / secWeak;\\n        return Math.max(1, Math.ceil(rate));\\n    }\\n    calcolaWeakTime() {\\n        let time;\\n        if (this.hasFormulas) {\\n            time = this.ns.formulas.hacking.weakenTime(this.targetServer, this.ns.getPlayer());\\n        }\\n        else {\\n            time = this.ns.getWeakenTime(this.target.name);\\n        }\\n        return Math.max(1, Math.ceil(time));\\n    }\\n    calcolaHackThread(percentage = 0.9) {\\n        const maxMoney = this.target.maxMoney;\\n        const moneyPerThread = (this.hasFormulas\\n            ? this.ns.formulas.hacking.hackPercent(this.targetServer, this.ns.getPlayer())\\n            : this.ns.hackAnalyze(this.target.name)) * maxMoney;\\n        const minWanted = maxMoney * percentage;\\n        const rate = minWanted / moneyPerThread;\\n        const threads = Math.max(1, Math.floor(rate));\\n        return threads;\\n    }\\n    calcolaHackPerc() {\\n        if (this.hasFormulas) {\\n            return this.ns.formulas.hacking.hackPercent(this.targetServer, this.ns.getPlayer());\\n        }\\n        else {\\n            return this.ns.hackAnalyze(this.target.name);\\n        }\\n    }\\n    calcolaHackTime() {\\n        let time;\\n        if (this.hasFormulas) {\\n            time = this.ns.formulas.hacking.hackTime(this.targetServer, this.ns.getPlayer());\\n        }\\n        else {\\n            time = this.ns.getHackTime(this.target.name);\\n        }\\n        return Math.max(1, Math.ceil(time));\\n    }\\n    calcolaHackChance() {\\n        if (this.hasFormulas) {\\n            return this.ns.formulas.hacking.hackChance(this.targetServer, this.ns.getPlayer());\\n        }\\n        else {\\n            return this.ns.getHackTime(this.target.name);\\n        }\\n    }\\n    calcolaHackXp() {\\n        if (this.hasFormulas) {\\n            return this.ns.formulas.hacking.hackExp(this.targetServer, this.ns.getPlayer());\\n        }\\n        else {\\n            return -1;\\n        }\\n    }\\n    calcolaWeakThreadPerGrow(growThreads) {\\n        return Math.ceil((growThreads * 0.004) / 0.05);\\n    }\\n    growtThreadsInternal(startingMoney, cores = 1, debug = false) {\\n        if (this.hasFormulas) {\\n            if (startingMoney)\\n                this.targetServer.moneyAvailable = startingMoney;\\n            return this.ns.formulas.hacking.growThreads(this.targetServer, this.ns.getPlayer(), this.target.maxMoney, cores);\\n        }\\n        else {\\n            const currentMoney = startingMoney ? startingMoney : this.target.currentMoney;\\n            const rate = this.target.maxMoney / (currentMoney > 0 ? currentMoney : 1);\\n            return this.ns.growthAnalyze(this.target.name, rate, cores);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdnLW9wcy1jYWx1bGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvaHdnLW9wcy1jYWx1bGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLGVBQWU7SUFDMUIsRUFBRSxDQUFLO0lBQ1AsTUFBTSxDQUFpQjtJQUN2QixZQUFZLENBQVM7SUFDckIsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUNwQixZQUFZLEVBQU0sRUFBRSxNQUFzQjtRQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELGtCQUFrQixDQUFDLGFBQWlDLEVBQUUsUUFBZ0IsQ0FBQyxFQUFFLEtBQUssR0FBRyxLQUFLO1FBQ3BGLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZFLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxlQUFlLENBQUMsS0FBSyxHQUFHLEtBQUs7UUFDM0IsSUFBSSxJQUFZLENBQUM7UUFDakIsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLEVBQUUs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\",\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    for (let i = 0; i < 17; i++) {\\n        calcolaTempiBatch(ns, 25000, 35246, 28765, i);\\n    }\\n    // testHackCalc(ns);\\n}\\nfunction calcolaTempiBatch(ns, tempoHack, tempoWeak, tempoGrow, iteration = 0, scritpDelay = 100) {\\n    const sleepWeakHack = scritpDelay * iteration * 4;\\n    const sleepHack = tempoWeak - tempoHack - scritpDelay + sleepWeakHack;\\n    const endHack = sleepHack + tempoHack;\\n    const endWeakHack = tempoWeak + sleepWeakHack;\\n    const sleepGrow = endWeakHack - tempoGrow + scritpDelay;\\n    const endGrow = sleepGrow + tempoGrow;\\n    const sleepWeakGrow = endGrow - tempoWeak + scritpDelay;\\n    const endWeakGrow = sleepWeakGrow + tempoWeak;\\n    ns.print('iterazione ' + iteration + ' end hack: ', endHack);\\n    ns.print('iterazione ' + iteration + ' end endWeakHack: ', endWeakHack);\\n    ns.print('iterazione ' + iteration + ' end endGrow: ', endGrow);\\n    ns.print('iterazione ' + iteration + ' end endWeakGrow: ', endWeakGrow);\\n    const sleepGrow2 = Math.max(1, Math.ceil(tempoWeak - tempoGrow)) + scritpDelay;\\n    const endGrow2 = sleepGrow + tempoGrow;\\n    const sleepWeakGrow2 = Math.max(1, Math.ceil(endGrow - tempoWeak)) + scritpDelay;\\n    const endWeakGrow2 = sleepWeakGrow2 + tempoWeak;\\n    // ns.print('end endWeak: ', tempoWeak);\\n    // ns.print('end endGrow2: ', endGrow2);\\n    // ns.print('end endWeakGrow2: ', endWeakGrow2);\\n}\\nfunction testHackCalc(ns) {\\n    let server = ns.getServer('joesguns');\\n    const maxMoney = ns.getServer('joesguns').moneyMax;\\n    const moneyPerThread = 0.06 * maxMoney;\\n    const minWanted = maxMoney * 0.9;\\n    const rate = minWanted / moneyPerThread;\\n    const threads = Math.max(1, Math.floor(rate));\\n    let WEAKEN_PER_THREAD = ns.weakenAnalyze(1, 1);\\n    let HW_THREADS = ns.hackAnalyzeSecurity(1) / WEAKEN_PER_THREAD;\\n    let GW_THREADS = ns.growthAnalyzeSecurity(1, undefined, 1) / WEAKEN_PER_THREAD;\\n    let hackWeakThreads = Math.max(1, Math.ceil(HW_THREADS * threads));\\n    server.moneyAvailable = minWanted;\\n    let growThreads = ns.formulas.hacking.growThreads(server, ns.getPlayer(), server.moneyMax, 1);\\n    let growWeakThreads = Math.max(1, Math.ceil(GW_THREADS * growThreads));\\n    ns.print('max money: ', maxMoney);\\n    ns.print('hackthread ', threads);\\n    ns.print('hackWeakThreads ', hackWeakThreads);\\n    ns.print('growThreads ', growThreads);\\n    ns.print('growWeakThreads ', growWeakThreads);\\n    ns.print('GW_THREADS ', GW_THREADS);\\n    ns.print('HW_THREADS ', HW_THREADS);\\n    ns.print('WEAKEN_PER_THREAD ', WEAKEN_PER_THREAD);\\n    ns.print('ns.hackAnalyzeSecurity(1) ', ns.hackAnalyzeSecurity(1));\\n    ns.print(\\\"ns.growthAnalyzeSecurity(1, 'joesguns', 1) \\\", ns.growthAnalyzeSecurity(1, undefined, 1));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy90ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDM0IsaUJBQWlCLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQy9DO0lBQ0Qsb0JBQW9CO0FBQ3RCLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUN4QixFQUFNLEVBQ04sU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsWUFBb0IsQ0FBQyxFQUNyQixjQUFzQixHQUFHO0lBRXpCLE1BQU0sYUFBYSxHQUFHLFdBQVcsR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBRWxELE1BQU0sU0FBUyxHQUFHLFNBQVMsR0FBRyxTQUFTLEdBQUcsV0FBVyxHQUFHLGFBQWEsQ0FBQztJQUN0RSxNQUFNLE9BQU8sR0FBRyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBRXRDLE1BQU0sV0FBVyxHQUFHLFNBQVMsR0FBRyxhQUFhLENBQUM7SUFFOUMsTUFBTSxTQUFTLEdBQUcsV0FBVyxHQUFHLFNBQVMsR0FBRyxXQUFXLENBQUM7SUFDeEQsTUFBTSxPQUFPLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUV0QyxNQUFNLGFBQWEsR0FBRyxPQUFPLEdBQUcsU0FBUyxHQUFHLFdBQVcsQ0FBQztJQUN4RCxNQUFNLFdBQVcsR0FBRyxhQUFhLEdBQUcsU0FBUyxDQUFDO0lBRTlDLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLFNBQVMsR0FBRyxhQUFhLEVBQUUsT0FBTyxD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\",\"filename\":\"/tests/test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/tests/test.js\",\"url\":\"blob:https://danielyxie.github.io/0cc0d538-197a-4bb4-9157-586951fe425b\",\"moduleSequenceNumber\":92404}],\"dependents\":[],\"ramUsage\":7.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FARM_SERVER_GB, WG_COST, XP_FARMER_SERVER_PREFIX, XP_FARM_SCRIPT_NAME } from 'const/files';\\nimport { loadTargetInfo } from 'utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    const servers = ns.getPurchasedServers().filter((el) => el.startsWith(XP_FARMER_SERVER_PREFIX));\\n    const targets = (await loadTargetInfo(ns)).sort(function (a, b) {\\n        return b.farmScore - a.farmScore;\\n    });\\n    let i = 0;\\n    for (let farmer of servers) {\\n        ns.exec(XP_FARM_SCRIPT_NAME, farmer, Math.floor(FARM_SERVER_GB / WG_COST), targets[0].name);\\n        i++;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pc2MveHAtZmFybWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQXNCLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUV4SCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFckQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1YsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztJQUNoRyxNQUFNLE9BQU8sR0FBSSxDQUFDLE1BQU0sY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1FBQzlFLE9BQU8sQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsS0FBSyxJQUFJLE1BQU0sSUFBSSxPQUFPLEVBQUU7UUFDMUIsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVGLENBQUMsRUFBRSxDQUFDO0tBQ0w7QUFDSCxDQUFDIn0=\",\"filename\":\"/misc/xp-farmer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/1b7130c4-485d-4acd-bb07-a4da82a88917\",\"moduleSequenceNumber\":962},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/d9b3a9c4-8fd9-4620-9aff-9418c4415e4d\",\"moduleSequenceNumber\":1259},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/4087189e-9e17-4e0f-ad23-de98d9fc58ac\",\"moduleSequenceNumber\":1319},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/e416fcc3-2a1f-4d2a-929b-d825ef4e5ec1\",\"moduleSequenceNumber\":1259},{\"filename\":\"/misc/xp-farmer.js\",\"url\":\"blob:https://danielyxie.github.io/5e33ef64-035c-4c62-9851-9a4bfcac3f8c\",\"moduleSequenceNumber\":2000}],\"dependents\":[],\"ramUsage\":5.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HwgwServerManager } from 'hwgw/hwgw-server-manager';\\nimport { WgwBatch } from 'hwgw/wgw-batch';\\nimport { HwgOpsCalulator } from 'utils/hwg-ops-calulator';\\nimport { HwgwServerInfo } from 'utils/hwgw-server-info';\\nimport { loadTargetInfo } from 'utils/target-loader';\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.enableLog('exec');\\n    // ns.tail();\\n    const toPrep = ns.args[0];\\n    const portSeed = ns.args[1] != undefined ? ns.args[1] : new Date().getTime();\\n    const target = new HwgwServerInfo(ns, (await loadTargetInfo(ns)).filter((el) => el.name == toPrep)[0]);\\n    const serverMgr = new HwgwServerManager(ns);\\n    serverMgr.aggiornaUtilizzo();\\n    if (!serverMgr.serverLiberi())\\n        return;\\n    const calc = new HwgOpsCalulator(ns, target);\\n    const weakTime = calc.calcolaWeakTime();\\n    const growTime = calc.calcolaGrowTime();\\n    const batch = new WgwBatch(portSeed, weakTime, growTime);\\n    batch.calcolaWgwThreads(ns, target, calc);\\n    serverMgr.avviaWgwBatch(target.name, batch);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1wcmVwcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2h3Z3cvaHdndy1wcmVwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXhELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVyRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQixhQUFhO0lBQ2IsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUNwQyxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN6RixNQUFNLE1BQU0sR0FBbUIsSUFBSSxjQUFjLENBQy9DLEVBQUUsRUFDRCxDQUFDLE1BQU0sY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDbEYsQ0FBQztJQUNGLE1BQU0sU0FBUyxHQUFzQixJQUFJLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFO1FBQUUsT0FBTztJQUV0QyxNQUFNLElBQUksR0FBb0IsSUFBSSxlQUFlLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzlELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN4QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFFeEMsTUFBTSxLQUFLLEdBQWEsSUFBSSxRQUFRLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNuRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxQyxTQUFTLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDOUMsQ0FBQyJ9\",\"filename\":\"/hwgw/hwgw-prepper.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/12a75a69-05c9-48e1-aaa0-d6c859208927\",\"moduleSequenceNumber\":42991},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/45087549-60c5-4318-a7af-bc00846124fb\",\"moduleSequenceNumber\":47398},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/c81a4c05-286b-4ec4-bca4-ba5820386f57\",\"moduleSequenceNumber\":47393},{\"filename\":\"/utils/hwgw-server-info.js\",\"url\":\"blob:https://danielyxie.github.io/930a8c5a-d56f-4bb7-a6f8-b748363c2e56\",\"moduleSequenceNumber\":71746},{\"filename\":\"/utils/hwg-ops-calulator.js\",\"url\":\"blob:https://danielyxie.github.io/f2ad5a71-b1ec-48f9-9e2c-254ec3f3796b\",\"moduleSequenceNumber\":71762},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/ac3b00db-4fc8-4dde-9883-766681e7587a\",\"moduleSequenceNumber\":47398},{\"filename\":\"/hwgw/wgw-batch.js\",\"url\":\"blob:https://danielyxie.github.io/b34327b1-a711-412c-a337-6951d6fb5009\",\"moduleSequenceNumber\":93898},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/1afb2806-950e-4580-9faf-1f909e1bbe66\",\"moduleSequenceNumber\":47398},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/8c6fae7e-3b2f-4e59-a034-71ee5caaac5c\",\"moduleSequenceNumber\":47398},{\"filename\":\"/utils/server-data.js\",\"url\":\"blob:https://danielyxie.github.io/506f1dd4-f60b-4fc3-a44f-bd20480ce1ce\",\"moduleSequenceNumber\":47381},{\"filename\":\"/hwgw/hwgw-server-manager.js\",\"url\":\"blob:https://danielyxie.github.io/6999706d-f6d2-4a01-bdd5-99d2e4d5c890\",\"moduleSequenceNumber\":102049},{\"filename\":\"/hwgw/hwgw-prepper.js\",\"url\":\"blob:https://danielyxie.github.io/ef1591de-eed6-4ea1-be2e-96fb661c9973\",\"moduleSequenceNumber\":102053}],\"dependents\":[],\"ramUsage\":12.2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GET_INFO_NAME, HWGW_MANAGER_NAME, SCAN_SCRIPT_NAME, } from \\\"const/files\\\";\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.exec(SCAN_SCRIPT_NAME, \\\"home\\\", 1);\\n    ns.exec(GET_INFO_NAME, \\\"home\\\", 1);\\n    ns.spawn(HWGW_MANAGER_NAME, 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnR1cC1od2d3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3N0YXJ0dXAtaHdndy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsYUFBYSxFQUNiLGlCQUFpQixFQUVqQixnQkFBZ0IsR0FDakIsTUFBTSxhQUFhLENBQUM7QUFFckIscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDakMsQ0FBQyJ9\",\"filename\":\"startup-hwgw.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/059f4571-62b6-4a9b-9838-9155b6f96200\",\"moduleSequenceNumber\":961},{\"filename\":\"startup-hwgw.js\",\"url\":\"blob:https://danielyxie.github.io/3a988015-84a7-4d61-83ec-ad72a3c099d2\",\"moduleSequenceNumber\":1014}],\"dependents\":[],\"ramUsage\":4.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FARM_SERVER_GB, MAX_FARMER_SERVER_NUM, XP_FARMER_SERVER_PREFIX } from 'const/files';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const purch = ns.getPurchasedServers().filter((el) => el.startsWith(XP_FARMER_SERVER_PREFIX));\\n    FARM_SERVER_GB;\\n    for (let server of purch) {\\n        const serverRam = ns.getServerMaxRam(server);\\n        if (serverRam != FARM_SERVER_GB) {\\n            //ns.tprint('dry run upgrade');\\n            ns.upgradePurchasedServer(server, FARM_SERVER_GB);\\n        }\\n    }\\n    for (let count = purch.length; count < MAX_FARMER_SERVER_NUM; count++) {\\n        //ns.tprint('dry run buy');\\n        ns.purchaseServer(XP_FARMER_SERVER_PREFIX + (count + 1), FARM_SERVER_GB);\\n    }\\n    ns.exec('/prep/prep-servers.js', 'home', 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFybS1zZXJ2ZXItYnV5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pc2MvZmFybS1zZXJ2ZXItYnV5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQUUscUJBQXFCLEVBQVcsdUJBQXVCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFdEcscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztJQUM5RixjQUFjLENBQUM7SUFDZixLQUFLLElBQUksTUFBTSxJQUFJLEtBQUssRUFBRTtRQUN4QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLElBQUksU0FBUyxJQUFJLGNBQWMsRUFBRTtZQUMvQiwrQkFBK0I7WUFDL0IsRUFBRSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztTQUNuRDtLQUNGO0lBQ0QsS0FBSyxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssR0FBRyxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUNyRSwyQkFBMkI7UUFDM0IsRUFBRSxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQztLQUMxRTtJQUNELEVBQUUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlDLENBQUMifQ==\",\"filename\":\"/misc/farm-server-buy.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/a2864155-b3f9-4999-9cca-f5531c349f52\",\"moduleSequenceNumber\":1259},{\"filename\":\"/misc/farm-server-buy.js\",\"url\":\"blob:https://danielyxie.github.io/d8e564a6-10dc-4e2d-bc3d-3fa966374109\",\"moduleSequenceNumber\":1981}],\"dependents\":[],\"ramUsage\":7.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"upgradePurchasedServer\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerManager } from 'utils/server-manager';\\nexport class HomeServerManager extends ServerManager {\\n    constructor(ns) {\\n        super(ns, ['home']);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9tZS1zZXJ2ZXItbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9ob21lLXNlcnZlci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVyRCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsYUFBYTtJQUNsRCxZQUFZLEVBQU07UUFDaEIsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDdEIsQ0FBQztDQUNGIn0=\",\"filename\":\"/utils/home-server-manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class HwgwServerInfo {\\n    name;\\n    minSecurity;\\n    maxMoney;\\n    currentSec = 100;\\n    currentMoney = 0;\\n    prepped = false;\\n    score = -1;\\n    hwgwScore = -1;\\n    constructor(ns, target) {\\n        this.name = target.name;\\n        this.minSecurity = target.minSecurity;\\n        this.maxMoney = target.maxMoney;\\n        this.score = target.score;\\n        this.hwgwScore = target.hwgwScore;\\n        this.ricalcolaVariabili(ns);\\n    }\\n    ricalcolaVariabili(ns) {\\n        this.currentSec = ns.getServerSecurityLevel(this.name);\\n        this.currentMoney = ns.getServerMoneyAvailable(this.name);\\n        this.prepped = this.currentSec == this.minSecurity && this.currentMoney == this.maxMoney;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1zZXJ2ZXItaW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9od2d3LXNlcnZlci1pbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLElBQUksQ0FBUztJQUNiLFdBQVcsQ0FBUztJQUNwQixRQUFRLENBQVM7SUFDakIsVUFBVSxHQUFXLEdBQUcsQ0FBQztJQUN6QixZQUFZLEdBQVcsQ0FBQyxDQUFDO0lBQ3pCLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDaEIsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ1gsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2YsWUFBWSxFQUFNLEVBQUUsTUFBa0I7UUFDcEMsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUNsQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELGtCQUFrQixDQUFDLEVBQU07UUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDM0YsQ0FBQztDQUNGIn0=\",\"filename\":\"/utils/hwgw-server-info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { BEGINNER_HACK_SCRIPT_NAME, BITNODE_MANAGER_NAME, SERVER_WEAKEN_V2_SCRIPT_NAME } from 'const/files';\\nimport { loadTargetInfo, loadTargetNames } from '/utils/target-loader';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    const targets = await loadTargetNames(ns);\\n    checkAutoWeak(ns, targets);\\n    const myRam = ns.getScriptRam(BITNODE_MANAGER_NAME);\\n    const beginnerScriptRam = ns.getScriptRam(BEGINNER_HACK_SCRIPT_NAME);\\n    const currentHomeRam = ns.getServerMaxRam('home') - ns.getServerUsedRam('home') + myRam;\\n    const bestTarget = (await loadTargetInfo(ns)).sort(function (a, b) {\\n        return b.score - a.score;\\n    })[0];\\n    ns.print('currentRam', currentHomeRam);\\n    ns.print('script ram', beginnerScriptRam);\\n    const freeThreads = Math.floor(currentHomeRam / beginnerScriptRam);\\n    ns.spawn(BEGINNER_HACK_SCRIPT_NAME, freeThreads, 'n00dles');\\n}\\n/** @param {NS} ns */\\nfunction checkAutoWeak(ns, servers) {\\n    for (let server of servers) {\\n        checkAndStartAutoWeak(ns, server);\\n    }\\n}\\n/** @param {NS} ns */\\nfunction checkAndStartAutoWeak(ns, server) {\\n    const scriptRam = ns.getScriptRam(SERVER_WEAKEN_V2_SCRIPT_NAME);\\n    const serverRam = ns.getServerMaxRam(server);\\n    const threads = Math.floor(serverRam / scriptRam);\\n    if (threads > 0) {\\n        if (!ns.isRunning(SERVER_WEAKEN_V2_SCRIPT_NAME, server, server, threads)) {\\n            ns.scp(SERVER_WEAKEN_V2_SCRIPT_NAME, server);\\n            ns.exec(SERVER_WEAKEN_V2_SCRIPT_NAME, server, threads, server, threads);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml0bm9kZS1zdGFydC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hbmFnZXJzL2JpdG5vZGUtc3RhcnQtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsb0JBQW9CLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDNUcsT0FBTyxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUd2RSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDVixNQUFNLE9BQU8sR0FBYSxNQUFNLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwRCxhQUFhLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNwRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUNyRSxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDeEYsTUFBTSxVQUFVLEdBQUksQ0FBQyxNQUFNLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztRQUNqRixPQUFPLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3ZDLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDMUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEdBQUcsaUJBQWlCLENBQUMsQ0FBQztJQUNuRSxFQUFFLENBQUMsS0FBSyxDQUFDLHlCQUF5QixFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRUQscUJBQXFCO0FBQ3JCLFNBQVMsYUFBYSxDQUFDLEVBQU0sRUFBRSxPQUFpQjtJQUM5QyxLQUFLLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUMxQixxQkFBcUIsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDbkM7QUFDSCxDQUFDO0FBQ0QscUJBQXFCO0FBQ3JCLFNBQVMscUJBQXFCLENBQUMsRUFBTSxFQUFFLE1BQWM7SUFDbkQsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQ2hFLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLENBQUM7SUFDbEQsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1FBQ2YsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsNEJBQTRCLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRTtZQUN4RSxFQUFFLENBQUMsR0FBRyxDQUFDLDRCQUE0QixFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzdDLEVBQUUsQ0FBQyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDekU7S0FDRjtBQUNILENBQUMifQ==\",\"filename\":\"/managers/bitnode-start-manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/files/filehandler.js\",\"url\":\"blob:https://danielyxie.github.io/4a61884b-6421-416a-8354-d21050a0c072\",\"moduleSequenceNumber\":54},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/06ae0424-613f-48bf-8aae-d3351b598903\",\"moduleSequenceNumber\":1737},{\"filename\":\"/utils/target-loader.js\",\"url\":\"blob:https://danielyxie.github.io/82314350-ce45-4231-b298-ef16cb7c0560\",\"moduleSequenceNumber\":1739},{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/7ce45b41-e085-4df9-90df-756dc698c608\",\"moduleSequenceNumber\":1737},{\"filename\":\"/managers/bitnode-start-manager.js\",\"url\":\"blob:https://danielyxie.github.io/ccd45dcf-a4ce-457d-8e88-0ef124d4e134\",\"moduleSequenceNumber\":2780}],\"dependents\":[],\"ramUsage\":5.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { BITNODE_MANAGER_NAME, SCAN_SCRIPT_NAME } from 'const/files';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.exec(SCAN_SCRIPT_NAME, 'home', 1);\\n    ns.spawn(BITNODE_MANAGER_NAME, 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFyZC1yZXNldC1zdGFydHVwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhcmQtcmVzZXQtc3RhcnR1cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFckUscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckMsRUFBRSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNwQyxDQUFDIn0=\",\"filename\":\"hard-reset-startup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    ns.print('bitnodeN: ', ns.getPlayer().bitNodeN);\\n    // ns.print('karma: ', ns.heart.break());\\n    ns.print('ppl killed: ', ns.getPlayer().numPeopleKilled);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGVzdHMvc3RhdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1YsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELHlDQUF5QztJQUN6QyxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDM0QsQ0FBQyJ9\",\"filename\":\"/tests/stats.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/tests/stats.js\",\"url\":\"blob:https://danielyxie.github.io/063254ba-3cd1-48cd-bb94-b1afa55cd193\",\"moduleSequenceNumber\":18891}],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    ns.print('bitnodeN: ', ns.getPlayer().bitNodeN);\\n    ns.print('karma: ', ns.heart.break());\\n    ns.print('ppl killed: ', ns.getPlayer().numPeopleKilled);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9taXNjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoRCxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDdEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzNELENBQUMifQ==\",\"filename\":\"/tests/misc.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SERVER_NAME_PREFIX, XP_FARMER_SERVER_PREFIX } from '/const/files';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tail();\\n    for (let i = 20; i < 26; i++) {\\n        const xpNumber = i - 19;\\n        ns.renamePurchasedServer(SERVER_NAME_PREFIX + i, XP_FARMER_SERVER_PREFIX + xpNumber);\\n        // ns.renamePurchasedServer(XP_FARMER_SERVER_PREFIX + i, SERVER_NAME_PREFIX + xpNumber);\\n    }\\n    // ns.renamePurchasedServer(XP_FARMER_SERVER_PREFIX + \\\"-6\\\",XP_FARMER_SERVER_PREFIX + \\\"1\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFudWFsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9tYW51YWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUzRSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFVixLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVCLE1BQU0sUUFBUSxHQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLGtCQUFrQixHQUFHLENBQUMsRUFBRSx1QkFBdUIsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUNyRix3RkFBd0Y7S0FDekY7SUFFRCwwRkFBMEY7QUFDNUYsQ0FBQyJ9\",\"filename\":\"/tests/manuale.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/054faae5-d967-4797-91b5-5b8ee9c4b446\",\"moduleSequenceNumber\":20378},{\"filename\":\"/tests/manuale.js\",\"url\":\"blob:https://danielyxie.github.io/aac232f1-05ee-40df-bab0-d880f9e40646\",\"moduleSequenceNumber\":21066}],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"renamePurchasedServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4, WG_COST, } from 'const/files';\\nexport class WgwBatch {\\n    batchPort;\\n    sleepGrow;\\n    sleepWeakGrow;\\n    weakThreads = 0;\\n    growThreads = 0;\\n    growWeakThreads = 0;\\n    constructor(portSeed, tempoWeak, tempoGrow, scriptDelay = 100) {\\n        if (portSeed % 4 == 0)\\n            this.batchPort = HWGW_PREP_PORT_4;\\n        if (portSeed % 3 == 0)\\n            this.batchPort = HWGW_PREP_PORT_3;\\n        if (portSeed % 2 == 0)\\n            this.batchPort = HWGW_PREP_PORT_2;\\n        else\\n            this.batchPort = HWGW_PREP_PORT_1;\\n        this.sleepGrow = Math.max(1, Math.ceil(tempoWeak - tempoGrow)) + scriptDelay;\\n        const endGrow = this.sleepGrow + tempoGrow;\\n        this.sleepWeakGrow = Math.max(1, Math.ceil(endGrow - tempoWeak)) + scriptDelay;\\n    }\\n    calcolaWgwThreads(ns, target, calc) {\\n        // calcolo thread usando i core HOME\\n        let WEAKEN_PER_THREAD = ns.weakenAnalyze(1);\\n        let GW_THREADS = ns.growthAnalyzeSecurity(1) / WEAKEN_PER_THREAD;\\n        this.growThreads = calc.calcolaGrowThreads(undefined);\\n        this.weakThreads = Math.max(1, calc.calcolaWeakThread(1));\\n        this.growWeakThreads = Math.max(1, Math.ceil(GW_THREADS * this.growThreads));\\n    }\\n    getNeededRam() {\\n        return (this.growThreads + this.growWeakThreads + this.weakThreads) * WG_COST;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2d3LWJhdGNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2h3Z3cvd2d3LWJhdGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFFTCxnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixnQkFBZ0IsRUFDaEIsT0FBTyxHQUNSLE1BQU0sYUFBYSxDQUFDO0FBSXJCLE1BQU0sT0FBTyxRQUFRO0lBQ25CLFNBQVMsQ0FBUztJQUNsQixTQUFTLENBQVM7SUFDbEIsYUFBYSxDQUFTO0lBQ3RCLFdBQVcsR0FBVyxDQUFDLENBQUM7SUFDeEIsV0FBVyxHQUFXLENBQUMsQ0FBQztJQUN4QixlQUFlLEdBQVcsQ0FBQyxDQUFDO0lBRTVCLFlBQVksUUFBZ0IsRUFBRSxTQUFpQixFQUFFLFNBQWlCLEVBQUUsV0FBVyxHQUFHLEdBQUc7UUFDbkYsSUFBSSxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDO1FBQ3pELElBQUksUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6RCxJQUFJLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQztZQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUM7O1lBQ3BELElBQUksQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUM7UUFDdkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUM3RSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDO0lBQ2pGLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxFQUFNLEVBQUUsTUFBc0IsRUFBRSxJQUFxQjtRQUNyRSxvQ0FBb0M7UUFDcEMsSUFBSSxpQkFBaUIsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVDLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxpQkFBaUIsQ0FBQztRQUNqRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxPQUFPLENBQUM7SUFDaEYsQ0FBQztDQUNGIn0=\",\"filename\":\"/hwgw/wgw-batch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerData } from 'utils/server-data';\\nimport { HWGW_SERVER_GROW_SCRIPT, HWGW_SERVER_HACK_SCRIPT, HWGW_SERVER_WEAKEN_SCRIPT, WG_COST, XP_FARMER_SERVER_PREFIX, } from '/const/files';\\nexport class HwgwServerManager {\\n    ns;\\n    servers = [];\\n    homeServer;\\n    constructor(ns) {\\n        this.ns = ns;\\n        const serverNames = ns\\n            .getPurchasedServers()\\n            .filter((el) => el !== 'home' && !el.startsWith(XP_FARMER_SERVER_PREFIX));\\n        this.homeServer = new ServerData(ns, 'home');\\n        this.homeServer.aggiornaServer();\\n        for (let server of serverNames) {\\n            if (server == 'home')\\n                continue;\\n            const serverData = new ServerData(ns, server);\\n            serverData.aggiornaServer();\\n            this.servers.push(serverData);\\n        }\\n    }\\n    async avviaHwgwBatch(target, batch, calc, randomArg, portSeed) {\\n        const serverBatches = [];\\n        this.aggiornaUtilizzo();\\n        let iteration = 0;\\n        let serverBatch = batch.creaServerBatch(this.ns, this.homeServer, target, calc, iteration);\\n        if (serverBatch.canRun) {\\n            serverBatches.push(serverBatch);\\n            iteration++;\\n        }\\n        for (let server of this.servers) {\\n            serverBatch = batch.creaServerBatch(this.ns, server, target, calc, iteration);\\n            if (serverBatch.canRun) {\\n                serverBatches.push(serverBatch);\\n                iteration++;\\n            }\\n        }\\n        if (serverBatches.length <= 0)\\n            return false;\\n        for (let i = 0; i < serverBatches.length; i++) {\\n            const serverBatch = serverBatches[i];\\n            serverBatch.ricalcolaSleep();\\n            this.ns.exec(HWGW_SERVER_HACK_SCRIPT, serverBatch.server.name, serverBatch.hackThreads, ...serverBatch.getHackArgs(randomArg));\\n            this.ns.exec(HWGW_SERVER_WEAKEN_SCRIPT, serverBatch.server.name, serverBatch.hackWeakThreads, ...serverBatch.getHackWeakArgs(randomArg));\\n            this.ns.exec(HWGW_SERVER_GROW_SCRIPT, serverBatch.server.name, serverBatch.growThreads, ...serverBatch.getGrowArgs(randomArg));\\n            const growWeakArgs = i == serverBatches.length - 1\\n                ? serverBatch.getGrowWeakArgs(randomArg, portSeed)\\n                : serverBatch.getGrowWeakArgs(randomArg);\\n            this.ns.exec(HWGW_SERVER_WEAKEN_SCRIPT, serverBatch.server.name, serverBatch.growWeakThreads, ...growWeakArgs);\\n            await this.ns.sleep(1);\\n        }\\n        return true;\\n    }\\n    aggiornaUtilizzo() {\\n        this.servers.forEach((el) => {\\n            el.aggiornaServer();\\n        });\\n        this.homeServer.aggiornaServer();\\n    }\\n    serverLiberi() {\\n        return this.servers.find((el) => el.freeRam > 0) !== undefined || this.homeServer.freeRam > 0;\\n    }\\n    canRun(ramNecessaria) {\\n        this.aggiornaUtilizzo();\\n        let ramDisponibile = this.homeServer.freeRam;\\n        for (let server of this.servers) {\\n            ramDisponibile += server.freeRam;\\n        }\\n        return ramDisponibile > ramNecessaria;\\n    }\\n    // WGW Batching\\n    avviaWgwBatch(target, batch) {\\n        const weakArgs = [target];\\n        const growArgs = [target, batch.sleepGrow];\\n        const growWeakArgs = [target, batch.sleepWeakGrow, batch.batchPort];\\n        this.aggiornaUtilizzo();\\n        let weakThreads = batch.weakThreads;\\n        let growThreads = batch.growThreads;\\n        let growWeakThreads = batch.growWeakThreads;\\n        this.avviaWgwScript(HWGW_SERVER_WEAKEN_SCRIPT, weakThreads, WG_COST, ...weakArgs);\\n        this.avviaWgwScript(HWGW_SERVER_GROW_SCRIPT, growThreads, WG_COST, ...growArgs);\\n        this.avviaWgwScript(HWGW_SERVER_WEAKEN_SCRIPT, growWeakThreads, WG_COST, ...growWeakArgs);\\n    }\\n    avviaWgwScript(scriptName, threadNeeded, ramPerThread, ...args) {\\n        if (threadNeeded <= 0) {\\n            this.ns.print('thread necessari == 0... non dovrebbe succedere');\\n            return;\\n        }\\n        this.aggiornaUtilizzo();\\n        let allServers = this.servers.slice(0);\\n        allServers.unshift(this.homeServer);\\n        let availableServers = allServers.filter((el) => el.freeRam > 0 && el.freeRam > ramPerThread * threadNeeded);\\n        if (availableServers.length > 0) {\\n            this.ns.exec(scriptName, availableServers[0].name, threadNeeded, ...args);\\n            return;\\n        }\\n        availableServers = allServers.filter((el) => el.freeRam > 0 && el.freeRam > ramPerThread);\\n        for (let server of allServers) {\\n            const freeThreads = server.freeRam / ramPerThread;\\n            let threadToLaunch = Math.floor(freeThreads > threadNeeded ? threadNeeded : freeThreads);\\n            if (threadToLaunch <= 1)\\n                break;\\n            this.ns.exec(scriptName, server.name, threadToLaunch, ...args);\\n            server.aggiornaServer();\\n            threadNeeded -= threadToLaunch;\\n            if (threadNeeded <= 0) {\\n                break;\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1zZXJ2ZXItbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2h3Z3ctc2VydmVyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRS9DLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsdUJBQXVCLEVBQ3ZCLHlCQUF5QixFQUN6QixPQUFPLEVBQ1AsdUJBQXVCLEdBQ3hCLE1BQU0sY0FBYyxDQUFDO0FBRXRCLE1BQU0sT0FBTyxpQkFBaUI7SUFDNUIsRUFBRSxDQUFLO0lBQ1AsT0FBTyxHQUFpQixFQUFFLENBQUM7SUFDM0IsVUFBVSxDQUFhO0lBRXZCLFlBQVksRUFBTTtRQUNoQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLE1BQU0sV0FBVyxHQUFHLEVBQUU7YUFDbkIsbUJBQW1CLEVBQUU7YUFDckIsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7UUFDNUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNqQyxLQUFLLElBQUksTUFBTSxJQUFJLFdBQVcsRUFBRTtZQUM5QixJQUFJLE1BQU0sSUFBSSxNQUFNO2dCQUFFLFNBQVM7WUFDL0IsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzlDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFRCxL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\",\"filename\":\"/hwgw/hwgw-server-manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HWGW_MONEY_ITERATION_PERCENTAGE, HWGW_MONEY_MIN_PERCENTAGE, HWGW_MONEY_PERCENTAGE, HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4, H_COST, WG_COST, } from 'const/files';\\nexport class HwgwServerBatch {\\n    sleepWeakHack;\\n    sleepHack;\\n    sleepGrow;\\n    sleepWeakGrow;\\n    hackThreads = 0;\\n    hackWeakThreads = 0;\\n    growThreads = 0;\\n    growWeakThreads = 0;\\n    server;\\n    target;\\n    calc;\\n    scriptDelay;\\n    iteration;\\n    canRun = false;\\n    constructor(tempoHack, tempoWeak, tempoGrow, server, ns, target, calc, iteration = 0, scriptDelay = 100) {\\n        this.target = target;\\n        this.server = server;\\n        this.calc = calc;\\n        this.iteration = iteration;\\n        this.scriptDelay = scriptDelay;\\n        this.sleepWeakHack = Math.max(0, Math.floor(scriptDelay * iteration * 4));\\n        this.sleepHack = Math.max(1, Math.floor(tempoWeak - tempoHack - scriptDelay + this.sleepWeakHack));\\n        const endWeakHack = tempoWeak + this.sleepWeakHack;\\n        this.sleepGrow = Math.max(1, Math.floor(endWeakHack - tempoGrow + scriptDelay));\\n        const endGrow = this.sleepGrow + tempoGrow;\\n        this.sleepWeakGrow = Math.max(1, Math.floor(endGrow - tempoWeak + scriptDelay));\\n        this.calcolaThreads(ns, calc, target);\\n        this.verificaServerCap(ns, calc, target);\\n    }\\n    getHackArgs(randomArg) {\\n        return [this.target.name, this.sleepHack, randomArg];\\n    }\\n    getHackWeakArgs(randomArg) {\\n        return [this.target.name, this.sleepWeakHack, randomArg];\\n    }\\n    getGrowArgs(randomArg) {\\n        return [this.target.name, this.sleepGrow, randomArg];\\n    }\\n    getGrowWeakArgs(randomArg, portSeed = undefined) {\\n        const growWeakArgs = [this.target.name, this.sleepWeakGrow];\\n        if (portSeed) {\\n            let port;\\n            if (portSeed % 4 == 0)\\n                port = HWGW_PORT_4;\\n            if (portSeed % 3 == 0)\\n                port = HWGW_PORT_3;\\n            if (portSeed % 2 == 0)\\n                port = HWGW_PORT_2;\\n            else\\n                port = HWGW_PORT_1;\\n            growWeakArgs.push(port);\\n        }\\n        growWeakArgs.push(randomArg);\\n        return growWeakArgs;\\n    }\\n    ricalcolaSleep() {\\n        const tempoHack = this.calc.calcolaHackTime();\\n        const tempoWeak = this.calc.calcolaWeakTime();\\n        const tempoGrow = this.calc.calcolaGrowTime();\\n        this.sleepWeakHack = Math.max(0, Math.floor(this.scriptDelay * this.iteration * 4));\\n        this.sleepHack = Math.max(1, Math.floor(tempoWeak - tempoHack - this.scriptDelay + this.sleepWeakHack));\\n        const endWeakHack = tempoWeak + this.sleepWeakHack;\\n        this.sleepGrow = Math.max(1, Math.floor(endWeakHack - tempoGrow + this.scriptDelay));\\n        const endGrow = this.sleepGrow + tempoGrow;\\n        this.sleepWeakGrow = Math.max(1, Math.floor(endGrow - tempoWeak + this.scriptDelay));\\n    }\\n    calcolaThreads(ns, calc, target, percentage = HWGW_MONEY_PERCENTAGE) {\\n        const cores = this.server.cores;\\n        this.hackThreads = calc.calcolaHackThread(percentage);\\n        let WEAKEN_PER_THREAD = ns.weakenAnalyze(1, cores);\\n        let HW_THREADS = ns.hackAnalyzeSecurity(1) / WEAKEN_PER_THREAD;\\n        let GW_THREADS = ns.growthAnalyzeSecurity(1, undefined, cores) / WEAKEN_PER_THREAD;\\n        this.hackWeakThreads = Math.max(1, Math.ceil(HW_THREADS * this.hackThreads));\\n        this.growThreads = calc.calcolaGrowThreads(target.maxMoney - target.maxMoney * percentage, cores);\\n        this.growWeakThreads = Math.max(1, Math.ceil(GW_THREADS * this.growThreads));\\n    }\\n    verificaServerCap(ns, calc, target) {\\n        let checkOrExit = false;\\n        let lowerPerc = HWGW_MONEY_PERCENTAGE - HWGW_MONEY_ITERATION_PERCENTAGE;\\n        this.server.aggiornaServer();\\n        while (!checkOrExit) {\\n            const ramNecessaria = (this.growWeakThreads + this.hackWeakThreads + this.growThreads) * WG_COST + this.hackThreads * H_COST;\\n            if (this.server.freeRam >= ramNecessaria) {\\n                this.canRun = true;\\n                checkOrExit = true;\\n            }\\n            else if (lowerPerc > HWGW_MONEY_MIN_PERCENTAGE) {\\n                this.calcolaThreads(ns, calc, target, lowerPerc);\\n                lowerPerc -= HWGW_MONEY_ITERATION_PERCENTAGE;\\n            }\\n            else {\\n                checkOrExit = true;\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHdndy1zZXJ2ZXItYmF0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaHdndy9od2d3LXNlcnZlci1iYXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsK0JBQStCLEVBQy9CLHlCQUF5QixFQUN6QixxQkFBcUIsRUFDckIsV0FBVyxFQUNYLFdBQVcsRUFDWCxXQUFXLEVBQ1gsV0FBVyxFQUNYLE1BQU0sRUFDTixPQUFPLEdBQ1IsTUFBTSxhQUFhLENBQUM7QUFLckIsTUFBTSxPQUFPLGVBQWU7SUFDMUIsYUFBYSxDQUFTO0lBQ3RCLFNBQVMsQ0FBUztJQUNsQixTQUFTLENBQVM7SUFDbEIsYUFBYSxDQUFTO0lBQ3RCLFdBQVcsR0FBVyxDQUFDLENBQUM7SUFDeEIsZUFBZSxHQUFXLENBQUMsQ0FBQztJQUM1QixXQUFXLEdBQVcsQ0FBQyxDQUFDO0lBQ3hCLGVBQWUsR0FBVyxDQUFDLENBQUM7SUFDNUIsTUFBTSxDQUFhO0lBQ25CLE1BQU0sQ0FBaUI7SUFDdkIsSUFBSSxDQUFrQjtJQUN0QixXQUFXLENBQVM7SUFDcEIsU0FBUyxDQUFTO0lBQ2xCLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFFZixZQUNFLFNBQWlCLEVBQ2pCLFNBQWlCLEVBQ2pCLFNBQWlCLEVBQ2pCLE1BQWtCLEVBQ2xCLEVBQU0sRUFDTixNQUFzQixFQUN0QixJQUFxQixFQUNyQixTQUFTLEdBQUcsQ0FBQyxFQUNiLFdBQVcsR0FBRyxHQUFHO1FBRWpCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBRS9CLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFD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\",\"filename\":\"/hwgw/hwgw-server-batch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HWGW_MONEY_ITERATION_PERCENTAGE, HWGW_MONEY_MIN_PERCENTAGE, HWGW_MONEY_PERCENTAGE, HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4, H_COST, WG_COST, } from 'const/files';\\nexport class WgwServerBatch {\\n    sleepWeakHack;\\n    sleepHack;\\n    sleepGrow;\\n    sleepWeakGrow;\\n    hackThreads = 0;\\n    hackWeakThreads = 0;\\n    growThreads = 0;\\n    growWeakThreads = 0;\\n    server;\\n    target;\\n    calc;\\n    canRun = false;\\n    constructor(tempoHack, tempoWeak, tempoGrow, server, ns, target, calc, iteration = 0, scriptDelay = 100) {\\n        this.target = target;\\n        this.server = server;\\n        this.calc = calc;\\n        this.sleepWeakHack = Math.max(0, Math.floor(scriptDelay * iteration * 4));\\n        this.sleepHack = Math.max(1, Math.floor(tempoWeak - tempoHack - scriptDelay + this.sleepWeakHack));\\n        const endWeakHack = tempoWeak + this.sleepWeakHack;\\n        this.sleepGrow = Math.max(1, Math.floor(endWeakHack - tempoGrow + scriptDelay));\\n        const endGrow = this.sleepGrow + tempoGrow;\\n        this.sleepWeakGrow = Math.max(1, Math.floor(endGrow - tempoWeak + scriptDelay));\\n        this.calcolaThreads(ns, calc, target);\\n        this.verificaServerCap(ns, calc, target);\\n    }\\n    getHackArgs(randomArg) {\\n        return [this.target.name, this.sleepHack, randomArg];\\n    }\\n    getHackWeakArgs(randomArg) {\\n        return [this.target.name, this.sleepWeakHack, randomArg];\\n    }\\n    getGrowArgs(randomArg) {\\n        return [this.target.name, this.sleepGrow, randomArg];\\n    }\\n    getGrowWeakArgs(randomArg, portSeed = undefined) {\\n        const growWeakArgs = [this.target.name, this.sleepWeakGrow];\\n        if (portSeed) {\\n            let port;\\n            if (portSeed % 4 == 0)\\n                port = HWGW_PORT_4;\\n            if (portSeed % 3 == 0)\\n                port = HWGW_PORT_3;\\n            if (portSeed % 2 == 0)\\n                port = HWGW_PORT_2;\\n            else\\n                port = HWGW_PORT_1;\\n            growWeakArgs.push(port);\\n        }\\n        growWeakArgs.push(randomArg);\\n        return growWeakArgs;\\n    }\\n    calcolaThreads(ns, calc, target, percentage = HWGW_MONEY_PERCENTAGE) {\\n        const cores = this.server.cores;\\n        this.hackThreads = calc.calcolaHackThread(percentage);\\n        let WEAKEN_PER_THREAD = ns.weakenAnalyze(1, cores);\\n        let HW_THREADS = ns.hackAnalyzeSecurity(1) / WEAKEN_PER_THREAD;\\n        let GW_THREADS = ns.growthAnalyzeSecurity(1, undefined, cores) / WEAKEN_PER_THREAD;\\n        this.hackWeakThreads = Math.max(1, Math.ceil(HW_THREADS * this.hackThreads));\\n        this.growThreads = calc.calcolaGrowThreads(target.maxMoney - target.maxMoney * percentage, cores);\\n        this.growWeakThreads = Math.max(1, Math.ceil(GW_THREADS * this.growThreads));\\n    }\\n    verificaServerCap(ns, calc, target) {\\n        let checkOrExit = false;\\n        let lowerPerc = HWGW_MONEY_PERCENTAGE - HWGW_MONEY_ITERATION_PERCENTAGE;\\n        this.server.aggiornaServer();\\n        while (!checkOrExit) {\\n            const ramNecessaria = (this.growWeakThreads + this.hackWeakThreads + this.growThreads) * WG_COST + this.hackThreads * H_COST;\\n            if (this.server.freeRam >= ramNecessaria) {\\n                this.canRun = true;\\n                checkOrExit = true;\\n            }\\n            else if (lowerPerc > HWGW_MONEY_MIN_PERCENTAGE) {\\n                this.calcolaThreads(ns, calc, target, lowerPerc);\\n                lowerPerc -= HWGW_MONEY_ITERATION_PERCENTAGE;\\n            }\\n            else {\\n                checkOrExit = true;\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2d3LXNlcnZlci1iYXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dndy1zZXJ2ZXItYmF0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNMLCtCQUErQixFQUMvQix5QkFBeUIsRUFDekIscUJBQXFCLEVBQ3JCLFdBQVcsRUFDWCxXQUFXLEVBQ1gsV0FBVyxFQUNYLFdBQVcsRUFDWCxNQUFNLEVBQ04sT0FBTyxHQUNSLE1BQU0sYUFBYSxDQUFDO0FBS3JCLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLGFBQWEsQ0FBUztJQUN0QixTQUFTLENBQVM7SUFDbEIsU0FBUyxDQUFTO0lBQ2xCLGFBQWEsQ0FBUztJQUN0QixXQUFXLEdBQVcsQ0FBQyxDQUFDO0lBQ3hCLGVBQWUsR0FBVyxDQUFDLENBQUM7SUFDNUIsV0FBVyxHQUFXLENBQUMsQ0FBQztJQUN4QixlQUFlLEdBQVcsQ0FBQyxDQUFDO0lBQzVCLE1BQU0sQ0FBYTtJQUNuQixNQUFNLENBQWlCO0lBQ3ZCLElBQUksQ0FBa0I7SUFDdEIsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUVmLFlBQ0UsU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsU0FBaUIsRUFDakIsTUFBa0IsRUFDbEIsRUFBTSxFQUNOLE1BQXNCLEVBQ3RCLElBQXFCLEVBQ3JCLFNBQVMsR0FBRyxDQUFDLEVBQ2IsV0FBVyxHQUFHLEdBQUc7UUFFakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFFakIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRSxJQUFJLENBQUMsU0FBUyxHQUFH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\",\"filename\":\"/hwgw/wgw-server-batch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { XP_FARMER_SERVER_PREFIX } from './const/files';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = ns.getPurchasedServers().filter((el) => el.startsWith(XP_FARMER_SERVER_PREFIX));\\n    for (let server of servers) {\\n        ns.killall(server);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2lsbC1mYXJtLXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9raWxsLWZhcm0tc2NyaXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0lBQ2hHLEtBQUssSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzFCLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"kill-farm-script.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/const/files.js\",\"url\":\"blob:https://danielyxie.github.io/20b71f6c-c549-474d-9318-ab09db19d966\",\"moduleSequenceNumber\":32553},{\"filename\":\"kill-farm-script.js\",\"url\":\"blob:https://danielyxie.github.io/de760d64-b4e6-444a-83cc-c5bbce52bf2f\",\"moduleSequenceNumber\":32939}],\"dependents\":[],\"ramUsage\":4.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const servers = ns.getPurchasedServers();\\n    ns.killall('home', true);\\n    for (let server of servers) {\\n        ns.killall(server);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2lsbC1hbGwtc2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2tpbGwtYWxsLXNjcmlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUN6QyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QixLQUFLLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUMzQixFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ25CO0FBQ0YsQ0FBQyJ9\",\"filename\":\"kill-all-script.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"kill-all-script.js\",\"url\":\"blob:https://danielyxie.github.io/29de66b2-d170-4850-b506-6f8f4bd98fa2\",\"moduleSequenceNumber\":580}],\"dependents\":[],\"ramUsage\":4.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.killall('home', true);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2lsbC1ob21lLXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9raWxsLWhvbWUtc2NyaXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNCLENBQUMifQ==\",\"filename\":\"kill-home-script.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"srv-1\",\"srv-2\",\"srv-3\",\"srv-4\",\"srv-5\",\"srv-6\",\"srv-7\",\"srv-8\",\"srv-9\",\"srv-10\",\"srv-11\",\"srv-12\",\"srv-13\",\"srv-14\",\"srv-15\",\"srv-16\",\"srv-17\",\"srv-18\",\"srv-19\",\"srv-20\",\"srv-21\",\"srv-22\",\"srv-23\",\"srv-24\",\"srv-25\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/servers.txt\",\"text\":\"[\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"iron-gym\\\",\\\"neo-net\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"omega-net\\\",\\\"crush-fitness\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"johnson-ortho\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/servers_detail.txt\",\"text\":\"[{\\\"name\\\":\\\"n00dles\\\",\\\"minSecurity\\\":1,\\\"maxMoney\\\":70000,\\\"growTm\\\":19736,\\\"weakenTm\\\":24670,\\\"hackTm\\\":6168,\\\"hackValue\\\":0.0010772264745793775,\\\"hackChance\\\":6167.347316901428,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":1,\\\"currHackLevel\\\":262,\\\"score\\\":800.8242214748999,\\\"hwgwScore\\\":800.8242214748999,\\\"farmScore\\\":-1},{\\\"name\\\":\\\"foodnstuff\\\",\\\"minSecurity\\\":3,\\\"maxMoney\\\":2000000,\\\"growTm\\\":19932,\\\"weakenTm\\\":24915,\\\"hackTm\\\":6229,\\\"hackValue\\\":0.001055464323577774,\\\"hackChance\\\":6228.713956870597,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":1,\\\"currHackLevel\\\":262,\\\"score\\\":66594.01632206545,\\\"hwgwScore\\\":66594.01632206545,\\\"farmScore\\\":-1},{\\\"name\\\":\\\"sigma-cosmetics\\\",\\\"minSecurity\\\":3,\\\"maxMoney\\\":2300000,\\\"growTm\\\":21111,\\\"weakenTm\\\":26388,\\\"hackTm\\\":6597,\\\"hackValue\\\":0.0010393503644391818,\\\"hackChance\\\":6596.913796685607,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":5,\\\"currHackLevel\\\":262,\\\"score\\\":14240.848786063003,\\\"hwgwScore\\\":14240.848786063003,\\\"farmScore\\\":-1},{\\\"name\\\":\\\"joesguns\\\",\\\"minSecurity\\\":5,\\\"maxMoney\\\":2500000,\\\"growTm\\\":24547,\\\"weakenTm\\\":30684,\\\"hackTm\\\":7671,\\\"hackValue\\\":0.0009981933193197368,\\\"hackChance\\\":7670.829996146055,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":10,\\\"currHackLevel\\\":262,\\\"score\\\":10654.03181062488,\\\"hwgwScore\\\":10654.03181062488,\\\"farmScore\\\":0},{\\\"name\\\":\\\"hong-fang-tea\\\",\\\"minSecurity\\\":5,\\\"maxMoney\\\":3000000,\\\"growTm\\\":34366,\\\"weakenTm\\\":42957,\\\"hackTm\\\":10740,\\\"hackValue\\\":0.0009192847565276628,\\\"hackChance\\\":10739.161994604476,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":30,\\\"currHackLevel\\\":262,\\\"score\\\":2803.415115234393,\\\"hwgwScore\\\":2803.415115234393,\\\"farmScore\\\":-1},{\\\"name\\\":\\\"harakiri-sushi\\\",\\\"minSecurity\\\":5,\\\"maxMoney\\\":4000000,\\\"growTm\\\":39275,\\\"weakenTm\\\":49094,\\\"hackTm\\\":12274,\\\"hackValue\\\":0.000879830475131626,\\\"hackChance\\\":12273.327993833687,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":40,\\\"currHackLevel\\\":262,\\\"score\\\":2347.6960981432153,\\\"hwgwScore\\\":2347.6960981432153,\\\"farmScore\\\":-1},{\\\"name\\\":\\\"iron-gym\\\",\\\"minSecurity\\\":10,\\\"maxMoney\\\":20000000,\\\"growTm\\\":278851,\\\"weakenTm\\\":348563,\\\"hackTm\\\":87141,\\\"hackValue\\\":0.0004982369716336601,\\\"hackChance\\\":87140.6287562192,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":100,\\\"currHackLevel\\\":262,\\\"score\\\":749.0071325299529,\\\"hwgwScore\\\":749.0071325299529,\\\"farmScore\\\":-1},{\\\"name\\\":\\\"neo-net\\\",\\\"minSecurity\\\":8,\\\"maxMoney\\\":5000000,\\\"growTm\\\":93769,\\\"weakenTm\\\":117211,\\\"hackTm\\\":29303,\\\"hackValue\\\":0.0007510309352436998,\\\"hackChance\\\":29302.57058527795,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":50,\\\"currHackLevel\\\":262,\\\"score\\\":1343.0145978370588,\\\"hwgwScore\\\":1343.0145978370588,\\\"farmScore\\\":-1},{\\\"name\\\":\\\"nectar-net\\\",\\\"minSecurity\\\":7,\\\"maxMoney\\\":2750000,\\\"growTm\\\":33384,\\\"weakenTm\\\":41730,\\\"hackTm\\\":10433,\\\"hackValue\\\":0.0009385550581779378,\\\"hackChance\\\":10432.328794758636,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":20,\\\"currHackLevel\\\":262,\\\"score\\\":5671.701936161549,\\\"hwgwScore\\\":5671.701936161549,\\\"farmScore\\\":-1},{\\\"name\\\":\\\"phantasy\\\",\\\"minSecurity\\\":7,\\\"maxMoney\\\":24000000,\\\"growTm\\\":154153,\\\"weakenTm\\\":192692,\\\"hackTm\\\":48173,\\\"hackValue\\\":0.0005842099273367508,\\\"hackChance\\\":48172.812375797235,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":100,\\\"currHackLevel\\\":262,\\\"score\\\":1334.4915285354048,\\\"hwgwScore\\\":1334.4915285354048,\\\"farmScore\\\":-1},{\\\"name\\\":\\\"omega-net\\\",\\\"minSecurity\\\":11,\\\"maxMoney\\\":65739637,\\\"growTm\\\":595561,\\\"weakenTm\\\":744451,\\\"hackTm\\\":186113,\\\"hackValue\\\":0.0002142990442142643,\\\"hackChance\\\":186112.74569849402,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":188,\\\"currHackLevel\\\":262,\\\"score\\\":116.03995097658033,\\\"hwgwScore\\\":116.03995097658033,\\\"farmScore\\\":-1},{\\\"name\\\":\\\"crush-fitness\\\",\\\"minSecurity\\\":13,\\\"maxMoney\\\":45625603,\\\"growTm\\\":885251,\\\"weakenTm\\\":1106564,\\\"hackTm\\\":276641,\\\"hackValue\\\":0.00007982224088756125,\\\"hackChance\\\":276640.8129810113,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":232,\\\"currHackLevel\\\":262,\\\"score\\\":19.327364888817442,\\\"hwgwScore\\\":19.327364888817442,\\\"farmScore\\\":-1},{\\\"name\\\":\\\"max-hardware\\\",\\\"minSecurity\\\":5,\\\"maxMoney\\\":10000000,\\\"growTm\\\":58912,\\\"weakenTm\\\":73640,\\\"hackTm\\\":18410,\\\"hackValue\\\":0.0007220133495474777,\\\"hackChance\\\":18409.991990750532,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":80,\\\"currHackLevel\\\":262,\\\"score\\\":1605.509043840297,\\\"hwgwScore\\\":1605.509043840297,\\\"farmScore\\\":-1},{\\\"name\\\":\\\"zer0\\\",\\\"minSecurity\\\":8,\\\"maxMoney\\\":7500000,\\\"growTm\\\":157345,\\\"weakenTm\\\":196681,\\\"hackTm\\\":49171,\\\"hackValue\\\":0.0006347737037574615,\\\"hackChance\\\":49170.020275296236,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":75,\\\"currHackLevel\\\":262,\\\"score\\\":676.468841970317,\\\"hwgwScore\\\":676.468841970317,\\\"farmScore\\\":-1},{\\\"name\\\":\\\"silver-helix\\\",\\\"minSecurity\\\":10,\\\"maxMoney\\\":45000000,\\\"growTm\\\":381946,\\\"weakenTm\\\":477433,\\\"hackTm\\\":119359,\\\"hackValue\\\":0.00035385091405317344,\\\"hackChance\\\":119358.11474003259,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":150,\\\"currHackLevel\\\":262,\\\"score\\\":582.54628072587,\\\"hwgwScore\\\":582.54628072587,\\\"farmScore\\\":-1},{\\\"name\\\":\\\"johnson-ortho\\\",\\\"minSecurity\\\":21,\\\"maxMoney\\\":77383900,\\\"growTm\\\":1578449,\\\"weakenTm\\\":1973061,\\\"hackTm\\\":493266,\\\"hackValue\\\":0.00001690304476651271,\\\"hackChance\\\":493265.05207217595,\\\"hackXp\\\":-1,\\\"prepped\\\":false,\\\"minHackLevel\\\":252,\\\"currHackLevel\\\":262,\\\"score\\\":5.789686917733814,\\\"hwgwScore\\\":5.789686917733814,\\\"farmScore\\\":-1}]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/all_servers.txt\",\"text\":\"[\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"iron-gym\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"catalyst\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"global-pharm\\\",\\\"omnia\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"solaris\\\",\\\"zb-def\\\",\\\"titan-labs\\\",\\\"microdyne\\\",\\\"applied-energetics\\\",\\\"fulcrumtech\\\",\\\"stormtech\\\",\\\"omnitek\\\",\\\".\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"powerhouse-fitness\\\",\\\"megacorp\\\",\\\"fulcrumassets\\\",\\\"nwo\\\",\\\"infocomm\\\",\\\"run4theh111z\\\",\\\"helios\\\",\\\"vitalife\\\",\\\"4sigma\\\",\\\"kuai-gong\\\",\\\"clarkinc\\\",\\\"ecorp\\\",\\\"The-Cave\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"omega-net\\\",\\\"the-hub\\\",\\\"computek\\\",\\\"crush-fitness\\\",\\\"zb-institute\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"rothman-uni\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"galactic-cyber\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"defcomm\\\",\\\"zeus-med\\\",\\\"taiyang-digital\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"johnson-ortho\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/files/servers.txt\",\"text\":\"\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-707064-JoesGuns.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[24,27,41,49,27,3,14,2,41,24,26,16,34,38,38],[49,32,25,35,12,2,46,45,4,36,38,22,38,6,3],[43,44,19,18,1,29,48,22,43,41,46,45,7,12,36],[25,29,22,4,50,8,21,24,46,14,14,12,10,11,1],[50,19,49,1,15,17,13,4,43,10,2,22,35,12,22],[41,28,33,30,10,12,44,16,5,19,27,27,41,5,22],[25,38,20,7,20,27,29,3,39,7,41,3,46,22,50],[32,24,18,18,13,13,21,2,38,8,7,2,32,21,4],[30,4,48,27,18,26,6,3,44,21,18,37,14,3,29],[3,12,42,44,38,42,6,3,49,18,47,4,5,32,43],[16,47,8,14,11,12,33,45,21,32,6,15,6,44,20],[24,8,6,2,5,36,46,48,17,49,24,31,30,46,33],[17,25,24,19,6,35,30,6,46,3,42,26,21,1,2],[18,12,41,35,5,38,26,21,47,36,41,46,13,32,38]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"88.5.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":13692158807.400002,\"moneyMax\":68460794037,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1297,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-240235-CarmichaelSecurity.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0010000000000000101100110100101110100101111110001100000010001001\",\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-376139-CarmichaelSecurity.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[108,[3,4,5,9,12,13,14,16,18,20,24]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-35941-JoesGuns.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"86V03XbVK263Eq5996oipC66476O6HjsG154nVTQ478TkC6N0tY962nY571Y\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-726926.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"ARRAY LINUX CLOUD DEBUG CACHE\",1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"59.3.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":11935506414,\"moneyMax\":59677532070,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1272,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-448710-JoesGuns.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"sREplVREpllbh2i5428x28x28x27pAx27pA27WAx27pA27o7pA27o7p27pA278p27pA278ABJ\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-846899-CarmichaelSecurity.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()(()))))a\",\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-151421-CarmichaelSecurity.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[65,168,120,35,151,189,50,195,34,107,34,180,73,163,33,81,122,184,24,42,194,195,190,36,191,156,36,69,7,145,141],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"79.3.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":4423239649.2,\"moneyMax\":22116198246,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1106,\"serverGrowth\":77}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-737982-CarmichaelSecurity.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,3,0,8,4,5,0,3,6,0,6,0,0],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-551446.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[141,157,141,117,26,200,9,152,19,192,23,26,176,9,160,139,188,181,161,163,114,9,83,45,41,37,124,67,144,64,186,16,123,139,22,115,25,18,181,187,158,17,40,174,166,153,58,143,89,133],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"36.3.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":5001781798,\"moneyMax\":25008908990,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1065,\"serverGrowth\":83}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-22798.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,14],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"47.8.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":6646341709.200001,\"moneyMax\":33231708546,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":975,\"serverGrowth\":71}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-18305-JoesGuns.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,0,2,0,0,9,0,2,8,6,7,3,3,1,0],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-240435.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[143,34,160,148,148,187,133,41,137,183,1,94,17,17],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-11114-CarmichaelSecurity.cct\",\"type\":\"Total Ways to Sum\",\"data\":38,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-207879.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[167,[1,7,8,11,12,13,14,15,16,17,18]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"34.8.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":4633782985.8,\"moneyMax\":23168914929,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1045,\"serverGrowth\":75}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"32.3.0.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":3669202500,\"moneyMax\":18346012500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1036,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-615652-JoesGuns.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"POPUPENTERPASTEFLASHARRAY\",\"BROADBAND\"],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-473654.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0],[0,1,0,0,1,0],[0,0,0,1,0,1],[0,1,0,0,0,0],[0,1,0,1,0,0],[1,0,0,1,1,0],[0,1,0,0,1,1],[1,0,0,0,1,0],[0,0,0,0,0,0],[0,1,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"40.7.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":4548786883.6,\"moneyMax\":22743934418,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1222,\"serverGrowth\":82}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"25.0.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":4258372495,\"moneyMax\":21291862475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1272,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-530232-JoesGuns.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[2,7],[9,2,8],[2,2,7,8],[2,5,7,7,9],[4,5,1,1,4,2],[5,6,3,3,2,4,8],[1,1,6,9,3,3,1,4],[9,1,6,9,4,3,2,9,8],[9,6,6,1,6,3,6,1,7,4],[9,7,9,8,8,8,5,9,7,7,9]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"64.1.8.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":333306445.8,\"moneyMax\":1666532229,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1097,\"serverGrowth\":80}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-141367-JoesGuns.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":240976216,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-15301-CarmichaelSecurity.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,6,5,0,0,0,4,2,9,6,1],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-851783-JoesGuns.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"rr1111111166555555aVJJuuuuuuuuuuuumm444tDDDDD66MMHttATTRR888888eeeeeeeeXXzNfhhhhhhh\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"76.8.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1375,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-558319.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"MM5hhddddddddddd000RVLLLLLLLkfffffffffIIIIIIIIIIIq0iiiiiiiiiiiiiiii\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"37.4.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":227177243.20000002,\"moneyMax\":1135886216,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":928,\"serverGrowth\":82}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-961854-JoesGuns.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((a(a(((a(\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-663130-CarmichaelSecurity.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"BBBoMTTTTTTttGdooyyrrrrrrrrrrrrMMMMMMkkkIIIIIIIIIIIIuu755t0000000020KKKpllJJuu88kkJJ8IIi\",\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-343552-CarmichaelSecurity.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,16],[10,15],[10,19],[7,12],[2,9],[25,32],[19,25],[14,22],[15,22],[15,23],[25,27],[25,34],[4,11],[3,11],[2,3],[19,27],[18,21]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"25.5.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":174256255,\"moneyMax\":871281275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":955,\"serverGrowth\":50}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-604894-JoesGuns.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"10100000111100110101101011011010\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-20353-NationalSecurityAgency.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[7,2],[6,8,6],[6,6,6,7]],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-340654.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[9,8],[5,5,3],[8,6,8,5],[1,2,2,9,7],[6,6,4,4,4,5],[3,4,5,1,3,6,6],[3,6,2,2,5,5,1,3],[7,1,1,7,3,2,6,8,6],[4,1,1,7,6,7,8,8,2,1]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"45.6.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":177719183.4,\"moneyMax\":888595917,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":884,\"serverGrowth\":74}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-645684-Sector12.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"uuursxckggggggggnf2H42Oggnf2H42Do3ATCBk8184Bk8184B8U8U8U8U8U8pOQ05U8\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"48.8.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":147727988.4,\"moneyMax\":738639942,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":829,\"serverGrowth\":80}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-867611-JoesGuns.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"IoorrrrrrrrrrrrrrU5EiiiiKjll66660000RRRKKK7777mUeF22yyHHHHHHHHHHHJJJJKmm6\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-588625-JoesGuns.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"yKjhWZ2RO7cxVVI1wmwmhu6I1w6IIafs6IIafs6IIIIII4TzN0TEmInNd4vt\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"50.6.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":140515051.4,\"moneyMax\":702575257,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":829,\"serverGrowth\":63}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-134820-CarmichaelSecurity.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"aaaaa8eQQQQQQPPPPPPPPPPPTxxxxxxxxxxxxxx11YYeRRRRRRRRRRR\",\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-168731-CarmichaelSecurity.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":2606637,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-57709-JoesGuns.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())a)aaa)))(((()(\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"14.3.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":182128365.4,\"moneyMax\":910641827,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":888,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"44.8.4.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":226222384.8,\"moneyMax\":1131111924,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":853,\"serverGrowth\":86}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-481490-CarmichaelSecurity.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[117,177,127,16,86,168,6,52,59,155,50,155,135,42,132,86,16,109,46,47,79,12,133,147,53,136,68,38,91,44,136,193,162,112,180,21,179,177,122,29,93,138,183,116],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-776329-CarmichaelSecurity.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[170,190,84,98,152,22,75,102,179,25,48,148,88,65,14,10,120,157,159,30,60]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"21.9.8.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":171038985.4,\"moneyMax\":855194927,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":65}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-113579-JoesGuns.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[116,47,98,193,41,41,195,51,186,57,147,30,76],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"74.3.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":132732598.80000001,\"moneyMax\":663662994,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":863,\"serverGrowth\":80}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"19.0.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":178249406.20000002,\"moneyMax\":891247031,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":906,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-167630.cct\",\"type\":\"Total Ways to Sum\",\"data\":11,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-835489.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[23,24],[19,24],[23,24]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"22.6.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":155658733.8,\"moneyMax\":778293669,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":837,\"serverGrowth\":90}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-476165-JoesGuns.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"47MDI749aM70D0aZ804OFsu927usuWsuI3486ekc54wk2609146Pxx978ccir1RNt\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-39499-CarmichaelSecurity.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":862031268,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-610661-JoesGuns.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"F05mXe4mXe4mXe4mjtEFH4mjtEF8NNoAtEF8NNoAONINNNNNNNG2NNNG2NNNNNG6NNG6NPVR6N\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-452426-Sector12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[131,82,177,159,52,113,23,54,149,78,138],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"91.1.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":232391070,\"moneyMax\":1161955350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":905,\"serverGrowth\":63}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"9.3.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":180078416.20000002,\"moneyMax\":900392081,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":895,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-417052-JoesGuns.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":119451571,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-159878.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[60,[2,4,6,7,8,10,11,13]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"20.5.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":218401505.8,\"moneyMax\":1092007529,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":66}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-515300-JoesGuns.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[5,2],[9,4,4],[6,5,4,8]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-363966.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,1,0,0,1,0,0,0],[0,1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,1,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-548041-JoesGuns.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[139,103,99,173,159,150,153,24,122,131,173,132,143,155,129,74,151,146,128,58,19,127,111,194,189,8,123,157,16,40,86,123,174,166,153,75,164,112,174,53,10,24,51,177,98,73,66],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"43.2.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":180262093.60000002,\"moneyMax\":901310468,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-806602-JoesGuns.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((()a(\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-895956-CarmichaelSecurity.cct\",\"type\":\"Total Ways to Sum\",\"data\":8,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-862058.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()))((a(a)a\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-509725-CarmichaelSecurity.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"00000001111100000000001100110000\",\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"46.6.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":140005235,\"moneyMax\":700026175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":848,\"serverGrowth\":71}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-945517-JoesGuns.cct\",\"type\":\"Array Jumping Game II\",\"data\":[0,4,5,6,3,5,3,4,3,5,1,3,6],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-415216.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"PASTELOGINCACHEPOPUPPRINT\",\"KEYWORD\"],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-185616-Sector12.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[95,104,190,65,67,20,56,166,200,16],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-31474-Sector12.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"ARRAY LOGIN PRINT DEBUG ENTER\",2],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"54.6.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":281536989.8,\"moneyMax\":1407684949,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":884,\"serverGrowth\":62}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-502592-JoesGuns.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[79,[1,3,4,6,7,9,10,11]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"49.9.7.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":326982619.8,\"moneyMax\":1634913099,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":819,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"98.9.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":231106456.20000002,\"moneyMax\":1155532281,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":849,\"serverGrowth\":73}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-977421-CarmichaelSecurity.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[113,70,126,75,102,158,53,187,53,70],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"3.7.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":295930238.40000004,\"moneyMax\":1479651192,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":819,\"serverGrowth\":76}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-664852.cct\",\"type\":\"Total Ways to Sum\",\"data\":56,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"67.2.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":215350990,\"moneyMax\":1076754950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":809,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-804264-JoesGuns.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,1,1,1,0],[0,0,1,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,1,0,1],[0,0,0,0,1,1,0,0,0,0,0],[1,0,0,0,1,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,1,0,0,0,0,0,0]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"4.0.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":157544259.4,\"moneyMax\":787721297,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":712,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"42.7.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":103277001.4,\"moneyMax\":516385007,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":503,\"serverGrowth\":51}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-131308-JoesGuns.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"mz65z65z65z65z65z65z65z65z6I44mGV44mGV44mgHd6zTWFroooKaagWlooo6nL6cL6cLRFc1O11ZpO\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"7.4.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":130221499.2,\"moneyMax\":651107496,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":599,\"serverGrowth\":52}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-269510.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":652070539,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"10.9.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":59073656.6,\"moneyMax\":295368283,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":413,\"serverGrowth\":42}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-33903-JoesGuns.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")a()a((((a\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-41588-CarmichaelSecurity.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[4,-4,10,-4,6,-4,-4,6,-8,3,-8,9,3,-2,-9,4,-3,3,0,3,-10,-4,6,-2,-10,8,3,2,-7,6,-3,-4,8,-5,-1,9,8],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"68.5.1.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":44388292.2,\"moneyMax\":221941461,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":387,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-986095-CarmichaelSecurity.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[100,135,81,48,5,46,160,117,194,55,84,98,75,109,100,32,27,143,135,55,77,143,166,120,199,179]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-39367.cct\",\"type\":\"Total Ways to Sum\",\"data\":63,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-337377-CarmichaelSecurity.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,0,0,0,1,1,1],[0,0,0,0,0,1,0,1,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,1,1,1,1,0,0,0],[0,1,0,1,0,0,0,0,0]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"58.8.9.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":219727677.4,\"moneyMax\":1098638387,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":759,\"serverGrowth\":77}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-27866.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"168176187225\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-421918.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[143,156,15,165,122,40,38,63,24,38,162,179,76,111,11,179,179,99,30,97,66,189,47,40],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-422280-JoesGuns.cct\",\"type\":\"Total Ways to Sum\",\"data\":65,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-883774.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"iiiiiiQQBBBBBBBByvvvBBggggggggghhhhkKKKKKKJJff1U3ggggg8MiiiiiiiiOOOOO\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"35.2.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":40471457.6,\"moneyMax\":202357288,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":430,\"serverGrowth\":44}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"10.1.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"computek\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":107552921,\"moneyMax\":537764605,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":633,\"serverGrowth\":63}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-886177-JoesGuns.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"11811312488\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"66.7.1.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":77316519.8,\"moneyMax\":386582599,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":403,\"serverGrowth\":45}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688891-JoesGuns.cct\",\"type\":\"Array Jumping Game II\",\"data\":[0,0,1,5,4],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"95.2.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":37856173.800000004,\"moneyMax\":189280869,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":314,\"serverGrowth\":54}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-928387-CarmichaelSecurity.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[8,5],[2,3,8],[1,8,7,3]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-623320-CarmichaelSecurity.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"zz0STTceeeeeeepddLLuuuuuuuu4iAAbbbbbbbKK622222222QQUU066\",\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"49.8.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":45642841.800000004,\"moneyMax\":228214209,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":318,\"serverGrowth\":58}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"67.2.8.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":403,\"serverGrowth\":69}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-245408-CarmichaelSecurity.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,8],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-380392.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[13,[[6,7],[1,7],[5,6],[1,4],[6,10],[3,11],[5,11],[6,9],[0,11],[0,12],[0,11],[4,11],[2,9],[1,9],[3,8],[3,12],[5,12],[1,3],[0,2],[7,8]]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"13.8.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":15476780,\"moneyMax\":77383900,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":252,\"serverGrowth\":42}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-574121-JoesGuns.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[35,[1,2,7,9,10,12,13,15,16,17,18]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-917177-NationalSecurityAgency.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,4,0,9,6],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"55.4.8.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/f228c4bd-1681-4a36-933a-dd08fc2c8a36\",\"moduleSequenceNumber\":623}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":55078,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-844478-JoesGuns.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":544993665,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"11.5.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/f2e8a3dd-45a0-407a-916e-a361dbe35932\",\"moduleSequenceNumber\":624}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":1044593.6594868614,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-644430-CarmichaelSecurity.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,31],[15,16],[19,29],[21,29],[20,23],[24,26],[3,13],[18,26],[16,18],[9,13]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"28.3.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/f9d32a31-7875-4af6-a363-cf3fc2ece4ca\",\"moduleSequenceNumber\":625}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":473378.6664379641,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-668246.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"SHIFT CACHE POPUP DEBUG PRINT\",15],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-187472-JoesGuns.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"44QQvvEFFmmmmmmmmmccccccSSS00FFFFFFFuuB7FF777UUUmmmmmmmmmm00RNNNNNNNNNNNNNNSyyjjuUUUUUUUUA66M\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-983963-JoesGuns.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[2,3],[4,8],[3,9],[5,6],[0,5],[2,8],[4,9],[0,8],[8,9],[5,7],[0,4],[1,3],[6,8],[4,6],[0,3]]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"55.2.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/9c7dae5c-14cc-4f9f-ab43-b1bd8d9a06fd\",\"moduleSequenceNumber\":626}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":1901594.8677578105,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-22339-JoesGuns.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9pFTlLGIZz09XUTNELHvR01K757GdLiE3n884wv66497huNr15C892E1694B2hD39\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-516403.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"AAAAAAAAAAAAAAAyoPExZPExZExZExZEDZExZEDjZEDjsISCed2WE70QRE7000RE70E70mcv01\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-305083-CarmichaelSecurity.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"31984828845\",-53],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"26.8.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/16ed80ee-0d10-4fcb-b01a-88732b3a64ff\",\"moduleSequenceNumber\":635}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":18.70000000000001,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-192559-JoesGuns.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,7,2,3,5,1,5,2,1,0,2,2,5,1,3,1,1,0,3,0],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"17.3.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/f79456eb-f8e3-48de-8833-7af1b0923165\",\"moduleSequenceNumber\":631}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":553679.4173656404,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-729022-JoesGuns.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":4257,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-122136-JoesGuns.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[1,9],[9,7,6],[4,3,5,7],[5,2,5,3,4]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-966944-JoesGuns.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,4,5,4,2,2,2,5,5,4,2,4,2,4,0,4,1,3,2,5,3,2,2,3,3],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-670828-NationalSecurityAgency.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[1,46,41,20,31],[29,15,40,26,37],[27,42,42,19,19],[42,22,10,50,17],[22,17,5,5,46],[9,1,4,34,30]],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"40.3.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/77ddc2d8-2956-437e-95cf-7b4e8f4f680b\",\"moduleSequenceNumber\":630}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":15.100000000000014,\"minDifficulty\":8,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-157339.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,1,0,0],[1,0,1,1,1,1,0,0],[0,0,1,0,0,0,0,0],[0,1,1,0,1,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"75.5.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/709c3677-923d-409b-91a4-beb777f674a6\",\"moduleSequenceNumber\":636}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":24.599999999999998,\"minDifficulty\":10,\"moneyAvailable\":9000000,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-373504.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":726187262,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"80.5.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/3aaabe3d-0b6f-4783-82de-8fe3c6a5e066\",\"moduleSequenceNumber\":627}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":613292.1225012152,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-700911-CarmichaelSecurity.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"LINUXLOGINSHELLTABLEPASTE\",\"ALGORITHM\"],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-481893-CarmichaelSecurity.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"5PiQSm850475FQ31i971X924dmqs7694ukX3EY4S02dq732OH891B62\",\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"75.6.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/bb412107-d32c-42eb-893d-0c62df2827fc\",\"moduleSequenceNumber\":628}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":800000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-485806-JoesGuns.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"INBOXENTERCACHELINUXLOGIC\",\"TERABYTE\"],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-628448.cct\",\"type\":\"Total Ways to Sum\",\"data\":99,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-124249-JoesGuns.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"LOGIC ENTER ARRAY CACHE DEBUG\",24],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-50457-CarmichaelSecurity.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,1,0,0],[0,0,0,0,1,0,0,1,1],[0,0,0,0,0,1,0,1,0],[0,0,0,0,1,0,0,0,0],[0,1,0,1,0,0,0,0,0],[0,1,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"33.5.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/382b8fdc-5003-4249-8cb7-8570e1a87635\",\"moduleSequenceNumber\":632}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":13.700000000000005,\"minDifficulty\":7,\"moneyAvailable\":4800000,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-739993.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[8,3],[2,5,1],[4,1,4,9],[4,1,9,3,7],[3,1,1,7,3,7],[6,5,5,9,2,7,1]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"96.9.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/4582f822-dfdf-4c9e-bc26-640a4681c5e5\",\"moduleSequenceNumber\":634}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-625081-CarmichaelSecurity.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[183,116,47,50,39,145,99,21,133,185],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-887755.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[13,[[6,10],[0,2],[7,10],[1,4],[5,9],[7,12],[5,11],[6,9],[4,9],[2,10],[1,3],[0,7],[3,5],[7,8],[5,12],[2,9],[2,12],[3,7],[6,8],[7,9],[0,1],[5,8],[1,8],[3,4]]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-56091.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-10,-2,8,-10,1,-6,-4,-6,10,9,-3,-7,5,-4,-10,-8,-1,-5,2,-5,-1,7,-7,0,-7,7,2,-9],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-403942.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[49,12,41,6,32,8,27],[10,2,27,17,33,44,17],[33,23,14,2,26,29,20],[6,20,26,13,1,32,23],[39,31,31,18,31,10,34],[28,45,40,9,42,32,14],[6,31,32,13,35,34,8],[39,8,42,28,45,46,14],[7,20,43,8,50,29,41],[43,16,9,50,42,16,39],[50,27,44,2,22,14,14]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"95.7.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/cfb5ccc7-fd26-4cfc-ac2a-d911d6951a3a\",\"moduleSequenceNumber\":633}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":31.200000000000003,\"minDifficulty\":11,\"moneyAvailable\":13147927.4,\"moneyMax\":65739637,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":188,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-109149.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,3,5,4,3,4,2,4,1,7,0,2],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-640799-JoesGuns.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"01001001001000111011000011010101\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-721082-CarmichaelSecurity.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,5],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-286846-JoesGuns.cct\",\"type\":\"Total Ways to Sum\",\"data\":89,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-631701-CarmichaelSecurity.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,1,0,0],[0,1,0,0,0,1],[1,0,0,0,1,0],[0,0,0,0,0,0]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"50.7.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":9125120.6,\"moneyMax\":45625603,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":232,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-229.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[9,[[1,5],[2,4],[0,1],[3,7],[1,3],[0,2],[0,8],[2,3],[2,5]]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"73.9.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        const numberOfThread = ns.args[1];\\n        await ns.weaken(target, { threads: numberOfThread });\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLXdlYWtlblYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbm8vc2VydmVyLXdlYWtlblYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/mono/server-weakenV2.js\",\"url\":\"blob:https://danielyxie.github.io/e018a879-147a-4e57-b010-93b669df957f\",\"moduleSequenceNumber\":629}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":26.400000000000006,\"minDifficulty\":10,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-308388.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[10,17],[15,16],[20,23],[17,26],[14,20],[23,33],[7,15],[4,10],[15,24],[25,31],[4,10],[21,31],[9,15],[17,25],[23,29],[21,26],[11,12],[10,16]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-987085.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"Pllllllll111FFqkuuuuS1111111svvwwRbbbbbbbt56IIIIIIIIIIITTTTTTTT11zMXXXXXXXXXd\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-866524-JoesGuns.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-2,7,5,2,-10,9,2,-4,-6,5,-6,-4,10],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-551712-JoesGuns.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[161,163,7,74,61,127,67,177,79,104,85,47,31,173,2,10,166],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"84.2.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":480,\"serverGrowth\":31}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-955686-JoesGuns.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9p7uMS6B8x07OB8yLGT843Kt67203178pDOr1U714T86n3641ABA986zvLMs424\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"51.7.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1066,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-335620-JoesGuns.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"7426008\",-85],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-115291-CarmichaelSecurity.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"PM4466wwKKBBBBBBBBBBBzzzzzzzzzz000000000VgWM4KKppXXwwwwwwwwwwwwwwY22aEE\",\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"25.2.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":766,\"serverGrowth\":50}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-116392-JoesGuns.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[59,34,55,80,122,97,63,6,166,174,14]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-25145-CarmichaelSecurity.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,3,5,4,1,3,3],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-697023-JoesGuns.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":58442660,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"27.2.1.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":526,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-77598-JoesGuns.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-10,-10,9,3,-1,9,-8,-7,0,3,1,-2,2,-8,4,1,5,-2,0,-5,8,9,2,-4,3,-8,9,1,8,9,6,6,-6],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-422405.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[4,4],[6,2,9],[6,8,7,2],[2,7,9,3,5],[8,3,1,9,2,5],[1,9,3,9,4,1,3],[5,7,9,6,3,1,8,6],[9,3,5,2,7,4,7,3,3],[7,2,8,6,2,6,9,8,5,3]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-744410.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a))()(()((\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-911417-Sector12.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[113,85,139,140,42,168,75,66,38,114,139,178,8,155,46,198],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"52.6.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":346,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-944200.cct\",\"type\":\"Total Ways to Sum\",\"data\":30,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"51.9.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":213,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"16.9.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":540,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-533206-JoesGuns.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[5,1],[6,1,1],[1,4,4,9],[8,4,3,5,3],[7,9,2,2,4,7],[1,2,9,7,1,1,6],[8,2,4,5,6,7,4,9],[3,8,4,4,9,6,2,5,9]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"87.0.5.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":60,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-23522-JoesGuns.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,1,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[1,0,0,0,0,0,1,0,1],[0,0,0,0,0,0,0,1,0],[0,1,1,0,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,1],[0,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-368894.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1],[1,0,0],[1,0,0],[0,0,0],[0,0,0],[1,0,0],[0,1,0],[0,0,1],[0,0,1],[0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"0.2.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"45.5.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"19.0.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-1\",\"httpPortOpen\":false,\"ip\":\"38.2.3.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/weak.js\",\"url\":\"blob:https://danielyxie.github.io/a9c3be91-0de5-4e05-a3de-3e6d4f36a5bd\",\"moduleSequenceNumber\":5383}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/df13bb26-8179-409c-9102-9eeb55350208\",\"moduleSequenceNumber\":638}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/0f4dec6c-84a5-435c-87db-0d32b3aa75a6\",\"moduleSequenceNumber\":597}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-1\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-2\",\"httpPortOpen\":false,\"ip\":\"94.4.2.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/weak.js\",\"url\":\"blob:https://danielyxie.github.io/22315343-6fed-4165-97de-6ddc69452cd3\",\"moduleSequenceNumber\":5384}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/cc318598-1027-4f22-8b59-ccfcdbd03e2f\",\"moduleSequenceNumber\":639}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/5f2733d7-cbc7-46c8-be66-4f3f18e74472\",\"moduleSequenceNumber\":598}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-2\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-3\",\"httpPortOpen\":false,\"ip\":\"21.9.2.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/weak.js\",\"url\":\"blob:https://danielyxie.github.io/1c5d6bf2-3636-429d-9020-8ec32804d70c\",\"moduleSequenceNumber\":5385}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/446d1da6-9b5a-47d1-baf7-4b4605e3261f\",\"moduleSequenceNumber\":640}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/bab05e79-03ee-4825-b8ab-2112681e98a7\",\"moduleSequenceNumber\":599}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-3\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-4\",\"httpPortOpen\":false,\"ip\":\"49.2.5.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/weak.js\",\"url\":\"blob:https://danielyxie.github.io/39b7c555-266f-47c2-9937-9f9d5ee17e4c\",\"moduleSequenceNumber\":5681}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/eecc5861-9385-42ad-ae4f-806cf5e6bce9\",\"moduleSequenceNumber\":641}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/f299a5b5-9865-4abf-8e53-8ab989b8d4d2\",\"moduleSequenceNumber\":600}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-4\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-5\",\"httpPortOpen\":false,\"ip\":\"57.1.3.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/weak.js\",\"url\":\"blob:https://danielyxie.github.io/074136de-407a-4a6c-b584-2efc4a8abd7b\",\"moduleSequenceNumber\":5682}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/e3fe8b89-2775-4f86-822f-ffa9c327ee60\",\"moduleSequenceNumber\":642}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/b7501b80-3a97-4032-a6ba-4e6d6565d5db\",\"moduleSequenceNumber\":601}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-5\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-6\",\"httpPortOpen\":false,\"ip\":\"74.2.1.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/weak.js\",\"url\":\"blob:https://danielyxie.github.io/8b5867b7-6c14-4a1f-8c5d-de79f24ffae4\",\"moduleSequenceNumber\":5978}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/636dad5d-c3f6-4f2c-b0ce-aaab8726d33a\",\"moduleSequenceNumber\":643}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/8225fa3e-a462-42ef-8caf-0023d31f554d\",\"moduleSequenceNumber\":602}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-6\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-7\",\"httpPortOpen\":false,\"ip\":\"22.0.0.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/weak.js\",\"url\":\"blob:https://danielyxie.github.io/30d7c1f8-1029-4a7a-9597-09d3793ec836\",\"moduleSequenceNumber\":6274}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/3dfd3e88-f04e-4426-ab64-134a0007044c\",\"moduleSequenceNumber\":644}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/aa1c9f83-9bc5-4850-a0ae-58899e9ff4b2\",\"moduleSequenceNumber\":603}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-7\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-8\",\"httpPortOpen\":false,\"ip\":\"22.2.2.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/weak.js\",\"url\":\"blob:https://danielyxie.github.io/09829694-a9a9-40b3-be45-8e564b6748c1\",\"moduleSequenceNumber\":7455}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/51807ecd-60d5-4f01-bdf4-d6045e905f36\",\"moduleSequenceNumber\":645}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/d0e61a63-1ec6-453b-9b4f-b36652272e99\",\"moduleSequenceNumber\":604}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-8\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-9\",\"httpPortOpen\":false,\"ip\":\"30.4.6.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/ac092295-8add-4bea-bbfd-fcfb0fcf0c85\",\"moduleSequenceNumber\":646}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/56e1eeab-e2c4-4ddf-b996-f13785a6f559\",\"moduleSequenceNumber\":605}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-9\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-10\",\"httpPortOpen\":false,\"ip\":\"55.5.9.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/ce7fa965-a96a-4e19-a22a-d0e3ec8a923e\",\"moduleSequenceNumber\":647}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/1c32d2bc-ae2d-4ee7-ad12-05600961129a\",\"moduleSequenceNumber\":606}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-10\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-11\",\"httpPortOpen\":false,\"ip\":\"80.1.2.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/a59f5cdf-a166-4ccc-884d-8d668c8afe92\",\"moduleSequenceNumber\":648}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/903d9a80-b657-47b8-805e-51d655de2995\",\"moduleSequenceNumber\":607}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-11\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-12\",\"httpPortOpen\":false,\"ip\":\"15.1.2.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/7413c9ee-07a6-4fa3-a876-3ac34aae2f2e\",\"moduleSequenceNumber\":649}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/547d0d3d-7d0e-4af7-b3f4-e8cba13404d5\",\"moduleSequenceNumber\":608}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-12\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-13\",\"httpPortOpen\":false,\"ip\":\"4.9.0.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/86b7f48f-9c62-43ba-b65f-2e92ae1fa428\",\"moduleSequenceNumber\":650}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/bfb6e09c-e149-4b5f-85f7-7547225f2b83\",\"moduleSequenceNumber\":609}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-13\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-14\",\"httpPortOpen\":false,\"ip\":\"47.0.5.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/aff55a1b-ce94-4599-a141-54d3b483959e\",\"moduleSequenceNumber\":651}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/2e20f23d-c6ca-4cf0-831b-cbbe99e5753f\",\"moduleSequenceNumber\":610}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-14\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-15\",\"httpPortOpen\":false,\"ip\":\"26.9.3.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/c6a41734-d711-49bf-a046-e3d857b7f5ef\",\"moduleSequenceNumber\":652}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/da031271-643a-46dd-8bcc-4f73bfb5381c\",\"moduleSequenceNumber\":611}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-15\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-16\",\"httpPortOpen\":false,\"ip\":\"36.0.5.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/f4a858f5-e8f6-4414-823b-298b384bf5a8\",\"moduleSequenceNumber\":653}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/6439aa50-2426-44ee-a51e-c08c2d73fb8e\",\"moduleSequenceNumber\":612}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-16\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-17\",\"httpPortOpen\":false,\"ip\":\"6.6.7.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/28c04b00-d565-430b-ad1c-11675c8b9310\",\"moduleSequenceNumber\":654}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/a4a72c0a-b337-4889-acde-688d338768aa\",\"moduleSequenceNumber\":613}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-17\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-18\",\"httpPortOpen\":false,\"ip\":\"98.0.7.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/70a5d201-ca71-4af0-b649-52a939bbbac0\",\"moduleSequenceNumber\":655}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/802105d5-92a2-4a48-b350-00c6ba929191\",\"moduleSequenceNumber\":614}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-18\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-19\",\"httpPortOpen\":false,\"ip\":\"23.7.0.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/4ecbb557-f966-45e0-aaa0-587db862c33a\",\"moduleSequenceNumber\":656}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/7201e28a-60ca-4645-88cc-c10d251458d2\",\"moduleSequenceNumber\":615}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-19\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-20\",\"httpPortOpen\":false,\"ip\":\"43.4.4.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/6c19cab9-8eff-448e-888a-5487ed97ac92\",\"moduleSequenceNumber\":657}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/68650ade-0fed-4031-abcb-c34082628d4f\",\"moduleSequenceNumber\":616}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-20\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-21\",\"httpPortOpen\":false,\"ip\":\"57.0.8.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/b29dd894-dff0-4b3a-82ab-8b49cae044f9\",\"moduleSequenceNumber\":658}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/e99580ed-c2c2-4a6e-af2f-76701238b25d\",\"moduleSequenceNumber\":617}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-21\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-22\",\"httpPortOpen\":false,\"ip\":\"83.1.6.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/c1088989-b2d2-4faa-9972-13f650dc49f2\",\"moduleSequenceNumber\":659}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/ddb50a90-6765-4d37-b825-efd784b3f2e6\",\"moduleSequenceNumber\":618}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-22\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-23\",\"httpPortOpen\":false,\"ip\":\"40.1.0.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/2a53ec71-3e36-4416-98fd-230d5c909434\",\"moduleSequenceNumber\":660}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/86b06f5c-49ce-42fc-b99d-97fb591c1eac\",\"moduleSequenceNumber\":619}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-23\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-24\",\"httpPortOpen\":false,\"ip\":\"61.2.9.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/f6375dec-0f4b-44b3-8e68-489267584dd9\",\"moduleSequenceNumber\":661}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/245b57d2-8eda-4694-ab62-61c1f8ff82a2\",\"moduleSequenceNumber\":620}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-24\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"srv-25\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"srv-25\",\"httpPortOpen\":false,\"ip\":\"98.8.9.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.weaken(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=\",\"filename\":\"/prep/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.grow(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/prep/grow.js\",\"url\":\"blob:https://danielyxie.github.io/cf929747-ca02-4dff-a44a-160ab99c1689\",\"moduleSequenceNumber\":662}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const threads = ns.args[1];\\n    await ns.hack(target, { threads: threads });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmVwL2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=\",\"filename\":\"/prep/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then hack!\\n    await ns.hack(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2hhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.grow(ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixnQkFBZ0I7SUFDaEIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIn0=\",\"filename\":\"/hwgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    //sleep for given amount\\n    const sleep = ns.args[1] || 1;\\n    const writePort = ns.args[2];\\n    await ns.sleep(sleep);\\n    //and then grow!\\n    await ns.weaken(ns.args[0]);\\n    if (writePort)\\n        ns.tryWritePort(writePort, ns.args[0]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vhay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9od2d3L3dlYWsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0JBQXdCO0lBQ3hCLE1BQU0sS0FBSyxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLGdCQUFnQjtJQUNoQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksU0FBUztRQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDIn0=\",\"filename\":\"/hwgw/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Defines the \\\"target server\\\", which is the server\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n    const target = ns.args[0];\\n    // Defines how much money a server should have before we hack it\\n    // In this case, it is set to 75% of the server's max money\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    // Defines the maximum security level the target server can\\n    // have. If the target's security level is higher than this,\\n    // we'll weaken it before doing anything else\\n    const securityThresh = ns.getServerMinSecurityLevel(target) + 1;\\n    // Infinite loop that continously hacks/grows/weakens the target server\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            // If the server's security level is above our threshold, weaken it\\n            await ns.weaken(target);\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            // If the server's money is less than our threshold, grow it\\n            await ns.grow(target);\\n        }\\n        else {\\n            // Otherwise, hack it\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVnaW5uZXItaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iZWdpbm5lci1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBQztJQUVwQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFeEQsMkRBQTJEO0lBQzNELDREQUE0RDtJQUM1RCw2Q0FBNkM7SUFDN0MsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoRSx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIn0=\",\"filename\":\"beginner-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"beginner-hack.js\",\"url\":\"blob:https://danielyxie.github.io/0ddbc0ad-8f55-4274-9349-3ae02d157826\",\"moduleSequenceNumber\":621}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        const target = ns.args[0];\\n        await ns.weaken(target);\\n        await ns.sleep(10);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAtZmFybS13ZWFrZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uby94cC1mYXJtLXdlYWtlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7UUFDcEMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwQjtBQUNILENBQUMifQ==\",\"filename\":\"/mono/xp-farm-weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// SCAN SCRIPTS\\nexport const SCAN_SCRIPT_NAME = '/scan-and-nuke/scan-and-update-file.js';\\nexport const GET_INFO_NAME = '/scan-and-nuke/get-stats.js';\\n// MANAGER SCRIPTS\\nexport const MANAGE_ALL_NAME = '/managers/manage-all.js';\\nexport const MANAGERV2_NAME = '/managers/managerV2.js';\\nexport const BEGINNER_MANAGER_NAME = '/managers/beginner-manager.js';\\nexport const BITNODE_MANAGER_NAME = '/managers/bitnode-start-manager.js';\\nexport const HWGW_MANAGER_NAME = '/managers/hwgw-manager.js';\\n// COPY TO SERVER SCRIPTS\\nexport const MYSELF = '/const/files.js';\\nexport const BEGINNER_HACK_SCRIPT_NAME = 'beginner-hack.js';\\nexport const SERVER_GROW_SCRIPT_NAME = '/mono/server-grow.js';\\nexport const SERVER_HACK_SCRIPT_NAME = '/mono/server-hack.js';\\nexport const SERVER_WEAKEN_SCRIPT_NAME = '/mono/server-weaken.js';\\nexport const SERVER_WEAKEN_V2_SCRIPT_NAME = '/mono/server-weakenV2.js';\\nexport const XP_FARM_SCRIPT_NAME = '/mono/xp-farm-weaken.js';\\nexport const PREP_SERVER_WEAKEN_SCRIPT = '/prep/weak.js';\\nexport const PREP_SERVER_GROW_SCRIPT = '/prep/grow.js';\\nexport const PREP_SERVER_HACK_SCRIPT = '/prep/hack.js';\\nexport const HWGW_SERVER_WEAKEN_SCRIPT = '/hwgw/weak.js';\\nexport const HWGW_SERVER_GROW_SCRIPT = '/hwgw/grow.js';\\nexport const HWGW_SERVER_HACK_SCRIPT = '/hwgw/hack.js';\\n// OTHER SCRIPTS\\nexport const HWGW_PREP_SCRIPT_NAME = '/hwgw/hwgw-prepper.js';\\nexport const FILES_TO_COPY = [\\n    PREP_SERVER_WEAKEN_SCRIPT,\\n    PREP_SERVER_GROW_SCRIPT,\\n    PREP_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_HACK_SCRIPT,\\n    HWGW_SERVER_GROW_SCRIPT,\\n    HWGW_SERVER_WEAKEN_SCRIPT,\\n    BEGINNER_HACK_SCRIPT_NAME,\\n    XP_FARM_SCRIPT_NAME,\\n    MYSELF,\\n];\\n// NUMBER CONSTANTS\\nexport const WG_COST = 1.75;\\nexport const H_COST = 1.7;\\n// DEFAULT MONEY % TO HACK\\nexport const HWGW_MONEY_PERCENTAGE = 0.8;\\n// MIN MONEY % TO HACK, IF NOT POSSIBLE SKIP TARGET\\\\SERVER\\nexport const HWGW_MONEY_MIN_PERCENTAGE = 0.2;\\n// % TO HACK DIFF TO LOWER\\nexport const HWGW_MONEY_ITERATION_PERCENTAGE = 0.05;\\n// PORTS CONSTANTS\\nexport const HWGW_PORT_1 = 1;\\nexport const HWGW_PORT_2 = 2;\\nexport const HWGW_PORT_3 = 3;\\nexport const HWGW_PORT_4 = 4;\\nexport const HWGW_PREP_PORT_1 = 250;\\nexport const HWGW_PREP_PORT_2 = 251;\\nexport const HWGW_PREP_PORT_3 = 252;\\nexport const HWGW_PREP_PORT_4 = 253;\\nexport const EMPTY_PORT_DATA = 'NULL PORT DATA';\\nexport const HWGW_PORTS = [HWGW_PORT_1, HWGW_PORT_2, HWGW_PORT_3, HWGW_PORT_4];\\nexport const HWGW_PREP_PORTS = [HWGW_PREP_PORT_1, HWGW_PREP_PORT_2, HWGW_PREP_PORT_3, HWGW_PREP_PORT_4];\\n// FILE CONSTANTS\\nexport const ALL_SERVERS_FILENAME = '/data/all_servers.txt';\\nexport const SERVERS_FILENAME = '/data/servers.txt';\\nexport const SERVERS_DETAIL_FILENAME = '/data/servers_detail.txt';\\n// SERVER CONSTANTS\\nexport const SERVER_NAME_PREFIX = 'srv-';\\nexport const XP_FARMER_SERVER_PREFIX = 'farmer-srv-';\\nexport const HOME_FREE_RAM_TO_KEEP = 40;\\nexport const MIN_HOME_RAM_TO_RUN_HWGW = 1024;\\n// MAX_RAM_STANDARD 1048576\\n// MAX_RAM_CURRENT_BN 524288\\nexport const MAX_RAM = 524288;\\nexport const SERVER_GB = 8;\\nexport const SERVER_GB_WANTED = 8;\\nexport const MAX_SERVER_NUM = 25;\\nexport const MAX_FARMER_SERVER_NUM = 0;\\nexport const FARM_SERVER_GB = 8;\\n// 262144 | 131072 | 65536 | 32768 | 16384 | 8192\\n// OTHER\\nexport const HOME_SERVER_CARROZZATO = false;\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3QvZmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHdDQUF3QyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHlCQUF5QixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUU3RCx5QkFBeUI7QUFDekIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLDBCQUEwQixDQUFDO0FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0FBQ3ZE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\",\"filename\":\"/const/files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"srv-25\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":22.3802245819208,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":233662.14032288402,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":49248.25976233392,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":97492.75385106234}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":166.8612928047894}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"dd-MM-yyyy hh:mm:ss\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":65,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":52466,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-18,\"y\":19,\"opened\":false},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"one-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":true,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"30","AllGangsSave":"","LastExportBonus":"1683361647060","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"storedCycles\":0}}"}}